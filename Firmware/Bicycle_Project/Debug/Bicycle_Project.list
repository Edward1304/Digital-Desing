
Bicycle_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d304  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800d3c8  0800d3c8  0000e3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db60  0800db60  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800db60  0800db60  0000f1e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db60  0800db60  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db60  0800db60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db64  0800db64  0000eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800db68  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200001e8  0800dd50  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800dd50  0000f7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fd2  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa6  00000000  00000000  000211e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00023c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  00024dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001305b  00000000  00000000  00025b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001572d  00000000  00000000  00038b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006dae6  00000000  00000000  0004e2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbda9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005428  00000000  00000000  000bbdec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000c1214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d3ac 	.word	0x0800d3ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800d3ac 	.word	0x0800d3ac

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fe61 	bl	8002118 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fda1 	bl	8001fa8 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe53 	bl	8002118 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe49 	bl	8002118 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fdcb 	bl	8002030 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fdc1 	bl	8002030 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fb55 	bl	8000b74 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fad5 	bl	8000a84 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb47 	bl	8000b74 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb3d 	bl	8000b74 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae3 	bl	8000ad4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fad9 	bl	8000ad4 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fadd>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	46ce      	mov	lr, r9
 8000534:	4647      	mov	r7, r8
 8000536:	0243      	lsls	r3, r0, #9
 8000538:	0a5a      	lsrs	r2, r3, #9
 800053a:	024e      	lsls	r6, r1, #9
 800053c:	0045      	lsls	r5, r0, #1
 800053e:	0fc4      	lsrs	r4, r0, #31
 8000540:	0048      	lsls	r0, r1, #1
 8000542:	4691      	mov	r9, r2
 8000544:	0e2d      	lsrs	r5, r5, #24
 8000546:	0a72      	lsrs	r2, r6, #9
 8000548:	0e00      	lsrs	r0, r0, #24
 800054a:	4694      	mov	ip, r2
 800054c:	b580      	push	{r7, lr}
 800054e:	099b      	lsrs	r3, r3, #6
 8000550:	0fc9      	lsrs	r1, r1, #31
 8000552:	09b6      	lsrs	r6, r6, #6
 8000554:	1a2a      	subs	r2, r5, r0
 8000556:	428c      	cmp	r4, r1
 8000558:	d021      	beq.n	800059e <__aeabi_fadd+0x6e>
 800055a:	2a00      	cmp	r2, #0
 800055c:	dd0d      	ble.n	800057a <__aeabi_fadd+0x4a>
 800055e:	2800      	cmp	r0, #0
 8000560:	d12d      	bne.n	80005be <__aeabi_fadd+0x8e>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x38>
 8000566:	e08d      	b.n	8000684 <__aeabi_fadd+0x154>
 8000568:	1e51      	subs	r1, r2, #1
 800056a:	2a01      	cmp	r2, #1
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x40>
 800056e:	e11d      	b.n	80007ac <__aeabi_fadd+0x27c>
 8000570:	2aff      	cmp	r2, #255	@ 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x46>
 8000574:	e0ab      	b.n	80006ce <__aeabi_fadd+0x19e>
 8000576:	000a      	movs	r2, r1
 8000578:	e027      	b.n	80005ca <__aeabi_fadd+0x9a>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d04d      	beq.n	800061a <__aeabi_fadd+0xea>
 800057e:	1b42      	subs	r2, r0, r5
 8000580:	2d00      	cmp	r5, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_fadd+0x56>
 8000584:	e0cc      	b.n	8000720 <__aeabi_fadd+0x1f0>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x5c>
 800058a:	e079      	b.n	8000680 <__aeabi_fadd+0x150>
 800058c:	1e54      	subs	r4, r2, #1
 800058e:	2a01      	cmp	r2, #1
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x64>
 8000592:	e128      	b.n	80007e6 <__aeabi_fadd+0x2b6>
 8000594:	2aff      	cmp	r2, #255	@ 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x6a>
 8000598:	e097      	b.n	80006ca <__aeabi_fadd+0x19a>
 800059a:	0022      	movs	r2, r4
 800059c:	e0c5      	b.n	800072a <__aeabi_fadd+0x1fa>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_fadd+0x74>
 80005a2:	e096      	b.n	80006d2 <__aeabi_fadd+0x1a2>
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d04f      	beq.n	8000648 <__aeabi_fadd+0x118>
 80005a8:	2dff      	cmp	r5, #255	@ 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x7e>
 80005ac:	e08f      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	04c9      	lsls	r1, r1, #19
 80005b2:	430e      	orrs	r6, r1
 80005b4:	2a1b      	cmp	r2, #27
 80005b6:	dd51      	ble.n	800065c <__aeabi_fadd+0x12c>
 80005b8:	002a      	movs	r2, r5
 80005ba:	3301      	adds	r3, #1
 80005bc:	e018      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80005be:	2dff      	cmp	r5, #255	@ 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x94>
 80005c2:	e084      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	04c9      	lsls	r1, r1, #19
 80005c8:	430e      	orrs	r6, r1
 80005ca:	2101      	movs	r1, #1
 80005cc:	2a1b      	cmp	r2, #27
 80005ce:	dc08      	bgt.n	80005e2 <__aeabi_fadd+0xb2>
 80005d0:	0031      	movs	r1, r6
 80005d2:	2020      	movs	r0, #32
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	1a82      	subs	r2, r0, r2
 80005d8:	4096      	lsls	r6, r2
 80005da:	0032      	movs	r2, r6
 80005dc:	1e50      	subs	r0, r2, #1
 80005de:	4182      	sbcs	r2, r0
 80005e0:	4311      	orrs	r1, r2
 80005e2:	1a5b      	subs	r3, r3, r1
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d459      	bmi.n	800069c <__aeabi_fadd+0x16c>
 80005e8:	2107      	movs	r1, #7
 80005ea:	002a      	movs	r2, r5
 80005ec:	4019      	ands	r1, r3
 80005ee:	d049      	beq.n	8000684 <__aeabi_fadd+0x154>
 80005f0:	210f      	movs	r1, #15
 80005f2:	4019      	ands	r1, r3
 80005f4:	2904      	cmp	r1, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0xca>
 80005f8:	3304      	adds	r3, #4
 80005fa:	0159      	lsls	r1, r3, #5
 80005fc:	d542      	bpl.n	8000684 <__aeabi_fadd+0x154>
 80005fe:	1c50      	adds	r0, r2, #1
 8000600:	2afe      	cmp	r2, #254	@ 0xfe
 8000602:	d03a      	beq.n	800067a <__aeabi_fadd+0x14a>
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	b2c0      	uxtb	r0, r0
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	05c0      	lsls	r0, r0, #23
 800060c:	4318      	orrs	r0, r3
 800060e:	07e4      	lsls	r4, r4, #31
 8000610:	4320      	orrs	r0, r4
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	20fe      	movs	r0, #254	@ 0xfe
 800061c:	4680      	mov	r8, r0
 800061e:	1c6f      	adds	r7, r5, #1
 8000620:	0038      	movs	r0, r7
 8000622:	4647      	mov	r7, r8
 8000624:	4207      	tst	r7, r0
 8000626:	d000      	beq.n	800062a <__aeabi_fadd+0xfa>
 8000628:	e08e      	b.n	8000748 <__aeabi_fadd+0x218>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x100>
 800062e:	e0b4      	b.n	800079a <__aeabi_fadd+0x26a>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x106>
 8000634:	e0db      	b.n	80007ee <__aeabi_fadd+0x2be>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d06c      	beq.n	8000714 <__aeabi_fadd+0x1e4>
 800063a:	1b98      	subs	r0, r3, r6
 800063c:	0145      	lsls	r5, r0, #5
 800063e:	d400      	bmi.n	8000642 <__aeabi_fadd+0x112>
 8000640:	e0f7      	b.n	8000832 <__aeabi_fadd+0x302>
 8000642:	000c      	movs	r4, r1
 8000644:	1af3      	subs	r3, r6, r3
 8000646:	e03d      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d01b      	beq.n	8000684 <__aeabi_fadd+0x154>
 800064c:	1e51      	subs	r1, r2, #1
 800064e:	2a01      	cmp	r2, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x124>
 8000652:	e082      	b.n	800075a <__aeabi_fadd+0x22a>
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d03a      	beq.n	80006ce <__aeabi_fadd+0x19e>
 8000658:	000a      	movs	r2, r1
 800065a:	e7ab      	b.n	80005b4 <__aeabi_fadd+0x84>
 800065c:	0031      	movs	r1, r6
 800065e:	2020      	movs	r0, #32
 8000660:	40d1      	lsrs	r1, r2
 8000662:	1a82      	subs	r2, r0, r2
 8000664:	4096      	lsls	r6, r2
 8000666:	0032      	movs	r2, r6
 8000668:	1e50      	subs	r0, r2, #1
 800066a:	4182      	sbcs	r2, r0
 800066c:	430a      	orrs	r2, r1
 800066e:	189b      	adds	r3, r3, r2
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d5b9      	bpl.n	80005e8 <__aeabi_fadd+0xb8>
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	2dfe      	cmp	r5, #254	@ 0xfe
 8000678:	d175      	bne.n	8000766 <__aeabi_fadd+0x236>
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	2300      	movs	r3, #0
 800067e:	e7c4      	b.n	800060a <__aeabi_fadd+0xda>
 8000680:	000c      	movs	r4, r1
 8000682:	0033      	movs	r3, r6
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	2aff      	cmp	r2, #255	@ 0xff
 8000688:	d146      	bne.n	8000718 <__aeabi_fadd+0x1e8>
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <__aeabi_fadd+0x14a>
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	03d2      	lsls	r2, r2, #15
 8000692:	4313      	orrs	r3, r2
 8000694:	025b      	lsls	r3, r3, #9
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	0a5b      	lsrs	r3, r3, #9
 800069a:	e7b6      	b.n	800060a <__aeabi_fadd+0xda>
 800069c:	019f      	lsls	r7, r3, #6
 800069e:	09bf      	lsrs	r7, r7, #6
 80006a0:	0038      	movs	r0, r7
 80006a2:	f002 fd8b 	bl	80031bc <__clzsi2>
 80006a6:	3805      	subs	r0, #5
 80006a8:	4087      	lsls	r7, r0
 80006aa:	4285      	cmp	r5, r0
 80006ac:	dc24      	bgt.n	80006f8 <__aeabi_fadd+0x1c8>
 80006ae:	003b      	movs	r3, r7
 80006b0:	2120      	movs	r1, #32
 80006b2:	1b42      	subs	r2, r0, r5
 80006b4:	3201      	adds	r2, #1
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	1a8a      	subs	r2, r1, r2
 80006ba:	4097      	lsls	r7, r2
 80006bc:	1e7a      	subs	r2, r7, #1
 80006be:	4197      	sbcs	r7, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	433b      	orrs	r3, r7
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	d193      	bne.n	80005f0 <__aeabi_fadd+0xc0>
 80006c8:	e797      	b.n	80005fa <__aeabi_fadd+0xca>
 80006ca:	000c      	movs	r4, r1
 80006cc:	0033      	movs	r3, r6
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	e7db      	b.n	800068a <__aeabi_fadd+0x15a>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d014      	beq.n	8000700 <__aeabi_fadd+0x1d0>
 80006d6:	1b42      	subs	r2, r0, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d14b      	bne.n	8000774 <__aeabi_fadd+0x244>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0d0      	beq.n	8000682 <__aeabi_fadd+0x152>
 80006e0:	1e51      	subs	r1, r2, #1
 80006e2:	2a01      	cmp	r2, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1b8>
 80006e6:	e09e      	b.n	8000826 <__aeabi_fadd+0x2f6>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d0ef      	beq.n	80006cc <__aeabi_fadd+0x19c>
 80006ec:	000a      	movs	r2, r1
 80006ee:	2a1b      	cmp	r2, #27
 80006f0:	dd5f      	ble.n	80007b2 <__aeabi_fadd+0x282>
 80006f2:	0002      	movs	r2, r0
 80006f4:	1c73      	adds	r3, r6, #1
 80006f6:	e77b      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80006f8:	4b50      	ldr	r3, [pc, #320]	@ (800083c <__aeabi_fadd+0x30c>)
 80006fa:	1a2a      	subs	r2, r5, r0
 80006fc:	403b      	ands	r3, r7
 80006fe:	e7e1      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000700:	21fe      	movs	r1, #254	@ 0xfe
 8000702:	1c6a      	adds	r2, r5, #1
 8000704:	4211      	tst	r1, r2
 8000706:	d13b      	bne.n	8000780 <__aeabi_fadd+0x250>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d15d      	bne.n	80007c8 <__aeabi_fadd+0x298>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d07f      	beq.n	8000810 <__aeabi_fadd+0x2e0>
 8000710:	2e00      	cmp	r6, #0
 8000712:	d17f      	bne.n	8000814 <__aeabi_fadd+0x2e4>
 8000714:	2200      	movs	r2, #0
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	b2d0      	uxtb	r0, r2
 800071e:	e774      	b.n	800060a <__aeabi_fadd+0xda>
 8000720:	28ff      	cmp	r0, #255	@ 0xff
 8000722:	d0d2      	beq.n	80006ca <__aeabi_fadd+0x19a>
 8000724:	2480      	movs	r4, #128	@ 0x80
 8000726:	04e4      	lsls	r4, r4, #19
 8000728:	4323      	orrs	r3, r4
 800072a:	2401      	movs	r4, #1
 800072c:	2a1b      	cmp	r2, #27
 800072e:	dc07      	bgt.n	8000740 <__aeabi_fadd+0x210>
 8000730:	001c      	movs	r4, r3
 8000732:	2520      	movs	r5, #32
 8000734:	40d4      	lsrs	r4, r2
 8000736:	1aaa      	subs	r2, r5, r2
 8000738:	4093      	lsls	r3, r2
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	4193      	sbcs	r3, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	1b33      	subs	r3, r6, r4
 8000742:	0005      	movs	r5, r0
 8000744:	000c      	movs	r4, r1
 8000746:	e74d      	b.n	80005e4 <__aeabi_fadd+0xb4>
 8000748:	1b9f      	subs	r7, r3, r6
 800074a:	017a      	lsls	r2, r7, #5
 800074c:	d422      	bmi.n	8000794 <__aeabi_fadd+0x264>
 800074e:	2f00      	cmp	r7, #0
 8000750:	d1a6      	bne.n	80006a0 <__aeabi_fadd+0x170>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2300      	movs	r3, #0
 8000758:	e757      	b.n	800060a <__aeabi_fadd+0xda>
 800075a:	199b      	adds	r3, r3, r6
 800075c:	2501      	movs	r5, #1
 800075e:	3201      	adds	r2, #1
 8000760:	0159      	lsls	r1, r3, #5
 8000762:	d400      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000764:	e740      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000766:	2101      	movs	r1, #1
 8000768:	4835      	ldr	r0, [pc, #212]	@ (8000840 <__aeabi_fadd+0x310>)
 800076a:	4019      	ands	r1, r3
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	4003      	ands	r3, r0
 8000770:	430b      	orrs	r3, r1
 8000772:	e7a7      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000774:	28ff      	cmp	r0, #255	@ 0xff
 8000776:	d0a9      	beq.n	80006cc <__aeabi_fadd+0x19c>
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	04c9      	lsls	r1, r1, #19
 800077c:	430b      	orrs	r3, r1
 800077e:	e7b6      	b.n	80006ee <__aeabi_fadd+0x1be>
 8000780:	2aff      	cmp	r2, #255	@ 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x256>
 8000784:	e779      	b.n	800067a <__aeabi_fadd+0x14a>
 8000786:	199b      	adds	r3, r3, r6
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	0759      	lsls	r1, r3, #29
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x260>
 800078e:	e72f      	b.n	80005f0 <__aeabi_fadd+0xc0>
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	e7c1      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000794:	000c      	movs	r4, r1
 8000796:	1af7      	subs	r7, r6, r3
 8000798:	e782      	b.n	80006a0 <__aeabi_fadd+0x170>
 800079a:	2b00      	cmp	r3, #0
 800079c:	d12c      	bne.n	80007f8 <__aeabi_fadd+0x2c8>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d193      	bne.n	80006ca <__aeabi_fadd+0x19a>
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	2400      	movs	r4, #0
 80007a6:	20ff      	movs	r0, #255	@ 0xff
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	e72e      	b.n	800060a <__aeabi_fadd+0xda>
 80007ac:	2501      	movs	r5, #1
 80007ae:	1b9b      	subs	r3, r3, r6
 80007b0:	e718      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007b2:	0019      	movs	r1, r3
 80007b4:	2520      	movs	r5, #32
 80007b6:	40d1      	lsrs	r1, r2
 80007b8:	1aaa      	subs	r2, r5, r2
 80007ba:	4093      	lsls	r3, r2
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	430b      	orrs	r3, r1
 80007c2:	0005      	movs	r5, r0
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	e753      	b.n	8000670 <__aeabi_fadd+0x140>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x29e>
 80007cc:	e77e      	b.n	80006cc <__aeabi_fadd+0x19c>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x2a4>
 80007d2:	e77c      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	03d2      	lsls	r2, r2, #15
 80007d8:	4591      	cmp	r9, r2
 80007da:	d302      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 80007dc:	4594      	cmp	ip, r2
 80007de:	d200      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 80007e0:	0033      	movs	r3, r6
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	e753      	b.n	800068e <__aeabi_fadd+0x15e>
 80007e6:	000c      	movs	r4, r1
 80007e8:	1af3      	subs	r3, r6, r3
 80007ea:	3501      	adds	r5, #1
 80007ec:	e6fa      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d0af      	beq.n	8000752 <__aeabi_fadd+0x222>
 80007f2:	000c      	movs	r4, r1
 80007f4:	0033      	movs	r3, r6
 80007f6:	e78d      	b.n	8000714 <__aeabi_fadd+0x1e4>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2ce>
 80007fc:	e767      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4591      	cmp	r9, r2
 8000804:	d3ed      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 8000806:	4594      	cmp	ip, r2
 8000808:	d2eb      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 800080a:	000c      	movs	r4, r1
 800080c:	0033      	movs	r3, r6
 800080e:	e7e8      	b.n	80007e2 <__aeabi_fadd+0x2b2>
 8000810:	0033      	movs	r3, r6
 8000812:	e77f      	b.n	8000714 <__aeabi_fadd+0x1e4>
 8000814:	199b      	adds	r3, r3, r6
 8000816:	2200      	movs	r2, #0
 8000818:	0159      	lsls	r1, r3, #5
 800081a:	d5b9      	bpl.n	8000790 <__aeabi_fadd+0x260>
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <__aeabi_fadd+0x30c>)
 800081e:	4013      	ands	r3, r2
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	2201      	movs	r2, #1
 8000824:	e778      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000826:	199b      	adds	r3, r3, r6
 8000828:	3201      	adds	r2, #1
 800082a:	3501      	adds	r5, #1
 800082c:	0159      	lsls	r1, r3, #5
 800082e:	d49a      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000830:	e6da      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d08d      	beq.n	8000752 <__aeabi_fadd+0x222>
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	e76e      	b.n	8000718 <__aeabi_fadd+0x1e8>
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	464f      	mov	r7, r9
 8000848:	4646      	mov	r6, r8
 800084a:	46d6      	mov	lr, sl
 800084c:	0244      	lsls	r4, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0047      	lsls	r7, r0, #1
 8000852:	1c0e      	adds	r6, r1, #0
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0e3f      	lsrs	r7, r7, #24
 8000858:	0fc5      	lsrs	r5, r0, #31
 800085a:	2f00      	cmp	r7, #0
 800085c:	d03c      	beq.n	80008d8 <__aeabi_fdiv+0x94>
 800085e:	2fff      	cmp	r7, #255	@ 0xff
 8000860:	d042      	beq.n	80008e8 <__aeabi_fdiv+0xa4>
 8000862:	2300      	movs	r3, #0
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4699      	mov	r9, r3
 8000868:	469a      	mov	sl, r3
 800086a:	00e4      	lsls	r4, r4, #3
 800086c:	04d2      	lsls	r2, r2, #19
 800086e:	4314      	orrs	r4, r2
 8000870:	3f7f      	subs	r7, #127	@ 0x7f
 8000872:	0273      	lsls	r3, r6, #9
 8000874:	0a5b      	lsrs	r3, r3, #9
 8000876:	4698      	mov	r8, r3
 8000878:	0073      	lsls	r3, r6, #1
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	0ff6      	lsrs	r6, r6, #31
 800087e:	2b00      	cmp	r3, #0
 8000880:	d01b      	beq.n	80008ba <__aeabi_fdiv+0x76>
 8000882:	2bff      	cmp	r3, #255	@ 0xff
 8000884:	d013      	beq.n	80008ae <__aeabi_fdiv+0x6a>
 8000886:	4642      	mov	r2, r8
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	04c9      	lsls	r1, r1, #19
 800088e:	4311      	orrs	r1, r2
 8000890:	4688      	mov	r8, r1
 8000892:	2000      	movs	r0, #0
 8000894:	3b7f      	subs	r3, #127	@ 0x7f
 8000896:	0029      	movs	r1, r5
 8000898:	1aff      	subs	r7, r7, r3
 800089a:	464b      	mov	r3, r9
 800089c:	4071      	eors	r1, r6
 800089e:	b2c9      	uxtb	r1, r1
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x62>
 80008a4:	e0b5      	b.n	8000a12 <__aeabi_fdiv+0x1ce>
 80008a6:	4a74      	ldr	r2, [pc, #464]	@ (8000a78 <__aeabi_fdiv+0x234>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58d3      	ldr	r3, [r2, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	4643      	mov	r3, r8
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d13f      	bne.n	8000934 <__aeabi_fdiv+0xf0>
 80008b4:	3fff      	subs	r7, #255	@ 0xff
 80008b6:	3302      	adds	r3, #2
 80008b8:	e003      	b.n	80008c2 <__aeabi_fdiv+0x7e>
 80008ba:	4643      	mov	r3, r8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12d      	bne.n	800091c <__aeabi_fdiv+0xd8>
 80008c0:	2301      	movs	r3, #1
 80008c2:	0029      	movs	r1, r5
 80008c4:	464a      	mov	r2, r9
 80008c6:	4071      	eors	r1, r6
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	431a      	orrs	r2, r3
 80008cc:	2a0e      	cmp	r2, #14
 80008ce:	d838      	bhi.n	8000942 <__aeabi_fdiv+0xfe>
 80008d0:	486a      	ldr	r0, [pc, #424]	@ (8000a7c <__aeabi_fdiv+0x238>)
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	5882      	ldr	r2, [r0, r2]
 80008d6:	4697      	mov	pc, r2
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d113      	bne.n	8000904 <__aeabi_fdiv+0xc0>
 80008dc:	2304      	movs	r3, #4
 80008de:	4699      	mov	r9, r3
 80008e0:	3b03      	subs	r3, #3
 80008e2:	2700      	movs	r7, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	e7c4      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d105      	bne.n	80008f8 <__aeabi_fdiv+0xb4>
 80008ec:	2308      	movs	r3, #8
 80008ee:	4699      	mov	r9, r3
 80008f0:	3b06      	subs	r3, #6
 80008f2:	27ff      	movs	r7, #255	@ 0xff
 80008f4:	469a      	mov	sl, r3
 80008f6:	e7bc      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008f8:	230c      	movs	r3, #12
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	27ff      	movs	r7, #255	@ 0xff
 8000900:	469a      	mov	sl, r3
 8000902:	e7b6      	b.n	8000872 <__aeabi_fdiv+0x2e>
 8000904:	0020      	movs	r0, r4
 8000906:	f002 fc59 	bl	80031bc <__clzsi2>
 800090a:	2776      	movs	r7, #118	@ 0x76
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409c      	lsls	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	427f      	negs	r7, r7
 8000914:	4699      	mov	r9, r3
 8000916:	469a      	mov	sl, r3
 8000918:	1a3f      	subs	r7, r7, r0
 800091a:	e7aa      	b.n	8000872 <__aeabi_fdiv+0x2e>
 800091c:	4640      	mov	r0, r8
 800091e:	f002 fc4d 	bl	80031bc <__clzsi2>
 8000922:	4642      	mov	r2, r8
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409a      	lsls	r2, r3
 8000928:	2376      	movs	r3, #118	@ 0x76
 800092a:	425b      	negs	r3, r3
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	4690      	mov	r8, r2
 8000930:	2000      	movs	r0, #0
 8000932:	e7b0      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2003      	movs	r0, #3
 800093e:	33fc      	adds	r3, #252	@ 0xfc
 8000940:	e7a9      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000942:	000d      	movs	r5, r1
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	2200      	movs	r2, #0
 8000948:	05c0      	lsls	r0, r0, #23
 800094a:	07ed      	lsls	r5, r5, #31
 800094c:	4310      	orrs	r0, r2
 800094e:	4328      	orrs	r0, r5
 8000950:	bce0      	pop	{r5, r6, r7}
 8000952:	46ba      	mov	sl, r7
 8000954:	46b1      	mov	r9, r6
 8000956:	46a8      	mov	r8, r5
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	000d      	movs	r5, r1
 800095c:	2000      	movs	r0, #0
 800095e:	2200      	movs	r2, #0
 8000960:	e7f2      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000962:	4653      	mov	r3, sl
 8000964:	2b02      	cmp	r3, #2
 8000966:	d0ed      	beq.n	8000944 <__aeabi_fdiv+0x100>
 8000968:	2b03      	cmp	r3, #3
 800096a:	d033      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 800096c:	46a0      	mov	r8, r4
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <__aeabi_fdiv+0x13a>
 8000972:	2000      	movs	r0, #0
 8000974:	2200      	movs	r2, #0
 8000976:	e7e7      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000978:	0035      	movs	r5, r6
 800097a:	2803      	cmp	r0, #3
 800097c:	d07a      	beq.n	8000a74 <__aeabi_fdiv+0x230>
 800097e:	003b      	movs	r3, r7
 8000980:	337f      	adds	r3, #127	@ 0x7f
 8000982:	2b00      	cmp	r3, #0
 8000984:	dd2d      	ble.n	80009e2 <__aeabi_fdiv+0x19e>
 8000986:	4642      	mov	r2, r8
 8000988:	0752      	lsls	r2, r2, #29
 800098a:	d007      	beq.n	800099c <__aeabi_fdiv+0x158>
 800098c:	220f      	movs	r2, #15
 800098e:	4641      	mov	r1, r8
 8000990:	400a      	ands	r2, r1
 8000992:	2a04      	cmp	r2, #4
 8000994:	d002      	beq.n	800099c <__aeabi_fdiv+0x158>
 8000996:	2204      	movs	r2, #4
 8000998:	4694      	mov	ip, r2
 800099a:	44e0      	add	r8, ip
 800099c:	4642      	mov	r2, r8
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	d505      	bpl.n	80009ae <__aeabi_fdiv+0x16a>
 80009a2:	4642      	mov	r2, r8
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <__aeabi_fdiv+0x23c>)
 80009a6:	401a      	ands	r2, r3
 80009a8:	003b      	movs	r3, r7
 80009aa:	4690      	mov	r8, r2
 80009ac:	3380      	adds	r3, #128	@ 0x80
 80009ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80009b0:	dcc8      	bgt.n	8000944 <__aeabi_fdiv+0x100>
 80009b2:	4642      	mov	r2, r8
 80009b4:	0192      	lsls	r2, r2, #6
 80009b6:	0a52      	lsrs	r2, r2, #9
 80009b8:	b2d8      	uxtb	r0, r3
 80009ba:	e7c5      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	2500      	movs	r5, #0
 80009c0:	20ff      	movs	r0, #255	@ 0xff
 80009c2:	03d2      	lsls	r2, r2, #15
 80009c4:	e7c0      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	03d2      	lsls	r2, r2, #15
 80009ca:	4214      	tst	r4, r2
 80009cc:	d002      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 80009ce:	4643      	mov	r3, r8
 80009d0:	4213      	tst	r3, r2
 80009d2:	d049      	beq.n	8000a68 <__aeabi_fdiv+0x224>
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	4322      	orrs	r2, r4
 80009da:	0252      	lsls	r2, r2, #9
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a52      	lsrs	r2, r2, #9
 80009e0:	e7b2      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009e2:	2201      	movs	r2, #1
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b1b      	cmp	r3, #27
 80009e8:	dcc3      	bgt.n	8000972 <__aeabi_fdiv+0x12e>
 80009ea:	4642      	mov	r2, r8
 80009ec:	40da      	lsrs	r2, r3
 80009ee:	4643      	mov	r3, r8
 80009f0:	379e      	adds	r7, #158	@ 0x9e
 80009f2:	40bb      	lsls	r3, r7
 80009f4:	1e59      	subs	r1, r3, #1
 80009f6:	418b      	sbcs	r3, r1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	0753      	lsls	r3, r2, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 80009fe:	230f      	movs	r3, #15
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 8000a06:	3204      	adds	r2, #4
 8000a08:	0153      	lsls	r3, r2, #5
 8000a0a:	d529      	bpl.n	8000a60 <__aeabi_fdiv+0x21c>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	e79a      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a12:	4642      	mov	r2, r8
 8000a14:	0163      	lsls	r3, r4, #5
 8000a16:	0155      	lsls	r5, r2, #5
 8000a18:	42ab      	cmp	r3, r5
 8000a1a:	d215      	bcs.n	8000a48 <__aeabi_fdiv+0x204>
 8000a1c:	201b      	movs	r0, #27
 8000a1e:	2200      	movs	r2, #0
 8000a20:	3f01      	subs	r7, #1
 8000a22:	2601      	movs	r6, #1
 8000a24:	001c      	movs	r4, r3
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	db01      	blt.n	8000a32 <__aeabi_fdiv+0x1ee>
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d801      	bhi.n	8000a36 <__aeabi_fdiv+0x1f2>
 8000a32:	1b5b      	subs	r3, r3, r5
 8000a34:	4332      	orrs	r2, r6
 8000a36:	3801      	subs	r0, #1
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d1f3      	bne.n	8000a24 <__aeabi_fdiv+0x1e0>
 8000a3c:	1e58      	subs	r0, r3, #1
 8000a3e:	4183      	sbcs	r3, r0
 8000a40:	4313      	orrs	r3, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	000d      	movs	r5, r1
 8000a46:	e79a      	b.n	800097e <__aeabi_fdiv+0x13a>
 8000a48:	201a      	movs	r0, #26
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	e7e8      	b.n	8000a22 <__aeabi_fdiv+0x1de>
 8000a50:	3b02      	subs	r3, #2
 8000a52:	425a      	negs	r2, r3
 8000a54:	4153      	adcs	r3, r2
 8000a56:	425b      	negs	r3, r3
 8000a58:	0035      	movs	r5, r6
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	e773      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a60:	0192      	lsls	r2, r2, #6
 8000a62:	2000      	movs	r0, #0
 8000a64:	0a52      	lsrs	r2, r2, #9
 8000a66:	e76f      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	0252      	lsls	r2, r2, #9
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	20ff      	movs	r0, #255	@ 0xff
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	e769      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a74:	4644      	mov	r4, r8
 8000a76:	e7ad      	b.n	80009d4 <__aeabi_fdiv+0x190>
 8000a78:	0800d6cc 	.word	0x0800d6cc
 8000a7c:	0800d70c 	.word	0x0800d70c
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__eqsf2>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	0042      	lsls	r2, r0, #1
 8000a88:	024e      	lsls	r6, r1, #9
 8000a8a:	004c      	lsls	r4, r1, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	0a6d      	lsrs	r5, r5, #9
 8000a90:	0e12      	lsrs	r2, r2, #24
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a76      	lsrs	r6, r6, #9
 8000a96:	0e24      	lsrs	r4, r4, #24
 8000a98:	0fc9      	lsrs	r1, r1, #31
 8000a9a:	2aff      	cmp	r2, #255	@ 0xff
 8000a9c:	d010      	beq.n	8000ac0 <__eqsf2+0x3c>
 8000a9e:	2cff      	cmp	r4, #255	@ 0xff
 8000aa0:	d00c      	beq.n	8000abc <__eqsf2+0x38>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	42a2      	cmp	r2, r4
 8000aa6:	d10a      	bne.n	8000abe <__eqsf2+0x3a>
 8000aa8:	42b5      	cmp	r5, r6
 8000aaa:	d108      	bne.n	8000abe <__eqsf2+0x3a>
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d00f      	beq.n	8000ad0 <__eqsf2+0x4c>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d104      	bne.n	8000abe <__eqsf2+0x3a>
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	1e43      	subs	r3, r0, #1
 8000ab8:	4198      	sbcs	r0, r3
 8000aba:	e000      	b.n	8000abe <__eqsf2+0x3a>
 8000abc:	2001      	movs	r0, #1
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	2cff      	cmp	r4, #255	@ 0xff
 8000ac4:	d1fb      	bne.n	8000abe <__eqsf2+0x3a>
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	d1f9      	bne.n	8000abe <__eqsf2+0x3a>
 8000aca:	404b      	eors	r3, r1
 8000acc:	0018      	movs	r0, r3
 8000ace:	e7f6      	b.n	8000abe <__eqsf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7f4      	b.n	8000abe <__eqsf2+0x3a>

08000ad4 <__gesf2>:
 8000ad4:	b530      	push	{r4, r5, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	024d      	lsls	r5, r1, #9
 8000adc:	0fc3      	lsrs	r3, r0, #31
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e00      	lsrs	r0, r0, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	2aff      	cmp	r2, #255	@ 0xff
 8000aec:	d019      	beq.n	8000b22 <__gesf2+0x4e>
 8000aee:	28ff      	cmp	r0, #255	@ 0xff
 8000af0:	d00b      	beq.n	8000b0a <__gesf2+0x36>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11e      	bne.n	8000b34 <__gesf2+0x60>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10b      	bne.n	8000b12 <__gesf2+0x3e>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d027      	beq.n	8000b4e <__gesf2+0x7a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d134      	bne.n	8000b6c <__gesf2+0x98>
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d02f      	beq.n	8000b66 <__gesf2+0x92>
 8000b06:	0008      	movs	r0, r1
 8000b08:	bd30      	pop	{r4, r5, pc}
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d128      	bne.n	8000b60 <__gesf2+0x8c>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d101      	bne.n	8000b16 <__gesf2+0x42>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d0f5      	beq.n	8000b02 <__gesf2+0x2e>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d107      	bne.n	8000b2a <__gesf2+0x56>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d023      	beq.n	8000b66 <__gesf2+0x92>
 8000b1e:	0018      	movs	r0, r3
 8000b20:	e7f2      	b.n	8000b08 <__gesf2+0x34>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d11c      	bne.n	8000b60 <__gesf2+0x8c>
 8000b26:	28ff      	cmp	r0, #255	@ 0xff
 8000b28:	d014      	beq.n	8000b54 <__gesf2+0x80>
 8000b2a:	1e58      	subs	r0, r3, #1
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4018      	ands	r0, r3
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7e9      	b.n	8000b08 <__gesf2+0x34>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0f8      	beq.n	8000b2a <__gesf2+0x56>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d1f6      	bne.n	8000b2a <__gesf2+0x56>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	dcf4      	bgt.n	8000b2a <__gesf2+0x56>
 8000b40:	dbeb      	blt.n	8000b1a <__gesf2+0x46>
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d8f1      	bhi.n	8000b2a <__gesf2+0x56>
 8000b46:	2000      	movs	r0, #0
 8000b48:	42ac      	cmp	r4, r5
 8000b4a:	d2dd      	bcs.n	8000b08 <__gesf2+0x34>
 8000b4c:	e7e5      	b.n	8000b1a <__gesf2+0x46>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d0da      	beq.n	8000b08 <__gesf2+0x34>
 8000b52:	e7ea      	b.n	8000b2a <__gesf2+0x56>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d103      	bne.n	8000b60 <__gesf2+0x8c>
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d1e6      	bne.n	8000b2a <__gesf2+0x56>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7d3      	b.n	8000b08 <__gesf2+0x34>
 8000b60:	2002      	movs	r0, #2
 8000b62:	4240      	negs	r0, r0
 8000b64:	e7d0      	b.n	8000b08 <__gesf2+0x34>
 8000b66:	2001      	movs	r0, #1
 8000b68:	4240      	negs	r0, r0
 8000b6a:	e7cd      	b.n	8000b08 <__gesf2+0x34>
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d0e8      	beq.n	8000b42 <__gesf2+0x6e>
 8000b70:	e7db      	b.n	8000b2a <__gesf2+0x56>
 8000b72:	46c0      	nop			@ (mov r8, r8)

08000b74 <__lesf2>:
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	024d      	lsls	r5, r1, #9
 8000b7c:	0fc3      	lsrs	r3, r0, #31
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e00      	lsrs	r0, r0, #24
 8000b88:	0fc9      	lsrs	r1, r1, #31
 8000b8a:	2aff      	cmp	r2, #255	@ 0xff
 8000b8c:	d01a      	beq.n	8000bc4 <__lesf2+0x50>
 8000b8e:	28ff      	cmp	r0, #255	@ 0xff
 8000b90:	d00e      	beq.n	8000bb0 <__lesf2+0x3c>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d11e      	bne.n	8000bd4 <__lesf2+0x60>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d10e      	bne.n	8000bb8 <__lesf2+0x44>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d02a      	beq.n	8000bf4 <__lesf2+0x80>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d00c      	beq.n	8000bbc <__lesf2+0x48>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x6e>
 8000ba6:	1e58      	subs	r0, r3, #1
 8000ba8:	2302      	movs	r3, #2
 8000baa:	4018      	ands	r0, r3
 8000bac:	3801      	subs	r0, #1
 8000bae:	e010      	b.n	8000bd2 <__lesf2+0x5e>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10d      	bne.n	8000bd0 <__lesf2+0x5c>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d120      	bne.n	8000bfa <__lesf2+0x86>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d11e      	bne.n	8000bfa <__lesf2+0x86>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d023      	beq.n	8000c08 <__lesf2+0x94>
 8000bc0:	0008      	movs	r0, r1
 8000bc2:	e006      	b.n	8000bd2 <__lesf2+0x5e>
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d103      	bne.n	8000bd0 <__lesf2+0x5c>
 8000bc8:	28ff      	cmp	r0, #255	@ 0xff
 8000bca:	d1ec      	bne.n	8000ba6 <__lesf2+0x32>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d017      	beq.n	8000c00 <__lesf2+0x8c>
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0e6      	beq.n	8000ba6 <__lesf2+0x32>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d1e4      	bne.n	8000ba6 <__lesf2+0x32>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	dce2      	bgt.n	8000ba6 <__lesf2+0x32>
 8000be0:	db04      	blt.n	8000bec <__lesf2+0x78>
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	d8df      	bhi.n	8000ba6 <__lesf2+0x32>
 8000be6:	2000      	movs	r0, #0
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d2f2      	bcs.n	8000bd2 <__lesf2+0x5e>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00b      	beq.n	8000c08 <__lesf2+0x94>
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	e7ee      	b.n	8000bd2 <__lesf2+0x5e>
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d0ec      	beq.n	8000bd2 <__lesf2+0x5e>
 8000bf8:	e7d5      	b.n	8000ba6 <__lesf2+0x32>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d1d3      	bne.n	8000ba6 <__lesf2+0x32>
 8000bfe:	e7f5      	b.n	8000bec <__lesf2+0x78>
 8000c00:	2000      	movs	r0, #0
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d0e5      	beq.n	8000bd2 <__lesf2+0x5e>
 8000c06:	e7ce      	b.n	8000ba6 <__lesf2+0x32>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7e1      	b.n	8000bd2 <__lesf2+0x5e>
 8000c0e:	46c0      	nop			@ (mov r8, r8)

08000c10 <__aeabi_fmul>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	464f      	mov	r7, r9
 8000c14:	4646      	mov	r6, r8
 8000c16:	46d6      	mov	lr, sl
 8000c18:	0243      	lsls	r3, r0, #9
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	0045      	lsls	r5, r0, #1
 8000c1e:	b5c0      	push	{r6, r7, lr}
 8000c20:	4699      	mov	r9, r3
 8000c22:	1c0f      	adds	r7, r1, #0
 8000c24:	0e2d      	lsrs	r5, r5, #24
 8000c26:	0fc6      	lsrs	r6, r0, #31
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fmul+0x1e>
 8000c2c:	e088      	b.n	8000d40 <__aeabi_fmul+0x130>
 8000c2e:	2dff      	cmp	r5, #255	@ 0xff
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fmul+0x24>
 8000c32:	e08d      	b.n	8000d50 <__aeabi_fmul+0x140>
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	04d2      	lsls	r2, r2, #19
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4691      	mov	r9, r2
 8000c40:	4698      	mov	r8, r3
 8000c42:	469a      	mov	sl, r3
 8000c44:	3d7f      	subs	r5, #127	@ 0x7f
 8000c46:	027c      	lsls	r4, r7, #9
 8000c48:	007b      	lsls	r3, r7, #1
 8000c4a:	0a64      	lsrs	r4, r4, #9
 8000c4c:	0e1b      	lsrs	r3, r3, #24
 8000c4e:	0fff      	lsrs	r7, r7, #31
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d068      	beq.n	8000d26 <__aeabi_fmul+0x116>
 8000c54:	2bff      	cmp	r3, #255	@ 0xff
 8000c56:	d021      	beq.n	8000c9c <__aeabi_fmul+0x8c>
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	00e4      	lsls	r4, r4, #3
 8000c5c:	04d2      	lsls	r2, r2, #19
 8000c5e:	4314      	orrs	r4, r2
 8000c60:	4642      	mov	r2, r8
 8000c62:	3b7f      	subs	r3, #127	@ 0x7f
 8000c64:	195b      	adds	r3, r3, r5
 8000c66:	2100      	movs	r1, #0
 8000c68:	1c5d      	adds	r5, r3, #1
 8000c6a:	2a0a      	cmp	r2, #10
 8000c6c:	dc2e      	bgt.n	8000ccc <__aeabi_fmul+0xbc>
 8000c6e:	407e      	eors	r6, r7
 8000c70:	4642      	mov	r2, r8
 8000c72:	2a02      	cmp	r2, #2
 8000c74:	dc23      	bgt.n	8000cbe <__aeabi_fmul+0xae>
 8000c76:	3a01      	subs	r2, #1
 8000c78:	2a01      	cmp	r2, #1
 8000c7a:	d900      	bls.n	8000c7e <__aeabi_fmul+0x6e>
 8000c7c:	e0bd      	b.n	8000dfa <__aeabi_fmul+0x1ea>
 8000c7e:	2902      	cmp	r1, #2
 8000c80:	d06e      	beq.n	8000d60 <__aeabi_fmul+0x150>
 8000c82:	2901      	cmp	r1, #1
 8000c84:	d12c      	bne.n	8000ce0 <__aeabi_fmul+0xd0>
 8000c86:	2000      	movs	r0, #0
 8000c88:	2200      	movs	r2, #0
 8000c8a:	05c0      	lsls	r0, r0, #23
 8000c8c:	07f6      	lsls	r6, r6, #31
 8000c8e:	4310      	orrs	r0, r2
 8000c90:	4330      	orrs	r0, r6
 8000c92:	bce0      	pop	{r5, r6, r7}
 8000c94:	46ba      	mov	sl, r7
 8000c96:	46b1      	mov	r9, r6
 8000c98:	46a8      	mov	r8, r5
 8000c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9c:	002b      	movs	r3, r5
 8000c9e:	33ff      	adds	r3, #255	@ 0xff
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	d065      	beq.n	8000d70 <__aeabi_fmul+0x160>
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	4311      	orrs	r1, r2
 8000caa:	0032      	movs	r2, r6
 8000cac:	3501      	adds	r5, #1
 8000cae:	4688      	mov	r8, r1
 8000cb0:	407a      	eors	r2, r7
 8000cb2:	35ff      	adds	r5, #255	@ 0xff
 8000cb4:	290a      	cmp	r1, #10
 8000cb6:	dd00      	ble.n	8000cba <__aeabi_fmul+0xaa>
 8000cb8:	e0d8      	b.n	8000e6c <__aeabi_fmul+0x25c>
 8000cba:	0016      	movs	r6, r2
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	4640      	mov	r0, r8
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4082      	lsls	r2, r0
 8000cc4:	20a6      	movs	r0, #166	@ 0xa6
 8000cc6:	00c0      	lsls	r0, r0, #3
 8000cc8:	4202      	tst	r2, r0
 8000cca:	d020      	beq.n	8000d0e <__aeabi_fmul+0xfe>
 8000ccc:	4653      	mov	r3, sl
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d046      	beq.n	8000d60 <__aeabi_fmul+0x150>
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fmul+0xc8>
 8000cd6:	e0bb      	b.n	8000e50 <__aeabi_fmul+0x240>
 8000cd8:	4651      	mov	r1, sl
 8000cda:	464c      	mov	r4, r9
 8000cdc:	2901      	cmp	r1, #1
 8000cde:	d0d2      	beq.n	8000c86 <__aeabi_fmul+0x76>
 8000ce0:	002b      	movs	r3, r5
 8000ce2:	337f      	adds	r3, #127	@ 0x7f
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dd70      	ble.n	8000dca <__aeabi_fmul+0x1ba>
 8000ce8:	0762      	lsls	r2, r4, #29
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fmul+0xe6>
 8000cec:	220f      	movs	r2, #15
 8000cee:	4022      	ands	r2, r4
 8000cf0:	2a04      	cmp	r2, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fmul+0xe6>
 8000cf4:	3404      	adds	r4, #4
 8000cf6:	0122      	lsls	r2, r4, #4
 8000cf8:	d503      	bpl.n	8000d02 <__aeabi_fmul+0xf2>
 8000cfa:	4b63      	ldr	r3, [pc, #396]	@ (8000e88 <__aeabi_fmul+0x278>)
 8000cfc:	401c      	ands	r4, r3
 8000cfe:	002b      	movs	r3, r5
 8000d00:	3380      	adds	r3, #128	@ 0x80
 8000d02:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d04:	dc2c      	bgt.n	8000d60 <__aeabi_fmul+0x150>
 8000d06:	01a2      	lsls	r2, r4, #6
 8000d08:	0a52      	lsrs	r2, r2, #9
 8000d0a:	b2d8      	uxtb	r0, r3
 8000d0c:	e7bd      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000d0e:	2090      	movs	r0, #144	@ 0x90
 8000d10:	0080      	lsls	r0, r0, #2
 8000d12:	4202      	tst	r2, r0
 8000d14:	d127      	bne.n	8000d66 <__aeabi_fmul+0x156>
 8000d16:	38b9      	subs	r0, #185	@ 0xb9
 8000d18:	38ff      	subs	r0, #255	@ 0xff
 8000d1a:	4210      	tst	r0, r2
 8000d1c:	d06d      	beq.n	8000dfa <__aeabi_fmul+0x1ea>
 8000d1e:	003e      	movs	r6, r7
 8000d20:	46a1      	mov	r9, r4
 8000d22:	468a      	mov	sl, r1
 8000d24:	e7d2      	b.n	8000ccc <__aeabi_fmul+0xbc>
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	d141      	bne.n	8000dae <__aeabi_fmul+0x19e>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	4690      	mov	r8, r2
 8000d32:	002b      	movs	r3, r5
 8000d34:	4642      	mov	r2, r8
 8000d36:	2101      	movs	r1, #1
 8000d38:	1c5d      	adds	r5, r3, #1
 8000d3a:	2a0a      	cmp	r2, #10
 8000d3c:	dd97      	ble.n	8000c6e <__aeabi_fmul+0x5e>
 8000d3e:	e7c5      	b.n	8000ccc <__aeabi_fmul+0xbc>
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d126      	bne.n	8000d92 <__aeabi_fmul+0x182>
 8000d44:	2304      	movs	r3, #4
 8000d46:	4698      	mov	r8, r3
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	e77a      	b.n	8000c46 <__aeabi_fmul+0x36>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d118      	bne.n	8000d86 <__aeabi_fmul+0x176>
 8000d54:	2308      	movs	r3, #8
 8000d56:	4698      	mov	r8, r3
 8000d58:	3b06      	subs	r3, #6
 8000d5a:	25ff      	movs	r5, #255	@ 0xff
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	e772      	b.n	8000c46 <__aeabi_fmul+0x36>
 8000d60:	20ff      	movs	r0, #255	@ 0xff
 8000d62:	2200      	movs	r2, #0
 8000d64:	e791      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	2600      	movs	r6, #0
 8000d6a:	20ff      	movs	r0, #255	@ 0xff
 8000d6c:	03d2      	lsls	r2, r2, #15
 8000d6e:	e78c      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000d70:	4641      	mov	r1, r8
 8000d72:	2202      	movs	r2, #2
 8000d74:	3501      	adds	r5, #1
 8000d76:	4311      	orrs	r1, r2
 8000d78:	4688      	mov	r8, r1
 8000d7a:	35ff      	adds	r5, #255	@ 0xff
 8000d7c:	290a      	cmp	r1, #10
 8000d7e:	dca5      	bgt.n	8000ccc <__aeabi_fmul+0xbc>
 8000d80:	2102      	movs	r1, #2
 8000d82:	407e      	eors	r6, r7
 8000d84:	e774      	b.n	8000c70 <__aeabi_fmul+0x60>
 8000d86:	230c      	movs	r3, #12
 8000d88:	4698      	mov	r8, r3
 8000d8a:	3b09      	subs	r3, #9
 8000d8c:	25ff      	movs	r5, #255	@ 0xff
 8000d8e:	469a      	mov	sl, r3
 8000d90:	e759      	b.n	8000c46 <__aeabi_fmul+0x36>
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 fa12 	bl	80031bc <__clzsi2>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1f43      	subs	r3, r0, #5
 8000d9c:	2576      	movs	r5, #118	@ 0x76
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	2300      	movs	r3, #0
 8000da2:	426d      	negs	r5, r5
 8000da4:	4691      	mov	r9, r2
 8000da6:	4698      	mov	r8, r3
 8000da8:	469a      	mov	sl, r3
 8000daa:	1a2d      	subs	r5, r5, r0
 8000dac:	e74b      	b.n	8000c46 <__aeabi_fmul+0x36>
 8000dae:	0020      	movs	r0, r4
 8000db0:	f002 fa04 	bl	80031bc <__clzsi2>
 8000db4:	4642      	mov	r2, r8
 8000db6:	1f43      	subs	r3, r0, #5
 8000db8:	409c      	lsls	r4, r3
 8000dba:	1a2b      	subs	r3, r5, r0
 8000dbc:	3b76      	subs	r3, #118	@ 0x76
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	1c5d      	adds	r5, r3, #1
 8000dc2:	2a0a      	cmp	r2, #10
 8000dc4:	dc00      	bgt.n	8000dc8 <__aeabi_fmul+0x1b8>
 8000dc6:	e752      	b.n	8000c6e <__aeabi_fmul+0x5e>
 8000dc8:	e780      	b.n	8000ccc <__aeabi_fmul+0xbc>
 8000dca:	2201      	movs	r2, #1
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b1b      	cmp	r3, #27
 8000dd0:	dd00      	ble.n	8000dd4 <__aeabi_fmul+0x1c4>
 8000dd2:	e758      	b.n	8000c86 <__aeabi_fmul+0x76>
 8000dd4:	359e      	adds	r5, #158	@ 0x9e
 8000dd6:	0022      	movs	r2, r4
 8000dd8:	40ac      	lsls	r4, r5
 8000dda:	40da      	lsrs	r2, r3
 8000ddc:	1e63      	subs	r3, r4, #1
 8000dde:	419c      	sbcs	r4, r3
 8000de0:	4322      	orrs	r2, r4
 8000de2:	0753      	lsls	r3, r2, #29
 8000de4:	d004      	beq.n	8000df0 <__aeabi_fmul+0x1e0>
 8000de6:	230f      	movs	r3, #15
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fmul+0x1e0>
 8000dee:	3204      	adds	r2, #4
 8000df0:	0153      	lsls	r3, r2, #5
 8000df2:	d537      	bpl.n	8000e64 <__aeabi_fmul+0x254>
 8000df4:	2001      	movs	r0, #1
 8000df6:	2200      	movs	r2, #0
 8000df8:	e747      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	0424      	lsls	r4, r4, #16
 8000e00:	0c24      	lsrs	r4, r4, #16
 8000e02:	0027      	movs	r7, r4
 8000e04:	0c10      	lsrs	r0, r2, #16
 8000e06:	0412      	lsls	r2, r2, #16
 8000e08:	0c12      	lsrs	r2, r2, #16
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	4357      	muls	r7, r2
 8000e0e:	4348      	muls	r0, r1
 8000e10:	4351      	muls	r1, r2
 8000e12:	0c3a      	lsrs	r2, r7, #16
 8000e14:	1909      	adds	r1, r1, r4
 8000e16:	1852      	adds	r2, r2, r1
 8000e18:	4294      	cmp	r4, r2
 8000e1a:	d903      	bls.n	8000e24 <__aeabi_fmul+0x214>
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0249      	lsls	r1, r1, #9
 8000e20:	468c      	mov	ip, r1
 8000e22:	4460      	add	r0, ip
 8000e24:	043f      	lsls	r7, r7, #16
 8000e26:	0411      	lsls	r1, r2, #16
 8000e28:	0c3f      	lsrs	r7, r7, #16
 8000e2a:	19c9      	adds	r1, r1, r7
 8000e2c:	018c      	lsls	r4, r1, #6
 8000e2e:	1e67      	subs	r7, r4, #1
 8000e30:	41bc      	sbcs	r4, r7
 8000e32:	0c12      	lsrs	r2, r2, #16
 8000e34:	0e89      	lsrs	r1, r1, #26
 8000e36:	1812      	adds	r2, r2, r0
 8000e38:	430c      	orrs	r4, r1
 8000e3a:	0192      	lsls	r2, r2, #6
 8000e3c:	4314      	orrs	r4, r2
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	d50e      	bpl.n	8000e60 <__aeabi_fmul+0x250>
 8000e42:	2301      	movs	r3, #1
 8000e44:	0862      	lsrs	r2, r4, #1
 8000e46:	401c      	ands	r4, r3
 8000e48:	4314      	orrs	r4, r2
 8000e4a:	e749      	b.n	8000ce0 <__aeabi_fmul+0xd0>
 8000e4c:	003e      	movs	r6, r7
 8000e4e:	46a1      	mov	r9, r4
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	464b      	mov	r3, r9
 8000e54:	03d2      	lsls	r2, r2, #15
 8000e56:	431a      	orrs	r2, r3
 8000e58:	0252      	lsls	r2, r2, #9
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	0a52      	lsrs	r2, r2, #9
 8000e5e:	e714      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000e60:	001d      	movs	r5, r3
 8000e62:	e73d      	b.n	8000ce0 <__aeabi_fmul+0xd0>
 8000e64:	0192      	lsls	r2, r2, #6
 8000e66:	2000      	movs	r0, #0
 8000e68:	0a52      	lsrs	r2, r2, #9
 8000e6a:	e70e      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000e6c:	290f      	cmp	r1, #15
 8000e6e:	d1ed      	bne.n	8000e4c <__aeabi_fmul+0x23c>
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	464b      	mov	r3, r9
 8000e74:	03d2      	lsls	r2, r2, #15
 8000e76:	4213      	tst	r3, r2
 8000e78:	d0ea      	beq.n	8000e50 <__aeabi_fmul+0x240>
 8000e7a:	4214      	tst	r4, r2
 8000e7c:	d1e8      	bne.n	8000e50 <__aeabi_fmul+0x240>
 8000e7e:	003e      	movs	r6, r7
 8000e80:	20ff      	movs	r0, #255	@ 0xff
 8000e82:	4322      	orrs	r2, r4
 8000e84:	e701      	b.n	8000c8a <__aeabi_fmul+0x7a>
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	f7ffffff 	.word	0xf7ffffff

08000e8c <__aeabi_fsub>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	4647      	mov	r7, r8
 8000e90:	46ce      	mov	lr, r9
 8000e92:	024e      	lsls	r6, r1, #9
 8000e94:	0243      	lsls	r3, r0, #9
 8000e96:	0045      	lsls	r5, r0, #1
 8000e98:	0a72      	lsrs	r2, r6, #9
 8000e9a:	0fc4      	lsrs	r4, r0, #31
 8000e9c:	0048      	lsls	r0, r1, #1
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	0a5f      	lsrs	r7, r3, #9
 8000ea4:	0e2d      	lsrs	r5, r5, #24
 8000ea6:	099b      	lsrs	r3, r3, #6
 8000ea8:	0e00      	lsrs	r0, r0, #24
 8000eaa:	0fc9      	lsrs	r1, r1, #31
 8000eac:	09b6      	lsrs	r6, r6, #6
 8000eae:	28ff      	cmp	r0, #255	@ 0xff
 8000eb0:	d024      	beq.n	8000efc <__aeabi_fsub+0x70>
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4051      	eors	r1, r2
 8000eb6:	1a2a      	subs	r2, r5, r0
 8000eb8:	428c      	cmp	r4, r1
 8000eba:	d00f      	beq.n	8000edc <__aeabi_fsub+0x50>
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	dc00      	bgt.n	8000ec2 <__aeabi_fsub+0x36>
 8000ec0:	e16a      	b.n	8001198 <__aeabi_fsub+0x30c>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d135      	bne.n	8000f32 <__aeabi_fsub+0xa6>
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x40>
 8000eca:	e0a2      	b.n	8001012 <__aeabi_fsub+0x186>
 8000ecc:	1e51      	subs	r1, r2, #1
 8000ece:	2a01      	cmp	r2, #1
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x48>
 8000ed2:	e124      	b.n	800111e <__aeabi_fsub+0x292>
 8000ed4:	2aff      	cmp	r2, #255	@ 0xff
 8000ed6:	d021      	beq.n	8000f1c <__aeabi_fsub+0x90>
 8000ed8:	000a      	movs	r2, r1
 8000eda:	e02f      	b.n	8000f3c <__aeabi_fsub+0xb0>
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_fsub+0x56>
 8000ee0:	e167      	b.n	80011b2 <__aeabi_fsub+0x326>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d05e      	beq.n	8000fa4 <__aeabi_fsub+0x118>
 8000ee6:	2dff      	cmp	r5, #255	@ 0xff
 8000ee8:	d018      	beq.n	8000f1c <__aeabi_fsub+0x90>
 8000eea:	2180      	movs	r1, #128	@ 0x80
 8000eec:	04c9      	lsls	r1, r1, #19
 8000eee:	430e      	orrs	r6, r1
 8000ef0:	2a1b      	cmp	r2, #27
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_fsub+0x6a>
 8000ef4:	e076      	b.n	8000fe4 <__aeabi_fsub+0x158>
 8000ef6:	002a      	movs	r2, r5
 8000ef8:	3301      	adds	r3, #1
 8000efa:	e032      	b.n	8000f62 <__aeabi_fsub+0xd6>
 8000efc:	002a      	movs	r2, r5
 8000efe:	3aff      	subs	r2, #255	@ 0xff
 8000f00:	4691      	mov	r9, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d042      	beq.n	8000f8c <__aeabi_fsub+0x100>
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d055      	beq.n	8000fb6 <__aeabi_fsub+0x12a>
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x86>
 8000f10:	e09c      	b.n	800104c <__aeabi_fsub+0x1c0>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x8c>
 8000f16:	e077      	b.n	8001008 <__aeabi_fsub+0x17c>
 8000f18:	000c      	movs	r4, r1
 8000f1a:	0033      	movs	r3, r6
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_fsub+0x98>
 8000f22:	e06e      	b.n	8001002 <__aeabi_fsub+0x176>
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	03d2      	lsls	r2, r2, #15
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	20ff      	movs	r0, #255	@ 0xff
 8000f2e:	0a5b      	lsrs	r3, r3, #9
 8000f30:	e024      	b.n	8000f7c <__aeabi_fsub+0xf0>
 8000f32:	2dff      	cmp	r5, #255	@ 0xff
 8000f34:	d0f2      	beq.n	8000f1c <__aeabi_fsub+0x90>
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	04c9      	lsls	r1, r1, #19
 8000f3a:	430e      	orrs	r6, r1
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2a1b      	cmp	r2, #27
 8000f40:	dc08      	bgt.n	8000f54 <__aeabi_fsub+0xc8>
 8000f42:	0031      	movs	r1, r6
 8000f44:	2020      	movs	r0, #32
 8000f46:	40d1      	lsrs	r1, r2
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	4096      	lsls	r6, r2
 8000f4c:	0032      	movs	r2, r6
 8000f4e:	1e50      	subs	r0, r2, #1
 8000f50:	4182      	sbcs	r2, r0
 8000f52:	4311      	orrs	r1, r2
 8000f54:	1a5b      	subs	r3, r3, r1
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	d460      	bmi.n	800101c <__aeabi_fsub+0x190>
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	002a      	movs	r2, r5
 8000f5e:	4019      	ands	r1, r3
 8000f60:	d057      	beq.n	8001012 <__aeabi_fsub+0x186>
 8000f62:	210f      	movs	r1, #15
 8000f64:	4019      	ands	r1, r3
 8000f66:	2904      	cmp	r1, #4
 8000f68:	d000      	beq.n	8000f6c <__aeabi_fsub+0xe0>
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	0159      	lsls	r1, r3, #5
 8000f6e:	d550      	bpl.n	8001012 <__aeabi_fsub+0x186>
 8000f70:	1c50      	adds	r0, r2, #1
 8000f72:	2afe      	cmp	r2, #254	@ 0xfe
 8000f74:	d045      	beq.n	8001002 <__aeabi_fsub+0x176>
 8000f76:	019b      	lsls	r3, r3, #6
 8000f78:	b2c0      	uxtb	r0, r0
 8000f7a:	0a5b      	lsrs	r3, r3, #9
 8000f7c:	05c0      	lsls	r0, r0, #23
 8000f7e:	4318      	orrs	r0, r3
 8000f80:	07e4      	lsls	r4, r4, #31
 8000f82:	4320      	orrs	r0, r4
 8000f84:	bcc0      	pop	{r6, r7}
 8000f86:	46b9      	mov	r9, r7
 8000f88:	46b0      	mov	r8, r6
 8000f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4051      	eors	r1, r2
 8000f90:	428c      	cmp	r4, r1
 8000f92:	d1ba      	bne.n	8000f0a <__aeabi_fsub+0x7e>
 8000f94:	464a      	mov	r2, r9
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d010      	beq.n	8000fbc <__aeabi_fsub+0x130>
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x114>
 8000f9e:	e098      	b.n	80010d2 <__aeabi_fsub+0x246>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e7bb      	b.n	8000f1c <__aeabi_fsub+0x90>
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d034      	beq.n	8001012 <__aeabi_fsub+0x186>
 8000fa8:	1e51      	subs	r1, r2, #1
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d06e      	beq.n	800108c <__aeabi_fsub+0x200>
 8000fae:	2aff      	cmp	r2, #255	@ 0xff
 8000fb0:	d0b4      	beq.n	8000f1c <__aeabi_fsub+0x90>
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	e79c      	b.n	8000ef0 <__aeabi_fsub+0x64>
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_fsub+0x130>
 8000fba:	e088      	b.n	80010ce <__aeabi_fsub+0x242>
 8000fbc:	20fe      	movs	r0, #254	@ 0xfe
 8000fbe:	1c6a      	adds	r2, r5, #1
 8000fc0:	4210      	tst	r0, r2
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fsub+0x13a>
 8000fc4:	e092      	b.n	80010ec <__aeabi_fsub+0x260>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_fsub+0x140>
 8000fca:	e0a4      	b.n	8001116 <__aeabi_fsub+0x28a>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x146>
 8000fd0:	e0cb      	b.n	800116a <__aeabi_fsub+0x2de>
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_fsub+0x14c>
 8000fd6:	e0ca      	b.n	800116e <__aeabi_fsub+0x2e2>
 8000fd8:	2200      	movs	r2, #0
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	0a5b      	lsrs	r3, r3, #9
 8000fe0:	b2d0      	uxtb	r0, r2
 8000fe2:	e7cb      	b.n	8000f7c <__aeabi_fsub+0xf0>
 8000fe4:	0031      	movs	r1, r6
 8000fe6:	2020      	movs	r0, #32
 8000fe8:	40d1      	lsrs	r1, r2
 8000fea:	1a82      	subs	r2, r0, r2
 8000fec:	4096      	lsls	r6, r2
 8000fee:	0032      	movs	r2, r6
 8000ff0:	1e50      	subs	r0, r2, #1
 8000ff2:	4182      	sbcs	r2, r0
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	d5ae      	bpl.n	8000f5a <__aeabi_fsub+0xce>
 8000ffc:	1c6a      	adds	r2, r5, #1
 8000ffe:	2dfe      	cmp	r5, #254	@ 0xfe
 8001000:	d14a      	bne.n	8001098 <__aeabi_fsub+0x20c>
 8001002:	20ff      	movs	r0, #255	@ 0xff
 8001004:	2300      	movs	r3, #0
 8001006:	e7b9      	b.n	8000f7c <__aeabi_fsub+0xf0>
 8001008:	22ff      	movs	r2, #255	@ 0xff
 800100a:	2b00      	cmp	r3, #0
 800100c:	d14b      	bne.n	80010a6 <__aeabi_fsub+0x21a>
 800100e:	000c      	movs	r4, r1
 8001010:	0033      	movs	r3, r6
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	2aff      	cmp	r2, #255	@ 0xff
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x18e>
 8001018:	e781      	b.n	8000f1e <__aeabi_fsub+0x92>
 800101a:	e7df      	b.n	8000fdc <__aeabi_fsub+0x150>
 800101c:	019f      	lsls	r7, r3, #6
 800101e:	09bf      	lsrs	r7, r7, #6
 8001020:	0038      	movs	r0, r7
 8001022:	f002 f8cb 	bl	80031bc <__clzsi2>
 8001026:	3805      	subs	r0, #5
 8001028:	4087      	lsls	r7, r0
 800102a:	4285      	cmp	r5, r0
 800102c:	dc21      	bgt.n	8001072 <__aeabi_fsub+0x1e6>
 800102e:	003b      	movs	r3, r7
 8001030:	2120      	movs	r1, #32
 8001032:	1b42      	subs	r2, r0, r5
 8001034:	3201      	adds	r2, #1
 8001036:	40d3      	lsrs	r3, r2
 8001038:	1a8a      	subs	r2, r1, r2
 800103a:	4097      	lsls	r7, r2
 800103c:	1e7a      	subs	r2, r7, #1
 800103e:	4197      	sbcs	r7, r2
 8001040:	2200      	movs	r2, #0
 8001042:	433b      	orrs	r3, r7
 8001044:	0759      	lsls	r1, r3, #29
 8001046:	d000      	beq.n	800104a <__aeabi_fsub+0x1be>
 8001048:	e78b      	b.n	8000f62 <__aeabi_fsub+0xd6>
 800104a:	e78f      	b.n	8000f6c <__aeabi_fsub+0xe0>
 800104c:	20fe      	movs	r0, #254	@ 0xfe
 800104e:	1c6a      	adds	r2, r5, #1
 8001050:	4210      	tst	r0, r2
 8001052:	d112      	bne.n	800107a <__aeabi_fsub+0x1ee>
 8001054:	2d00      	cmp	r5, #0
 8001056:	d152      	bne.n	80010fe <__aeabi_fsub+0x272>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d07c      	beq.n	8001156 <__aeabi_fsub+0x2ca>
 800105c:	2e00      	cmp	r6, #0
 800105e:	d0bb      	beq.n	8000fd8 <__aeabi_fsub+0x14c>
 8001060:	1b9a      	subs	r2, r3, r6
 8001062:	0150      	lsls	r0, r2, #5
 8001064:	d400      	bmi.n	8001068 <__aeabi_fsub+0x1dc>
 8001066:	e08b      	b.n	8001180 <__aeabi_fsub+0x2f4>
 8001068:	2401      	movs	r4, #1
 800106a:	2200      	movs	r2, #0
 800106c:	1af3      	subs	r3, r6, r3
 800106e:	400c      	ands	r4, r1
 8001070:	e7e8      	b.n	8001044 <__aeabi_fsub+0x1b8>
 8001072:	4b56      	ldr	r3, [pc, #344]	@ (80011cc <__aeabi_fsub+0x340>)
 8001074:	1a2a      	subs	r2, r5, r0
 8001076:	403b      	ands	r3, r7
 8001078:	e7e4      	b.n	8001044 <__aeabi_fsub+0x1b8>
 800107a:	1b9f      	subs	r7, r3, r6
 800107c:	017a      	lsls	r2, r7, #5
 800107e:	d446      	bmi.n	800110e <__aeabi_fsub+0x282>
 8001080:	2f00      	cmp	r7, #0
 8001082:	d1cd      	bne.n	8001020 <__aeabi_fsub+0x194>
 8001084:	2400      	movs	r4, #0
 8001086:	2000      	movs	r0, #0
 8001088:	2300      	movs	r3, #0
 800108a:	e777      	b.n	8000f7c <__aeabi_fsub+0xf0>
 800108c:	199b      	adds	r3, r3, r6
 800108e:	2501      	movs	r5, #1
 8001090:	3201      	adds	r2, #1
 8001092:	0159      	lsls	r1, r3, #5
 8001094:	d400      	bmi.n	8001098 <__aeabi_fsub+0x20c>
 8001096:	e760      	b.n	8000f5a <__aeabi_fsub+0xce>
 8001098:	2101      	movs	r1, #1
 800109a:	484d      	ldr	r0, [pc, #308]	@ (80011d0 <__aeabi_fsub+0x344>)
 800109c:	4019      	ands	r1, r3
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	4003      	ands	r3, r0
 80010a2:	430b      	orrs	r3, r1
 80010a4:	e7ce      	b.n	8001044 <__aeabi_fsub+0x1b8>
 80010a6:	1e57      	subs	r7, r2, #1
 80010a8:	2a01      	cmp	r2, #1
 80010aa:	d05a      	beq.n	8001162 <__aeabi_fsub+0x2d6>
 80010ac:	000c      	movs	r4, r1
 80010ae:	2aff      	cmp	r2, #255	@ 0xff
 80010b0:	d033      	beq.n	800111a <__aeabi_fsub+0x28e>
 80010b2:	2201      	movs	r2, #1
 80010b4:	2f1b      	cmp	r7, #27
 80010b6:	dc07      	bgt.n	80010c8 <__aeabi_fsub+0x23c>
 80010b8:	2120      	movs	r1, #32
 80010ba:	1bc9      	subs	r1, r1, r7
 80010bc:	001a      	movs	r2, r3
 80010be:	408b      	lsls	r3, r1
 80010c0:	40fa      	lsrs	r2, r7
 80010c2:	1e59      	subs	r1, r3, #1
 80010c4:	418b      	sbcs	r3, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	0005      	movs	r5, r0
 80010ca:	1ab3      	subs	r3, r6, r2
 80010cc:	e743      	b.n	8000f56 <__aeabi_fsub+0xca>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d123      	bne.n	800111a <__aeabi_fsub+0x28e>
 80010d2:	22ff      	movs	r2, #255	@ 0xff
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d09b      	beq.n	8001010 <__aeabi_fsub+0x184>
 80010d8:	1e51      	subs	r1, r2, #1
 80010da:	2a01      	cmp	r2, #1
 80010dc:	d0d6      	beq.n	800108c <__aeabi_fsub+0x200>
 80010de:	2aff      	cmp	r2, #255	@ 0xff
 80010e0:	d01b      	beq.n	800111a <__aeabi_fsub+0x28e>
 80010e2:	291b      	cmp	r1, #27
 80010e4:	dd2c      	ble.n	8001140 <__aeabi_fsub+0x2b4>
 80010e6:	0002      	movs	r2, r0
 80010e8:	1c73      	adds	r3, r6, #1
 80010ea:	e73a      	b.n	8000f62 <__aeabi_fsub+0xd6>
 80010ec:	2aff      	cmp	r2, #255	@ 0xff
 80010ee:	d088      	beq.n	8001002 <__aeabi_fsub+0x176>
 80010f0:	199b      	adds	r3, r3, r6
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	0759      	lsls	r1, r3, #29
 80010f6:	d000      	beq.n	80010fa <__aeabi_fsub+0x26e>
 80010f8:	e733      	b.n	8000f62 <__aeabi_fsub+0xd6>
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	e76e      	b.n	8000fdc <__aeabi_fsub+0x150>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d110      	bne.n	8001124 <__aeabi_fsub+0x298>
 8001102:	2e00      	cmp	r6, #0
 8001104:	d043      	beq.n	800118e <__aeabi_fsub+0x302>
 8001106:	2401      	movs	r4, #1
 8001108:	0033      	movs	r3, r6
 800110a:	400c      	ands	r4, r1
 800110c:	e706      	b.n	8000f1c <__aeabi_fsub+0x90>
 800110e:	2401      	movs	r4, #1
 8001110:	1af7      	subs	r7, r6, r3
 8001112:	400c      	ands	r4, r1
 8001114:	e784      	b.n	8001020 <__aeabi_fsub+0x194>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d104      	bne.n	8001124 <__aeabi_fsub+0x298>
 800111a:	0033      	movs	r3, r6
 800111c:	e6fe      	b.n	8000f1c <__aeabi_fsub+0x90>
 800111e:	2501      	movs	r5, #1
 8001120:	1b9b      	subs	r3, r3, r6
 8001122:	e718      	b.n	8000f56 <__aeabi_fsub+0xca>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x29e>
 8001128:	e6f8      	b.n	8000f1c <__aeabi_fsub+0x90>
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	03d2      	lsls	r2, r2, #15
 800112e:	4297      	cmp	r7, r2
 8001130:	d304      	bcc.n	800113c <__aeabi_fsub+0x2b0>
 8001132:	4594      	cmp	ip, r2
 8001134:	d202      	bcs.n	800113c <__aeabi_fsub+0x2b0>
 8001136:	2401      	movs	r4, #1
 8001138:	0033      	movs	r3, r6
 800113a:	400c      	ands	r4, r1
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	e6f1      	b.n	8000f24 <__aeabi_fsub+0x98>
 8001140:	001a      	movs	r2, r3
 8001142:	2520      	movs	r5, #32
 8001144:	40ca      	lsrs	r2, r1
 8001146:	1a69      	subs	r1, r5, r1
 8001148:	408b      	lsls	r3, r1
 800114a:	1e59      	subs	r1, r3, #1
 800114c:	418b      	sbcs	r3, r1
 800114e:	4313      	orrs	r3, r2
 8001150:	0005      	movs	r5, r0
 8001152:	199b      	adds	r3, r3, r6
 8001154:	e750      	b.n	8000ff8 <__aeabi_fsub+0x16c>
 8001156:	2e00      	cmp	r6, #0
 8001158:	d094      	beq.n	8001084 <__aeabi_fsub+0x1f8>
 800115a:	2401      	movs	r4, #1
 800115c:	0033      	movs	r3, r6
 800115e:	400c      	ands	r4, r1
 8001160:	e73a      	b.n	8000fd8 <__aeabi_fsub+0x14c>
 8001162:	000c      	movs	r4, r1
 8001164:	2501      	movs	r5, #1
 8001166:	1af3      	subs	r3, r6, r3
 8001168:	e6f5      	b.n	8000f56 <__aeabi_fsub+0xca>
 800116a:	0033      	movs	r3, r6
 800116c:	e734      	b.n	8000fd8 <__aeabi_fsub+0x14c>
 800116e:	199b      	adds	r3, r3, r6
 8001170:	2200      	movs	r2, #0
 8001172:	0159      	lsls	r1, r3, #5
 8001174:	d5c1      	bpl.n	80010fa <__aeabi_fsub+0x26e>
 8001176:	4a15      	ldr	r2, [pc, #84]	@ (80011cc <__aeabi_fsub+0x340>)
 8001178:	4013      	ands	r3, r2
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	2201      	movs	r2, #1
 800117e:	e72d      	b.n	8000fdc <__aeabi_fsub+0x150>
 8001180:	2a00      	cmp	r2, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x2fa>
 8001184:	e77e      	b.n	8001084 <__aeabi_fsub+0x1f8>
 8001186:	0013      	movs	r3, r2
 8001188:	2200      	movs	r2, #0
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	e726      	b.n	8000fdc <__aeabi_fsub+0x150>
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	2400      	movs	r4, #0
 8001192:	20ff      	movs	r0, #255	@ 0xff
 8001194:	03db      	lsls	r3, r3, #15
 8001196:	e6f1      	b.n	8000f7c <__aeabi_fsub+0xf0>
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x312>
 800119c:	e756      	b.n	800104c <__aeabi_fsub+0x1c0>
 800119e:	1b47      	subs	r7, r0, r5
 80011a0:	003a      	movs	r2, r7
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_fsub+0x31c>
 80011a6:	e730      	b.n	800100a <__aeabi_fsub+0x17e>
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	04d2      	lsls	r2, r2, #19
 80011ac:	000c      	movs	r4, r1
 80011ae:	4313      	orrs	r3, r2
 80011b0:	e77f      	b.n	80010b2 <__aeabi_fsub+0x226>
 80011b2:	2a00      	cmp	r2, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x32c>
 80011b6:	e701      	b.n	8000fbc <__aeabi_fsub+0x130>
 80011b8:	1b41      	subs	r1, r0, r5
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d101      	bne.n	80011c2 <__aeabi_fsub+0x336>
 80011be:	000a      	movs	r2, r1
 80011c0:	e788      	b.n	80010d4 <__aeabi_fsub+0x248>
 80011c2:	2280      	movs	r2, #128	@ 0x80
 80011c4:	04d2      	lsls	r2, r2, #19
 80011c6:	4313      	orrs	r3, r2
 80011c8:	e78b      	b.n	80010e2 <__aeabi_fsub+0x256>
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	fbffffff 	.word	0xfbffffff
 80011d0:	7dffffff 	.word	0x7dffffff

080011d4 <__aeabi_f2iz>:
 80011d4:	0241      	lsls	r1, r0, #9
 80011d6:	0042      	lsls	r2, r0, #1
 80011d8:	0fc3      	lsrs	r3, r0, #31
 80011da:	0a49      	lsrs	r1, r1, #9
 80011dc:	2000      	movs	r0, #0
 80011de:	0e12      	lsrs	r2, r2, #24
 80011e0:	2a7e      	cmp	r2, #126	@ 0x7e
 80011e2:	dd03      	ble.n	80011ec <__aeabi_f2iz+0x18>
 80011e4:	2a9d      	cmp	r2, #157	@ 0x9d
 80011e6:	dd02      	ble.n	80011ee <__aeabi_f2iz+0x1a>
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <__aeabi_f2iz+0x3c>)
 80011ea:	1898      	adds	r0, r3, r2
 80011ec:	4770      	bx	lr
 80011ee:	2080      	movs	r0, #128	@ 0x80
 80011f0:	0400      	lsls	r0, r0, #16
 80011f2:	4301      	orrs	r1, r0
 80011f4:	2a95      	cmp	r2, #149	@ 0x95
 80011f6:	dc07      	bgt.n	8001208 <__aeabi_f2iz+0x34>
 80011f8:	2096      	movs	r0, #150	@ 0x96
 80011fa:	1a82      	subs	r2, r0, r2
 80011fc:	40d1      	lsrs	r1, r2
 80011fe:	4248      	negs	r0, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <__aeabi_f2iz+0x18>
 8001204:	0008      	movs	r0, r1
 8001206:	e7f1      	b.n	80011ec <__aeabi_f2iz+0x18>
 8001208:	3a96      	subs	r2, #150	@ 0x96
 800120a:	4091      	lsls	r1, r2
 800120c:	e7f7      	b.n	80011fe <__aeabi_f2iz+0x2a>
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	7fffffff 	.word	0x7fffffff

08001214 <__aeabi_i2f>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2800      	cmp	r0, #0
 8001218:	d013      	beq.n	8001242 <__aeabi_i2f+0x2e>
 800121a:	17c3      	asrs	r3, r0, #31
 800121c:	18c5      	adds	r5, r0, r3
 800121e:	405d      	eors	r5, r3
 8001220:	0fc4      	lsrs	r4, r0, #31
 8001222:	0028      	movs	r0, r5
 8001224:	f001 ffca 	bl	80031bc <__clzsi2>
 8001228:	239e      	movs	r3, #158	@ 0x9e
 800122a:	0001      	movs	r1, r0
 800122c:	1a1b      	subs	r3, r3, r0
 800122e:	2b96      	cmp	r3, #150	@ 0x96
 8001230:	dc0f      	bgt.n	8001252 <__aeabi_i2f+0x3e>
 8001232:	2808      	cmp	r0, #8
 8001234:	d034      	beq.n	80012a0 <__aeabi_i2f+0x8c>
 8001236:	3908      	subs	r1, #8
 8001238:	408d      	lsls	r5, r1
 800123a:	026d      	lsls	r5, r5, #9
 800123c:	0a6d      	lsrs	r5, r5, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e002      	b.n	8001248 <__aeabi_i2f+0x34>
 8001242:	2400      	movs	r4, #0
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4320      	orrs	r0, r4
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b99      	cmp	r3, #153	@ 0x99
 8001254:	dc16      	bgt.n	8001284 <__aeabi_i2f+0x70>
 8001256:	1f42      	subs	r2, r0, #5
 8001258:	2805      	cmp	r0, #5
 800125a:	d000      	beq.n	800125e <__aeabi_i2f+0x4a>
 800125c:	4095      	lsls	r5, r2
 800125e:	002a      	movs	r2, r5
 8001260:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <__aeabi_i2f+0x94>)
 8001262:	4002      	ands	r2, r0
 8001264:	076e      	lsls	r6, r5, #29
 8001266:	d009      	beq.n	800127c <__aeabi_i2f+0x68>
 8001268:	260f      	movs	r6, #15
 800126a:	4035      	ands	r5, r6
 800126c:	2d04      	cmp	r5, #4
 800126e:	d005      	beq.n	800127c <__aeabi_i2f+0x68>
 8001270:	3204      	adds	r2, #4
 8001272:	0155      	lsls	r5, r2, #5
 8001274:	d502      	bpl.n	800127c <__aeabi_i2f+0x68>
 8001276:	239f      	movs	r3, #159	@ 0x9f
 8001278:	4002      	ands	r2, r0
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	0192      	lsls	r2, r2, #6
 800127e:	0a55      	lsrs	r5, r2, #9
 8001280:	b2d8      	uxtb	r0, r3
 8001282:	e7e1      	b.n	8001248 <__aeabi_i2f+0x34>
 8001284:	2205      	movs	r2, #5
 8001286:	1a12      	subs	r2, r2, r0
 8001288:	0028      	movs	r0, r5
 800128a:	40d0      	lsrs	r0, r2
 800128c:	0002      	movs	r2, r0
 800128e:	0008      	movs	r0, r1
 8001290:	301b      	adds	r0, #27
 8001292:	4085      	lsls	r5, r0
 8001294:	0028      	movs	r0, r5
 8001296:	1e45      	subs	r5, r0, #1
 8001298:	41a8      	sbcs	r0, r5
 800129a:	4302      	orrs	r2, r0
 800129c:	0015      	movs	r5, r2
 800129e:	e7de      	b.n	800125e <__aeabi_i2f+0x4a>
 80012a0:	026d      	lsls	r5, r5, #9
 80012a2:	2096      	movs	r0, #150	@ 0x96
 80012a4:	0a6d      	lsrs	r5, r5, #9
 80012a6:	e7cf      	b.n	8001248 <__aeabi_i2f+0x34>
 80012a8:	fbffffff 	.word	0xfbffffff

080012ac <__aeabi_dadd>:
 80012ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ae:	4657      	mov	r7, sl
 80012b0:	464e      	mov	r6, r9
 80012b2:	4645      	mov	r5, r8
 80012b4:	46de      	mov	lr, fp
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	b083      	sub	sp, #12
 80012ba:	9000      	str	r0, [sp, #0]
 80012bc:	9101      	str	r1, [sp, #4]
 80012be:	030c      	lsls	r4, r1, #12
 80012c0:	004f      	lsls	r7, r1, #1
 80012c2:	0fce      	lsrs	r6, r1, #31
 80012c4:	0a61      	lsrs	r1, r4, #9
 80012c6:	9c00      	ldr	r4, [sp, #0]
 80012c8:	031d      	lsls	r5, r3, #12
 80012ca:	0f64      	lsrs	r4, r4, #29
 80012cc:	430c      	orrs	r4, r1
 80012ce:	9900      	ldr	r1, [sp, #0]
 80012d0:	9200      	str	r2, [sp, #0]
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	00c8      	lsls	r0, r1, #3
 80012d6:	0059      	lsls	r1, r3, #1
 80012d8:	0d4b      	lsrs	r3, r1, #21
 80012da:	4699      	mov	r9, r3
 80012dc:	9a00      	ldr	r2, [sp, #0]
 80012de:	9b01      	ldr	r3, [sp, #4]
 80012e0:	0a6d      	lsrs	r5, r5, #9
 80012e2:	0fd9      	lsrs	r1, r3, #31
 80012e4:	0f53      	lsrs	r3, r2, #29
 80012e6:	432b      	orrs	r3, r5
 80012e8:	469a      	mov	sl, r3
 80012ea:	9b00      	ldr	r3, [sp, #0]
 80012ec:	0d7f      	lsrs	r7, r7, #21
 80012ee:	00da      	lsls	r2, r3, #3
 80012f0:	4694      	mov	ip, r2
 80012f2:	464a      	mov	r2, r9
 80012f4:	46b0      	mov	r8, r6
 80012f6:	1aba      	subs	r2, r7, r2
 80012f8:	428e      	cmp	r6, r1
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x52>
 80012fc:	e0b0      	b.n	8001460 <__aeabi_dadd+0x1b4>
 80012fe:	2a00      	cmp	r2, #0
 8001300:	dc00      	bgt.n	8001304 <__aeabi_dadd+0x58>
 8001302:	e078      	b.n	80013f6 <__aeabi_dadd+0x14a>
 8001304:	4649      	mov	r1, r9
 8001306:	2900      	cmp	r1, #0
 8001308:	d100      	bne.n	800130c <__aeabi_dadd+0x60>
 800130a:	e0e9      	b.n	80014e0 <__aeabi_dadd+0x234>
 800130c:	49c9      	ldr	r1, [pc, #804]	@ (8001634 <__aeabi_dadd+0x388>)
 800130e:	428f      	cmp	r7, r1
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x68>
 8001312:	e195      	b.n	8001640 <__aeabi_dadd+0x394>
 8001314:	2501      	movs	r5, #1
 8001316:	2a38      	cmp	r2, #56	@ 0x38
 8001318:	dc16      	bgt.n	8001348 <__aeabi_dadd+0x9c>
 800131a:	2180      	movs	r1, #128	@ 0x80
 800131c:	4653      	mov	r3, sl
 800131e:	0409      	lsls	r1, r1, #16
 8001320:	430b      	orrs	r3, r1
 8001322:	469a      	mov	sl, r3
 8001324:	2a1f      	cmp	r2, #31
 8001326:	dd00      	ble.n	800132a <__aeabi_dadd+0x7e>
 8001328:	e1e7      	b.n	80016fa <__aeabi_dadd+0x44e>
 800132a:	2120      	movs	r1, #32
 800132c:	4655      	mov	r5, sl
 800132e:	1a8b      	subs	r3, r1, r2
 8001330:	4661      	mov	r1, ip
 8001332:	409d      	lsls	r5, r3
 8001334:	40d1      	lsrs	r1, r2
 8001336:	430d      	orrs	r5, r1
 8001338:	4661      	mov	r1, ip
 800133a:	4099      	lsls	r1, r3
 800133c:	1e4b      	subs	r3, r1, #1
 800133e:	4199      	sbcs	r1, r3
 8001340:	4653      	mov	r3, sl
 8001342:	40d3      	lsrs	r3, r2
 8001344:	430d      	orrs	r5, r1
 8001346:	1ae4      	subs	r4, r4, r3
 8001348:	1b45      	subs	r5, r0, r5
 800134a:	42a8      	cmp	r0, r5
 800134c:	4180      	sbcs	r0, r0
 800134e:	4240      	negs	r0, r0
 8001350:	1a24      	subs	r4, r4, r0
 8001352:	0223      	lsls	r3, r4, #8
 8001354:	d400      	bmi.n	8001358 <__aeabi_dadd+0xac>
 8001356:	e10f      	b.n	8001578 <__aeabi_dadd+0x2cc>
 8001358:	0264      	lsls	r4, r4, #9
 800135a:	0a64      	lsrs	r4, r4, #9
 800135c:	2c00      	cmp	r4, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0xb6>
 8001360:	e139      	b.n	80015d6 <__aeabi_dadd+0x32a>
 8001362:	0020      	movs	r0, r4
 8001364:	f001 ff2a 	bl	80031bc <__clzsi2>
 8001368:	0003      	movs	r3, r0
 800136a:	3b08      	subs	r3, #8
 800136c:	2120      	movs	r1, #32
 800136e:	0028      	movs	r0, r5
 8001370:	1aca      	subs	r2, r1, r3
 8001372:	40d0      	lsrs	r0, r2
 8001374:	409c      	lsls	r4, r3
 8001376:	0002      	movs	r2, r0
 8001378:	409d      	lsls	r5, r3
 800137a:	4322      	orrs	r2, r4
 800137c:	429f      	cmp	r7, r3
 800137e:	dd00      	ble.n	8001382 <__aeabi_dadd+0xd6>
 8001380:	e173      	b.n	800166a <__aeabi_dadd+0x3be>
 8001382:	1bd8      	subs	r0, r3, r7
 8001384:	3001      	adds	r0, #1
 8001386:	1a09      	subs	r1, r1, r0
 8001388:	002c      	movs	r4, r5
 800138a:	408d      	lsls	r5, r1
 800138c:	40c4      	lsrs	r4, r0
 800138e:	1e6b      	subs	r3, r5, #1
 8001390:	419d      	sbcs	r5, r3
 8001392:	0013      	movs	r3, r2
 8001394:	40c2      	lsrs	r2, r0
 8001396:	408b      	lsls	r3, r1
 8001398:	4325      	orrs	r5, r4
 800139a:	2700      	movs	r7, #0
 800139c:	0014      	movs	r4, r2
 800139e:	431d      	orrs	r5, r3
 80013a0:	076b      	lsls	r3, r5, #29
 80013a2:	d009      	beq.n	80013b8 <__aeabi_dadd+0x10c>
 80013a4:	230f      	movs	r3, #15
 80013a6:	402b      	ands	r3, r5
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d005      	beq.n	80013b8 <__aeabi_dadd+0x10c>
 80013ac:	1d2b      	adds	r3, r5, #4
 80013ae:	42ab      	cmp	r3, r5
 80013b0:	41ad      	sbcs	r5, r5
 80013b2:	426d      	negs	r5, r5
 80013b4:	1964      	adds	r4, r4, r5
 80013b6:	001d      	movs	r5, r3
 80013b8:	0223      	lsls	r3, r4, #8
 80013ba:	d400      	bmi.n	80013be <__aeabi_dadd+0x112>
 80013bc:	e12d      	b.n	800161a <__aeabi_dadd+0x36e>
 80013be:	4a9d      	ldr	r2, [pc, #628]	@ (8001634 <__aeabi_dadd+0x388>)
 80013c0:	3701      	adds	r7, #1
 80013c2:	4297      	cmp	r7, r2
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x11c>
 80013c6:	e0d3      	b.n	8001570 <__aeabi_dadd+0x2c4>
 80013c8:	4646      	mov	r6, r8
 80013ca:	499b      	ldr	r1, [pc, #620]	@ (8001638 <__aeabi_dadd+0x38c>)
 80013cc:	08ed      	lsrs	r5, r5, #3
 80013ce:	4021      	ands	r1, r4
 80013d0:	074a      	lsls	r2, r1, #29
 80013d2:	432a      	orrs	r2, r5
 80013d4:	057c      	lsls	r4, r7, #21
 80013d6:	024d      	lsls	r5, r1, #9
 80013d8:	0b2d      	lsrs	r5, r5, #12
 80013da:	0d64      	lsrs	r4, r4, #21
 80013dc:	0524      	lsls	r4, r4, #20
 80013de:	432c      	orrs	r4, r5
 80013e0:	07f6      	lsls	r6, r6, #31
 80013e2:	4334      	orrs	r4, r6
 80013e4:	0010      	movs	r0, r2
 80013e6:	0021      	movs	r1, r4
 80013e8:	b003      	add	sp, #12
 80013ea:	bcf0      	pop	{r4, r5, r6, r7}
 80013ec:	46bb      	mov	fp, r7
 80013ee:	46b2      	mov	sl, r6
 80013f0:	46a9      	mov	r9, r5
 80013f2:	46a0      	mov	r8, r4
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_dadd+0x150>
 80013fa:	e084      	b.n	8001506 <__aeabi_dadd+0x25a>
 80013fc:	464a      	mov	r2, r9
 80013fe:	1bd2      	subs	r2, r2, r7
 8001400:	2f00      	cmp	r7, #0
 8001402:	d000      	beq.n	8001406 <__aeabi_dadd+0x15a>
 8001404:	e16d      	b.n	80016e2 <__aeabi_dadd+0x436>
 8001406:	0025      	movs	r5, r4
 8001408:	4305      	orrs	r5, r0
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x162>
 800140c:	e127      	b.n	800165e <__aeabi_dadd+0x3b2>
 800140e:	1e56      	subs	r6, r2, #1
 8001410:	2a01      	cmp	r2, #1
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x16a>
 8001414:	e23b      	b.n	800188e <__aeabi_dadd+0x5e2>
 8001416:	4d87      	ldr	r5, [pc, #540]	@ (8001634 <__aeabi_dadd+0x388>)
 8001418:	42aa      	cmp	r2, r5
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x172>
 800141c:	e26a      	b.n	80018f4 <__aeabi_dadd+0x648>
 800141e:	2501      	movs	r5, #1
 8001420:	2e38      	cmp	r6, #56	@ 0x38
 8001422:	dc12      	bgt.n	800144a <__aeabi_dadd+0x19e>
 8001424:	0032      	movs	r2, r6
 8001426:	2a1f      	cmp	r2, #31
 8001428:	dd00      	ble.n	800142c <__aeabi_dadd+0x180>
 800142a:	e1f8      	b.n	800181e <__aeabi_dadd+0x572>
 800142c:	2620      	movs	r6, #32
 800142e:	0025      	movs	r5, r4
 8001430:	1ab6      	subs	r6, r6, r2
 8001432:	0007      	movs	r7, r0
 8001434:	4653      	mov	r3, sl
 8001436:	40b0      	lsls	r0, r6
 8001438:	40d4      	lsrs	r4, r2
 800143a:	40b5      	lsls	r5, r6
 800143c:	40d7      	lsrs	r7, r2
 800143e:	1e46      	subs	r6, r0, #1
 8001440:	41b0      	sbcs	r0, r6
 8001442:	1b1b      	subs	r3, r3, r4
 8001444:	469a      	mov	sl, r3
 8001446:	433d      	orrs	r5, r7
 8001448:	4305      	orrs	r5, r0
 800144a:	4662      	mov	r2, ip
 800144c:	1b55      	subs	r5, r2, r5
 800144e:	45ac      	cmp	ip, r5
 8001450:	4192      	sbcs	r2, r2
 8001452:	4653      	mov	r3, sl
 8001454:	4252      	negs	r2, r2
 8001456:	000e      	movs	r6, r1
 8001458:	464f      	mov	r7, r9
 800145a:	4688      	mov	r8, r1
 800145c:	1a9c      	subs	r4, r3, r2
 800145e:	e778      	b.n	8001352 <__aeabi_dadd+0xa6>
 8001460:	2a00      	cmp	r2, #0
 8001462:	dc00      	bgt.n	8001466 <__aeabi_dadd+0x1ba>
 8001464:	e08e      	b.n	8001584 <__aeabi_dadd+0x2d8>
 8001466:	4649      	mov	r1, r9
 8001468:	2900      	cmp	r1, #0
 800146a:	d175      	bne.n	8001558 <__aeabi_dadd+0x2ac>
 800146c:	4661      	mov	r1, ip
 800146e:	4653      	mov	r3, sl
 8001470:	4319      	orrs	r1, r3
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x1ca>
 8001474:	e0f6      	b.n	8001664 <__aeabi_dadd+0x3b8>
 8001476:	1e51      	subs	r1, r2, #1
 8001478:	2a01      	cmp	r2, #1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x1d2>
 800147c:	e191      	b.n	80017a2 <__aeabi_dadd+0x4f6>
 800147e:	4d6d      	ldr	r5, [pc, #436]	@ (8001634 <__aeabi_dadd+0x388>)
 8001480:	42aa      	cmp	r2, r5
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x1da>
 8001484:	e0dc      	b.n	8001640 <__aeabi_dadd+0x394>
 8001486:	2501      	movs	r5, #1
 8001488:	2938      	cmp	r1, #56	@ 0x38
 800148a:	dc14      	bgt.n	80014b6 <__aeabi_dadd+0x20a>
 800148c:	000a      	movs	r2, r1
 800148e:	2a1f      	cmp	r2, #31
 8001490:	dd00      	ble.n	8001494 <__aeabi_dadd+0x1e8>
 8001492:	e1a2      	b.n	80017da <__aeabi_dadd+0x52e>
 8001494:	2120      	movs	r1, #32
 8001496:	4653      	mov	r3, sl
 8001498:	1a89      	subs	r1, r1, r2
 800149a:	408b      	lsls	r3, r1
 800149c:	001d      	movs	r5, r3
 800149e:	4663      	mov	r3, ip
 80014a0:	40d3      	lsrs	r3, r2
 80014a2:	431d      	orrs	r5, r3
 80014a4:	4663      	mov	r3, ip
 80014a6:	408b      	lsls	r3, r1
 80014a8:	0019      	movs	r1, r3
 80014aa:	1e4b      	subs	r3, r1, #1
 80014ac:	4199      	sbcs	r1, r3
 80014ae:	4653      	mov	r3, sl
 80014b0:	40d3      	lsrs	r3, r2
 80014b2:	430d      	orrs	r5, r1
 80014b4:	18e4      	adds	r4, r4, r3
 80014b6:	182d      	adds	r5, r5, r0
 80014b8:	4285      	cmp	r5, r0
 80014ba:	4180      	sbcs	r0, r0
 80014bc:	4240      	negs	r0, r0
 80014be:	1824      	adds	r4, r4, r0
 80014c0:	0223      	lsls	r3, r4, #8
 80014c2:	d559      	bpl.n	8001578 <__aeabi_dadd+0x2cc>
 80014c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001634 <__aeabi_dadd+0x388>)
 80014c6:	3701      	adds	r7, #1
 80014c8:	429f      	cmp	r7, r3
 80014ca:	d051      	beq.n	8001570 <__aeabi_dadd+0x2c4>
 80014cc:	2101      	movs	r1, #1
 80014ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001638 <__aeabi_dadd+0x38c>)
 80014d0:	086a      	lsrs	r2, r5, #1
 80014d2:	401c      	ands	r4, r3
 80014d4:	4029      	ands	r1, r5
 80014d6:	430a      	orrs	r2, r1
 80014d8:	07e5      	lsls	r5, r4, #31
 80014da:	4315      	orrs	r5, r2
 80014dc:	0864      	lsrs	r4, r4, #1
 80014de:	e75f      	b.n	80013a0 <__aeabi_dadd+0xf4>
 80014e0:	4661      	mov	r1, ip
 80014e2:	4653      	mov	r3, sl
 80014e4:	4319      	orrs	r1, r3
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x23e>
 80014e8:	e0bc      	b.n	8001664 <__aeabi_dadd+0x3b8>
 80014ea:	1e51      	subs	r1, r2, #1
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x246>
 80014f0:	e164      	b.n	80017bc <__aeabi_dadd+0x510>
 80014f2:	4d50      	ldr	r5, [pc, #320]	@ (8001634 <__aeabi_dadd+0x388>)
 80014f4:	42aa      	cmp	r2, r5
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x24e>
 80014f8:	e16a      	b.n	80017d0 <__aeabi_dadd+0x524>
 80014fa:	2501      	movs	r5, #1
 80014fc:	2938      	cmp	r1, #56	@ 0x38
 80014fe:	dd00      	ble.n	8001502 <__aeabi_dadd+0x256>
 8001500:	e722      	b.n	8001348 <__aeabi_dadd+0x9c>
 8001502:	000a      	movs	r2, r1
 8001504:	e70e      	b.n	8001324 <__aeabi_dadd+0x78>
 8001506:	4a4d      	ldr	r2, [pc, #308]	@ (800163c <__aeabi_dadd+0x390>)
 8001508:	1c7d      	adds	r5, r7, #1
 800150a:	4215      	tst	r5, r2
 800150c:	d000      	beq.n	8001510 <__aeabi_dadd+0x264>
 800150e:	e0d0      	b.n	80016b2 <__aeabi_dadd+0x406>
 8001510:	0025      	movs	r5, r4
 8001512:	4662      	mov	r2, ip
 8001514:	4653      	mov	r3, sl
 8001516:	4305      	orrs	r5, r0
 8001518:	431a      	orrs	r2, r3
 800151a:	2f00      	cmp	r7, #0
 800151c:	d000      	beq.n	8001520 <__aeabi_dadd+0x274>
 800151e:	e137      	b.n	8001790 <__aeabi_dadd+0x4e4>
 8001520:	2d00      	cmp	r5, #0
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x27a>
 8001524:	e1a8      	b.n	8001878 <__aeabi_dadd+0x5cc>
 8001526:	2a00      	cmp	r2, #0
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x280>
 800152a:	e16a      	b.n	8001802 <__aeabi_dadd+0x556>
 800152c:	4663      	mov	r3, ip
 800152e:	1ac5      	subs	r5, r0, r3
 8001530:	4653      	mov	r3, sl
 8001532:	1ae2      	subs	r2, r4, r3
 8001534:	42a8      	cmp	r0, r5
 8001536:	419b      	sbcs	r3, r3
 8001538:	425b      	negs	r3, r3
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	021a      	lsls	r2, r3, #8
 800153e:	d400      	bmi.n	8001542 <__aeabi_dadd+0x296>
 8001540:	e203      	b.n	800194a <__aeabi_dadd+0x69e>
 8001542:	4663      	mov	r3, ip
 8001544:	1a1d      	subs	r5, r3, r0
 8001546:	45ac      	cmp	ip, r5
 8001548:	4192      	sbcs	r2, r2
 800154a:	4653      	mov	r3, sl
 800154c:	4252      	negs	r2, r2
 800154e:	1b1c      	subs	r4, r3, r4
 8001550:	000e      	movs	r6, r1
 8001552:	4688      	mov	r8, r1
 8001554:	1aa4      	subs	r4, r4, r2
 8001556:	e723      	b.n	80013a0 <__aeabi_dadd+0xf4>
 8001558:	4936      	ldr	r1, [pc, #216]	@ (8001634 <__aeabi_dadd+0x388>)
 800155a:	428f      	cmp	r7, r1
 800155c:	d070      	beq.n	8001640 <__aeabi_dadd+0x394>
 800155e:	2501      	movs	r5, #1
 8001560:	2a38      	cmp	r2, #56	@ 0x38
 8001562:	dca8      	bgt.n	80014b6 <__aeabi_dadd+0x20a>
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	4653      	mov	r3, sl
 8001568:	0409      	lsls	r1, r1, #16
 800156a:	430b      	orrs	r3, r1
 800156c:	469a      	mov	sl, r3
 800156e:	e78e      	b.n	800148e <__aeabi_dadd+0x1e2>
 8001570:	003c      	movs	r4, r7
 8001572:	2500      	movs	r5, #0
 8001574:	2200      	movs	r2, #0
 8001576:	e731      	b.n	80013dc <__aeabi_dadd+0x130>
 8001578:	2307      	movs	r3, #7
 800157a:	402b      	ands	r3, r5
 800157c:	2b00      	cmp	r3, #0
 800157e:	d000      	beq.n	8001582 <__aeabi_dadd+0x2d6>
 8001580:	e710      	b.n	80013a4 <__aeabi_dadd+0xf8>
 8001582:	e093      	b.n	80016ac <__aeabi_dadd+0x400>
 8001584:	2a00      	cmp	r2, #0
 8001586:	d074      	beq.n	8001672 <__aeabi_dadd+0x3c6>
 8001588:	464a      	mov	r2, r9
 800158a:	1bd2      	subs	r2, r2, r7
 800158c:	2f00      	cmp	r7, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x2e6>
 8001590:	e0c7      	b.n	8001722 <__aeabi_dadd+0x476>
 8001592:	4928      	ldr	r1, [pc, #160]	@ (8001634 <__aeabi_dadd+0x388>)
 8001594:	4589      	cmp	r9, r1
 8001596:	d100      	bne.n	800159a <__aeabi_dadd+0x2ee>
 8001598:	e185      	b.n	80018a6 <__aeabi_dadd+0x5fa>
 800159a:	2501      	movs	r5, #1
 800159c:	2a38      	cmp	r2, #56	@ 0x38
 800159e:	dc12      	bgt.n	80015c6 <__aeabi_dadd+0x31a>
 80015a0:	2180      	movs	r1, #128	@ 0x80
 80015a2:	0409      	lsls	r1, r1, #16
 80015a4:	430c      	orrs	r4, r1
 80015a6:	2a1f      	cmp	r2, #31
 80015a8:	dd00      	ble.n	80015ac <__aeabi_dadd+0x300>
 80015aa:	e1ab      	b.n	8001904 <__aeabi_dadd+0x658>
 80015ac:	2120      	movs	r1, #32
 80015ae:	0025      	movs	r5, r4
 80015b0:	1a89      	subs	r1, r1, r2
 80015b2:	0007      	movs	r7, r0
 80015b4:	4088      	lsls	r0, r1
 80015b6:	408d      	lsls	r5, r1
 80015b8:	40d7      	lsrs	r7, r2
 80015ba:	1e41      	subs	r1, r0, #1
 80015bc:	4188      	sbcs	r0, r1
 80015be:	40d4      	lsrs	r4, r2
 80015c0:	433d      	orrs	r5, r7
 80015c2:	4305      	orrs	r5, r0
 80015c4:	44a2      	add	sl, r4
 80015c6:	4465      	add	r5, ip
 80015c8:	4565      	cmp	r5, ip
 80015ca:	4192      	sbcs	r2, r2
 80015cc:	4252      	negs	r2, r2
 80015ce:	4452      	add	r2, sl
 80015d0:	0014      	movs	r4, r2
 80015d2:	464f      	mov	r7, r9
 80015d4:	e774      	b.n	80014c0 <__aeabi_dadd+0x214>
 80015d6:	0028      	movs	r0, r5
 80015d8:	f001 fdf0 	bl	80031bc <__clzsi2>
 80015dc:	0003      	movs	r3, r0
 80015de:	3318      	adds	r3, #24
 80015e0:	2b1f      	cmp	r3, #31
 80015e2:	dc00      	bgt.n	80015e6 <__aeabi_dadd+0x33a>
 80015e4:	e6c2      	b.n	800136c <__aeabi_dadd+0xc0>
 80015e6:	002a      	movs	r2, r5
 80015e8:	3808      	subs	r0, #8
 80015ea:	4082      	lsls	r2, r0
 80015ec:	429f      	cmp	r7, r3
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_dadd+0x346>
 80015f0:	e0a9      	b.n	8001746 <__aeabi_dadd+0x49a>
 80015f2:	1bdb      	subs	r3, r3, r7
 80015f4:	1c58      	adds	r0, r3, #1
 80015f6:	281f      	cmp	r0, #31
 80015f8:	dc00      	bgt.n	80015fc <__aeabi_dadd+0x350>
 80015fa:	e1ac      	b.n	8001956 <__aeabi_dadd+0x6aa>
 80015fc:	0015      	movs	r5, r2
 80015fe:	3b1f      	subs	r3, #31
 8001600:	40dd      	lsrs	r5, r3
 8001602:	2820      	cmp	r0, #32
 8001604:	d005      	beq.n	8001612 <__aeabi_dadd+0x366>
 8001606:	2340      	movs	r3, #64	@ 0x40
 8001608:	1a1b      	subs	r3, r3, r0
 800160a:	409a      	lsls	r2, r3
 800160c:	1e53      	subs	r3, r2, #1
 800160e:	419a      	sbcs	r2, r3
 8001610:	4315      	orrs	r5, r2
 8001612:	2307      	movs	r3, #7
 8001614:	2700      	movs	r7, #0
 8001616:	402b      	ands	r3, r5
 8001618:	e7b0      	b.n	800157c <__aeabi_dadd+0x2d0>
 800161a:	08ed      	lsrs	r5, r5, #3
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <__aeabi_dadd+0x388>)
 800161e:	0762      	lsls	r2, r4, #29
 8001620:	432a      	orrs	r2, r5
 8001622:	08e4      	lsrs	r4, r4, #3
 8001624:	429f      	cmp	r7, r3
 8001626:	d00f      	beq.n	8001648 <__aeabi_dadd+0x39c>
 8001628:	0324      	lsls	r4, r4, #12
 800162a:	0b25      	lsrs	r5, r4, #12
 800162c:	057c      	lsls	r4, r7, #21
 800162e:	0d64      	lsrs	r4, r4, #21
 8001630:	e6d4      	b.n	80013dc <__aeabi_dadd+0x130>
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	000007ff 	.word	0x000007ff
 8001638:	ff7fffff 	.word	0xff7fffff
 800163c:	000007fe 	.word	0x000007fe
 8001640:	08c0      	lsrs	r0, r0, #3
 8001642:	0762      	lsls	r2, r4, #29
 8001644:	4302      	orrs	r2, r0
 8001646:	08e4      	lsrs	r4, r4, #3
 8001648:	0013      	movs	r3, r2
 800164a:	4323      	orrs	r3, r4
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x3a4>
 800164e:	e186      	b.n	800195e <__aeabi_dadd+0x6b2>
 8001650:	2580      	movs	r5, #128	@ 0x80
 8001652:	032d      	lsls	r5, r5, #12
 8001654:	4325      	orrs	r5, r4
 8001656:	032d      	lsls	r5, r5, #12
 8001658:	4cc3      	ldr	r4, [pc, #780]	@ (8001968 <__aeabi_dadd+0x6bc>)
 800165a:	0b2d      	lsrs	r5, r5, #12
 800165c:	e6be      	b.n	80013dc <__aeabi_dadd+0x130>
 800165e:	4660      	mov	r0, ip
 8001660:	4654      	mov	r4, sl
 8001662:	000e      	movs	r6, r1
 8001664:	0017      	movs	r7, r2
 8001666:	08c5      	lsrs	r5, r0, #3
 8001668:	e7d8      	b.n	800161c <__aeabi_dadd+0x370>
 800166a:	4cc0      	ldr	r4, [pc, #768]	@ (800196c <__aeabi_dadd+0x6c0>)
 800166c:	1aff      	subs	r7, r7, r3
 800166e:	4014      	ands	r4, r2
 8001670:	e696      	b.n	80013a0 <__aeabi_dadd+0xf4>
 8001672:	4abf      	ldr	r2, [pc, #764]	@ (8001970 <__aeabi_dadd+0x6c4>)
 8001674:	1c79      	adds	r1, r7, #1
 8001676:	4211      	tst	r1, r2
 8001678:	d16b      	bne.n	8001752 <__aeabi_dadd+0x4a6>
 800167a:	0022      	movs	r2, r4
 800167c:	4302      	orrs	r2, r0
 800167e:	2f00      	cmp	r7, #0
 8001680:	d000      	beq.n	8001684 <__aeabi_dadd+0x3d8>
 8001682:	e0db      	b.n	800183c <__aeabi_dadd+0x590>
 8001684:	2a00      	cmp	r2, #0
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x3de>
 8001688:	e12d      	b.n	80018e6 <__aeabi_dadd+0x63a>
 800168a:	4662      	mov	r2, ip
 800168c:	4653      	mov	r3, sl
 800168e:	431a      	orrs	r2, r3
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x3e8>
 8001692:	e0b6      	b.n	8001802 <__aeabi_dadd+0x556>
 8001694:	4663      	mov	r3, ip
 8001696:	18c5      	adds	r5, r0, r3
 8001698:	4285      	cmp	r5, r0
 800169a:	4180      	sbcs	r0, r0
 800169c:	4454      	add	r4, sl
 800169e:	4240      	negs	r0, r0
 80016a0:	1824      	adds	r4, r4, r0
 80016a2:	0223      	lsls	r3, r4, #8
 80016a4:	d502      	bpl.n	80016ac <__aeabi_dadd+0x400>
 80016a6:	000f      	movs	r7, r1
 80016a8:	4bb0      	ldr	r3, [pc, #704]	@ (800196c <__aeabi_dadd+0x6c0>)
 80016aa:	401c      	ands	r4, r3
 80016ac:	003a      	movs	r2, r7
 80016ae:	0028      	movs	r0, r5
 80016b0:	e7d8      	b.n	8001664 <__aeabi_dadd+0x3b8>
 80016b2:	4662      	mov	r2, ip
 80016b4:	1a85      	subs	r5, r0, r2
 80016b6:	42a8      	cmp	r0, r5
 80016b8:	4192      	sbcs	r2, r2
 80016ba:	4653      	mov	r3, sl
 80016bc:	4252      	negs	r2, r2
 80016be:	4691      	mov	r9, r2
 80016c0:	1ae3      	subs	r3, r4, r3
 80016c2:	001a      	movs	r2, r3
 80016c4:	464b      	mov	r3, r9
 80016c6:	1ad2      	subs	r2, r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	4691      	mov	r9, r2
 80016cc:	021a      	lsls	r2, r3, #8
 80016ce:	d454      	bmi.n	800177a <__aeabi_dadd+0x4ce>
 80016d0:	464a      	mov	r2, r9
 80016d2:	464c      	mov	r4, r9
 80016d4:	432a      	orrs	r2, r5
 80016d6:	d000      	beq.n	80016da <__aeabi_dadd+0x42e>
 80016d8:	e640      	b.n	800135c <__aeabi_dadd+0xb0>
 80016da:	2600      	movs	r6, #0
 80016dc:	2400      	movs	r4, #0
 80016de:	2500      	movs	r5, #0
 80016e0:	e67c      	b.n	80013dc <__aeabi_dadd+0x130>
 80016e2:	4da1      	ldr	r5, [pc, #644]	@ (8001968 <__aeabi_dadd+0x6bc>)
 80016e4:	45a9      	cmp	r9, r5
 80016e6:	d100      	bne.n	80016ea <__aeabi_dadd+0x43e>
 80016e8:	e090      	b.n	800180c <__aeabi_dadd+0x560>
 80016ea:	2501      	movs	r5, #1
 80016ec:	2a38      	cmp	r2, #56	@ 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dadd+0x446>
 80016f0:	e6ab      	b.n	800144a <__aeabi_dadd+0x19e>
 80016f2:	2580      	movs	r5, #128	@ 0x80
 80016f4:	042d      	lsls	r5, r5, #16
 80016f6:	432c      	orrs	r4, r5
 80016f8:	e695      	b.n	8001426 <__aeabi_dadd+0x17a>
 80016fa:	0011      	movs	r1, r2
 80016fc:	4655      	mov	r5, sl
 80016fe:	3920      	subs	r1, #32
 8001700:	40cd      	lsrs	r5, r1
 8001702:	46a9      	mov	r9, r5
 8001704:	2a20      	cmp	r2, #32
 8001706:	d006      	beq.n	8001716 <__aeabi_dadd+0x46a>
 8001708:	2140      	movs	r1, #64	@ 0x40
 800170a:	4653      	mov	r3, sl
 800170c:	1a8a      	subs	r2, r1, r2
 800170e:	4093      	lsls	r3, r2
 8001710:	4662      	mov	r2, ip
 8001712:	431a      	orrs	r2, r3
 8001714:	4694      	mov	ip, r2
 8001716:	4665      	mov	r5, ip
 8001718:	1e6b      	subs	r3, r5, #1
 800171a:	419d      	sbcs	r5, r3
 800171c:	464b      	mov	r3, r9
 800171e:	431d      	orrs	r5, r3
 8001720:	e612      	b.n	8001348 <__aeabi_dadd+0x9c>
 8001722:	0021      	movs	r1, r4
 8001724:	4301      	orrs	r1, r0
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x47e>
 8001728:	e0c4      	b.n	80018b4 <__aeabi_dadd+0x608>
 800172a:	1e51      	subs	r1, r2, #1
 800172c:	2a01      	cmp	r2, #1
 800172e:	d100      	bne.n	8001732 <__aeabi_dadd+0x486>
 8001730:	e0fb      	b.n	800192a <__aeabi_dadd+0x67e>
 8001732:	4d8d      	ldr	r5, [pc, #564]	@ (8001968 <__aeabi_dadd+0x6bc>)
 8001734:	42aa      	cmp	r2, r5
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x48e>
 8001738:	e0b5      	b.n	80018a6 <__aeabi_dadd+0x5fa>
 800173a:	2501      	movs	r5, #1
 800173c:	2938      	cmp	r1, #56	@ 0x38
 800173e:	dd00      	ble.n	8001742 <__aeabi_dadd+0x496>
 8001740:	e741      	b.n	80015c6 <__aeabi_dadd+0x31a>
 8001742:	000a      	movs	r2, r1
 8001744:	e72f      	b.n	80015a6 <__aeabi_dadd+0x2fa>
 8001746:	4c89      	ldr	r4, [pc, #548]	@ (800196c <__aeabi_dadd+0x6c0>)
 8001748:	1aff      	subs	r7, r7, r3
 800174a:	4014      	ands	r4, r2
 800174c:	0762      	lsls	r2, r4, #29
 800174e:	08e4      	lsrs	r4, r4, #3
 8001750:	e76a      	b.n	8001628 <__aeabi_dadd+0x37c>
 8001752:	4a85      	ldr	r2, [pc, #532]	@ (8001968 <__aeabi_dadd+0x6bc>)
 8001754:	4291      	cmp	r1, r2
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x4ae>
 8001758:	e0e3      	b.n	8001922 <__aeabi_dadd+0x676>
 800175a:	4663      	mov	r3, ip
 800175c:	18c2      	adds	r2, r0, r3
 800175e:	4282      	cmp	r2, r0
 8001760:	4180      	sbcs	r0, r0
 8001762:	0023      	movs	r3, r4
 8001764:	4240      	negs	r0, r0
 8001766:	4453      	add	r3, sl
 8001768:	181b      	adds	r3, r3, r0
 800176a:	07dd      	lsls	r5, r3, #31
 800176c:	085c      	lsrs	r4, r3, #1
 800176e:	2307      	movs	r3, #7
 8001770:	0852      	lsrs	r2, r2, #1
 8001772:	4315      	orrs	r5, r2
 8001774:	000f      	movs	r7, r1
 8001776:	402b      	ands	r3, r5
 8001778:	e700      	b.n	800157c <__aeabi_dadd+0x2d0>
 800177a:	4663      	mov	r3, ip
 800177c:	1a1d      	subs	r5, r3, r0
 800177e:	45ac      	cmp	ip, r5
 8001780:	4192      	sbcs	r2, r2
 8001782:	4653      	mov	r3, sl
 8001784:	4252      	negs	r2, r2
 8001786:	1b1c      	subs	r4, r3, r4
 8001788:	000e      	movs	r6, r1
 800178a:	4688      	mov	r8, r1
 800178c:	1aa4      	subs	r4, r4, r2
 800178e:	e5e5      	b.n	800135c <__aeabi_dadd+0xb0>
 8001790:	2d00      	cmp	r5, #0
 8001792:	d000      	beq.n	8001796 <__aeabi_dadd+0x4ea>
 8001794:	e091      	b.n	80018ba <__aeabi_dadd+0x60e>
 8001796:	2a00      	cmp	r2, #0
 8001798:	d138      	bne.n	800180c <__aeabi_dadd+0x560>
 800179a:	2480      	movs	r4, #128	@ 0x80
 800179c:	2600      	movs	r6, #0
 800179e:	0324      	lsls	r4, r4, #12
 80017a0:	e756      	b.n	8001650 <__aeabi_dadd+0x3a4>
 80017a2:	4663      	mov	r3, ip
 80017a4:	18c5      	adds	r5, r0, r3
 80017a6:	4285      	cmp	r5, r0
 80017a8:	4180      	sbcs	r0, r0
 80017aa:	4454      	add	r4, sl
 80017ac:	4240      	negs	r0, r0
 80017ae:	1824      	adds	r4, r4, r0
 80017b0:	2701      	movs	r7, #1
 80017b2:	0223      	lsls	r3, r4, #8
 80017b4:	d400      	bmi.n	80017b8 <__aeabi_dadd+0x50c>
 80017b6:	e6df      	b.n	8001578 <__aeabi_dadd+0x2cc>
 80017b8:	2702      	movs	r7, #2
 80017ba:	e687      	b.n	80014cc <__aeabi_dadd+0x220>
 80017bc:	4663      	mov	r3, ip
 80017be:	1ac5      	subs	r5, r0, r3
 80017c0:	42a8      	cmp	r0, r5
 80017c2:	4180      	sbcs	r0, r0
 80017c4:	4653      	mov	r3, sl
 80017c6:	4240      	negs	r0, r0
 80017c8:	1ae4      	subs	r4, r4, r3
 80017ca:	2701      	movs	r7, #1
 80017cc:	1a24      	subs	r4, r4, r0
 80017ce:	e5c0      	b.n	8001352 <__aeabi_dadd+0xa6>
 80017d0:	0762      	lsls	r2, r4, #29
 80017d2:	08c0      	lsrs	r0, r0, #3
 80017d4:	4302      	orrs	r2, r0
 80017d6:	08e4      	lsrs	r4, r4, #3
 80017d8:	e736      	b.n	8001648 <__aeabi_dadd+0x39c>
 80017da:	0011      	movs	r1, r2
 80017dc:	4653      	mov	r3, sl
 80017de:	3920      	subs	r1, #32
 80017e0:	40cb      	lsrs	r3, r1
 80017e2:	4699      	mov	r9, r3
 80017e4:	2a20      	cmp	r2, #32
 80017e6:	d006      	beq.n	80017f6 <__aeabi_dadd+0x54a>
 80017e8:	2140      	movs	r1, #64	@ 0x40
 80017ea:	4653      	mov	r3, sl
 80017ec:	1a8a      	subs	r2, r1, r2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	4662      	mov	r2, ip
 80017f2:	431a      	orrs	r2, r3
 80017f4:	4694      	mov	ip, r2
 80017f6:	4665      	mov	r5, ip
 80017f8:	1e6b      	subs	r3, r5, #1
 80017fa:	419d      	sbcs	r5, r3
 80017fc:	464b      	mov	r3, r9
 80017fe:	431d      	orrs	r5, r3
 8001800:	e659      	b.n	80014b6 <__aeabi_dadd+0x20a>
 8001802:	0762      	lsls	r2, r4, #29
 8001804:	08c0      	lsrs	r0, r0, #3
 8001806:	4302      	orrs	r2, r0
 8001808:	08e4      	lsrs	r4, r4, #3
 800180a:	e70d      	b.n	8001628 <__aeabi_dadd+0x37c>
 800180c:	4653      	mov	r3, sl
 800180e:	075a      	lsls	r2, r3, #29
 8001810:	4663      	mov	r3, ip
 8001812:	08d8      	lsrs	r0, r3, #3
 8001814:	4653      	mov	r3, sl
 8001816:	000e      	movs	r6, r1
 8001818:	4302      	orrs	r2, r0
 800181a:	08dc      	lsrs	r4, r3, #3
 800181c:	e714      	b.n	8001648 <__aeabi_dadd+0x39c>
 800181e:	0015      	movs	r5, r2
 8001820:	0026      	movs	r6, r4
 8001822:	3d20      	subs	r5, #32
 8001824:	40ee      	lsrs	r6, r5
 8001826:	2a20      	cmp	r2, #32
 8001828:	d003      	beq.n	8001832 <__aeabi_dadd+0x586>
 800182a:	2540      	movs	r5, #64	@ 0x40
 800182c:	1aaa      	subs	r2, r5, r2
 800182e:	4094      	lsls	r4, r2
 8001830:	4320      	orrs	r0, r4
 8001832:	1e42      	subs	r2, r0, #1
 8001834:	4190      	sbcs	r0, r2
 8001836:	0005      	movs	r5, r0
 8001838:	4335      	orrs	r5, r6
 800183a:	e606      	b.n	800144a <__aeabi_dadd+0x19e>
 800183c:	2a00      	cmp	r2, #0
 800183e:	d07c      	beq.n	800193a <__aeabi_dadd+0x68e>
 8001840:	4662      	mov	r2, ip
 8001842:	4653      	mov	r3, sl
 8001844:	08c0      	lsrs	r0, r0, #3
 8001846:	431a      	orrs	r2, r3
 8001848:	d100      	bne.n	800184c <__aeabi_dadd+0x5a0>
 800184a:	e6fa      	b.n	8001642 <__aeabi_dadd+0x396>
 800184c:	0762      	lsls	r2, r4, #29
 800184e:	4310      	orrs	r0, r2
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	08e4      	lsrs	r4, r4, #3
 8001854:	0312      	lsls	r2, r2, #12
 8001856:	4214      	tst	r4, r2
 8001858:	d008      	beq.n	800186c <__aeabi_dadd+0x5c0>
 800185a:	08d9      	lsrs	r1, r3, #3
 800185c:	4211      	tst	r1, r2
 800185e:	d105      	bne.n	800186c <__aeabi_dadd+0x5c0>
 8001860:	4663      	mov	r3, ip
 8001862:	08d8      	lsrs	r0, r3, #3
 8001864:	4653      	mov	r3, sl
 8001866:	000c      	movs	r4, r1
 8001868:	075b      	lsls	r3, r3, #29
 800186a:	4318      	orrs	r0, r3
 800186c:	0f42      	lsrs	r2, r0, #29
 800186e:	00c0      	lsls	r0, r0, #3
 8001870:	08c0      	lsrs	r0, r0, #3
 8001872:	0752      	lsls	r2, r2, #29
 8001874:	4302      	orrs	r2, r0
 8001876:	e6e7      	b.n	8001648 <__aeabi_dadd+0x39c>
 8001878:	2a00      	cmp	r2, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dadd+0x5d2>
 800187c:	e72d      	b.n	80016da <__aeabi_dadd+0x42e>
 800187e:	4663      	mov	r3, ip
 8001880:	08d8      	lsrs	r0, r3, #3
 8001882:	4653      	mov	r3, sl
 8001884:	075a      	lsls	r2, r3, #29
 8001886:	000e      	movs	r6, r1
 8001888:	4302      	orrs	r2, r0
 800188a:	08dc      	lsrs	r4, r3, #3
 800188c:	e6cc      	b.n	8001628 <__aeabi_dadd+0x37c>
 800188e:	4663      	mov	r3, ip
 8001890:	1a1d      	subs	r5, r3, r0
 8001892:	45ac      	cmp	ip, r5
 8001894:	4192      	sbcs	r2, r2
 8001896:	4653      	mov	r3, sl
 8001898:	4252      	negs	r2, r2
 800189a:	1b1c      	subs	r4, r3, r4
 800189c:	000e      	movs	r6, r1
 800189e:	4688      	mov	r8, r1
 80018a0:	1aa4      	subs	r4, r4, r2
 80018a2:	3701      	adds	r7, #1
 80018a4:	e555      	b.n	8001352 <__aeabi_dadd+0xa6>
 80018a6:	4663      	mov	r3, ip
 80018a8:	08d9      	lsrs	r1, r3, #3
 80018aa:	4653      	mov	r3, sl
 80018ac:	075a      	lsls	r2, r3, #29
 80018ae:	430a      	orrs	r2, r1
 80018b0:	08dc      	lsrs	r4, r3, #3
 80018b2:	e6c9      	b.n	8001648 <__aeabi_dadd+0x39c>
 80018b4:	4660      	mov	r0, ip
 80018b6:	4654      	mov	r4, sl
 80018b8:	e6d4      	b.n	8001664 <__aeabi_dadd+0x3b8>
 80018ba:	08c0      	lsrs	r0, r0, #3
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x616>
 80018c0:	e6bf      	b.n	8001642 <__aeabi_dadd+0x396>
 80018c2:	0762      	lsls	r2, r4, #29
 80018c4:	4310      	orrs	r0, r2
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	08e4      	lsrs	r4, r4, #3
 80018ca:	0312      	lsls	r2, r2, #12
 80018cc:	4214      	tst	r4, r2
 80018ce:	d0cd      	beq.n	800186c <__aeabi_dadd+0x5c0>
 80018d0:	08dd      	lsrs	r5, r3, #3
 80018d2:	4215      	tst	r5, r2
 80018d4:	d1ca      	bne.n	800186c <__aeabi_dadd+0x5c0>
 80018d6:	4663      	mov	r3, ip
 80018d8:	08d8      	lsrs	r0, r3, #3
 80018da:	4653      	mov	r3, sl
 80018dc:	075b      	lsls	r3, r3, #29
 80018de:	000e      	movs	r6, r1
 80018e0:	002c      	movs	r4, r5
 80018e2:	4318      	orrs	r0, r3
 80018e4:	e7c2      	b.n	800186c <__aeabi_dadd+0x5c0>
 80018e6:	4663      	mov	r3, ip
 80018e8:	08d9      	lsrs	r1, r3, #3
 80018ea:	4653      	mov	r3, sl
 80018ec:	075a      	lsls	r2, r3, #29
 80018ee:	430a      	orrs	r2, r1
 80018f0:	08dc      	lsrs	r4, r3, #3
 80018f2:	e699      	b.n	8001628 <__aeabi_dadd+0x37c>
 80018f4:	4663      	mov	r3, ip
 80018f6:	08d8      	lsrs	r0, r3, #3
 80018f8:	4653      	mov	r3, sl
 80018fa:	075a      	lsls	r2, r3, #29
 80018fc:	000e      	movs	r6, r1
 80018fe:	4302      	orrs	r2, r0
 8001900:	08dc      	lsrs	r4, r3, #3
 8001902:	e6a1      	b.n	8001648 <__aeabi_dadd+0x39c>
 8001904:	0011      	movs	r1, r2
 8001906:	0027      	movs	r7, r4
 8001908:	3920      	subs	r1, #32
 800190a:	40cf      	lsrs	r7, r1
 800190c:	2a20      	cmp	r2, #32
 800190e:	d003      	beq.n	8001918 <__aeabi_dadd+0x66c>
 8001910:	2140      	movs	r1, #64	@ 0x40
 8001912:	1a8a      	subs	r2, r1, r2
 8001914:	4094      	lsls	r4, r2
 8001916:	4320      	orrs	r0, r4
 8001918:	1e42      	subs	r2, r0, #1
 800191a:	4190      	sbcs	r0, r2
 800191c:	0005      	movs	r5, r0
 800191e:	433d      	orrs	r5, r7
 8001920:	e651      	b.n	80015c6 <__aeabi_dadd+0x31a>
 8001922:	000c      	movs	r4, r1
 8001924:	2500      	movs	r5, #0
 8001926:	2200      	movs	r2, #0
 8001928:	e558      	b.n	80013dc <__aeabi_dadd+0x130>
 800192a:	4460      	add	r0, ip
 800192c:	4560      	cmp	r0, ip
 800192e:	4192      	sbcs	r2, r2
 8001930:	4454      	add	r4, sl
 8001932:	4252      	negs	r2, r2
 8001934:	0005      	movs	r5, r0
 8001936:	18a4      	adds	r4, r4, r2
 8001938:	e73a      	b.n	80017b0 <__aeabi_dadd+0x504>
 800193a:	4653      	mov	r3, sl
 800193c:	075a      	lsls	r2, r3, #29
 800193e:	4663      	mov	r3, ip
 8001940:	08d9      	lsrs	r1, r3, #3
 8001942:	4653      	mov	r3, sl
 8001944:	430a      	orrs	r2, r1
 8001946:	08dc      	lsrs	r4, r3, #3
 8001948:	e67e      	b.n	8001648 <__aeabi_dadd+0x39c>
 800194a:	001a      	movs	r2, r3
 800194c:	001c      	movs	r4, r3
 800194e:	432a      	orrs	r2, r5
 8001950:	d000      	beq.n	8001954 <__aeabi_dadd+0x6a8>
 8001952:	e6ab      	b.n	80016ac <__aeabi_dadd+0x400>
 8001954:	e6c1      	b.n	80016da <__aeabi_dadd+0x42e>
 8001956:	2120      	movs	r1, #32
 8001958:	2500      	movs	r5, #0
 800195a:	1a09      	subs	r1, r1, r0
 800195c:	e519      	b.n	8001392 <__aeabi_dadd+0xe6>
 800195e:	2200      	movs	r2, #0
 8001960:	2500      	movs	r5, #0
 8001962:	4c01      	ldr	r4, [pc, #4]	@ (8001968 <__aeabi_dadd+0x6bc>)
 8001964:	e53a      	b.n	80013dc <__aeabi_dadd+0x130>
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	000007ff 	.word	0x000007ff
 800196c:	ff7fffff 	.word	0xff7fffff
 8001970:	000007fe 	.word	0x000007fe

08001974 <__aeabi_ddiv>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	46de      	mov	lr, fp
 8001978:	4645      	mov	r5, r8
 800197a:	4657      	mov	r7, sl
 800197c:	464e      	mov	r6, r9
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	b087      	sub	sp, #28
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	030b      	lsls	r3, r1, #12
 8001988:	0b1b      	lsrs	r3, r3, #12
 800198a:	469b      	mov	fp, r3
 800198c:	0fca      	lsrs	r2, r1, #31
 800198e:	004b      	lsls	r3, r1, #1
 8001990:	0004      	movs	r4, r0
 8001992:	4680      	mov	r8, r0
 8001994:	0d5b      	lsrs	r3, r3, #21
 8001996:	9202      	str	r2, [sp, #8]
 8001998:	d100      	bne.n	800199c <__aeabi_ddiv+0x28>
 800199a:	e16a      	b.n	8001c72 <__aeabi_ddiv+0x2fe>
 800199c:	4ad4      	ldr	r2, [pc, #848]	@ (8001cf0 <__aeabi_ddiv+0x37c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x30>
 80019a2:	e18c      	b.n	8001cbe <__aeabi_ddiv+0x34a>
 80019a4:	4659      	mov	r1, fp
 80019a6:	0f42      	lsrs	r2, r0, #29
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	430a      	orrs	r2, r1
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	0409      	lsls	r1, r1, #16
 80019b0:	4311      	orrs	r1, r2
 80019b2:	00c2      	lsls	r2, r0, #3
 80019b4:	4690      	mov	r8, r2
 80019b6:	4acf      	ldr	r2, [pc, #828]	@ (8001cf4 <__aeabi_ddiv+0x380>)
 80019b8:	4689      	mov	r9, r1
 80019ba:	4692      	mov	sl, r2
 80019bc:	449a      	add	sl, r3
 80019be:	2300      	movs	r3, #0
 80019c0:	2400      	movs	r4, #0
 80019c2:	9303      	str	r3, [sp, #12]
 80019c4:	9e00      	ldr	r6, [sp, #0]
 80019c6:	9f01      	ldr	r7, [sp, #4]
 80019c8:	033b      	lsls	r3, r7, #12
 80019ca:	0b1b      	lsrs	r3, r3, #12
 80019cc:	469b      	mov	fp, r3
 80019ce:	007b      	lsls	r3, r7, #1
 80019d0:	0030      	movs	r0, r6
 80019d2:	0d5b      	lsrs	r3, r3, #21
 80019d4:	0ffd      	lsrs	r5, r7, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0x68>
 80019da:	e128      	b.n	8001c2e <__aeabi_ddiv+0x2ba>
 80019dc:	4ac4      	ldr	r2, [pc, #784]	@ (8001cf0 <__aeabi_ddiv+0x37c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d100      	bne.n	80019e4 <__aeabi_ddiv+0x70>
 80019e2:	e177      	b.n	8001cd4 <__aeabi_ddiv+0x360>
 80019e4:	4659      	mov	r1, fp
 80019e6:	0f72      	lsrs	r2, r6, #29
 80019e8:	00c9      	lsls	r1, r1, #3
 80019ea:	430a      	orrs	r2, r1
 80019ec:	2180      	movs	r1, #128	@ 0x80
 80019ee:	0409      	lsls	r1, r1, #16
 80019f0:	4311      	orrs	r1, r2
 80019f2:	468b      	mov	fp, r1
 80019f4:	49bf      	ldr	r1, [pc, #764]	@ (8001cf4 <__aeabi_ddiv+0x380>)
 80019f6:	00f2      	lsls	r2, r6, #3
 80019f8:	468c      	mov	ip, r1
 80019fa:	4651      	mov	r1, sl
 80019fc:	4463      	add	r3, ip
 80019fe:	1acb      	subs	r3, r1, r3
 8001a00:	469a      	mov	sl, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	9e02      	ldr	r6, [sp, #8]
 8001a06:	406e      	eors	r6, r5
 8001a08:	2c0f      	cmp	r4, #15
 8001a0a:	d827      	bhi.n	8001a5c <__aeabi_ddiv+0xe8>
 8001a0c:	49ba      	ldr	r1, [pc, #744]	@ (8001cf8 <__aeabi_ddiv+0x384>)
 8001a0e:	00a4      	lsls	r4, r4, #2
 8001a10:	5909      	ldr	r1, [r1, r4]
 8001a12:	468f      	mov	pc, r1
 8001a14:	46cb      	mov	fp, r9
 8001a16:	4642      	mov	r2, r8
 8001a18:	9e02      	ldr	r6, [sp, #8]
 8001a1a:	9b03      	ldr	r3, [sp, #12]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d016      	beq.n	8001a4e <__aeabi_ddiv+0xda>
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d100      	bne.n	8001a26 <__aeabi_ddiv+0xb2>
 8001a24:	e2a6      	b.n	8001f74 <__aeabi_ddiv+0x600>
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d000      	beq.n	8001a2c <__aeabi_ddiv+0xb8>
 8001a2a:	e0df      	b.n	8001bec <__aeabi_ddiv+0x278>
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2400      	movs	r4, #0
 8001a32:	4690      	mov	r8, r2
 8001a34:	051b      	lsls	r3, r3, #20
 8001a36:	4323      	orrs	r3, r4
 8001a38:	07f6      	lsls	r6, r6, #31
 8001a3a:	4333      	orrs	r3, r6
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	0019      	movs	r1, r3
 8001a40:	b007      	add	sp, #28
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2400      	movs	r4, #0
 8001a52:	4690      	mov	r8, r2
 8001a54:	4ba6      	ldr	r3, [pc, #664]	@ (8001cf0 <__aeabi_ddiv+0x37c>)
 8001a56:	e7ed      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001a58:	002e      	movs	r6, r5
 8001a5a:	e7df      	b.n	8001a1c <__aeabi_ddiv+0xa8>
 8001a5c:	45cb      	cmp	fp, r9
 8001a5e:	d200      	bcs.n	8001a62 <__aeabi_ddiv+0xee>
 8001a60:	e1d4      	b.n	8001e0c <__aeabi_ddiv+0x498>
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0xf2>
 8001a64:	e1cf      	b.n	8001e06 <__aeabi_ddiv+0x492>
 8001a66:	2301      	movs	r3, #1
 8001a68:	425b      	negs	r3, r3
 8001a6a:	469c      	mov	ip, r3
 8001a6c:	4644      	mov	r4, r8
 8001a6e:	4648      	mov	r0, r9
 8001a70:	2700      	movs	r7, #0
 8001a72:	44e2      	add	sl, ip
 8001a74:	465b      	mov	r3, fp
 8001a76:	0e15      	lsrs	r5, r2, #24
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	431d      	orrs	r5, r3
 8001a7c:	0c19      	lsrs	r1, r3, #16
 8001a7e:	042b      	lsls	r3, r5, #16
 8001a80:	0212      	lsls	r2, r2, #8
 8001a82:	9500      	str	r5, [sp, #0]
 8001a84:	0c1d      	lsrs	r5, r3, #16
 8001a86:	4691      	mov	r9, r2
 8001a88:	9102      	str	r1, [sp, #8]
 8001a8a:	9503      	str	r5, [sp, #12]
 8001a8c:	f7fe fbe8 	bl	8000260 <__aeabi_uidivmod>
 8001a90:	0002      	movs	r2, r0
 8001a92:	436a      	muls	r2, r5
 8001a94:	040b      	lsls	r3, r1, #16
 8001a96:	0c21      	lsrs	r1, r4, #16
 8001a98:	4680      	mov	r8, r0
 8001a9a:	4319      	orrs	r1, r3
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	d909      	bls.n	8001ab4 <__aeabi_ddiv+0x140>
 8001aa0:	9d00      	ldr	r5, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	46ac      	mov	ip, r5
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	4461      	add	r1, ip
 8001aaa:	469c      	mov	ip, r3
 8001aac:	44e0      	add	r8, ip
 8001aae:	428d      	cmp	r5, r1
 8001ab0:	d800      	bhi.n	8001ab4 <__aeabi_ddiv+0x140>
 8001ab2:	e1fb      	b.n	8001eac <__aeabi_ddiv+0x538>
 8001ab4:	1a88      	subs	r0, r1, r2
 8001ab6:	9902      	ldr	r1, [sp, #8]
 8001ab8:	f7fe fbd2 	bl	8000260 <__aeabi_uidivmod>
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	0424      	lsls	r4, r4, #16
 8001ac0:	4342      	muls	r2, r0
 8001ac2:	0409      	lsls	r1, r1, #16
 8001ac4:	0c24      	lsrs	r4, r4, #16
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	430c      	orrs	r4, r1
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	d906      	bls.n	8001adc <__aeabi_ddiv+0x168>
 8001ace:	9900      	ldr	r1, [sp, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	468c      	mov	ip, r1
 8001ad4:	4464      	add	r4, ip
 8001ad6:	42a1      	cmp	r1, r4
 8001ad8:	d800      	bhi.n	8001adc <__aeabi_ddiv+0x168>
 8001ada:	e1e1      	b.n	8001ea0 <__aeabi_ddiv+0x52c>
 8001adc:	1aa0      	subs	r0, r4, r2
 8001ade:	4642      	mov	r2, r8
 8001ae0:	0412      	lsls	r2, r2, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	4693      	mov	fp, r2
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	4659      	mov	r1, fp
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	001d      	movs	r5, r3
 8001aee:	9304      	str	r3, [sp, #16]
 8001af0:	040b      	lsls	r3, r1, #16
 8001af2:	4649      	mov	r1, r9
 8001af4:	0409      	lsls	r1, r1, #16
 8001af6:	0c09      	lsrs	r1, r1, #16
 8001af8:	000c      	movs	r4, r1
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	435c      	muls	r4, r3
 8001afe:	0c12      	lsrs	r2, r2, #16
 8001b00:	436b      	muls	r3, r5
 8001b02:	4688      	mov	r8, r1
 8001b04:	4351      	muls	r1, r2
 8001b06:	436a      	muls	r2, r5
 8001b08:	0c25      	lsrs	r5, r4, #16
 8001b0a:	46ac      	mov	ip, r5
 8001b0c:	185b      	adds	r3, r3, r1
 8001b0e:	4463      	add	r3, ip
 8001b10:	4299      	cmp	r1, r3
 8001b12:	d903      	bls.n	8001b1c <__aeabi_ddiv+0x1a8>
 8001b14:	2180      	movs	r1, #128	@ 0x80
 8001b16:	0249      	lsls	r1, r1, #9
 8001b18:	468c      	mov	ip, r1
 8001b1a:	4462      	add	r2, ip
 8001b1c:	0c19      	lsrs	r1, r3, #16
 8001b1e:	0424      	lsls	r4, r4, #16
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	0c24      	lsrs	r4, r4, #16
 8001b24:	188a      	adds	r2, r1, r2
 8001b26:	191c      	adds	r4, r3, r4
 8001b28:	4290      	cmp	r0, r2
 8001b2a:	d302      	bcc.n	8001b32 <__aeabi_ddiv+0x1be>
 8001b2c:	d116      	bne.n	8001b5c <__aeabi_ddiv+0x1e8>
 8001b2e:	42a7      	cmp	r7, r4
 8001b30:	d214      	bcs.n	8001b5c <__aeabi_ddiv+0x1e8>
 8001b32:	465b      	mov	r3, fp
 8001b34:	9d00      	ldr	r5, [sp, #0]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	444f      	add	r7, r9
 8001b3a:	9305      	str	r3, [sp, #20]
 8001b3c:	454f      	cmp	r7, r9
 8001b3e:	419b      	sbcs	r3, r3
 8001b40:	46ac      	mov	ip, r5
 8001b42:	425b      	negs	r3, r3
 8001b44:	4463      	add	r3, ip
 8001b46:	18c0      	adds	r0, r0, r3
 8001b48:	4285      	cmp	r5, r0
 8001b4a:	d300      	bcc.n	8001b4e <__aeabi_ddiv+0x1da>
 8001b4c:	e1a1      	b.n	8001e92 <__aeabi_ddiv+0x51e>
 8001b4e:	4282      	cmp	r2, r0
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x1e0>
 8001b52:	e1f6      	b.n	8001f42 <__aeabi_ddiv+0x5ce>
 8001b54:	d100      	bne.n	8001b58 <__aeabi_ddiv+0x1e4>
 8001b56:	e1f1      	b.n	8001f3c <__aeabi_ddiv+0x5c8>
 8001b58:	9b05      	ldr	r3, [sp, #20]
 8001b5a:	469b      	mov	fp, r3
 8001b5c:	1b3c      	subs	r4, r7, r4
 8001b5e:	42a7      	cmp	r7, r4
 8001b60:	41bf      	sbcs	r7, r7
 8001b62:	9d00      	ldr	r5, [sp, #0]
 8001b64:	1a80      	subs	r0, r0, r2
 8001b66:	427f      	negs	r7, r7
 8001b68:	1bc0      	subs	r0, r0, r7
 8001b6a:	4285      	cmp	r5, r0
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_ddiv+0x1fc>
 8001b6e:	e1d0      	b.n	8001f12 <__aeabi_ddiv+0x59e>
 8001b70:	9902      	ldr	r1, [sp, #8]
 8001b72:	f7fe fb75 	bl	8000260 <__aeabi_uidivmod>
 8001b76:	9a03      	ldr	r2, [sp, #12]
 8001b78:	040b      	lsls	r3, r1, #16
 8001b7a:	4342      	muls	r2, r0
 8001b7c:	0c21      	lsrs	r1, r4, #16
 8001b7e:	0007      	movs	r7, r0
 8001b80:	4319      	orrs	r1, r3
 8001b82:	428a      	cmp	r2, r1
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x214>
 8001b86:	e178      	b.n	8001e7a <__aeabi_ddiv+0x506>
 8001b88:	1a88      	subs	r0, r1, r2
 8001b8a:	9902      	ldr	r1, [sp, #8]
 8001b8c:	f7fe fb68 	bl	8000260 <__aeabi_uidivmod>
 8001b90:	9a03      	ldr	r2, [sp, #12]
 8001b92:	0424      	lsls	r4, r4, #16
 8001b94:	4342      	muls	r2, r0
 8001b96:	0409      	lsls	r1, r1, #16
 8001b98:	0c24      	lsrs	r4, r4, #16
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	430c      	orrs	r4, r1
 8001b9e:	42a2      	cmp	r2, r4
 8001ba0:	d900      	bls.n	8001ba4 <__aeabi_ddiv+0x230>
 8001ba2:	e15d      	b.n	8001e60 <__aeabi_ddiv+0x4ec>
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	1aa4      	subs	r4, r4, r2
 8001ba8:	043a      	lsls	r2, r7, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	9d04      	ldr	r5, [sp, #16]
 8001bae:	0413      	lsls	r3, r2, #16
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	4359      	muls	r1, r3
 8001bb4:	4647      	mov	r7, r8
 8001bb6:	436b      	muls	r3, r5
 8001bb8:	469c      	mov	ip, r3
 8001bba:	0c10      	lsrs	r0, r2, #16
 8001bbc:	4347      	muls	r7, r0
 8001bbe:	0c0b      	lsrs	r3, r1, #16
 8001bc0:	44bc      	add	ip, r7
 8001bc2:	4463      	add	r3, ip
 8001bc4:	4368      	muls	r0, r5
 8001bc6:	429f      	cmp	r7, r3
 8001bc8:	d903      	bls.n	8001bd2 <__aeabi_ddiv+0x25e>
 8001bca:	2580      	movs	r5, #128	@ 0x80
 8001bcc:	026d      	lsls	r5, r5, #9
 8001bce:	46ac      	mov	ip, r5
 8001bd0:	4460      	add	r0, ip
 8001bd2:	0c1f      	lsrs	r7, r3, #16
 8001bd4:	0409      	lsls	r1, r1, #16
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	0c09      	lsrs	r1, r1, #16
 8001bda:	183f      	adds	r7, r7, r0
 8001bdc:	185b      	adds	r3, r3, r1
 8001bde:	42bc      	cmp	r4, r7
 8001be0:	d200      	bcs.n	8001be4 <__aeabi_ddiv+0x270>
 8001be2:	e102      	b.n	8001dea <__aeabi_ddiv+0x476>
 8001be4:	d100      	bne.n	8001be8 <__aeabi_ddiv+0x274>
 8001be6:	e0fd      	b.n	8001de4 <__aeabi_ddiv+0x470>
 8001be8:	2301      	movs	r3, #1
 8001bea:	431a      	orrs	r2, r3
 8001bec:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <__aeabi_ddiv+0x388>)
 8001bee:	4453      	add	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dc00      	bgt.n	8001bf6 <__aeabi_ddiv+0x282>
 8001bf4:	e0ae      	b.n	8001d54 <__aeabi_ddiv+0x3e0>
 8001bf6:	0751      	lsls	r1, r2, #29
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_ddiv+0x288>
 8001bfa:	e198      	b.n	8001f2e <__aeabi_ddiv+0x5ba>
 8001bfc:	4659      	mov	r1, fp
 8001bfe:	01c9      	lsls	r1, r1, #7
 8001c00:	d506      	bpl.n	8001c10 <__aeabi_ddiv+0x29c>
 8001c02:	4659      	mov	r1, fp
 8001c04:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <__aeabi_ddiv+0x38c>)
 8001c06:	4019      	ands	r1, r3
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	468b      	mov	fp, r1
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4453      	add	r3, sl
 8001c10:	493c      	ldr	r1, [pc, #240]	@ (8001d04 <__aeabi_ddiv+0x390>)
 8001c12:	428b      	cmp	r3, r1
 8001c14:	dd00      	ble.n	8001c18 <__aeabi_ddiv+0x2a4>
 8001c16:	e71a      	b.n	8001a4e <__aeabi_ddiv+0xda>
 8001c18:	4659      	mov	r1, fp
 8001c1a:	08d2      	lsrs	r2, r2, #3
 8001c1c:	0749      	lsls	r1, r1, #29
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	465a      	mov	r2, fp
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	0254      	lsls	r4, r2, #9
 8001c26:	4688      	mov	r8, r1
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	0d5b      	lsrs	r3, r3, #21
 8001c2c:	e702      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001c2e:	465a      	mov	r2, fp
 8001c30:	9b00      	ldr	r3, [sp, #0]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x2c4>
 8001c36:	e07e      	b.n	8001d36 <__aeabi_ddiv+0x3c2>
 8001c38:	465b      	mov	r3, fp
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_ddiv+0x2cc>
 8001c3e:	e100      	b.n	8001e42 <__aeabi_ddiv+0x4ce>
 8001c40:	4658      	mov	r0, fp
 8001c42:	f001 fabb 	bl	80031bc <__clzsi2>
 8001c46:	0002      	movs	r2, r0
 8001c48:	0003      	movs	r3, r0
 8001c4a:	3a0b      	subs	r2, #11
 8001c4c:	271d      	movs	r7, #29
 8001c4e:	9e00      	ldr	r6, [sp, #0]
 8001c50:	1aba      	subs	r2, r7, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	4658      	mov	r0, fp
 8001c56:	40d6      	lsrs	r6, r2
 8001c58:	3908      	subs	r1, #8
 8001c5a:	4088      	lsls	r0, r1
 8001c5c:	0032      	movs	r2, r6
 8001c5e:	4302      	orrs	r2, r0
 8001c60:	4693      	mov	fp, r2
 8001c62:	9a00      	ldr	r2, [sp, #0]
 8001c64:	408a      	lsls	r2, r1
 8001c66:	4928      	ldr	r1, [pc, #160]	@ (8001d08 <__aeabi_ddiv+0x394>)
 8001c68:	4453      	add	r3, sl
 8001c6a:	468a      	mov	sl, r1
 8001c6c:	449a      	add	sl, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e6c8      	b.n	8001a04 <__aeabi_ddiv+0x90>
 8001c72:	465b      	mov	r3, fp
 8001c74:	4303      	orrs	r3, r0
 8001c76:	4699      	mov	r9, r3
 8001c78:	d056      	beq.n	8001d28 <__aeabi_ddiv+0x3b4>
 8001c7a:	465b      	mov	r3, fp
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_ddiv+0x30e>
 8001c80:	e0cd      	b.n	8001e1e <__aeabi_ddiv+0x4aa>
 8001c82:	4658      	mov	r0, fp
 8001c84:	f001 fa9a 	bl	80031bc <__clzsi2>
 8001c88:	230b      	movs	r3, #11
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	469c      	mov	ip, r3
 8001c8e:	0002      	movs	r2, r0
 8001c90:	4484      	add	ip, r0
 8001c92:	4666      	mov	r6, ip
 8001c94:	231d      	movs	r3, #29
 8001c96:	1b9b      	subs	r3, r3, r6
 8001c98:	0026      	movs	r6, r4
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	4658      	mov	r0, fp
 8001c9e:	40de      	lsrs	r6, r3
 8001ca0:	3908      	subs	r1, #8
 8001ca2:	4088      	lsls	r0, r1
 8001ca4:	0033      	movs	r3, r6
 8001ca6:	4303      	orrs	r3, r0
 8001ca8:	4699      	mov	r9, r3
 8001caa:	0023      	movs	r3, r4
 8001cac:	408b      	lsls	r3, r1
 8001cae:	4698      	mov	r8, r3
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <__aeabi_ddiv+0x398>)
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9303      	str	r3, [sp, #12]
 8001cbc:	e682      	b.n	80019c4 <__aeabi_ddiv+0x50>
 8001cbe:	465a      	mov	r2, fp
 8001cc0:	4302      	orrs	r2, r0
 8001cc2:	4691      	mov	r9, r2
 8001cc4:	d12a      	bne.n	8001d1c <__aeabi_ddiv+0x3a8>
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	469a      	mov	sl, r3
 8001cca:	2302      	movs	r3, #2
 8001ccc:	4690      	mov	r8, r2
 8001cce:	2408      	movs	r4, #8
 8001cd0:	9303      	str	r3, [sp, #12]
 8001cd2:	e677      	b.n	80019c4 <__aeabi_ddiv+0x50>
 8001cd4:	465a      	mov	r2, fp
 8001cd6:	9b00      	ldr	r3, [sp, #0]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <__aeabi_ddiv+0x39c>)
 8001cdc:	469c      	mov	ip, r3
 8001cde:	44e2      	add	sl, ip
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d117      	bne.n	8001d14 <__aeabi_ddiv+0x3a0>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	431c      	orrs	r4, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	469b      	mov	fp, r3
 8001cec:	3302      	adds	r3, #2
 8001cee:	e689      	b.n	8001a04 <__aeabi_ddiv+0x90>
 8001cf0:	000007ff 	.word	0x000007ff
 8001cf4:	fffffc01 	.word	0xfffffc01
 8001cf8:	0800d748 	.word	0x0800d748
 8001cfc:	000003ff 	.word	0x000003ff
 8001d00:	feffffff 	.word	0xfeffffff
 8001d04:	000007fe 	.word	0x000007fe
 8001d08:	000003f3 	.word	0x000003f3
 8001d0c:	fffffc0d 	.word	0xfffffc0d
 8001d10:	fffff801 	.word	0xfffff801
 8001d14:	2303      	movs	r3, #3
 8001d16:	0032      	movs	r2, r6
 8001d18:	431c      	orrs	r4, r3
 8001d1a:	e673      	b.n	8001a04 <__aeabi_ddiv+0x90>
 8001d1c:	469a      	mov	sl, r3
 8001d1e:	2303      	movs	r3, #3
 8001d20:	46d9      	mov	r9, fp
 8001d22:	240c      	movs	r4, #12
 8001d24:	9303      	str	r3, [sp, #12]
 8001d26:	e64d      	b.n	80019c4 <__aeabi_ddiv+0x50>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4698      	mov	r8, r3
 8001d2c:	469a      	mov	sl, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	2404      	movs	r4, #4
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	e646      	b.n	80019c4 <__aeabi_ddiv+0x50>
 8001d36:	2301      	movs	r3, #1
 8001d38:	431c      	orrs	r4, r3
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	e660      	b.n	8001a04 <__aeabi_ddiv+0x90>
 8001d42:	2300      	movs	r3, #0
 8001d44:	2480      	movs	r4, #128	@ 0x80
 8001d46:	4698      	mov	r8, r3
 8001d48:	2600      	movs	r6, #0
 8001d4a:	4b92      	ldr	r3, [pc, #584]	@ (8001f94 <__aeabi_ddiv+0x620>)
 8001d4c:	0324      	lsls	r4, r4, #12
 8001d4e:	e671      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001d50:	2201      	movs	r2, #1
 8001d52:	4252      	negs	r2, r2
 8001d54:	2101      	movs	r1, #1
 8001d56:	1ac9      	subs	r1, r1, r3
 8001d58:	2938      	cmp	r1, #56	@ 0x38
 8001d5a:	dd00      	ble.n	8001d5e <__aeabi_ddiv+0x3ea>
 8001d5c:	e666      	b.n	8001a2c <__aeabi_ddiv+0xb8>
 8001d5e:	291f      	cmp	r1, #31
 8001d60:	dc00      	bgt.n	8001d64 <__aeabi_ddiv+0x3f0>
 8001d62:	e0ab      	b.n	8001ebc <__aeabi_ddiv+0x548>
 8001d64:	201f      	movs	r0, #31
 8001d66:	4240      	negs	r0, r0
 8001d68:	1ac3      	subs	r3, r0, r3
 8001d6a:	4658      	mov	r0, fp
 8001d6c:	40d8      	lsrs	r0, r3
 8001d6e:	0003      	movs	r3, r0
 8001d70:	2920      	cmp	r1, #32
 8001d72:	d004      	beq.n	8001d7e <__aeabi_ddiv+0x40a>
 8001d74:	4658      	mov	r0, fp
 8001d76:	4988      	ldr	r1, [pc, #544]	@ (8001f98 <__aeabi_ddiv+0x624>)
 8001d78:	4451      	add	r1, sl
 8001d7a:	4088      	lsls	r0, r1
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	1e51      	subs	r1, r2, #1
 8001d80:	418a      	sbcs	r2, r1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	2307      	movs	r3, #7
 8001d86:	0019      	movs	r1, r3
 8001d88:	2400      	movs	r4, #0
 8001d8a:	4011      	ands	r1, r2
 8001d8c:	4213      	tst	r3, r2
 8001d8e:	d00c      	beq.n	8001daa <__aeabi_ddiv+0x436>
 8001d90:	230f      	movs	r3, #15
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d100      	bne.n	8001d9a <__aeabi_ddiv+0x426>
 8001d98:	e0f9      	b.n	8001f8e <__aeabi_ddiv+0x61a>
 8001d9a:	1d11      	adds	r1, r2, #4
 8001d9c:	4291      	cmp	r1, r2
 8001d9e:	419b      	sbcs	r3, r3
 8001da0:	000a      	movs	r2, r1
 8001da2:	425b      	negs	r3, r3
 8001da4:	0759      	lsls	r1, r3, #29
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	0b1c      	lsrs	r4, r3, #12
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	430a      	orrs	r2, r1
 8001dae:	4690      	mov	r8, r2
 8001db0:	2300      	movs	r3, #0
 8001db2:	e63f      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001db4:	2480      	movs	r4, #128	@ 0x80
 8001db6:	464b      	mov	r3, r9
 8001db8:	0324      	lsls	r4, r4, #12
 8001dba:	4223      	tst	r3, r4
 8001dbc:	d009      	beq.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001dbe:	465b      	mov	r3, fp
 8001dc0:	4223      	tst	r3, r4
 8001dc2:	d106      	bne.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001dc4:	431c      	orrs	r4, r3
 8001dc6:	0324      	lsls	r4, r4, #12
 8001dc8:	002e      	movs	r6, r5
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4b71      	ldr	r3, [pc, #452]	@ (8001f94 <__aeabi_ddiv+0x620>)
 8001dce:	0b24      	lsrs	r4, r4, #12
 8001dd0:	e630      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001dd2:	2480      	movs	r4, #128	@ 0x80
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	0324      	lsls	r4, r4, #12
 8001dd8:	431c      	orrs	r4, r3
 8001dda:	0324      	lsls	r4, r4, #12
 8001ddc:	9e02      	ldr	r6, [sp, #8]
 8001dde:	4b6d      	ldr	r3, [pc, #436]	@ (8001f94 <__aeabi_ddiv+0x620>)
 8001de0:	0b24      	lsrs	r4, r4, #12
 8001de2:	e627      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d100      	bne.n	8001dea <__aeabi_ddiv+0x476>
 8001de8:	e700      	b.n	8001bec <__aeabi_ddiv+0x278>
 8001dea:	9800      	ldr	r0, [sp, #0]
 8001dec:	1e51      	subs	r1, r2, #1
 8001dee:	4684      	mov	ip, r0
 8001df0:	4464      	add	r4, ip
 8001df2:	4284      	cmp	r4, r0
 8001df4:	d200      	bcs.n	8001df8 <__aeabi_ddiv+0x484>
 8001df6:	e084      	b.n	8001f02 <__aeabi_ddiv+0x58e>
 8001df8:	42bc      	cmp	r4, r7
 8001dfa:	d200      	bcs.n	8001dfe <__aeabi_ddiv+0x48a>
 8001dfc:	e0ae      	b.n	8001f5c <__aeabi_ddiv+0x5e8>
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_ddiv+0x48e>
 8001e00:	e0c1      	b.n	8001f86 <__aeabi_ddiv+0x612>
 8001e02:	000a      	movs	r2, r1
 8001e04:	e6f0      	b.n	8001be8 <__aeabi_ddiv+0x274>
 8001e06:	4542      	cmp	r2, r8
 8001e08:	d900      	bls.n	8001e0c <__aeabi_ddiv+0x498>
 8001e0a:	e62c      	b.n	8001a66 <__aeabi_ddiv+0xf2>
 8001e0c:	464b      	mov	r3, r9
 8001e0e:	07dc      	lsls	r4, r3, #31
 8001e10:	0858      	lsrs	r0, r3, #1
 8001e12:	4643      	mov	r3, r8
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	431c      	orrs	r4, r3
 8001e18:	4643      	mov	r3, r8
 8001e1a:	07df      	lsls	r7, r3, #31
 8001e1c:	e62a      	b.n	8001a74 <__aeabi_ddiv+0x100>
 8001e1e:	f001 f9cd 	bl	80031bc <__clzsi2>
 8001e22:	2315      	movs	r3, #21
 8001e24:	469c      	mov	ip, r3
 8001e26:	4484      	add	ip, r0
 8001e28:	0002      	movs	r2, r0
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	3220      	adds	r2, #32
 8001e2e:	2b1c      	cmp	r3, #28
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_ddiv+0x4c0>
 8001e32:	e72e      	b.n	8001c92 <__aeabi_ddiv+0x31e>
 8001e34:	0023      	movs	r3, r4
 8001e36:	3808      	subs	r0, #8
 8001e38:	4083      	lsls	r3, r0
 8001e3a:	4699      	mov	r9, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4698      	mov	r8, r3
 8001e40:	e736      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e42:	f001 f9bb 	bl	80031bc <__clzsi2>
 8001e46:	0002      	movs	r2, r0
 8001e48:	0003      	movs	r3, r0
 8001e4a:	3215      	adds	r2, #21
 8001e4c:	3320      	adds	r3, #32
 8001e4e:	2a1c      	cmp	r2, #28
 8001e50:	dc00      	bgt.n	8001e54 <__aeabi_ddiv+0x4e0>
 8001e52:	e6fb      	b.n	8001c4c <__aeabi_ddiv+0x2d8>
 8001e54:	9900      	ldr	r1, [sp, #0]
 8001e56:	3808      	subs	r0, #8
 8001e58:	4081      	lsls	r1, r0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	468b      	mov	fp, r1
 8001e5e:	e702      	b.n	8001c66 <__aeabi_ddiv+0x2f2>
 8001e60:	9900      	ldr	r1, [sp, #0]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	468c      	mov	ip, r1
 8001e66:	4464      	add	r4, ip
 8001e68:	42a1      	cmp	r1, r4
 8001e6a:	d900      	bls.n	8001e6e <__aeabi_ddiv+0x4fa>
 8001e6c:	e69a      	b.n	8001ba4 <__aeabi_ddiv+0x230>
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x500>
 8001e72:	e697      	b.n	8001ba4 <__aeabi_ddiv+0x230>
 8001e74:	1e83      	subs	r3, r0, #2
 8001e76:	4464      	add	r4, ip
 8001e78:	e694      	b.n	8001ba4 <__aeabi_ddiv+0x230>
 8001e7a:	46ac      	mov	ip, r5
 8001e7c:	4461      	add	r1, ip
 8001e7e:	3f01      	subs	r7, #1
 8001e80:	428d      	cmp	r5, r1
 8001e82:	d900      	bls.n	8001e86 <__aeabi_ddiv+0x512>
 8001e84:	e680      	b.n	8001b88 <__aeabi_ddiv+0x214>
 8001e86:	428a      	cmp	r2, r1
 8001e88:	d800      	bhi.n	8001e8c <__aeabi_ddiv+0x518>
 8001e8a:	e67d      	b.n	8001b88 <__aeabi_ddiv+0x214>
 8001e8c:	1e87      	subs	r7, r0, #2
 8001e8e:	4461      	add	r1, ip
 8001e90:	e67a      	b.n	8001b88 <__aeabi_ddiv+0x214>
 8001e92:	4285      	cmp	r5, r0
 8001e94:	d000      	beq.n	8001e98 <__aeabi_ddiv+0x524>
 8001e96:	e65f      	b.n	8001b58 <__aeabi_ddiv+0x1e4>
 8001e98:	45b9      	cmp	r9, r7
 8001e9a:	d900      	bls.n	8001e9e <__aeabi_ddiv+0x52a>
 8001e9c:	e65c      	b.n	8001b58 <__aeabi_ddiv+0x1e4>
 8001e9e:	e656      	b.n	8001b4e <__aeabi_ddiv+0x1da>
 8001ea0:	42a2      	cmp	r2, r4
 8001ea2:	d800      	bhi.n	8001ea6 <__aeabi_ddiv+0x532>
 8001ea4:	e61a      	b.n	8001adc <__aeabi_ddiv+0x168>
 8001ea6:	1e83      	subs	r3, r0, #2
 8001ea8:	4464      	add	r4, ip
 8001eaa:	e617      	b.n	8001adc <__aeabi_ddiv+0x168>
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d800      	bhi.n	8001eb2 <__aeabi_ddiv+0x53e>
 8001eb0:	e600      	b.n	8001ab4 <__aeabi_ddiv+0x140>
 8001eb2:	46ac      	mov	ip, r5
 8001eb4:	1e83      	subs	r3, r0, #2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	4461      	add	r1, ip
 8001eba:	e5fb      	b.n	8001ab4 <__aeabi_ddiv+0x140>
 8001ebc:	4837      	ldr	r0, [pc, #220]	@ (8001f9c <__aeabi_ddiv+0x628>)
 8001ebe:	0014      	movs	r4, r2
 8001ec0:	4450      	add	r0, sl
 8001ec2:	4082      	lsls	r2, r0
 8001ec4:	465b      	mov	r3, fp
 8001ec6:	0017      	movs	r7, r2
 8001ec8:	4083      	lsls	r3, r0
 8001eca:	40cc      	lsrs	r4, r1
 8001ecc:	1e7a      	subs	r2, r7, #1
 8001ece:	4197      	sbcs	r7, r2
 8001ed0:	4323      	orrs	r3, r4
 8001ed2:	433b      	orrs	r3, r7
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	465b      	mov	r3, fp
 8001ed8:	40cb      	lsrs	r3, r1
 8001eda:	0751      	lsls	r1, r2, #29
 8001edc:	d009      	beq.n	8001ef2 <__aeabi_ddiv+0x57e>
 8001ede:	210f      	movs	r1, #15
 8001ee0:	4011      	ands	r1, r2
 8001ee2:	2904      	cmp	r1, #4
 8001ee4:	d005      	beq.n	8001ef2 <__aeabi_ddiv+0x57e>
 8001ee6:	1d11      	adds	r1, r2, #4
 8001ee8:	4291      	cmp	r1, r2
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	4252      	negs	r2, r2
 8001eee:	189b      	adds	r3, r3, r2
 8001ef0:	000a      	movs	r2, r1
 8001ef2:	0219      	lsls	r1, r3, #8
 8001ef4:	d400      	bmi.n	8001ef8 <__aeabi_ddiv+0x584>
 8001ef6:	e755      	b.n	8001da4 <__aeabi_ddiv+0x430>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2301      	movs	r3, #1
 8001efc:	2400      	movs	r4, #0
 8001efe:	4690      	mov	r8, r2
 8001f00:	e598      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001f02:	000a      	movs	r2, r1
 8001f04:	42bc      	cmp	r4, r7
 8001f06:	d000      	beq.n	8001f0a <__aeabi_ddiv+0x596>
 8001f08:	e66e      	b.n	8001be8 <__aeabi_ddiv+0x274>
 8001f0a:	454b      	cmp	r3, r9
 8001f0c:	d000      	beq.n	8001f10 <__aeabi_ddiv+0x59c>
 8001f0e:	e66b      	b.n	8001be8 <__aeabi_ddiv+0x274>
 8001f10:	e66c      	b.n	8001bec <__aeabi_ddiv+0x278>
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <__aeabi_ddiv+0x62c>)
 8001f14:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <__aeabi_ddiv+0x630>)
 8001f16:	4453      	add	r3, sl
 8001f18:	4592      	cmp	sl, r2
 8001f1a:	da00      	bge.n	8001f1e <__aeabi_ddiv+0x5aa>
 8001f1c:	e718      	b.n	8001d50 <__aeabi_ddiv+0x3dc>
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4249      	negs	r1, r1
 8001f22:	1d0a      	adds	r2, r1, #4
 8001f24:	428a      	cmp	r2, r1
 8001f26:	4189      	sbcs	r1, r1
 8001f28:	4249      	negs	r1, r1
 8001f2a:	448b      	add	fp, r1
 8001f2c:	e666      	b.n	8001bfc <__aeabi_ddiv+0x288>
 8001f2e:	210f      	movs	r1, #15
 8001f30:	4011      	ands	r1, r2
 8001f32:	2904      	cmp	r1, #4
 8001f34:	d100      	bne.n	8001f38 <__aeabi_ddiv+0x5c4>
 8001f36:	e661      	b.n	8001bfc <__aeabi_ddiv+0x288>
 8001f38:	0011      	movs	r1, r2
 8001f3a:	e7f2      	b.n	8001f22 <__aeabi_ddiv+0x5ae>
 8001f3c:	42bc      	cmp	r4, r7
 8001f3e:	d800      	bhi.n	8001f42 <__aeabi_ddiv+0x5ce>
 8001f40:	e60a      	b.n	8001b58 <__aeabi_ddiv+0x1e4>
 8001f42:	2302      	movs	r3, #2
 8001f44:	425b      	negs	r3, r3
 8001f46:	469c      	mov	ip, r3
 8001f48:	9900      	ldr	r1, [sp, #0]
 8001f4a:	444f      	add	r7, r9
 8001f4c:	454f      	cmp	r7, r9
 8001f4e:	419b      	sbcs	r3, r3
 8001f50:	44e3      	add	fp, ip
 8001f52:	468c      	mov	ip, r1
 8001f54:	425b      	negs	r3, r3
 8001f56:	4463      	add	r3, ip
 8001f58:	18c0      	adds	r0, r0, r3
 8001f5a:	e5ff      	b.n	8001b5c <__aeabi_ddiv+0x1e8>
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	9d00      	ldr	r5, [sp, #0]
 8001f60:	0048      	lsls	r0, r1, #1
 8001f62:	4548      	cmp	r0, r9
 8001f64:	4189      	sbcs	r1, r1
 8001f66:	46ac      	mov	ip, r5
 8001f68:	4249      	negs	r1, r1
 8001f6a:	4461      	add	r1, ip
 8001f6c:	4681      	mov	r9, r0
 8001f6e:	3a02      	subs	r2, #2
 8001f70:	1864      	adds	r4, r4, r1
 8001f72:	e7c7      	b.n	8001f04 <__aeabi_ddiv+0x590>
 8001f74:	2480      	movs	r4, #128	@ 0x80
 8001f76:	465b      	mov	r3, fp
 8001f78:	0324      	lsls	r4, r4, #12
 8001f7a:	431c      	orrs	r4, r3
 8001f7c:	0324      	lsls	r4, r4, #12
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <__aeabi_ddiv+0x620>)
 8001f82:	0b24      	lsrs	r4, r4, #12
 8001f84:	e556      	b.n	8001a34 <__aeabi_ddiv+0xc0>
 8001f86:	4599      	cmp	r9, r3
 8001f88:	d3e8      	bcc.n	8001f5c <__aeabi_ddiv+0x5e8>
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	e7bd      	b.n	8001f0a <__aeabi_ddiv+0x596>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e708      	b.n	8001da4 <__aeabi_ddiv+0x430>
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	0000043e 	.word	0x0000043e
 8001f9c:	0000041e 	.word	0x0000041e
 8001fa0:	000003ff 	.word	0x000003ff
 8001fa4:	fffffc02 	.word	0xfffffc02

08001fa8 <__eqdf2>:
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001faa:	4657      	mov	r7, sl
 8001fac:	46de      	mov	lr, fp
 8001fae:	464e      	mov	r6, r9
 8001fb0:	4645      	mov	r5, r8
 8001fb2:	b5e0      	push	{r5, r6, r7, lr}
 8001fb4:	000d      	movs	r5, r1
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	0fe8      	lsrs	r0, r5, #31
 8001fba:	4683      	mov	fp, r0
 8001fbc:	0309      	lsls	r1, r1, #12
 8001fbe:	0fd8      	lsrs	r0, r3, #31
 8001fc0:	0b09      	lsrs	r1, r1, #12
 8001fc2:	4682      	mov	sl, r0
 8001fc4:	4819      	ldr	r0, [pc, #100]	@ (800202c <__eqdf2+0x84>)
 8001fc6:	468c      	mov	ip, r1
 8001fc8:	031f      	lsls	r7, r3, #12
 8001fca:	0069      	lsls	r1, r5, #1
 8001fcc:	005e      	lsls	r6, r3, #1
 8001fce:	0d49      	lsrs	r1, r1, #21
 8001fd0:	0b3f      	lsrs	r7, r7, #12
 8001fd2:	0d76      	lsrs	r6, r6, #21
 8001fd4:	4281      	cmp	r1, r0
 8001fd6:	d018      	beq.n	800200a <__eqdf2+0x62>
 8001fd8:	4286      	cmp	r6, r0
 8001fda:	d00f      	beq.n	8001ffc <__eqdf2+0x54>
 8001fdc:	2001      	movs	r0, #1
 8001fde:	42b1      	cmp	r1, r6
 8001fe0:	d10d      	bne.n	8001ffe <__eqdf2+0x56>
 8001fe2:	45bc      	cmp	ip, r7
 8001fe4:	d10b      	bne.n	8001ffe <__eqdf2+0x56>
 8001fe6:	4294      	cmp	r4, r2
 8001fe8:	d109      	bne.n	8001ffe <__eqdf2+0x56>
 8001fea:	45d3      	cmp	fp, sl
 8001fec:	d01c      	beq.n	8002028 <__eqdf2+0x80>
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d105      	bne.n	8001ffe <__eqdf2+0x56>
 8001ff2:	4660      	mov	r0, ip
 8001ff4:	4320      	orrs	r0, r4
 8001ff6:	1e43      	subs	r3, r0, #1
 8001ff8:	4198      	sbcs	r0, r3
 8001ffa:	e000      	b.n	8001ffe <__eqdf2+0x56>
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8002000:	46bb      	mov	fp, r7
 8002002:	46b2      	mov	sl, r6
 8002004:	46a9      	mov	r9, r5
 8002006:	46a0      	mov	r8, r4
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200a:	2001      	movs	r0, #1
 800200c:	428e      	cmp	r6, r1
 800200e:	d1f6      	bne.n	8001ffe <__eqdf2+0x56>
 8002010:	4661      	mov	r1, ip
 8002012:	4339      	orrs	r1, r7
 8002014:	000f      	movs	r7, r1
 8002016:	4317      	orrs	r7, r2
 8002018:	4327      	orrs	r7, r4
 800201a:	d1f0      	bne.n	8001ffe <__eqdf2+0x56>
 800201c:	465b      	mov	r3, fp
 800201e:	4652      	mov	r2, sl
 8002020:	1a98      	subs	r0, r3, r2
 8002022:	1e43      	subs	r3, r0, #1
 8002024:	4198      	sbcs	r0, r3
 8002026:	e7ea      	b.n	8001ffe <__eqdf2+0x56>
 8002028:	2000      	movs	r0, #0
 800202a:	e7e8      	b.n	8001ffe <__eqdf2+0x56>
 800202c:	000007ff 	.word	0x000007ff

08002030 <__gedf2>:
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	4657      	mov	r7, sl
 8002034:	464e      	mov	r6, r9
 8002036:	4645      	mov	r5, r8
 8002038:	46de      	mov	lr, fp
 800203a:	b5e0      	push	{r5, r6, r7, lr}
 800203c:	000d      	movs	r5, r1
 800203e:	030f      	lsls	r7, r1, #12
 8002040:	0b39      	lsrs	r1, r7, #12
 8002042:	b083      	sub	sp, #12
 8002044:	0004      	movs	r4, r0
 8002046:	4680      	mov	r8, r0
 8002048:	9101      	str	r1, [sp, #4]
 800204a:	0058      	lsls	r0, r3, #1
 800204c:	0fe9      	lsrs	r1, r5, #31
 800204e:	4f31      	ldr	r7, [pc, #196]	@ (8002114 <__gedf2+0xe4>)
 8002050:	0d40      	lsrs	r0, r0, #21
 8002052:	468c      	mov	ip, r1
 8002054:	006e      	lsls	r6, r5, #1
 8002056:	0319      	lsls	r1, r3, #12
 8002058:	4682      	mov	sl, r0
 800205a:	4691      	mov	r9, r2
 800205c:	0d76      	lsrs	r6, r6, #21
 800205e:	0b09      	lsrs	r1, r1, #12
 8002060:	0fd8      	lsrs	r0, r3, #31
 8002062:	42be      	cmp	r6, r7
 8002064:	d01f      	beq.n	80020a6 <__gedf2+0x76>
 8002066:	45ba      	cmp	sl, r7
 8002068:	d00f      	beq.n	800208a <__gedf2+0x5a>
 800206a:	2e00      	cmp	r6, #0
 800206c:	d12f      	bne.n	80020ce <__gedf2+0x9e>
 800206e:	4655      	mov	r5, sl
 8002070:	9e01      	ldr	r6, [sp, #4]
 8002072:	4334      	orrs	r4, r6
 8002074:	2d00      	cmp	r5, #0
 8002076:	d127      	bne.n	80020c8 <__gedf2+0x98>
 8002078:	430a      	orrs	r2, r1
 800207a:	d03a      	beq.n	80020f2 <__gedf2+0xc2>
 800207c:	2c00      	cmp	r4, #0
 800207e:	d145      	bne.n	800210c <__gedf2+0xdc>
 8002080:	2800      	cmp	r0, #0
 8002082:	d11a      	bne.n	80020ba <__gedf2+0x8a>
 8002084:	2001      	movs	r0, #1
 8002086:	4240      	negs	r0, r0
 8002088:	e017      	b.n	80020ba <__gedf2+0x8a>
 800208a:	4311      	orrs	r1, r2
 800208c:	d13b      	bne.n	8002106 <__gedf2+0xd6>
 800208e:	2e00      	cmp	r6, #0
 8002090:	d102      	bne.n	8002098 <__gedf2+0x68>
 8002092:	9f01      	ldr	r7, [sp, #4]
 8002094:	4327      	orrs	r7, r4
 8002096:	d0f3      	beq.n	8002080 <__gedf2+0x50>
 8002098:	4584      	cmp	ip, r0
 800209a:	d109      	bne.n	80020b0 <__gedf2+0x80>
 800209c:	4663      	mov	r3, ip
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <__gedf2+0x54>
 80020a2:	4660      	mov	r0, ip
 80020a4:	e009      	b.n	80020ba <__gedf2+0x8a>
 80020a6:	9f01      	ldr	r7, [sp, #4]
 80020a8:	4327      	orrs	r7, r4
 80020aa:	d12c      	bne.n	8002106 <__gedf2+0xd6>
 80020ac:	45b2      	cmp	sl, r6
 80020ae:	d024      	beq.n	80020fa <__gedf2+0xca>
 80020b0:	4663      	mov	r3, ip
 80020b2:	2002      	movs	r0, #2
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4018      	ands	r0, r3
 80020b8:	3801      	subs	r0, #1
 80020ba:	b003      	add	sp, #12
 80020bc:	bcf0      	pop	{r4, r5, r6, r7}
 80020be:	46bb      	mov	fp, r7
 80020c0:	46b2      	mov	sl, r6
 80020c2:	46a9      	mov	r9, r5
 80020c4:	46a0      	mov	r8, r4
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	d0d9      	beq.n	8002080 <__gedf2+0x50>
 80020cc:	e7e4      	b.n	8002098 <__gedf2+0x68>
 80020ce:	4654      	mov	r4, sl
 80020d0:	2c00      	cmp	r4, #0
 80020d2:	d0ed      	beq.n	80020b0 <__gedf2+0x80>
 80020d4:	4584      	cmp	ip, r0
 80020d6:	d1eb      	bne.n	80020b0 <__gedf2+0x80>
 80020d8:	4556      	cmp	r6, sl
 80020da:	dce9      	bgt.n	80020b0 <__gedf2+0x80>
 80020dc:	dbde      	blt.n	800209c <__gedf2+0x6c>
 80020de:	9b01      	ldr	r3, [sp, #4]
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d8e5      	bhi.n	80020b0 <__gedf2+0x80>
 80020e4:	d1da      	bne.n	800209c <__gedf2+0x6c>
 80020e6:	45c8      	cmp	r8, r9
 80020e8:	d8e2      	bhi.n	80020b0 <__gedf2+0x80>
 80020ea:	2000      	movs	r0, #0
 80020ec:	45c8      	cmp	r8, r9
 80020ee:	d2e4      	bcs.n	80020ba <__gedf2+0x8a>
 80020f0:	e7d4      	b.n	800209c <__gedf2+0x6c>
 80020f2:	2000      	movs	r0, #0
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d0e0      	beq.n	80020ba <__gedf2+0x8a>
 80020f8:	e7da      	b.n	80020b0 <__gedf2+0x80>
 80020fa:	4311      	orrs	r1, r2
 80020fc:	d103      	bne.n	8002106 <__gedf2+0xd6>
 80020fe:	4584      	cmp	ip, r0
 8002100:	d1d6      	bne.n	80020b0 <__gedf2+0x80>
 8002102:	2000      	movs	r0, #0
 8002104:	e7d9      	b.n	80020ba <__gedf2+0x8a>
 8002106:	2002      	movs	r0, #2
 8002108:	4240      	negs	r0, r0
 800210a:	e7d6      	b.n	80020ba <__gedf2+0x8a>
 800210c:	4584      	cmp	ip, r0
 800210e:	d0e6      	beq.n	80020de <__gedf2+0xae>
 8002110:	e7ce      	b.n	80020b0 <__gedf2+0x80>
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	000007ff 	.word	0x000007ff

08002118 <__ledf2>:
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	4657      	mov	r7, sl
 800211c:	464e      	mov	r6, r9
 800211e:	4645      	mov	r5, r8
 8002120:	46de      	mov	lr, fp
 8002122:	b5e0      	push	{r5, r6, r7, lr}
 8002124:	000d      	movs	r5, r1
 8002126:	030f      	lsls	r7, r1, #12
 8002128:	0004      	movs	r4, r0
 800212a:	4680      	mov	r8, r0
 800212c:	0fe8      	lsrs	r0, r5, #31
 800212e:	0b39      	lsrs	r1, r7, #12
 8002130:	4684      	mov	ip, r0
 8002132:	b083      	sub	sp, #12
 8002134:	0058      	lsls	r0, r3, #1
 8002136:	4f30      	ldr	r7, [pc, #192]	@ (80021f8 <__ledf2+0xe0>)
 8002138:	0d40      	lsrs	r0, r0, #21
 800213a:	9101      	str	r1, [sp, #4]
 800213c:	031e      	lsls	r6, r3, #12
 800213e:	0069      	lsls	r1, r5, #1
 8002140:	4682      	mov	sl, r0
 8002142:	4691      	mov	r9, r2
 8002144:	0d49      	lsrs	r1, r1, #21
 8002146:	0b36      	lsrs	r6, r6, #12
 8002148:	0fd8      	lsrs	r0, r3, #31
 800214a:	42b9      	cmp	r1, r7
 800214c:	d020      	beq.n	8002190 <__ledf2+0x78>
 800214e:	45ba      	cmp	sl, r7
 8002150:	d00f      	beq.n	8002172 <__ledf2+0x5a>
 8002152:	2900      	cmp	r1, #0
 8002154:	d12b      	bne.n	80021ae <__ledf2+0x96>
 8002156:	9901      	ldr	r1, [sp, #4]
 8002158:	430c      	orrs	r4, r1
 800215a:	4651      	mov	r1, sl
 800215c:	2900      	cmp	r1, #0
 800215e:	d137      	bne.n	80021d0 <__ledf2+0xb8>
 8002160:	4332      	orrs	r2, r6
 8002162:	d038      	beq.n	80021d6 <__ledf2+0xbe>
 8002164:	2c00      	cmp	r4, #0
 8002166:	d144      	bne.n	80021f2 <__ledf2+0xda>
 8002168:	2800      	cmp	r0, #0
 800216a:	d119      	bne.n	80021a0 <__ledf2+0x88>
 800216c:	2001      	movs	r0, #1
 800216e:	4240      	negs	r0, r0
 8002170:	e016      	b.n	80021a0 <__ledf2+0x88>
 8002172:	4316      	orrs	r6, r2
 8002174:	d113      	bne.n	800219e <__ledf2+0x86>
 8002176:	2900      	cmp	r1, #0
 8002178:	d102      	bne.n	8002180 <__ledf2+0x68>
 800217a:	9f01      	ldr	r7, [sp, #4]
 800217c:	4327      	orrs	r7, r4
 800217e:	d0f3      	beq.n	8002168 <__ledf2+0x50>
 8002180:	4584      	cmp	ip, r0
 8002182:	d020      	beq.n	80021c6 <__ledf2+0xae>
 8002184:	4663      	mov	r3, ip
 8002186:	2002      	movs	r0, #2
 8002188:	3b01      	subs	r3, #1
 800218a:	4018      	ands	r0, r3
 800218c:	3801      	subs	r0, #1
 800218e:	e007      	b.n	80021a0 <__ledf2+0x88>
 8002190:	9f01      	ldr	r7, [sp, #4]
 8002192:	4327      	orrs	r7, r4
 8002194:	d103      	bne.n	800219e <__ledf2+0x86>
 8002196:	458a      	cmp	sl, r1
 8002198:	d1f4      	bne.n	8002184 <__ledf2+0x6c>
 800219a:	4316      	orrs	r6, r2
 800219c:	d01f      	beq.n	80021de <__ledf2+0xc6>
 800219e:	2002      	movs	r0, #2
 80021a0:	b003      	add	sp, #12
 80021a2:	bcf0      	pop	{r4, r5, r6, r7}
 80021a4:	46bb      	mov	fp, r7
 80021a6:	46b2      	mov	sl, r6
 80021a8:	46a9      	mov	r9, r5
 80021aa:	46a0      	mov	r8, r4
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ae:	4654      	mov	r4, sl
 80021b0:	2c00      	cmp	r4, #0
 80021b2:	d0e7      	beq.n	8002184 <__ledf2+0x6c>
 80021b4:	4584      	cmp	ip, r0
 80021b6:	d1e5      	bne.n	8002184 <__ledf2+0x6c>
 80021b8:	4551      	cmp	r1, sl
 80021ba:	dce3      	bgt.n	8002184 <__ledf2+0x6c>
 80021bc:	db03      	blt.n	80021c6 <__ledf2+0xae>
 80021be:	9b01      	ldr	r3, [sp, #4]
 80021c0:	42b3      	cmp	r3, r6
 80021c2:	d8df      	bhi.n	8002184 <__ledf2+0x6c>
 80021c4:	d00f      	beq.n	80021e6 <__ledf2+0xce>
 80021c6:	4663      	mov	r3, ip
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0cf      	beq.n	800216c <__ledf2+0x54>
 80021cc:	4660      	mov	r0, ip
 80021ce:	e7e7      	b.n	80021a0 <__ledf2+0x88>
 80021d0:	2c00      	cmp	r4, #0
 80021d2:	d0c9      	beq.n	8002168 <__ledf2+0x50>
 80021d4:	e7d4      	b.n	8002180 <__ledf2+0x68>
 80021d6:	2000      	movs	r0, #0
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d0e1      	beq.n	80021a0 <__ledf2+0x88>
 80021dc:	e7d2      	b.n	8002184 <__ledf2+0x6c>
 80021de:	4584      	cmp	ip, r0
 80021e0:	d1d0      	bne.n	8002184 <__ledf2+0x6c>
 80021e2:	2000      	movs	r0, #0
 80021e4:	e7dc      	b.n	80021a0 <__ledf2+0x88>
 80021e6:	45c8      	cmp	r8, r9
 80021e8:	d8cc      	bhi.n	8002184 <__ledf2+0x6c>
 80021ea:	2000      	movs	r0, #0
 80021ec:	45c8      	cmp	r8, r9
 80021ee:	d2d7      	bcs.n	80021a0 <__ledf2+0x88>
 80021f0:	e7e9      	b.n	80021c6 <__ledf2+0xae>
 80021f2:	4584      	cmp	ip, r0
 80021f4:	d0e3      	beq.n	80021be <__ledf2+0xa6>
 80021f6:	e7c5      	b.n	8002184 <__ledf2+0x6c>
 80021f8:	000007ff 	.word	0x000007ff

080021fc <__aeabi_dmul>:
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	4657      	mov	r7, sl
 8002200:	46de      	mov	lr, fp
 8002202:	464e      	mov	r6, r9
 8002204:	4645      	mov	r5, r8
 8002206:	b5e0      	push	{r5, r6, r7, lr}
 8002208:	001f      	movs	r7, r3
 800220a:	030b      	lsls	r3, r1, #12
 800220c:	0b1b      	lsrs	r3, r3, #12
 800220e:	0016      	movs	r6, r2
 8002210:	469a      	mov	sl, r3
 8002212:	0fca      	lsrs	r2, r1, #31
 8002214:	004b      	lsls	r3, r1, #1
 8002216:	0004      	movs	r4, r0
 8002218:	4693      	mov	fp, r2
 800221a:	b087      	sub	sp, #28
 800221c:	0d5b      	lsrs	r3, r3, #21
 800221e:	d100      	bne.n	8002222 <__aeabi_dmul+0x26>
 8002220:	e0d5      	b.n	80023ce <__aeabi_dmul+0x1d2>
 8002222:	4abb      	ldr	r2, [pc, #748]	@ (8002510 <__aeabi_dmul+0x314>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d100      	bne.n	800222a <__aeabi_dmul+0x2e>
 8002228:	e0f8      	b.n	800241c <__aeabi_dmul+0x220>
 800222a:	4651      	mov	r1, sl
 800222c:	0f42      	lsrs	r2, r0, #29
 800222e:	00c9      	lsls	r1, r1, #3
 8002230:	430a      	orrs	r2, r1
 8002232:	2180      	movs	r1, #128	@ 0x80
 8002234:	0409      	lsls	r1, r1, #16
 8002236:	4311      	orrs	r1, r2
 8002238:	00c2      	lsls	r2, r0, #3
 800223a:	4691      	mov	r9, r2
 800223c:	4ab5      	ldr	r2, [pc, #724]	@ (8002514 <__aeabi_dmul+0x318>)
 800223e:	468a      	mov	sl, r1
 8002240:	189d      	adds	r5, r3, r2
 8002242:	2300      	movs	r3, #0
 8002244:	4698      	mov	r8, r3
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	033c      	lsls	r4, r7, #12
 800224a:	007b      	lsls	r3, r7, #1
 800224c:	0ffa      	lsrs	r2, r7, #31
 800224e:	0030      	movs	r0, r6
 8002250:	0b24      	lsrs	r4, r4, #12
 8002252:	0d5b      	lsrs	r3, r3, #21
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	d100      	bne.n	800225a <__aeabi_dmul+0x5e>
 8002258:	e096      	b.n	8002388 <__aeabi_dmul+0x18c>
 800225a:	4aad      	ldr	r2, [pc, #692]	@ (8002510 <__aeabi_dmul+0x314>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d031      	beq.n	80022c4 <__aeabi_dmul+0xc8>
 8002260:	0f72      	lsrs	r2, r6, #29
 8002262:	00e4      	lsls	r4, r4, #3
 8002264:	4322      	orrs	r2, r4
 8002266:	2480      	movs	r4, #128	@ 0x80
 8002268:	0424      	lsls	r4, r4, #16
 800226a:	4314      	orrs	r4, r2
 800226c:	4aa9      	ldr	r2, [pc, #676]	@ (8002514 <__aeabi_dmul+0x318>)
 800226e:	00f0      	lsls	r0, r6, #3
 8002270:	4694      	mov	ip, r2
 8002272:	4463      	add	r3, ip
 8002274:	195b      	adds	r3, r3, r5
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	9201      	str	r2, [sp, #4]
 800227a:	4642      	mov	r2, r8
 800227c:	2600      	movs	r6, #0
 800227e:	2a0a      	cmp	r2, #10
 8002280:	dc42      	bgt.n	8002308 <__aeabi_dmul+0x10c>
 8002282:	465a      	mov	r2, fp
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	404a      	eors	r2, r1
 8002288:	4693      	mov	fp, r2
 800228a:	4642      	mov	r2, r8
 800228c:	2a02      	cmp	r2, #2
 800228e:	dc32      	bgt.n	80022f6 <__aeabi_dmul+0xfa>
 8002290:	3a01      	subs	r2, #1
 8002292:	2a01      	cmp	r2, #1
 8002294:	d900      	bls.n	8002298 <__aeabi_dmul+0x9c>
 8002296:	e149      	b.n	800252c <__aeabi_dmul+0x330>
 8002298:	2e02      	cmp	r6, #2
 800229a:	d100      	bne.n	800229e <__aeabi_dmul+0xa2>
 800229c:	e0ca      	b.n	8002434 <__aeabi_dmul+0x238>
 800229e:	2e01      	cmp	r6, #1
 80022a0:	d13d      	bne.n	800231e <__aeabi_dmul+0x122>
 80022a2:	2300      	movs	r3, #0
 80022a4:	2400      	movs	r4, #0
 80022a6:	2200      	movs	r2, #0
 80022a8:	0010      	movs	r0, r2
 80022aa:	465a      	mov	r2, fp
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	4323      	orrs	r3, r4
 80022b0:	07d2      	lsls	r2, r2, #31
 80022b2:	4313      	orrs	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	b007      	add	sp, #28
 80022b8:	bcf0      	pop	{r4, r5, r6, r7}
 80022ba:	46bb      	mov	fp, r7
 80022bc:	46b2      	mov	sl, r6
 80022be:	46a9      	mov	r9, r5
 80022c0:	46a0      	mov	r8, r4
 80022c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c4:	4b92      	ldr	r3, [pc, #584]	@ (8002510 <__aeabi_dmul+0x314>)
 80022c6:	4326      	orrs	r6, r4
 80022c8:	18eb      	adds	r3, r5, r3
 80022ca:	2e00      	cmp	r6, #0
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dmul+0xd4>
 80022ce:	e0bb      	b.n	8002448 <__aeabi_dmul+0x24c>
 80022d0:	2203      	movs	r2, #3
 80022d2:	4641      	mov	r1, r8
 80022d4:	4311      	orrs	r1, r2
 80022d6:	465a      	mov	r2, fp
 80022d8:	4688      	mov	r8, r1
 80022da:	9900      	ldr	r1, [sp, #0]
 80022dc:	404a      	eors	r2, r1
 80022de:	2180      	movs	r1, #128	@ 0x80
 80022e0:	0109      	lsls	r1, r1, #4
 80022e2:	468c      	mov	ip, r1
 80022e4:	0029      	movs	r1, r5
 80022e6:	4461      	add	r1, ip
 80022e8:	9101      	str	r1, [sp, #4]
 80022ea:	4641      	mov	r1, r8
 80022ec:	290a      	cmp	r1, #10
 80022ee:	dd00      	ble.n	80022f2 <__aeabi_dmul+0xf6>
 80022f0:	e233      	b.n	800275a <__aeabi_dmul+0x55e>
 80022f2:	4693      	mov	fp, r2
 80022f4:	2603      	movs	r6, #3
 80022f6:	4642      	mov	r2, r8
 80022f8:	2701      	movs	r7, #1
 80022fa:	4097      	lsls	r7, r2
 80022fc:	21a6      	movs	r1, #166	@ 0xa6
 80022fe:	003a      	movs	r2, r7
 8002300:	00c9      	lsls	r1, r1, #3
 8002302:	400a      	ands	r2, r1
 8002304:	420f      	tst	r7, r1
 8002306:	d031      	beq.n	800236c <__aeabi_dmul+0x170>
 8002308:	9e02      	ldr	r6, [sp, #8]
 800230a:	2e02      	cmp	r6, #2
 800230c:	d100      	bne.n	8002310 <__aeabi_dmul+0x114>
 800230e:	e235      	b.n	800277c <__aeabi_dmul+0x580>
 8002310:	2e03      	cmp	r6, #3
 8002312:	d100      	bne.n	8002316 <__aeabi_dmul+0x11a>
 8002314:	e1d2      	b.n	80026bc <__aeabi_dmul+0x4c0>
 8002316:	4654      	mov	r4, sl
 8002318:	4648      	mov	r0, r9
 800231a:	2e01      	cmp	r6, #1
 800231c:	d0c1      	beq.n	80022a2 <__aeabi_dmul+0xa6>
 800231e:	9a01      	ldr	r2, [sp, #4]
 8002320:	4b7d      	ldr	r3, [pc, #500]	@ (8002518 <__aeabi_dmul+0x31c>)
 8002322:	4694      	mov	ip, r2
 8002324:	4463      	add	r3, ip
 8002326:	2b00      	cmp	r3, #0
 8002328:	dc00      	bgt.n	800232c <__aeabi_dmul+0x130>
 800232a:	e0c0      	b.n	80024ae <__aeabi_dmul+0x2b2>
 800232c:	0742      	lsls	r2, r0, #29
 800232e:	d009      	beq.n	8002344 <__aeabi_dmul+0x148>
 8002330:	220f      	movs	r2, #15
 8002332:	4002      	ands	r2, r0
 8002334:	2a04      	cmp	r2, #4
 8002336:	d005      	beq.n	8002344 <__aeabi_dmul+0x148>
 8002338:	1d02      	adds	r2, r0, #4
 800233a:	4282      	cmp	r2, r0
 800233c:	4180      	sbcs	r0, r0
 800233e:	4240      	negs	r0, r0
 8002340:	1824      	adds	r4, r4, r0
 8002342:	0010      	movs	r0, r2
 8002344:	01e2      	lsls	r2, r4, #7
 8002346:	d506      	bpl.n	8002356 <__aeabi_dmul+0x15a>
 8002348:	4b74      	ldr	r3, [pc, #464]	@ (800251c <__aeabi_dmul+0x320>)
 800234a:	9a01      	ldr	r2, [sp, #4]
 800234c:	401c      	ands	r4, r3
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	4694      	mov	ip, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4463      	add	r3, ip
 8002356:	4a72      	ldr	r2, [pc, #456]	@ (8002520 <__aeabi_dmul+0x324>)
 8002358:	4293      	cmp	r3, r2
 800235a:	dc6b      	bgt.n	8002434 <__aeabi_dmul+0x238>
 800235c:	0762      	lsls	r2, r4, #29
 800235e:	08c0      	lsrs	r0, r0, #3
 8002360:	0264      	lsls	r4, r4, #9
 8002362:	055b      	lsls	r3, r3, #21
 8002364:	4302      	orrs	r2, r0
 8002366:	0b24      	lsrs	r4, r4, #12
 8002368:	0d5b      	lsrs	r3, r3, #21
 800236a:	e79d      	b.n	80022a8 <__aeabi_dmul+0xac>
 800236c:	2190      	movs	r1, #144	@ 0x90
 800236e:	0089      	lsls	r1, r1, #2
 8002370:	420f      	tst	r7, r1
 8002372:	d163      	bne.n	800243c <__aeabi_dmul+0x240>
 8002374:	2288      	movs	r2, #136	@ 0x88
 8002376:	423a      	tst	r2, r7
 8002378:	d100      	bne.n	800237c <__aeabi_dmul+0x180>
 800237a:	e0d7      	b.n	800252c <__aeabi_dmul+0x330>
 800237c:	9b00      	ldr	r3, [sp, #0]
 800237e:	46a2      	mov	sl, r4
 8002380:	469b      	mov	fp, r3
 8002382:	4681      	mov	r9, r0
 8002384:	9602      	str	r6, [sp, #8]
 8002386:	e7bf      	b.n	8002308 <__aeabi_dmul+0x10c>
 8002388:	0023      	movs	r3, r4
 800238a:	4333      	orrs	r3, r6
 800238c:	d100      	bne.n	8002390 <__aeabi_dmul+0x194>
 800238e:	e07f      	b.n	8002490 <__aeabi_dmul+0x294>
 8002390:	2c00      	cmp	r4, #0
 8002392:	d100      	bne.n	8002396 <__aeabi_dmul+0x19a>
 8002394:	e1ad      	b.n	80026f2 <__aeabi_dmul+0x4f6>
 8002396:	0020      	movs	r0, r4
 8002398:	f000 ff10 	bl	80031bc <__clzsi2>
 800239c:	0002      	movs	r2, r0
 800239e:	0003      	movs	r3, r0
 80023a0:	3a0b      	subs	r2, #11
 80023a2:	201d      	movs	r0, #29
 80023a4:	0019      	movs	r1, r3
 80023a6:	1a82      	subs	r2, r0, r2
 80023a8:	0030      	movs	r0, r6
 80023aa:	3908      	subs	r1, #8
 80023ac:	40d0      	lsrs	r0, r2
 80023ae:	408c      	lsls	r4, r1
 80023b0:	4304      	orrs	r4, r0
 80023b2:	0030      	movs	r0, r6
 80023b4:	4088      	lsls	r0, r1
 80023b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002524 <__aeabi_dmul+0x328>)
 80023b8:	1aeb      	subs	r3, r5, r3
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	9201      	str	r2, [sp, #4]
 80023c2:	4642      	mov	r2, r8
 80023c4:	2600      	movs	r6, #0
 80023c6:	2a0a      	cmp	r2, #10
 80023c8:	dc00      	bgt.n	80023cc <__aeabi_dmul+0x1d0>
 80023ca:	e75a      	b.n	8002282 <__aeabi_dmul+0x86>
 80023cc:	e79c      	b.n	8002308 <__aeabi_dmul+0x10c>
 80023ce:	4653      	mov	r3, sl
 80023d0:	4303      	orrs	r3, r0
 80023d2:	4699      	mov	r9, r3
 80023d4:	d054      	beq.n	8002480 <__aeabi_dmul+0x284>
 80023d6:	4653      	mov	r3, sl
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d100      	bne.n	80023de <__aeabi_dmul+0x1e2>
 80023dc:	e177      	b.n	80026ce <__aeabi_dmul+0x4d2>
 80023de:	4650      	mov	r0, sl
 80023e0:	f000 feec 	bl	80031bc <__clzsi2>
 80023e4:	230b      	movs	r3, #11
 80023e6:	425b      	negs	r3, r3
 80023e8:	469c      	mov	ip, r3
 80023ea:	0002      	movs	r2, r0
 80023ec:	4484      	add	ip, r0
 80023ee:	0011      	movs	r1, r2
 80023f0:	4650      	mov	r0, sl
 80023f2:	3908      	subs	r1, #8
 80023f4:	4088      	lsls	r0, r1
 80023f6:	231d      	movs	r3, #29
 80023f8:	4680      	mov	r8, r0
 80023fa:	4660      	mov	r0, ip
 80023fc:	1a1b      	subs	r3, r3, r0
 80023fe:	0020      	movs	r0, r4
 8002400:	40d8      	lsrs	r0, r3
 8002402:	0003      	movs	r3, r0
 8002404:	4640      	mov	r0, r8
 8002406:	4303      	orrs	r3, r0
 8002408:	469a      	mov	sl, r3
 800240a:	0023      	movs	r3, r4
 800240c:	408b      	lsls	r3, r1
 800240e:	4699      	mov	r9, r3
 8002410:	2300      	movs	r3, #0
 8002412:	4d44      	ldr	r5, [pc, #272]	@ (8002524 <__aeabi_dmul+0x328>)
 8002414:	4698      	mov	r8, r3
 8002416:	1aad      	subs	r5, r5, r2
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	e715      	b.n	8002248 <__aeabi_dmul+0x4c>
 800241c:	4652      	mov	r2, sl
 800241e:	4302      	orrs	r2, r0
 8002420:	4691      	mov	r9, r2
 8002422:	d126      	bne.n	8002472 <__aeabi_dmul+0x276>
 8002424:	2200      	movs	r2, #0
 8002426:	001d      	movs	r5, r3
 8002428:	2302      	movs	r3, #2
 800242a:	4692      	mov	sl, r2
 800242c:	3208      	adds	r2, #8
 800242e:	4690      	mov	r8, r2
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	e709      	b.n	8002248 <__aeabi_dmul+0x4c>
 8002434:	2400      	movs	r4, #0
 8002436:	2200      	movs	r2, #0
 8002438:	4b35      	ldr	r3, [pc, #212]	@ (8002510 <__aeabi_dmul+0x314>)
 800243a:	e735      	b.n	80022a8 <__aeabi_dmul+0xac>
 800243c:	2300      	movs	r3, #0
 800243e:	2480      	movs	r4, #128	@ 0x80
 8002440:	469b      	mov	fp, r3
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	4b32      	ldr	r3, [pc, #200]	@ (8002510 <__aeabi_dmul+0x314>)
 8002446:	e72f      	b.n	80022a8 <__aeabi_dmul+0xac>
 8002448:	2202      	movs	r2, #2
 800244a:	4641      	mov	r1, r8
 800244c:	4311      	orrs	r1, r2
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	4694      	mov	ip, r2
 8002454:	002a      	movs	r2, r5
 8002456:	4462      	add	r2, ip
 8002458:	4688      	mov	r8, r1
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	290a      	cmp	r1, #10
 800245e:	dd00      	ble.n	8002462 <__aeabi_dmul+0x266>
 8002460:	e752      	b.n	8002308 <__aeabi_dmul+0x10c>
 8002462:	465a      	mov	r2, fp
 8002464:	2000      	movs	r0, #0
 8002466:	9900      	ldr	r1, [sp, #0]
 8002468:	0004      	movs	r4, r0
 800246a:	404a      	eors	r2, r1
 800246c:	4693      	mov	fp, r2
 800246e:	2602      	movs	r6, #2
 8002470:	e70b      	b.n	800228a <__aeabi_dmul+0x8e>
 8002472:	220c      	movs	r2, #12
 8002474:	001d      	movs	r5, r3
 8002476:	2303      	movs	r3, #3
 8002478:	4681      	mov	r9, r0
 800247a:	4690      	mov	r8, r2
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	e6e3      	b.n	8002248 <__aeabi_dmul+0x4c>
 8002480:	2300      	movs	r3, #0
 8002482:	469a      	mov	sl, r3
 8002484:	3304      	adds	r3, #4
 8002486:	4698      	mov	r8, r3
 8002488:	3b03      	subs	r3, #3
 800248a:	2500      	movs	r5, #0
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	e6db      	b.n	8002248 <__aeabi_dmul+0x4c>
 8002490:	4642      	mov	r2, r8
 8002492:	3301      	adds	r3, #1
 8002494:	431a      	orrs	r2, r3
 8002496:	002b      	movs	r3, r5
 8002498:	4690      	mov	r8, r2
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	9201      	str	r2, [sp, #4]
 800249e:	4642      	mov	r2, r8
 80024a0:	2400      	movs	r4, #0
 80024a2:	2000      	movs	r0, #0
 80024a4:	2601      	movs	r6, #1
 80024a6:	2a0a      	cmp	r2, #10
 80024a8:	dc00      	bgt.n	80024ac <__aeabi_dmul+0x2b0>
 80024aa:	e6ea      	b.n	8002282 <__aeabi_dmul+0x86>
 80024ac:	e72c      	b.n	8002308 <__aeabi_dmul+0x10c>
 80024ae:	2201      	movs	r2, #1
 80024b0:	1ad2      	subs	r2, r2, r3
 80024b2:	2a38      	cmp	r2, #56	@ 0x38
 80024b4:	dd00      	ble.n	80024b8 <__aeabi_dmul+0x2bc>
 80024b6:	e6f4      	b.n	80022a2 <__aeabi_dmul+0xa6>
 80024b8:	2a1f      	cmp	r2, #31
 80024ba:	dc00      	bgt.n	80024be <__aeabi_dmul+0x2c2>
 80024bc:	e12a      	b.n	8002714 <__aeabi_dmul+0x518>
 80024be:	211f      	movs	r1, #31
 80024c0:	4249      	negs	r1, r1
 80024c2:	1acb      	subs	r3, r1, r3
 80024c4:	0021      	movs	r1, r4
 80024c6:	40d9      	lsrs	r1, r3
 80024c8:	000b      	movs	r3, r1
 80024ca:	2a20      	cmp	r2, #32
 80024cc:	d005      	beq.n	80024da <__aeabi_dmul+0x2de>
 80024ce:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <__aeabi_dmul+0x32c>)
 80024d0:	9d01      	ldr	r5, [sp, #4]
 80024d2:	4694      	mov	ip, r2
 80024d4:	4465      	add	r5, ip
 80024d6:	40ac      	lsls	r4, r5
 80024d8:	4320      	orrs	r0, r4
 80024da:	1e42      	subs	r2, r0, #1
 80024dc:	4190      	sbcs	r0, r2
 80024de:	4318      	orrs	r0, r3
 80024e0:	2307      	movs	r3, #7
 80024e2:	0019      	movs	r1, r3
 80024e4:	2400      	movs	r4, #0
 80024e6:	4001      	ands	r1, r0
 80024e8:	4203      	tst	r3, r0
 80024ea:	d00c      	beq.n	8002506 <__aeabi_dmul+0x30a>
 80024ec:	230f      	movs	r3, #15
 80024ee:	4003      	ands	r3, r0
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x2fa>
 80024f4:	e140      	b.n	8002778 <__aeabi_dmul+0x57c>
 80024f6:	1d03      	adds	r3, r0, #4
 80024f8:	4283      	cmp	r3, r0
 80024fa:	41a4      	sbcs	r4, r4
 80024fc:	0018      	movs	r0, r3
 80024fe:	4264      	negs	r4, r4
 8002500:	0761      	lsls	r1, r4, #29
 8002502:	0264      	lsls	r4, r4, #9
 8002504:	0b24      	lsrs	r4, r4, #12
 8002506:	08c2      	lsrs	r2, r0, #3
 8002508:	2300      	movs	r3, #0
 800250a:	430a      	orrs	r2, r1
 800250c:	e6cc      	b.n	80022a8 <__aeabi_dmul+0xac>
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	000007ff 	.word	0x000007ff
 8002514:	fffffc01 	.word	0xfffffc01
 8002518:	000003ff 	.word	0x000003ff
 800251c:	feffffff 	.word	0xfeffffff
 8002520:	000007fe 	.word	0x000007fe
 8002524:	fffffc0d 	.word	0xfffffc0d
 8002528:	0000043e 	.word	0x0000043e
 800252c:	4649      	mov	r1, r9
 800252e:	464a      	mov	r2, r9
 8002530:	0409      	lsls	r1, r1, #16
 8002532:	0c09      	lsrs	r1, r1, #16
 8002534:	000d      	movs	r5, r1
 8002536:	0c16      	lsrs	r6, r2, #16
 8002538:	0c02      	lsrs	r2, r0, #16
 800253a:	0400      	lsls	r0, r0, #16
 800253c:	0c00      	lsrs	r0, r0, #16
 800253e:	4345      	muls	r5, r0
 8002540:	46ac      	mov	ip, r5
 8002542:	0005      	movs	r5, r0
 8002544:	4375      	muls	r5, r6
 8002546:	46a8      	mov	r8, r5
 8002548:	0015      	movs	r5, r2
 800254a:	000f      	movs	r7, r1
 800254c:	4375      	muls	r5, r6
 800254e:	9200      	str	r2, [sp, #0]
 8002550:	9502      	str	r5, [sp, #8]
 8002552:	002a      	movs	r2, r5
 8002554:	9d00      	ldr	r5, [sp, #0]
 8002556:	436f      	muls	r7, r5
 8002558:	4665      	mov	r5, ip
 800255a:	0c2d      	lsrs	r5, r5, #16
 800255c:	46a9      	mov	r9, r5
 800255e:	4447      	add	r7, r8
 8002560:	444f      	add	r7, r9
 8002562:	45b8      	cmp	r8, r7
 8002564:	d905      	bls.n	8002572 <__aeabi_dmul+0x376>
 8002566:	0015      	movs	r5, r2
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	0252      	lsls	r2, r2, #9
 800256c:	4690      	mov	r8, r2
 800256e:	4445      	add	r5, r8
 8002570:	9502      	str	r5, [sp, #8]
 8002572:	0c3d      	lsrs	r5, r7, #16
 8002574:	9503      	str	r5, [sp, #12]
 8002576:	4665      	mov	r5, ip
 8002578:	042d      	lsls	r5, r5, #16
 800257a:	043f      	lsls	r7, r7, #16
 800257c:	0c2d      	lsrs	r5, r5, #16
 800257e:	46ac      	mov	ip, r5
 8002580:	003d      	movs	r5, r7
 8002582:	4465      	add	r5, ip
 8002584:	9504      	str	r5, [sp, #16]
 8002586:	0c25      	lsrs	r5, r4, #16
 8002588:	0424      	lsls	r4, r4, #16
 800258a:	0c24      	lsrs	r4, r4, #16
 800258c:	46ac      	mov	ip, r5
 800258e:	0025      	movs	r5, r4
 8002590:	4375      	muls	r5, r6
 8002592:	46a8      	mov	r8, r5
 8002594:	4665      	mov	r5, ip
 8002596:	000f      	movs	r7, r1
 8002598:	4369      	muls	r1, r5
 800259a:	4441      	add	r1, r8
 800259c:	4689      	mov	r9, r1
 800259e:	4367      	muls	r7, r4
 80025a0:	0c39      	lsrs	r1, r7, #16
 80025a2:	4449      	add	r1, r9
 80025a4:	436e      	muls	r6, r5
 80025a6:	4588      	cmp	r8, r1
 80025a8:	d903      	bls.n	80025b2 <__aeabi_dmul+0x3b6>
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	0252      	lsls	r2, r2, #9
 80025ae:	4690      	mov	r8, r2
 80025b0:	4446      	add	r6, r8
 80025b2:	0c0d      	lsrs	r5, r1, #16
 80025b4:	46a8      	mov	r8, r5
 80025b6:	0035      	movs	r5, r6
 80025b8:	4445      	add	r5, r8
 80025ba:	9505      	str	r5, [sp, #20]
 80025bc:	9d03      	ldr	r5, [sp, #12]
 80025be:	043f      	lsls	r7, r7, #16
 80025c0:	46a8      	mov	r8, r5
 80025c2:	0c3f      	lsrs	r7, r7, #16
 80025c4:	0409      	lsls	r1, r1, #16
 80025c6:	19c9      	adds	r1, r1, r7
 80025c8:	4488      	add	r8, r1
 80025ca:	4645      	mov	r5, r8
 80025cc:	9503      	str	r5, [sp, #12]
 80025ce:	4655      	mov	r5, sl
 80025d0:	042e      	lsls	r6, r5, #16
 80025d2:	0c36      	lsrs	r6, r6, #16
 80025d4:	0c2f      	lsrs	r7, r5, #16
 80025d6:	0035      	movs	r5, r6
 80025d8:	4345      	muls	r5, r0
 80025da:	4378      	muls	r0, r7
 80025dc:	4681      	mov	r9, r0
 80025de:	0038      	movs	r0, r7
 80025e0:	46a8      	mov	r8, r5
 80025e2:	0c2d      	lsrs	r5, r5, #16
 80025e4:	46aa      	mov	sl, r5
 80025e6:	9a00      	ldr	r2, [sp, #0]
 80025e8:	4350      	muls	r0, r2
 80025ea:	4372      	muls	r2, r6
 80025ec:	444a      	add	r2, r9
 80025ee:	4452      	add	r2, sl
 80025f0:	4591      	cmp	r9, r2
 80025f2:	d903      	bls.n	80025fc <__aeabi_dmul+0x400>
 80025f4:	2580      	movs	r5, #128	@ 0x80
 80025f6:	026d      	lsls	r5, r5, #9
 80025f8:	46a9      	mov	r9, r5
 80025fa:	4448      	add	r0, r9
 80025fc:	0c15      	lsrs	r5, r2, #16
 80025fe:	46a9      	mov	r9, r5
 8002600:	4645      	mov	r5, r8
 8002602:	042d      	lsls	r5, r5, #16
 8002604:	0c2d      	lsrs	r5, r5, #16
 8002606:	46a8      	mov	r8, r5
 8002608:	4665      	mov	r5, ip
 800260a:	437d      	muls	r5, r7
 800260c:	0412      	lsls	r2, r2, #16
 800260e:	4448      	add	r0, r9
 8002610:	4490      	add	r8, r2
 8002612:	46a9      	mov	r9, r5
 8002614:	0032      	movs	r2, r6
 8002616:	4665      	mov	r5, ip
 8002618:	4362      	muls	r2, r4
 800261a:	436e      	muls	r6, r5
 800261c:	437c      	muls	r4, r7
 800261e:	0c17      	lsrs	r7, r2, #16
 8002620:	1936      	adds	r6, r6, r4
 8002622:	19bf      	adds	r7, r7, r6
 8002624:	42bc      	cmp	r4, r7
 8002626:	d903      	bls.n	8002630 <__aeabi_dmul+0x434>
 8002628:	2480      	movs	r4, #128	@ 0x80
 800262a:	0264      	lsls	r4, r4, #9
 800262c:	46a4      	mov	ip, r4
 800262e:	44e1      	add	r9, ip
 8002630:	9c02      	ldr	r4, [sp, #8]
 8002632:	9e03      	ldr	r6, [sp, #12]
 8002634:	46a4      	mov	ip, r4
 8002636:	9d05      	ldr	r5, [sp, #20]
 8002638:	4466      	add	r6, ip
 800263a:	428e      	cmp	r6, r1
 800263c:	4189      	sbcs	r1, r1
 800263e:	46ac      	mov	ip, r5
 8002640:	0412      	lsls	r2, r2, #16
 8002642:	043c      	lsls	r4, r7, #16
 8002644:	0c12      	lsrs	r2, r2, #16
 8002646:	18a2      	adds	r2, r4, r2
 8002648:	4462      	add	r2, ip
 800264a:	4249      	negs	r1, r1
 800264c:	1854      	adds	r4, r2, r1
 800264e:	4446      	add	r6, r8
 8002650:	46a4      	mov	ip, r4
 8002652:	4546      	cmp	r6, r8
 8002654:	41a4      	sbcs	r4, r4
 8002656:	4682      	mov	sl, r0
 8002658:	4264      	negs	r4, r4
 800265a:	46a0      	mov	r8, r4
 800265c:	42aa      	cmp	r2, r5
 800265e:	4192      	sbcs	r2, r2
 8002660:	458c      	cmp	ip, r1
 8002662:	4189      	sbcs	r1, r1
 8002664:	44e2      	add	sl, ip
 8002666:	44d0      	add	r8, sl
 8002668:	4249      	negs	r1, r1
 800266a:	4252      	negs	r2, r2
 800266c:	430a      	orrs	r2, r1
 800266e:	45a0      	cmp	r8, r4
 8002670:	41a4      	sbcs	r4, r4
 8002672:	4582      	cmp	sl, r0
 8002674:	4189      	sbcs	r1, r1
 8002676:	4264      	negs	r4, r4
 8002678:	4249      	negs	r1, r1
 800267a:	430c      	orrs	r4, r1
 800267c:	4641      	mov	r1, r8
 800267e:	0c3f      	lsrs	r7, r7, #16
 8002680:	19d2      	adds	r2, r2, r7
 8002682:	1912      	adds	r2, r2, r4
 8002684:	0dcc      	lsrs	r4, r1, #23
 8002686:	9904      	ldr	r1, [sp, #16]
 8002688:	0270      	lsls	r0, r6, #9
 800268a:	4308      	orrs	r0, r1
 800268c:	1e41      	subs	r1, r0, #1
 800268e:	4188      	sbcs	r0, r1
 8002690:	4641      	mov	r1, r8
 8002692:	444a      	add	r2, r9
 8002694:	0df6      	lsrs	r6, r6, #23
 8002696:	0252      	lsls	r2, r2, #9
 8002698:	4330      	orrs	r0, r6
 800269a:	0249      	lsls	r1, r1, #9
 800269c:	4314      	orrs	r4, r2
 800269e:	4308      	orrs	r0, r1
 80026a0:	01d2      	lsls	r2, r2, #7
 80026a2:	d535      	bpl.n	8002710 <__aeabi_dmul+0x514>
 80026a4:	2201      	movs	r2, #1
 80026a6:	0843      	lsrs	r3, r0, #1
 80026a8:	4002      	ands	r2, r0
 80026aa:	4313      	orrs	r3, r2
 80026ac:	07e0      	lsls	r0, r4, #31
 80026ae:	4318      	orrs	r0, r3
 80026b0:	0864      	lsrs	r4, r4, #1
 80026b2:	e634      	b.n	800231e <__aeabi_dmul+0x122>
 80026b4:	9b00      	ldr	r3, [sp, #0]
 80026b6:	46a2      	mov	sl, r4
 80026b8:	469b      	mov	fp, r3
 80026ba:	4681      	mov	r9, r0
 80026bc:	2480      	movs	r4, #128	@ 0x80
 80026be:	4653      	mov	r3, sl
 80026c0:	0324      	lsls	r4, r4, #12
 80026c2:	431c      	orrs	r4, r3
 80026c4:	0324      	lsls	r4, r4, #12
 80026c6:	464a      	mov	r2, r9
 80026c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <__aeabi_dmul+0x588>)
 80026ca:	0b24      	lsrs	r4, r4, #12
 80026cc:	e5ec      	b.n	80022a8 <__aeabi_dmul+0xac>
 80026ce:	f000 fd75 	bl	80031bc <__clzsi2>
 80026d2:	2315      	movs	r3, #21
 80026d4:	469c      	mov	ip, r3
 80026d6:	4484      	add	ip, r0
 80026d8:	0002      	movs	r2, r0
 80026da:	4663      	mov	r3, ip
 80026dc:	3220      	adds	r2, #32
 80026de:	2b1c      	cmp	r3, #28
 80026e0:	dc00      	bgt.n	80026e4 <__aeabi_dmul+0x4e8>
 80026e2:	e684      	b.n	80023ee <__aeabi_dmul+0x1f2>
 80026e4:	2300      	movs	r3, #0
 80026e6:	4699      	mov	r9, r3
 80026e8:	0023      	movs	r3, r4
 80026ea:	3808      	subs	r0, #8
 80026ec:	4083      	lsls	r3, r0
 80026ee:	469a      	mov	sl, r3
 80026f0:	e68e      	b.n	8002410 <__aeabi_dmul+0x214>
 80026f2:	f000 fd63 	bl	80031bc <__clzsi2>
 80026f6:	0002      	movs	r2, r0
 80026f8:	0003      	movs	r3, r0
 80026fa:	3215      	adds	r2, #21
 80026fc:	3320      	adds	r3, #32
 80026fe:	2a1c      	cmp	r2, #28
 8002700:	dc00      	bgt.n	8002704 <__aeabi_dmul+0x508>
 8002702:	e64e      	b.n	80023a2 <__aeabi_dmul+0x1a6>
 8002704:	0002      	movs	r2, r0
 8002706:	0034      	movs	r4, r6
 8002708:	3a08      	subs	r2, #8
 800270a:	2000      	movs	r0, #0
 800270c:	4094      	lsls	r4, r2
 800270e:	e652      	b.n	80023b6 <__aeabi_dmul+0x1ba>
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	e604      	b.n	800231e <__aeabi_dmul+0x122>
 8002714:	4b1c      	ldr	r3, [pc, #112]	@ (8002788 <__aeabi_dmul+0x58c>)
 8002716:	0021      	movs	r1, r4
 8002718:	469c      	mov	ip, r3
 800271a:	0003      	movs	r3, r0
 800271c:	9d01      	ldr	r5, [sp, #4]
 800271e:	40d3      	lsrs	r3, r2
 8002720:	4465      	add	r5, ip
 8002722:	40a9      	lsls	r1, r5
 8002724:	4319      	orrs	r1, r3
 8002726:	0003      	movs	r3, r0
 8002728:	40ab      	lsls	r3, r5
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	4183      	sbcs	r3, r0
 800272e:	4319      	orrs	r1, r3
 8002730:	0008      	movs	r0, r1
 8002732:	40d4      	lsrs	r4, r2
 8002734:	074b      	lsls	r3, r1, #29
 8002736:	d009      	beq.n	800274c <__aeabi_dmul+0x550>
 8002738:	230f      	movs	r3, #15
 800273a:	400b      	ands	r3, r1
 800273c:	2b04      	cmp	r3, #4
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x550>
 8002740:	1d0b      	adds	r3, r1, #4
 8002742:	428b      	cmp	r3, r1
 8002744:	4180      	sbcs	r0, r0
 8002746:	4240      	negs	r0, r0
 8002748:	1824      	adds	r4, r4, r0
 800274a:	0018      	movs	r0, r3
 800274c:	0223      	lsls	r3, r4, #8
 800274e:	d400      	bmi.n	8002752 <__aeabi_dmul+0x556>
 8002750:	e6d6      	b.n	8002500 <__aeabi_dmul+0x304>
 8002752:	2301      	movs	r3, #1
 8002754:	2400      	movs	r4, #0
 8002756:	2200      	movs	r2, #0
 8002758:	e5a6      	b.n	80022a8 <__aeabi_dmul+0xac>
 800275a:	290f      	cmp	r1, #15
 800275c:	d1aa      	bne.n	80026b4 <__aeabi_dmul+0x4b8>
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	4652      	mov	r2, sl
 8002762:	031b      	lsls	r3, r3, #12
 8002764:	421a      	tst	r2, r3
 8002766:	d0a9      	beq.n	80026bc <__aeabi_dmul+0x4c0>
 8002768:	421c      	tst	r4, r3
 800276a:	d1a7      	bne.n	80026bc <__aeabi_dmul+0x4c0>
 800276c:	431c      	orrs	r4, r3
 800276e:	9b00      	ldr	r3, [sp, #0]
 8002770:	0002      	movs	r2, r0
 8002772:	469b      	mov	fp, r3
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <__aeabi_dmul+0x588>)
 8002776:	e597      	b.n	80022a8 <__aeabi_dmul+0xac>
 8002778:	2400      	movs	r4, #0
 800277a:	e6c1      	b.n	8002500 <__aeabi_dmul+0x304>
 800277c:	2400      	movs	r4, #0
 800277e:	4b01      	ldr	r3, [pc, #4]	@ (8002784 <__aeabi_dmul+0x588>)
 8002780:	0022      	movs	r2, r4
 8002782:	e591      	b.n	80022a8 <__aeabi_dmul+0xac>
 8002784:	000007ff 	.word	0x000007ff
 8002788:	0000041e 	.word	0x0000041e

0800278c <__aeabi_dsub>:
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	464e      	mov	r6, r9
 8002790:	4645      	mov	r5, r8
 8002792:	46de      	mov	lr, fp
 8002794:	4657      	mov	r7, sl
 8002796:	b5e0      	push	{r5, r6, r7, lr}
 8002798:	b085      	sub	sp, #20
 800279a:	9000      	str	r0, [sp, #0]
 800279c:	9101      	str	r1, [sp, #4]
 800279e:	030c      	lsls	r4, r1, #12
 80027a0:	004f      	lsls	r7, r1, #1
 80027a2:	0fce      	lsrs	r6, r1, #31
 80027a4:	0a61      	lsrs	r1, r4, #9
 80027a6:	9c00      	ldr	r4, [sp, #0]
 80027a8:	46b0      	mov	r8, r6
 80027aa:	0f64      	lsrs	r4, r4, #29
 80027ac:	430c      	orrs	r4, r1
 80027ae:	9900      	ldr	r1, [sp, #0]
 80027b0:	0d7f      	lsrs	r7, r7, #21
 80027b2:	00c8      	lsls	r0, r1, #3
 80027b4:	0011      	movs	r1, r2
 80027b6:	001a      	movs	r2, r3
 80027b8:	031b      	lsls	r3, r3, #12
 80027ba:	469c      	mov	ip, r3
 80027bc:	9100      	str	r1, [sp, #0]
 80027be:	9201      	str	r2, [sp, #4]
 80027c0:	0051      	lsls	r1, r2, #1
 80027c2:	0d4b      	lsrs	r3, r1, #21
 80027c4:	4699      	mov	r9, r3
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	9d00      	ldr	r5, [sp, #0]
 80027ca:	0fd9      	lsrs	r1, r3, #31
 80027cc:	4663      	mov	r3, ip
 80027ce:	0f6a      	lsrs	r2, r5, #29
 80027d0:	0a5b      	lsrs	r3, r3, #9
 80027d2:	4313      	orrs	r3, r2
 80027d4:	00ea      	lsls	r2, r5, #3
 80027d6:	4694      	mov	ip, r2
 80027d8:	4693      	mov	fp, r2
 80027da:	4ac1      	ldr	r2, [pc, #772]	@ (8002ae0 <__aeabi_dsub+0x354>)
 80027dc:	9003      	str	r0, [sp, #12]
 80027de:	9302      	str	r3, [sp, #8]
 80027e0:	4591      	cmp	r9, r2
 80027e2:	d100      	bne.n	80027e6 <__aeabi_dsub+0x5a>
 80027e4:	e0cd      	b.n	8002982 <__aeabi_dsub+0x1f6>
 80027e6:	2501      	movs	r5, #1
 80027e8:	4069      	eors	r1, r5
 80027ea:	464d      	mov	r5, r9
 80027ec:	1b7d      	subs	r5, r7, r5
 80027ee:	46aa      	mov	sl, r5
 80027f0:	428e      	cmp	r6, r1
 80027f2:	d100      	bne.n	80027f6 <__aeabi_dsub+0x6a>
 80027f4:	e080      	b.n	80028f8 <__aeabi_dsub+0x16c>
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	dc00      	bgt.n	80027fc <__aeabi_dsub+0x70>
 80027fa:	e335      	b.n	8002e68 <__aeabi_dsub+0x6dc>
 80027fc:	4649      	mov	r1, r9
 80027fe:	2900      	cmp	r1, #0
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x78>
 8002802:	e0df      	b.n	80029c4 <__aeabi_dsub+0x238>
 8002804:	4297      	cmp	r7, r2
 8002806:	d100      	bne.n	800280a <__aeabi_dsub+0x7e>
 8002808:	e194      	b.n	8002b34 <__aeabi_dsub+0x3a8>
 800280a:	4652      	mov	r2, sl
 800280c:	2501      	movs	r5, #1
 800280e:	2a38      	cmp	r2, #56	@ 0x38
 8002810:	dc19      	bgt.n	8002846 <__aeabi_dsub+0xba>
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	9b02      	ldr	r3, [sp, #8]
 8002816:	0412      	lsls	r2, r2, #16
 8002818:	4313      	orrs	r3, r2
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	4652      	mov	r2, sl
 800281e:	2a1f      	cmp	r2, #31
 8002820:	dd00      	ble.n	8002824 <__aeabi_dsub+0x98>
 8002822:	e1e3      	b.n	8002bec <__aeabi_dsub+0x460>
 8002824:	4653      	mov	r3, sl
 8002826:	2220      	movs	r2, #32
 8002828:	4661      	mov	r1, ip
 800282a:	9d02      	ldr	r5, [sp, #8]
 800282c:	1ad2      	subs	r2, r2, r3
 800282e:	4095      	lsls	r5, r2
 8002830:	40d9      	lsrs	r1, r3
 8002832:	430d      	orrs	r5, r1
 8002834:	4661      	mov	r1, ip
 8002836:	4091      	lsls	r1, r2
 8002838:	000a      	movs	r2, r1
 800283a:	1e51      	subs	r1, r2, #1
 800283c:	418a      	sbcs	r2, r1
 800283e:	4315      	orrs	r5, r2
 8002840:	9a02      	ldr	r2, [sp, #8]
 8002842:	40da      	lsrs	r2, r3
 8002844:	1aa4      	subs	r4, r4, r2
 8002846:	1b45      	subs	r5, r0, r5
 8002848:	42a8      	cmp	r0, r5
 800284a:	4180      	sbcs	r0, r0
 800284c:	4240      	negs	r0, r0
 800284e:	1a24      	subs	r4, r4, r0
 8002850:	0223      	lsls	r3, r4, #8
 8002852:	d400      	bmi.n	8002856 <__aeabi_dsub+0xca>
 8002854:	e13d      	b.n	8002ad2 <__aeabi_dsub+0x346>
 8002856:	0264      	lsls	r4, r4, #9
 8002858:	0a64      	lsrs	r4, r4, #9
 800285a:	2c00      	cmp	r4, #0
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0xd4>
 800285e:	e147      	b.n	8002af0 <__aeabi_dsub+0x364>
 8002860:	0020      	movs	r0, r4
 8002862:	f000 fcab 	bl	80031bc <__clzsi2>
 8002866:	0003      	movs	r3, r0
 8002868:	3b08      	subs	r3, #8
 800286a:	2120      	movs	r1, #32
 800286c:	0028      	movs	r0, r5
 800286e:	1aca      	subs	r2, r1, r3
 8002870:	40d0      	lsrs	r0, r2
 8002872:	409c      	lsls	r4, r3
 8002874:	0002      	movs	r2, r0
 8002876:	409d      	lsls	r5, r3
 8002878:	4322      	orrs	r2, r4
 800287a:	429f      	cmp	r7, r3
 800287c:	dd00      	ble.n	8002880 <__aeabi_dsub+0xf4>
 800287e:	e177      	b.n	8002b70 <__aeabi_dsub+0x3e4>
 8002880:	1bd8      	subs	r0, r3, r7
 8002882:	3001      	adds	r0, #1
 8002884:	1a09      	subs	r1, r1, r0
 8002886:	002c      	movs	r4, r5
 8002888:	408d      	lsls	r5, r1
 800288a:	40c4      	lsrs	r4, r0
 800288c:	1e6b      	subs	r3, r5, #1
 800288e:	419d      	sbcs	r5, r3
 8002890:	0013      	movs	r3, r2
 8002892:	40c2      	lsrs	r2, r0
 8002894:	408b      	lsls	r3, r1
 8002896:	4325      	orrs	r5, r4
 8002898:	2700      	movs	r7, #0
 800289a:	0014      	movs	r4, r2
 800289c:	431d      	orrs	r5, r3
 800289e:	076b      	lsls	r3, r5, #29
 80028a0:	d009      	beq.n	80028b6 <__aeabi_dsub+0x12a>
 80028a2:	230f      	movs	r3, #15
 80028a4:	402b      	ands	r3, r5
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d005      	beq.n	80028b6 <__aeabi_dsub+0x12a>
 80028aa:	1d2b      	adds	r3, r5, #4
 80028ac:	42ab      	cmp	r3, r5
 80028ae:	41ad      	sbcs	r5, r5
 80028b0:	426d      	negs	r5, r5
 80028b2:	1964      	adds	r4, r4, r5
 80028b4:	001d      	movs	r5, r3
 80028b6:	0223      	lsls	r3, r4, #8
 80028b8:	d400      	bmi.n	80028bc <__aeabi_dsub+0x130>
 80028ba:	e140      	b.n	8002b3e <__aeabi_dsub+0x3b2>
 80028bc:	4a88      	ldr	r2, [pc, #544]	@ (8002ae0 <__aeabi_dsub+0x354>)
 80028be:	3701      	adds	r7, #1
 80028c0:	4297      	cmp	r7, r2
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x13a>
 80028c4:	e101      	b.n	8002aca <__aeabi_dsub+0x33e>
 80028c6:	2601      	movs	r6, #1
 80028c8:	4643      	mov	r3, r8
 80028ca:	4986      	ldr	r1, [pc, #536]	@ (8002ae4 <__aeabi_dsub+0x358>)
 80028cc:	08ed      	lsrs	r5, r5, #3
 80028ce:	4021      	ands	r1, r4
 80028d0:	074a      	lsls	r2, r1, #29
 80028d2:	432a      	orrs	r2, r5
 80028d4:	057c      	lsls	r4, r7, #21
 80028d6:	024d      	lsls	r5, r1, #9
 80028d8:	0b2d      	lsrs	r5, r5, #12
 80028da:	0d64      	lsrs	r4, r4, #21
 80028dc:	401e      	ands	r6, r3
 80028de:	0524      	lsls	r4, r4, #20
 80028e0:	432c      	orrs	r4, r5
 80028e2:	07f6      	lsls	r6, r6, #31
 80028e4:	4334      	orrs	r4, r6
 80028e6:	0010      	movs	r0, r2
 80028e8:	0021      	movs	r1, r4
 80028ea:	b005      	add	sp, #20
 80028ec:	bcf0      	pop	{r4, r5, r6, r7}
 80028ee:	46bb      	mov	fp, r7
 80028f0:	46b2      	mov	sl, r6
 80028f2:	46a9      	mov	r9, r5
 80028f4:	46a0      	mov	r8, r4
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dsub+0x172>
 80028fc:	e2d0      	b.n	8002ea0 <__aeabi_dsub+0x714>
 80028fe:	4649      	mov	r1, r9
 8002900:	2900      	cmp	r1, #0
 8002902:	d000      	beq.n	8002906 <__aeabi_dsub+0x17a>
 8002904:	e0d4      	b.n	8002ab0 <__aeabi_dsub+0x324>
 8002906:	4661      	mov	r1, ip
 8002908:	9b02      	ldr	r3, [sp, #8]
 800290a:	4319      	orrs	r1, r3
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x184>
 800290e:	e12b      	b.n	8002b68 <__aeabi_dsub+0x3dc>
 8002910:	1e69      	subs	r1, r5, #1
 8002912:	2d01      	cmp	r5, #1
 8002914:	d100      	bne.n	8002918 <__aeabi_dsub+0x18c>
 8002916:	e1d9      	b.n	8002ccc <__aeabi_dsub+0x540>
 8002918:	4295      	cmp	r5, r2
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x192>
 800291c:	e10a      	b.n	8002b34 <__aeabi_dsub+0x3a8>
 800291e:	2501      	movs	r5, #1
 8002920:	2938      	cmp	r1, #56	@ 0x38
 8002922:	dc17      	bgt.n	8002954 <__aeabi_dsub+0x1c8>
 8002924:	468a      	mov	sl, r1
 8002926:	4653      	mov	r3, sl
 8002928:	2b1f      	cmp	r3, #31
 800292a:	dd00      	ble.n	800292e <__aeabi_dsub+0x1a2>
 800292c:	e1e7      	b.n	8002cfe <__aeabi_dsub+0x572>
 800292e:	2220      	movs	r2, #32
 8002930:	1ad2      	subs	r2, r2, r3
 8002932:	9b02      	ldr	r3, [sp, #8]
 8002934:	4661      	mov	r1, ip
 8002936:	4093      	lsls	r3, r2
 8002938:	001d      	movs	r5, r3
 800293a:	4653      	mov	r3, sl
 800293c:	40d9      	lsrs	r1, r3
 800293e:	4663      	mov	r3, ip
 8002940:	4093      	lsls	r3, r2
 8002942:	001a      	movs	r2, r3
 8002944:	430d      	orrs	r5, r1
 8002946:	1e51      	subs	r1, r2, #1
 8002948:	418a      	sbcs	r2, r1
 800294a:	4653      	mov	r3, sl
 800294c:	4315      	orrs	r5, r2
 800294e:	9a02      	ldr	r2, [sp, #8]
 8002950:	40da      	lsrs	r2, r3
 8002952:	18a4      	adds	r4, r4, r2
 8002954:	182d      	adds	r5, r5, r0
 8002956:	4285      	cmp	r5, r0
 8002958:	4180      	sbcs	r0, r0
 800295a:	4240      	negs	r0, r0
 800295c:	1824      	adds	r4, r4, r0
 800295e:	0223      	lsls	r3, r4, #8
 8002960:	d400      	bmi.n	8002964 <__aeabi_dsub+0x1d8>
 8002962:	e0b6      	b.n	8002ad2 <__aeabi_dsub+0x346>
 8002964:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae0 <__aeabi_dsub+0x354>)
 8002966:	3701      	adds	r7, #1
 8002968:	429f      	cmp	r7, r3
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x1e2>
 800296c:	e0ad      	b.n	8002aca <__aeabi_dsub+0x33e>
 800296e:	2101      	movs	r1, #1
 8002970:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae4 <__aeabi_dsub+0x358>)
 8002972:	086a      	lsrs	r2, r5, #1
 8002974:	401c      	ands	r4, r3
 8002976:	4029      	ands	r1, r5
 8002978:	430a      	orrs	r2, r1
 800297a:	07e5      	lsls	r5, r4, #31
 800297c:	4315      	orrs	r5, r2
 800297e:	0864      	lsrs	r4, r4, #1
 8002980:	e78d      	b.n	800289e <__aeabi_dsub+0x112>
 8002982:	4a59      	ldr	r2, [pc, #356]	@ (8002ae8 <__aeabi_dsub+0x35c>)
 8002984:	9b02      	ldr	r3, [sp, #8]
 8002986:	4692      	mov	sl, r2
 8002988:	4662      	mov	r2, ip
 800298a:	44ba      	add	sl, r7
 800298c:	431a      	orrs	r2, r3
 800298e:	d02c      	beq.n	80029ea <__aeabi_dsub+0x25e>
 8002990:	428e      	cmp	r6, r1
 8002992:	d02e      	beq.n	80029f2 <__aeabi_dsub+0x266>
 8002994:	4652      	mov	r2, sl
 8002996:	2a00      	cmp	r2, #0
 8002998:	d060      	beq.n	8002a5c <__aeabi_dsub+0x2d0>
 800299a:	2f00      	cmp	r7, #0
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x214>
 800299e:	e0db      	b.n	8002b58 <__aeabi_dsub+0x3cc>
 80029a0:	4663      	mov	r3, ip
 80029a2:	000e      	movs	r6, r1
 80029a4:	9c02      	ldr	r4, [sp, #8]
 80029a6:	08d8      	lsrs	r0, r3, #3
 80029a8:	0762      	lsls	r2, r4, #29
 80029aa:	4302      	orrs	r2, r0
 80029ac:	08e4      	lsrs	r4, r4, #3
 80029ae:	0013      	movs	r3, r2
 80029b0:	4323      	orrs	r3, r4
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x22a>
 80029b4:	e254      	b.n	8002e60 <__aeabi_dsub+0x6d4>
 80029b6:	2580      	movs	r5, #128	@ 0x80
 80029b8:	032d      	lsls	r5, r5, #12
 80029ba:	4325      	orrs	r5, r4
 80029bc:	032d      	lsls	r5, r5, #12
 80029be:	4c48      	ldr	r4, [pc, #288]	@ (8002ae0 <__aeabi_dsub+0x354>)
 80029c0:	0b2d      	lsrs	r5, r5, #12
 80029c2:	e78c      	b.n	80028de <__aeabi_dsub+0x152>
 80029c4:	4661      	mov	r1, ip
 80029c6:	9b02      	ldr	r3, [sp, #8]
 80029c8:	4319      	orrs	r1, r3
 80029ca:	d100      	bne.n	80029ce <__aeabi_dsub+0x242>
 80029cc:	e0cc      	b.n	8002b68 <__aeabi_dsub+0x3dc>
 80029ce:	0029      	movs	r1, r5
 80029d0:	3901      	subs	r1, #1
 80029d2:	2d01      	cmp	r5, #1
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x24c>
 80029d6:	e188      	b.n	8002cea <__aeabi_dsub+0x55e>
 80029d8:	4295      	cmp	r5, r2
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x252>
 80029dc:	e0aa      	b.n	8002b34 <__aeabi_dsub+0x3a8>
 80029de:	2501      	movs	r5, #1
 80029e0:	2938      	cmp	r1, #56	@ 0x38
 80029e2:	dd00      	ble.n	80029e6 <__aeabi_dsub+0x25a>
 80029e4:	e72f      	b.n	8002846 <__aeabi_dsub+0xba>
 80029e6:	468a      	mov	sl, r1
 80029e8:	e718      	b.n	800281c <__aeabi_dsub+0x90>
 80029ea:	2201      	movs	r2, #1
 80029ec:	4051      	eors	r1, r2
 80029ee:	428e      	cmp	r6, r1
 80029f0:	d1d0      	bne.n	8002994 <__aeabi_dsub+0x208>
 80029f2:	4653      	mov	r3, sl
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d100      	bne.n	80029fa <__aeabi_dsub+0x26e>
 80029f8:	e0be      	b.n	8002b78 <__aeabi_dsub+0x3ec>
 80029fa:	2f00      	cmp	r7, #0
 80029fc:	d000      	beq.n	8002a00 <__aeabi_dsub+0x274>
 80029fe:	e138      	b.n	8002c72 <__aeabi_dsub+0x4e6>
 8002a00:	46ca      	mov	sl, r9
 8002a02:	0022      	movs	r2, r4
 8002a04:	4302      	orrs	r2, r0
 8002a06:	d100      	bne.n	8002a0a <__aeabi_dsub+0x27e>
 8002a08:	e1e2      	b.n	8002dd0 <__aeabi_dsub+0x644>
 8002a0a:	4653      	mov	r3, sl
 8002a0c:	1e59      	subs	r1, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x288>
 8002a12:	e20d      	b.n	8002e30 <__aeabi_dsub+0x6a4>
 8002a14:	4a32      	ldr	r2, [pc, #200]	@ (8002ae0 <__aeabi_dsub+0x354>)
 8002a16:	4592      	cmp	sl, r2
 8002a18:	d100      	bne.n	8002a1c <__aeabi_dsub+0x290>
 8002a1a:	e1d2      	b.n	8002dc2 <__aeabi_dsub+0x636>
 8002a1c:	2701      	movs	r7, #1
 8002a1e:	2938      	cmp	r1, #56	@ 0x38
 8002a20:	dc13      	bgt.n	8002a4a <__aeabi_dsub+0x2be>
 8002a22:	291f      	cmp	r1, #31
 8002a24:	dd00      	ble.n	8002a28 <__aeabi_dsub+0x29c>
 8002a26:	e1ee      	b.n	8002e06 <__aeabi_dsub+0x67a>
 8002a28:	2220      	movs	r2, #32
 8002a2a:	9b02      	ldr	r3, [sp, #8]
 8002a2c:	1a52      	subs	r2, r2, r1
 8002a2e:	0025      	movs	r5, r4
 8002a30:	0007      	movs	r7, r0
 8002a32:	469a      	mov	sl, r3
 8002a34:	40cc      	lsrs	r4, r1
 8002a36:	4090      	lsls	r0, r2
 8002a38:	4095      	lsls	r5, r2
 8002a3a:	40cf      	lsrs	r7, r1
 8002a3c:	44a2      	add	sl, r4
 8002a3e:	1e42      	subs	r2, r0, #1
 8002a40:	4190      	sbcs	r0, r2
 8002a42:	4653      	mov	r3, sl
 8002a44:	432f      	orrs	r7, r5
 8002a46:	4307      	orrs	r7, r0
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	003d      	movs	r5, r7
 8002a4c:	4465      	add	r5, ip
 8002a4e:	4565      	cmp	r5, ip
 8002a50:	4192      	sbcs	r2, r2
 8002a52:	9b02      	ldr	r3, [sp, #8]
 8002a54:	4252      	negs	r2, r2
 8002a56:	464f      	mov	r7, r9
 8002a58:	18d4      	adds	r4, r2, r3
 8002a5a:	e780      	b.n	800295e <__aeabi_dsub+0x1d2>
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <__aeabi_dsub+0x360>)
 8002a5e:	1c7d      	adds	r5, r7, #1
 8002a60:	4215      	tst	r5, r2
 8002a62:	d000      	beq.n	8002a66 <__aeabi_dsub+0x2da>
 8002a64:	e0aa      	b.n	8002bbc <__aeabi_dsub+0x430>
 8002a66:	4662      	mov	r2, ip
 8002a68:	0025      	movs	r5, r4
 8002a6a:	9b02      	ldr	r3, [sp, #8]
 8002a6c:	4305      	orrs	r5, r0
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	2f00      	cmp	r7, #0
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x2ea>
 8002a74:	e0f5      	b.n	8002c62 <__aeabi_dsub+0x4d6>
 8002a76:	2d00      	cmp	r5, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x2f0>
 8002a7a:	e16b      	b.n	8002d54 <__aeabi_dsub+0x5c8>
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d100      	bne.n	8002a82 <__aeabi_dsub+0x2f6>
 8002a80:	e152      	b.n	8002d28 <__aeabi_dsub+0x59c>
 8002a82:	4663      	mov	r3, ip
 8002a84:	1ac5      	subs	r5, r0, r3
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	1ae2      	subs	r2, r4, r3
 8002a8a:	42a8      	cmp	r0, r5
 8002a8c:	419b      	sbcs	r3, r3
 8002a8e:	425b      	negs	r3, r3
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	d400      	bmi.n	8002a98 <__aeabi_dsub+0x30c>
 8002a96:	e1d5      	b.n	8002e44 <__aeabi_dsub+0x6b8>
 8002a98:	4663      	mov	r3, ip
 8002a9a:	1a1d      	subs	r5, r3, r0
 8002a9c:	45ac      	cmp	ip, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	2601      	movs	r6, #1
 8002aa2:	9b02      	ldr	r3, [sp, #8]
 8002aa4:	4252      	negs	r2, r2
 8002aa6:	1b1c      	subs	r4, r3, r4
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	1aa4      	subs	r4, r4, r2
 8002aac:	400e      	ands	r6, r1
 8002aae:	e6f6      	b.n	800289e <__aeabi_dsub+0x112>
 8002ab0:	4297      	cmp	r7, r2
 8002ab2:	d03f      	beq.n	8002b34 <__aeabi_dsub+0x3a8>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	2501      	movs	r5, #1
 8002ab8:	2a38      	cmp	r2, #56	@ 0x38
 8002aba:	dd00      	ble.n	8002abe <__aeabi_dsub+0x332>
 8002abc:	e74a      	b.n	8002954 <__aeabi_dsub+0x1c8>
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	9b02      	ldr	r3, [sp, #8]
 8002ac2:	0412      	lsls	r2, r2, #16
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	e72d      	b.n	8002926 <__aeabi_dsub+0x19a>
 8002aca:	003c      	movs	r4, r7
 8002acc:	2500      	movs	r5, #0
 8002ace:	2200      	movs	r2, #0
 8002ad0:	e705      	b.n	80028de <__aeabi_dsub+0x152>
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	402b      	ands	r3, r5
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d000      	beq.n	8002adc <__aeabi_dsub+0x350>
 8002ada:	e6e2      	b.n	80028a2 <__aeabi_dsub+0x116>
 8002adc:	e06b      	b.n	8002bb6 <__aeabi_dsub+0x42a>
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	000007ff 	.word	0x000007ff
 8002ae4:	ff7fffff 	.word	0xff7fffff
 8002ae8:	fffff801 	.word	0xfffff801
 8002aec:	000007fe 	.word	0x000007fe
 8002af0:	0028      	movs	r0, r5
 8002af2:	f000 fb63 	bl	80031bc <__clzsi2>
 8002af6:	0003      	movs	r3, r0
 8002af8:	3318      	adds	r3, #24
 8002afa:	2b1f      	cmp	r3, #31
 8002afc:	dc00      	bgt.n	8002b00 <__aeabi_dsub+0x374>
 8002afe:	e6b4      	b.n	800286a <__aeabi_dsub+0xde>
 8002b00:	002a      	movs	r2, r5
 8002b02:	3808      	subs	r0, #8
 8002b04:	4082      	lsls	r2, r0
 8002b06:	429f      	cmp	r7, r3
 8002b08:	dd00      	ble.n	8002b0c <__aeabi_dsub+0x380>
 8002b0a:	e0b9      	b.n	8002c80 <__aeabi_dsub+0x4f4>
 8002b0c:	1bdb      	subs	r3, r3, r7
 8002b0e:	1c58      	adds	r0, r3, #1
 8002b10:	281f      	cmp	r0, #31
 8002b12:	dc00      	bgt.n	8002b16 <__aeabi_dsub+0x38a>
 8002b14:	e1a0      	b.n	8002e58 <__aeabi_dsub+0x6cc>
 8002b16:	0015      	movs	r5, r2
 8002b18:	3b1f      	subs	r3, #31
 8002b1a:	40dd      	lsrs	r5, r3
 8002b1c:	2820      	cmp	r0, #32
 8002b1e:	d005      	beq.n	8002b2c <__aeabi_dsub+0x3a0>
 8002b20:	2340      	movs	r3, #64	@ 0x40
 8002b22:	1a1b      	subs	r3, r3, r0
 8002b24:	409a      	lsls	r2, r3
 8002b26:	1e53      	subs	r3, r2, #1
 8002b28:	419a      	sbcs	r2, r3
 8002b2a:	4315      	orrs	r5, r2
 8002b2c:	2307      	movs	r3, #7
 8002b2e:	2700      	movs	r7, #0
 8002b30:	402b      	ands	r3, r5
 8002b32:	e7d0      	b.n	8002ad6 <__aeabi_dsub+0x34a>
 8002b34:	08c0      	lsrs	r0, r0, #3
 8002b36:	0762      	lsls	r2, r4, #29
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	08e4      	lsrs	r4, r4, #3
 8002b3c:	e737      	b.n	80029ae <__aeabi_dsub+0x222>
 8002b3e:	08ea      	lsrs	r2, r5, #3
 8002b40:	0763      	lsls	r3, r4, #29
 8002b42:	431a      	orrs	r2, r3
 8002b44:	4bd3      	ldr	r3, [pc, #844]	@ (8002e94 <__aeabi_dsub+0x708>)
 8002b46:	08e4      	lsrs	r4, r4, #3
 8002b48:	429f      	cmp	r7, r3
 8002b4a:	d100      	bne.n	8002b4e <__aeabi_dsub+0x3c2>
 8002b4c:	e72f      	b.n	80029ae <__aeabi_dsub+0x222>
 8002b4e:	0324      	lsls	r4, r4, #12
 8002b50:	0b25      	lsrs	r5, r4, #12
 8002b52:	057c      	lsls	r4, r7, #21
 8002b54:	0d64      	lsrs	r4, r4, #21
 8002b56:	e6c2      	b.n	80028de <__aeabi_dsub+0x152>
 8002b58:	46ca      	mov	sl, r9
 8002b5a:	0022      	movs	r2, r4
 8002b5c:	4302      	orrs	r2, r0
 8002b5e:	d158      	bne.n	8002c12 <__aeabi_dsub+0x486>
 8002b60:	4663      	mov	r3, ip
 8002b62:	000e      	movs	r6, r1
 8002b64:	9c02      	ldr	r4, [sp, #8]
 8002b66:	9303      	str	r3, [sp, #12]
 8002b68:	9b03      	ldr	r3, [sp, #12]
 8002b6a:	4657      	mov	r7, sl
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	e7e7      	b.n	8002b40 <__aeabi_dsub+0x3b4>
 8002b70:	4cc9      	ldr	r4, [pc, #804]	@ (8002e98 <__aeabi_dsub+0x70c>)
 8002b72:	1aff      	subs	r7, r7, r3
 8002b74:	4014      	ands	r4, r2
 8002b76:	e692      	b.n	800289e <__aeabi_dsub+0x112>
 8002b78:	4dc8      	ldr	r5, [pc, #800]	@ (8002e9c <__aeabi_dsub+0x710>)
 8002b7a:	1c7a      	adds	r2, r7, #1
 8002b7c:	422a      	tst	r2, r5
 8002b7e:	d000      	beq.n	8002b82 <__aeabi_dsub+0x3f6>
 8002b80:	e084      	b.n	8002c8c <__aeabi_dsub+0x500>
 8002b82:	0022      	movs	r2, r4
 8002b84:	4302      	orrs	r2, r0
 8002b86:	2f00      	cmp	r7, #0
 8002b88:	d000      	beq.n	8002b8c <__aeabi_dsub+0x400>
 8002b8a:	e0ef      	b.n	8002d6c <__aeabi_dsub+0x5e0>
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d100      	bne.n	8002b92 <__aeabi_dsub+0x406>
 8002b90:	e0e5      	b.n	8002d5e <__aeabi_dsub+0x5d2>
 8002b92:	4662      	mov	r2, ip
 8002b94:	9902      	ldr	r1, [sp, #8]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0x410>
 8002b9a:	e0c5      	b.n	8002d28 <__aeabi_dsub+0x59c>
 8002b9c:	4663      	mov	r3, ip
 8002b9e:	18c5      	adds	r5, r0, r3
 8002ba0:	468c      	mov	ip, r1
 8002ba2:	4285      	cmp	r5, r0
 8002ba4:	4180      	sbcs	r0, r0
 8002ba6:	4464      	add	r4, ip
 8002ba8:	4240      	negs	r0, r0
 8002baa:	1824      	adds	r4, r4, r0
 8002bac:	0223      	lsls	r3, r4, #8
 8002bae:	d502      	bpl.n	8002bb6 <__aeabi_dsub+0x42a>
 8002bb0:	4bb9      	ldr	r3, [pc, #740]	@ (8002e98 <__aeabi_dsub+0x70c>)
 8002bb2:	3701      	adds	r7, #1
 8002bb4:	401c      	ands	r4, r3
 8002bb6:	46ba      	mov	sl, r7
 8002bb8:	9503      	str	r5, [sp, #12]
 8002bba:	e7d5      	b.n	8002b68 <__aeabi_dsub+0x3dc>
 8002bbc:	4662      	mov	r2, ip
 8002bbe:	1a85      	subs	r5, r0, r2
 8002bc0:	42a8      	cmp	r0, r5
 8002bc2:	4192      	sbcs	r2, r2
 8002bc4:	4252      	negs	r2, r2
 8002bc6:	4691      	mov	r9, r2
 8002bc8:	9b02      	ldr	r3, [sp, #8]
 8002bca:	1ae3      	subs	r3, r4, r3
 8002bcc:	001a      	movs	r2, r3
 8002bce:	464b      	mov	r3, r9
 8002bd0:	1ad2      	subs	r2, r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	4691      	mov	r9, r2
 8002bd6:	021a      	lsls	r2, r3, #8
 8002bd8:	d46c      	bmi.n	8002cb4 <__aeabi_dsub+0x528>
 8002bda:	464a      	mov	r2, r9
 8002bdc:	464c      	mov	r4, r9
 8002bde:	432a      	orrs	r2, r5
 8002be0:	d000      	beq.n	8002be4 <__aeabi_dsub+0x458>
 8002be2:	e63a      	b.n	800285a <__aeabi_dsub+0xce>
 8002be4:	2600      	movs	r6, #0
 8002be6:	2400      	movs	r4, #0
 8002be8:	2500      	movs	r5, #0
 8002bea:	e678      	b.n	80028de <__aeabi_dsub+0x152>
 8002bec:	9902      	ldr	r1, [sp, #8]
 8002bee:	4653      	mov	r3, sl
 8002bf0:	000d      	movs	r5, r1
 8002bf2:	3a20      	subs	r2, #32
 8002bf4:	40d5      	lsrs	r5, r2
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d006      	beq.n	8002c08 <__aeabi_dsub+0x47c>
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	1ad2      	subs	r2, r2, r3
 8002bfe:	000b      	movs	r3, r1
 8002c00:	4093      	lsls	r3, r2
 8002c02:	4662      	mov	r2, ip
 8002c04:	431a      	orrs	r2, r3
 8002c06:	4693      	mov	fp, r2
 8002c08:	465b      	mov	r3, fp
 8002c0a:	1e5a      	subs	r2, r3, #1
 8002c0c:	4193      	sbcs	r3, r2
 8002c0e:	431d      	orrs	r5, r3
 8002c10:	e619      	b.n	8002846 <__aeabi_dsub+0xba>
 8002c12:	4653      	mov	r3, sl
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d100      	bne.n	8002c1c <__aeabi_dsub+0x490>
 8002c1a:	e0c6      	b.n	8002daa <__aeabi_dsub+0x61e>
 8002c1c:	4e9d      	ldr	r6, [pc, #628]	@ (8002e94 <__aeabi_dsub+0x708>)
 8002c1e:	45b2      	cmp	sl, r6
 8002c20:	d100      	bne.n	8002c24 <__aeabi_dsub+0x498>
 8002c22:	e6bd      	b.n	80029a0 <__aeabi_dsub+0x214>
 8002c24:	4688      	mov	r8, r1
 8002c26:	000e      	movs	r6, r1
 8002c28:	2501      	movs	r5, #1
 8002c2a:	2a38      	cmp	r2, #56	@ 0x38
 8002c2c:	dc10      	bgt.n	8002c50 <__aeabi_dsub+0x4c4>
 8002c2e:	2a1f      	cmp	r2, #31
 8002c30:	dc7f      	bgt.n	8002d32 <__aeabi_dsub+0x5a6>
 8002c32:	2120      	movs	r1, #32
 8002c34:	0025      	movs	r5, r4
 8002c36:	1a89      	subs	r1, r1, r2
 8002c38:	0007      	movs	r7, r0
 8002c3a:	4088      	lsls	r0, r1
 8002c3c:	408d      	lsls	r5, r1
 8002c3e:	40d7      	lsrs	r7, r2
 8002c40:	40d4      	lsrs	r4, r2
 8002c42:	1e41      	subs	r1, r0, #1
 8002c44:	4188      	sbcs	r0, r1
 8002c46:	9b02      	ldr	r3, [sp, #8]
 8002c48:	433d      	orrs	r5, r7
 8002c4a:	1b1b      	subs	r3, r3, r4
 8002c4c:	4305      	orrs	r5, r0
 8002c4e:	9302      	str	r3, [sp, #8]
 8002c50:	4662      	mov	r2, ip
 8002c52:	1b55      	subs	r5, r2, r5
 8002c54:	45ac      	cmp	ip, r5
 8002c56:	4192      	sbcs	r2, r2
 8002c58:	9b02      	ldr	r3, [sp, #8]
 8002c5a:	4252      	negs	r2, r2
 8002c5c:	464f      	mov	r7, r9
 8002c5e:	1a9c      	subs	r4, r3, r2
 8002c60:	e5f6      	b.n	8002850 <__aeabi_dsub+0xc4>
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	d000      	beq.n	8002c68 <__aeabi_dsub+0x4dc>
 8002c66:	e0b7      	b.n	8002dd8 <__aeabi_dsub+0x64c>
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d100      	bne.n	8002c6e <__aeabi_dsub+0x4e2>
 8002c6c:	e0f0      	b.n	8002e50 <__aeabi_dsub+0x6c4>
 8002c6e:	2601      	movs	r6, #1
 8002c70:	400e      	ands	r6, r1
 8002c72:	4663      	mov	r3, ip
 8002c74:	9802      	ldr	r0, [sp, #8]
 8002c76:	08d9      	lsrs	r1, r3, #3
 8002c78:	0742      	lsls	r2, r0, #29
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	08c4      	lsrs	r4, r0, #3
 8002c7e:	e696      	b.n	80029ae <__aeabi_dsub+0x222>
 8002c80:	4c85      	ldr	r4, [pc, #532]	@ (8002e98 <__aeabi_dsub+0x70c>)
 8002c82:	1aff      	subs	r7, r7, r3
 8002c84:	4014      	ands	r4, r2
 8002c86:	0762      	lsls	r2, r4, #29
 8002c88:	08e4      	lsrs	r4, r4, #3
 8002c8a:	e760      	b.n	8002b4e <__aeabi_dsub+0x3c2>
 8002c8c:	4981      	ldr	r1, [pc, #516]	@ (8002e94 <__aeabi_dsub+0x708>)
 8002c8e:	428a      	cmp	r2, r1
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dsub+0x508>
 8002c92:	e0c9      	b.n	8002e28 <__aeabi_dsub+0x69c>
 8002c94:	4663      	mov	r3, ip
 8002c96:	18c1      	adds	r1, r0, r3
 8002c98:	4281      	cmp	r1, r0
 8002c9a:	4180      	sbcs	r0, r0
 8002c9c:	9b02      	ldr	r3, [sp, #8]
 8002c9e:	4240      	negs	r0, r0
 8002ca0:	18e3      	adds	r3, r4, r3
 8002ca2:	181b      	adds	r3, r3, r0
 8002ca4:	07dd      	lsls	r5, r3, #31
 8002ca6:	085c      	lsrs	r4, r3, #1
 8002ca8:	2307      	movs	r3, #7
 8002caa:	0849      	lsrs	r1, r1, #1
 8002cac:	430d      	orrs	r5, r1
 8002cae:	0017      	movs	r7, r2
 8002cb0:	402b      	ands	r3, r5
 8002cb2:	e710      	b.n	8002ad6 <__aeabi_dsub+0x34a>
 8002cb4:	4663      	mov	r3, ip
 8002cb6:	1a1d      	subs	r5, r3, r0
 8002cb8:	45ac      	cmp	ip, r5
 8002cba:	4192      	sbcs	r2, r2
 8002cbc:	2601      	movs	r6, #1
 8002cbe:	9b02      	ldr	r3, [sp, #8]
 8002cc0:	4252      	negs	r2, r2
 8002cc2:	1b1c      	subs	r4, r3, r4
 8002cc4:	4688      	mov	r8, r1
 8002cc6:	1aa4      	subs	r4, r4, r2
 8002cc8:	400e      	ands	r6, r1
 8002cca:	e5c6      	b.n	800285a <__aeabi_dsub+0xce>
 8002ccc:	4663      	mov	r3, ip
 8002cce:	18c5      	adds	r5, r0, r3
 8002cd0:	9b02      	ldr	r3, [sp, #8]
 8002cd2:	4285      	cmp	r5, r0
 8002cd4:	4180      	sbcs	r0, r0
 8002cd6:	469c      	mov	ip, r3
 8002cd8:	4240      	negs	r0, r0
 8002cda:	4464      	add	r4, ip
 8002cdc:	1824      	adds	r4, r4, r0
 8002cde:	2701      	movs	r7, #1
 8002ce0:	0223      	lsls	r3, r4, #8
 8002ce2:	d400      	bmi.n	8002ce6 <__aeabi_dsub+0x55a>
 8002ce4:	e6f5      	b.n	8002ad2 <__aeabi_dsub+0x346>
 8002ce6:	2702      	movs	r7, #2
 8002ce8:	e641      	b.n	800296e <__aeabi_dsub+0x1e2>
 8002cea:	4663      	mov	r3, ip
 8002cec:	1ac5      	subs	r5, r0, r3
 8002cee:	42a8      	cmp	r0, r5
 8002cf0:	4180      	sbcs	r0, r0
 8002cf2:	9b02      	ldr	r3, [sp, #8]
 8002cf4:	4240      	negs	r0, r0
 8002cf6:	1ae4      	subs	r4, r4, r3
 8002cf8:	2701      	movs	r7, #1
 8002cfa:	1a24      	subs	r4, r4, r0
 8002cfc:	e5a8      	b.n	8002850 <__aeabi_dsub+0xc4>
 8002cfe:	9d02      	ldr	r5, [sp, #8]
 8002d00:	4652      	mov	r2, sl
 8002d02:	002b      	movs	r3, r5
 8002d04:	3a20      	subs	r2, #32
 8002d06:	40d3      	lsrs	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	4653      	mov	r3, sl
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d006      	beq.n	8002d1e <__aeabi_dsub+0x592>
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	002b      	movs	r3, r5
 8002d16:	4093      	lsls	r3, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	4693      	mov	fp, r2
 8002d1e:	465d      	mov	r5, fp
 8002d20:	1e6b      	subs	r3, r5, #1
 8002d22:	419d      	sbcs	r5, r3
 8002d24:	430d      	orrs	r5, r1
 8002d26:	e615      	b.n	8002954 <__aeabi_dsub+0x1c8>
 8002d28:	0762      	lsls	r2, r4, #29
 8002d2a:	08c0      	lsrs	r0, r0, #3
 8002d2c:	4302      	orrs	r2, r0
 8002d2e:	08e4      	lsrs	r4, r4, #3
 8002d30:	e70d      	b.n	8002b4e <__aeabi_dsub+0x3c2>
 8002d32:	0011      	movs	r1, r2
 8002d34:	0027      	movs	r7, r4
 8002d36:	3920      	subs	r1, #32
 8002d38:	40cf      	lsrs	r7, r1
 8002d3a:	2a20      	cmp	r2, #32
 8002d3c:	d005      	beq.n	8002d4a <__aeabi_dsub+0x5be>
 8002d3e:	2140      	movs	r1, #64	@ 0x40
 8002d40:	1a8a      	subs	r2, r1, r2
 8002d42:	4094      	lsls	r4, r2
 8002d44:	0025      	movs	r5, r4
 8002d46:	4305      	orrs	r5, r0
 8002d48:	9503      	str	r5, [sp, #12]
 8002d4a:	9d03      	ldr	r5, [sp, #12]
 8002d4c:	1e6a      	subs	r2, r5, #1
 8002d4e:	4195      	sbcs	r5, r2
 8002d50:	433d      	orrs	r5, r7
 8002d52:	e77d      	b.n	8002c50 <__aeabi_dsub+0x4c4>
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x5ce>
 8002d58:	e744      	b.n	8002be4 <__aeabi_dsub+0x458>
 8002d5a:	2601      	movs	r6, #1
 8002d5c:	400e      	ands	r6, r1
 8002d5e:	4663      	mov	r3, ip
 8002d60:	08d9      	lsrs	r1, r3, #3
 8002d62:	9b02      	ldr	r3, [sp, #8]
 8002d64:	075a      	lsls	r2, r3, #29
 8002d66:	430a      	orrs	r2, r1
 8002d68:	08dc      	lsrs	r4, r3, #3
 8002d6a:	e6f0      	b.n	8002b4e <__aeabi_dsub+0x3c2>
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d028      	beq.n	8002dc2 <__aeabi_dsub+0x636>
 8002d70:	4662      	mov	r2, ip
 8002d72:	9f02      	ldr	r7, [sp, #8]
 8002d74:	08c0      	lsrs	r0, r0, #3
 8002d76:	433a      	orrs	r2, r7
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x5f0>
 8002d7a:	e6dc      	b.n	8002b36 <__aeabi_dsub+0x3aa>
 8002d7c:	0762      	lsls	r2, r4, #29
 8002d7e:	4310      	orrs	r0, r2
 8002d80:	2280      	movs	r2, #128	@ 0x80
 8002d82:	08e4      	lsrs	r4, r4, #3
 8002d84:	0312      	lsls	r2, r2, #12
 8002d86:	4214      	tst	r4, r2
 8002d88:	d009      	beq.n	8002d9e <__aeabi_dsub+0x612>
 8002d8a:	08fd      	lsrs	r5, r7, #3
 8002d8c:	4215      	tst	r5, r2
 8002d8e:	d106      	bne.n	8002d9e <__aeabi_dsub+0x612>
 8002d90:	4663      	mov	r3, ip
 8002d92:	2601      	movs	r6, #1
 8002d94:	002c      	movs	r4, r5
 8002d96:	08d8      	lsrs	r0, r3, #3
 8002d98:	077b      	lsls	r3, r7, #29
 8002d9a:	4318      	orrs	r0, r3
 8002d9c:	400e      	ands	r6, r1
 8002d9e:	0f42      	lsrs	r2, r0, #29
 8002da0:	00c0      	lsls	r0, r0, #3
 8002da2:	08c0      	lsrs	r0, r0, #3
 8002da4:	0752      	lsls	r2, r2, #29
 8002da6:	4302      	orrs	r2, r0
 8002da8:	e601      	b.n	80029ae <__aeabi_dsub+0x222>
 8002daa:	4663      	mov	r3, ip
 8002dac:	1a1d      	subs	r5, r3, r0
 8002dae:	45ac      	cmp	ip, r5
 8002db0:	4192      	sbcs	r2, r2
 8002db2:	9b02      	ldr	r3, [sp, #8]
 8002db4:	4252      	negs	r2, r2
 8002db6:	1b1c      	subs	r4, r3, r4
 8002db8:	000e      	movs	r6, r1
 8002dba:	4688      	mov	r8, r1
 8002dbc:	2701      	movs	r7, #1
 8002dbe:	1aa4      	subs	r4, r4, r2
 8002dc0:	e546      	b.n	8002850 <__aeabi_dsub+0xc4>
 8002dc2:	4663      	mov	r3, ip
 8002dc4:	08d9      	lsrs	r1, r3, #3
 8002dc6:	9b02      	ldr	r3, [sp, #8]
 8002dc8:	075a      	lsls	r2, r3, #29
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	08dc      	lsrs	r4, r3, #3
 8002dce:	e5ee      	b.n	80029ae <__aeabi_dsub+0x222>
 8002dd0:	4663      	mov	r3, ip
 8002dd2:	9c02      	ldr	r4, [sp, #8]
 8002dd4:	9303      	str	r3, [sp, #12]
 8002dd6:	e6c7      	b.n	8002b68 <__aeabi_dsub+0x3dc>
 8002dd8:	08c0      	lsrs	r0, r0, #3
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x654>
 8002dde:	e6aa      	b.n	8002b36 <__aeabi_dsub+0x3aa>
 8002de0:	0762      	lsls	r2, r4, #29
 8002de2:	4310      	orrs	r0, r2
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	08e4      	lsrs	r4, r4, #3
 8002de8:	0312      	lsls	r2, r2, #12
 8002dea:	4214      	tst	r4, r2
 8002dec:	d0d7      	beq.n	8002d9e <__aeabi_dsub+0x612>
 8002dee:	9f02      	ldr	r7, [sp, #8]
 8002df0:	08fd      	lsrs	r5, r7, #3
 8002df2:	4215      	tst	r5, r2
 8002df4:	d1d3      	bne.n	8002d9e <__aeabi_dsub+0x612>
 8002df6:	4663      	mov	r3, ip
 8002df8:	2601      	movs	r6, #1
 8002dfa:	08d8      	lsrs	r0, r3, #3
 8002dfc:	077b      	lsls	r3, r7, #29
 8002dfe:	002c      	movs	r4, r5
 8002e00:	4318      	orrs	r0, r3
 8002e02:	400e      	ands	r6, r1
 8002e04:	e7cb      	b.n	8002d9e <__aeabi_dsub+0x612>
 8002e06:	000a      	movs	r2, r1
 8002e08:	0027      	movs	r7, r4
 8002e0a:	3a20      	subs	r2, #32
 8002e0c:	40d7      	lsrs	r7, r2
 8002e0e:	2920      	cmp	r1, #32
 8002e10:	d005      	beq.n	8002e1e <__aeabi_dsub+0x692>
 8002e12:	2240      	movs	r2, #64	@ 0x40
 8002e14:	1a52      	subs	r2, r2, r1
 8002e16:	4094      	lsls	r4, r2
 8002e18:	0025      	movs	r5, r4
 8002e1a:	4305      	orrs	r5, r0
 8002e1c:	9503      	str	r5, [sp, #12]
 8002e1e:	9d03      	ldr	r5, [sp, #12]
 8002e20:	1e6a      	subs	r2, r5, #1
 8002e22:	4195      	sbcs	r5, r2
 8002e24:	432f      	orrs	r7, r5
 8002e26:	e610      	b.n	8002a4a <__aeabi_dsub+0x2be>
 8002e28:	0014      	movs	r4, r2
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	e556      	b.n	80028de <__aeabi_dsub+0x152>
 8002e30:	9b02      	ldr	r3, [sp, #8]
 8002e32:	4460      	add	r0, ip
 8002e34:	4699      	mov	r9, r3
 8002e36:	4560      	cmp	r0, ip
 8002e38:	4192      	sbcs	r2, r2
 8002e3a:	444c      	add	r4, r9
 8002e3c:	4252      	negs	r2, r2
 8002e3e:	0005      	movs	r5, r0
 8002e40:	18a4      	adds	r4, r4, r2
 8002e42:	e74c      	b.n	8002cde <__aeabi_dsub+0x552>
 8002e44:	001a      	movs	r2, r3
 8002e46:	001c      	movs	r4, r3
 8002e48:	432a      	orrs	r2, r5
 8002e4a:	d000      	beq.n	8002e4e <__aeabi_dsub+0x6c2>
 8002e4c:	e6b3      	b.n	8002bb6 <__aeabi_dsub+0x42a>
 8002e4e:	e6c9      	b.n	8002be4 <__aeabi_dsub+0x458>
 8002e50:	2480      	movs	r4, #128	@ 0x80
 8002e52:	2600      	movs	r6, #0
 8002e54:	0324      	lsls	r4, r4, #12
 8002e56:	e5ae      	b.n	80029b6 <__aeabi_dsub+0x22a>
 8002e58:	2120      	movs	r1, #32
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	1a09      	subs	r1, r1, r0
 8002e5e:	e517      	b.n	8002890 <__aeabi_dsub+0x104>
 8002e60:	2200      	movs	r2, #0
 8002e62:	2500      	movs	r5, #0
 8002e64:	4c0b      	ldr	r4, [pc, #44]	@ (8002e94 <__aeabi_dsub+0x708>)
 8002e66:	e53a      	b.n	80028de <__aeabi_dsub+0x152>
 8002e68:	2d00      	cmp	r5, #0
 8002e6a:	d100      	bne.n	8002e6e <__aeabi_dsub+0x6e2>
 8002e6c:	e5f6      	b.n	8002a5c <__aeabi_dsub+0x2d0>
 8002e6e:	464b      	mov	r3, r9
 8002e70:	1bda      	subs	r2, r3, r7
 8002e72:	4692      	mov	sl, r2
 8002e74:	2f00      	cmp	r7, #0
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x6ee>
 8002e78:	e66f      	b.n	8002b5a <__aeabi_dsub+0x3ce>
 8002e7a:	2a38      	cmp	r2, #56	@ 0x38
 8002e7c:	dc05      	bgt.n	8002e8a <__aeabi_dsub+0x6fe>
 8002e7e:	2680      	movs	r6, #128	@ 0x80
 8002e80:	0436      	lsls	r6, r6, #16
 8002e82:	4334      	orrs	r4, r6
 8002e84:	4688      	mov	r8, r1
 8002e86:	000e      	movs	r6, r1
 8002e88:	e6d1      	b.n	8002c2e <__aeabi_dsub+0x4a2>
 8002e8a:	4688      	mov	r8, r1
 8002e8c:	000e      	movs	r6, r1
 8002e8e:	2501      	movs	r5, #1
 8002e90:	e6de      	b.n	8002c50 <__aeabi_dsub+0x4c4>
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	000007ff 	.word	0x000007ff
 8002e98:	ff7fffff 	.word	0xff7fffff
 8002e9c:	000007fe 	.word	0x000007fe
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	d100      	bne.n	8002ea6 <__aeabi_dsub+0x71a>
 8002ea4:	e668      	b.n	8002b78 <__aeabi_dsub+0x3ec>
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	1bd9      	subs	r1, r3, r7
 8002eaa:	2f00      	cmp	r7, #0
 8002eac:	d101      	bne.n	8002eb2 <__aeabi_dsub+0x726>
 8002eae:	468a      	mov	sl, r1
 8002eb0:	e5a7      	b.n	8002a02 <__aeabi_dsub+0x276>
 8002eb2:	2701      	movs	r7, #1
 8002eb4:	2938      	cmp	r1, #56	@ 0x38
 8002eb6:	dd00      	ble.n	8002eba <__aeabi_dsub+0x72e>
 8002eb8:	e5c7      	b.n	8002a4a <__aeabi_dsub+0x2be>
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	0412      	lsls	r2, r2, #16
 8002ebe:	4314      	orrs	r4, r2
 8002ec0:	e5af      	b.n	8002a22 <__aeabi_dsub+0x296>
 8002ec2:	46c0      	nop			@ (mov r8, r8)

08002ec4 <__aeabi_dcmpun>:
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	46c6      	mov	lr, r8
 8002ec8:	031e      	lsls	r6, r3, #12
 8002eca:	0b36      	lsrs	r6, r6, #12
 8002ecc:	46b0      	mov	r8, r6
 8002ece:	4e0d      	ldr	r6, [pc, #52]	@ (8002f04 <__aeabi_dcmpun+0x40>)
 8002ed0:	030c      	lsls	r4, r1, #12
 8002ed2:	004d      	lsls	r5, r1, #1
 8002ed4:	005f      	lsls	r7, r3, #1
 8002ed6:	b500      	push	{lr}
 8002ed8:	0b24      	lsrs	r4, r4, #12
 8002eda:	0d6d      	lsrs	r5, r5, #21
 8002edc:	0d7f      	lsrs	r7, r7, #21
 8002ede:	42b5      	cmp	r5, r6
 8002ee0:	d00b      	beq.n	8002efa <__aeabi_dcmpun+0x36>
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <__aeabi_dcmpun+0x40>)
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	428f      	cmp	r7, r1
 8002ee8:	d104      	bne.n	8002ef4 <__aeabi_dcmpun+0x30>
 8002eea:	4646      	mov	r6, r8
 8002eec:	4316      	orrs	r6, r2
 8002eee:	0030      	movs	r0, r6
 8002ef0:	1e43      	subs	r3, r0, #1
 8002ef2:	4198      	sbcs	r0, r3
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	46b8      	mov	r8, r7
 8002ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efa:	4304      	orrs	r4, r0
 8002efc:	2001      	movs	r0, #1
 8002efe:	2c00      	cmp	r4, #0
 8002f00:	d1f8      	bne.n	8002ef4 <__aeabi_dcmpun+0x30>
 8002f02:	e7ee      	b.n	8002ee2 <__aeabi_dcmpun+0x1e>
 8002f04:	000007ff 	.word	0x000007ff

08002f08 <__aeabi_d2iz>:
 8002f08:	000b      	movs	r3, r1
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4d16      	ldr	r5, [pc, #88]	@ (8002f68 <__aeabi_d2iz+0x60>)
 8002f10:	030c      	lsls	r4, r1, #12
 8002f12:	b082      	sub	sp, #8
 8002f14:	0049      	lsls	r1, r1, #1
 8002f16:	2000      	movs	r0, #0
 8002f18:	9200      	str	r2, [sp, #0]
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	0b24      	lsrs	r4, r4, #12
 8002f1e:	0d49      	lsrs	r1, r1, #21
 8002f20:	0fde      	lsrs	r6, r3, #31
 8002f22:	42a9      	cmp	r1, r5
 8002f24:	dd04      	ble.n	8002f30 <__aeabi_d2iz+0x28>
 8002f26:	4811      	ldr	r0, [pc, #68]	@ (8002f6c <__aeabi_d2iz+0x64>)
 8002f28:	4281      	cmp	r1, r0
 8002f2a:	dd03      	ble.n	8002f34 <__aeabi_d2iz+0x2c>
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <__aeabi_d2iz+0x68>)
 8002f2e:	18f0      	adds	r0, r6, r3
 8002f30:	b002      	add	sp, #8
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
 8002f34:	2080      	movs	r0, #128	@ 0x80
 8002f36:	0340      	lsls	r0, r0, #13
 8002f38:	4320      	orrs	r0, r4
 8002f3a:	4c0e      	ldr	r4, [pc, #56]	@ (8002f74 <__aeabi_d2iz+0x6c>)
 8002f3c:	1a64      	subs	r4, r4, r1
 8002f3e:	2c1f      	cmp	r4, #31
 8002f40:	dd08      	ble.n	8002f54 <__aeabi_d2iz+0x4c>
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <__aeabi_d2iz+0x70>)
 8002f44:	1a5b      	subs	r3, r3, r1
 8002f46:	40d8      	lsrs	r0, r3
 8002f48:	0003      	movs	r3, r0
 8002f4a:	4258      	negs	r0, r3
 8002f4c:	2e00      	cmp	r6, #0
 8002f4e:	d1ef      	bne.n	8002f30 <__aeabi_d2iz+0x28>
 8002f50:	0018      	movs	r0, r3
 8002f52:	e7ed      	b.n	8002f30 <__aeabi_d2iz+0x28>
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <__aeabi_d2iz+0x74>)
 8002f56:	9a00      	ldr	r2, [sp, #0]
 8002f58:	469c      	mov	ip, r3
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	4461      	add	r1, ip
 8002f5e:	408b      	lsls	r3, r1
 8002f60:	40e2      	lsrs	r2, r4
 8002f62:	4313      	orrs	r3, r2
 8002f64:	e7f1      	b.n	8002f4a <__aeabi_d2iz+0x42>
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	000003fe 	.word	0x000003fe
 8002f6c:	0000041d 	.word	0x0000041d
 8002f70:	7fffffff 	.word	0x7fffffff
 8002f74:	00000433 	.word	0x00000433
 8002f78:	00000413 	.word	0x00000413
 8002f7c:	fffffbed 	.word	0xfffffbed

08002f80 <__aeabi_i2d>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d016      	beq.n	8002fb4 <__aeabi_i2d+0x34>
 8002f86:	17c3      	asrs	r3, r0, #31
 8002f88:	18c5      	adds	r5, r0, r3
 8002f8a:	405d      	eors	r5, r3
 8002f8c:	0fc4      	lsrs	r4, r0, #31
 8002f8e:	0028      	movs	r0, r5
 8002f90:	f000 f914 	bl	80031bc <__clzsi2>
 8002f94:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <__aeabi_i2d+0x58>)
 8002f96:	1a1b      	subs	r3, r3, r0
 8002f98:	055b      	lsls	r3, r3, #21
 8002f9a:	0d5b      	lsrs	r3, r3, #21
 8002f9c:	280a      	cmp	r0, #10
 8002f9e:	dc14      	bgt.n	8002fca <__aeabi_i2d+0x4a>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	002e      	movs	r6, r5
 8002fa4:	3215      	adds	r2, #21
 8002fa6:	4096      	lsls	r6, r2
 8002fa8:	220b      	movs	r2, #11
 8002faa:	1a12      	subs	r2, r2, r0
 8002fac:	40d5      	lsrs	r5, r2
 8002fae:	032d      	lsls	r5, r5, #12
 8002fb0:	0b2d      	lsrs	r5, r5, #12
 8002fb2:	e003      	b.n	8002fbc <__aeabi_i2d+0x3c>
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2500      	movs	r5, #0
 8002fba:	2600      	movs	r6, #0
 8002fbc:	051b      	lsls	r3, r3, #20
 8002fbe:	432b      	orrs	r3, r5
 8002fc0:	07e4      	lsls	r4, r4, #31
 8002fc2:	4323      	orrs	r3, r4
 8002fc4:	0030      	movs	r0, r6
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	380b      	subs	r0, #11
 8002fcc:	4085      	lsls	r5, r0
 8002fce:	032d      	lsls	r5, r5, #12
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	0b2d      	lsrs	r5, r5, #12
 8002fd4:	e7f2      	b.n	8002fbc <__aeabi_i2d+0x3c>
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	0000041e 	.word	0x0000041e

08002fdc <__aeabi_ui2d>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	1e04      	subs	r4, r0, #0
 8002fe0:	d010      	beq.n	8003004 <__aeabi_ui2d+0x28>
 8002fe2:	f000 f8eb 	bl	80031bc <__clzsi2>
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <__aeabi_ui2d+0x44>)
 8002fe8:	1a1b      	subs	r3, r3, r0
 8002fea:	055b      	lsls	r3, r3, #21
 8002fec:	0d5b      	lsrs	r3, r3, #21
 8002fee:	280a      	cmp	r0, #10
 8002ff0:	dc0f      	bgt.n	8003012 <__aeabi_ui2d+0x36>
 8002ff2:	220b      	movs	r2, #11
 8002ff4:	0021      	movs	r1, r4
 8002ff6:	1a12      	subs	r2, r2, r0
 8002ff8:	40d1      	lsrs	r1, r2
 8002ffa:	3015      	adds	r0, #21
 8002ffc:	030a      	lsls	r2, r1, #12
 8002ffe:	4084      	lsls	r4, r0
 8003000:	0b12      	lsrs	r2, r2, #12
 8003002:	e001      	b.n	8003008 <__aeabi_ui2d+0x2c>
 8003004:	2300      	movs	r3, #0
 8003006:	2200      	movs	r2, #0
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	4313      	orrs	r3, r2
 800300c:	0020      	movs	r0, r4
 800300e:	0019      	movs	r1, r3
 8003010:	bd10      	pop	{r4, pc}
 8003012:	0022      	movs	r2, r4
 8003014:	380b      	subs	r0, #11
 8003016:	4082      	lsls	r2, r0
 8003018:	0312      	lsls	r2, r2, #12
 800301a:	2400      	movs	r4, #0
 800301c:	0b12      	lsrs	r2, r2, #12
 800301e:	e7f3      	b.n	8003008 <__aeabi_ui2d+0x2c>
 8003020:	0000041e 	.word	0x0000041e

08003024 <__aeabi_f2d>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	0242      	lsls	r2, r0, #9
 8003028:	0043      	lsls	r3, r0, #1
 800302a:	0fc4      	lsrs	r4, r0, #31
 800302c:	20fe      	movs	r0, #254	@ 0xfe
 800302e:	0e1b      	lsrs	r3, r3, #24
 8003030:	1c59      	adds	r1, r3, #1
 8003032:	0a55      	lsrs	r5, r2, #9
 8003034:	4208      	tst	r0, r1
 8003036:	d00c      	beq.n	8003052 <__aeabi_f2d+0x2e>
 8003038:	21e0      	movs	r1, #224	@ 0xe0
 800303a:	0089      	lsls	r1, r1, #2
 800303c:	468c      	mov	ip, r1
 800303e:	076d      	lsls	r5, r5, #29
 8003040:	0b12      	lsrs	r2, r2, #12
 8003042:	4463      	add	r3, ip
 8003044:	051b      	lsls	r3, r3, #20
 8003046:	4313      	orrs	r3, r2
 8003048:	07e4      	lsls	r4, r4, #31
 800304a:	4323      	orrs	r3, r4
 800304c:	0028      	movs	r0, r5
 800304e:	0019      	movs	r1, r3
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	2b00      	cmp	r3, #0
 8003054:	d114      	bne.n	8003080 <__aeabi_f2d+0x5c>
 8003056:	2d00      	cmp	r5, #0
 8003058:	d01b      	beq.n	8003092 <__aeabi_f2d+0x6e>
 800305a:	0028      	movs	r0, r5
 800305c:	f000 f8ae 	bl	80031bc <__clzsi2>
 8003060:	280a      	cmp	r0, #10
 8003062:	dc1c      	bgt.n	800309e <__aeabi_f2d+0x7a>
 8003064:	230b      	movs	r3, #11
 8003066:	002a      	movs	r2, r5
 8003068:	1a1b      	subs	r3, r3, r0
 800306a:	40da      	lsrs	r2, r3
 800306c:	0003      	movs	r3, r0
 800306e:	3315      	adds	r3, #21
 8003070:	409d      	lsls	r5, r3
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <__aeabi_f2d+0x88>)
 8003074:	0312      	lsls	r2, r2, #12
 8003076:	1a1b      	subs	r3, r3, r0
 8003078:	055b      	lsls	r3, r3, #21
 800307a:	0b12      	lsrs	r2, r2, #12
 800307c:	0d5b      	lsrs	r3, r3, #21
 800307e:	e7e1      	b.n	8003044 <__aeabi_f2d+0x20>
 8003080:	2d00      	cmp	r5, #0
 8003082:	d009      	beq.n	8003098 <__aeabi_f2d+0x74>
 8003084:	0b13      	lsrs	r3, r2, #12
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	0312      	lsls	r2, r2, #12
 800308a:	431a      	orrs	r2, r3
 800308c:	076d      	lsls	r5, r5, #29
 800308e:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <__aeabi_f2d+0x8c>)
 8003090:	e7d8      	b.n	8003044 <__aeabi_f2d+0x20>
 8003092:	2300      	movs	r3, #0
 8003094:	2200      	movs	r2, #0
 8003096:	e7d5      	b.n	8003044 <__aeabi_f2d+0x20>
 8003098:	2200      	movs	r2, #0
 800309a:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <__aeabi_f2d+0x8c>)
 800309c:	e7d2      	b.n	8003044 <__aeabi_f2d+0x20>
 800309e:	0003      	movs	r3, r0
 80030a0:	002a      	movs	r2, r5
 80030a2:	3b0b      	subs	r3, #11
 80030a4:	409a      	lsls	r2, r3
 80030a6:	2500      	movs	r5, #0
 80030a8:	e7e3      	b.n	8003072 <__aeabi_f2d+0x4e>
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	00000389 	.word	0x00000389
 80030b0:	000007ff 	.word	0x000007ff

080030b4 <__aeabi_d2f>:
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	004b      	lsls	r3, r1, #1
 80030b8:	030f      	lsls	r7, r1, #12
 80030ba:	0d5b      	lsrs	r3, r3, #21
 80030bc:	4c3b      	ldr	r4, [pc, #236]	@ (80031ac <__aeabi_d2f+0xf8>)
 80030be:	0f45      	lsrs	r5, r0, #29
 80030c0:	b083      	sub	sp, #12
 80030c2:	0a7f      	lsrs	r7, r7, #9
 80030c4:	1c5e      	adds	r6, r3, #1
 80030c6:	432f      	orrs	r7, r5
 80030c8:	9000      	str	r0, [sp, #0]
 80030ca:	9101      	str	r1, [sp, #4]
 80030cc:	0fca      	lsrs	r2, r1, #31
 80030ce:	00c5      	lsls	r5, r0, #3
 80030d0:	4226      	tst	r6, r4
 80030d2:	d00b      	beq.n	80030ec <__aeabi_d2f+0x38>
 80030d4:	4936      	ldr	r1, [pc, #216]	@ (80031b0 <__aeabi_d2f+0xfc>)
 80030d6:	185c      	adds	r4, r3, r1
 80030d8:	2cfe      	cmp	r4, #254	@ 0xfe
 80030da:	dd13      	ble.n	8003104 <__aeabi_d2f+0x50>
 80030dc:	20ff      	movs	r0, #255	@ 0xff
 80030de:	2300      	movs	r3, #0
 80030e0:	05c0      	lsls	r0, r0, #23
 80030e2:	4318      	orrs	r0, r3
 80030e4:	07d2      	lsls	r2, r2, #31
 80030e6:	4310      	orrs	r0, r2
 80030e8:	b003      	add	sp, #12
 80030ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <__aeabi_d2f+0x42>
 80030f0:	2000      	movs	r0, #0
 80030f2:	2300      	movs	r3, #0
 80030f4:	e7f4      	b.n	80030e0 <__aeabi_d2f+0x2c>
 80030f6:	433d      	orrs	r5, r7
 80030f8:	d0f0      	beq.n	80030dc <__aeabi_d2f+0x28>
 80030fa:	2380      	movs	r3, #128	@ 0x80
 80030fc:	03db      	lsls	r3, r3, #15
 80030fe:	20ff      	movs	r0, #255	@ 0xff
 8003100:	433b      	orrs	r3, r7
 8003102:	e7ed      	b.n	80030e0 <__aeabi_d2f+0x2c>
 8003104:	2c00      	cmp	r4, #0
 8003106:	dd14      	ble.n	8003132 <__aeabi_d2f+0x7e>
 8003108:	9b00      	ldr	r3, [sp, #0]
 800310a:	00ff      	lsls	r7, r7, #3
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	4183      	sbcs	r3, r0
 8003112:	0f69      	lsrs	r1, r5, #29
 8003114:	433b      	orrs	r3, r7
 8003116:	430b      	orrs	r3, r1
 8003118:	0759      	lsls	r1, r3, #29
 800311a:	d041      	beq.n	80031a0 <__aeabi_d2f+0xec>
 800311c:	210f      	movs	r1, #15
 800311e:	4019      	ands	r1, r3
 8003120:	2904      	cmp	r1, #4
 8003122:	d028      	beq.n	8003176 <__aeabi_d2f+0xc2>
 8003124:	3304      	adds	r3, #4
 8003126:	0159      	lsls	r1, r3, #5
 8003128:	d525      	bpl.n	8003176 <__aeabi_d2f+0xc2>
 800312a:	3401      	adds	r4, #1
 800312c:	2300      	movs	r3, #0
 800312e:	b2e0      	uxtb	r0, r4
 8003130:	e7d6      	b.n	80030e0 <__aeabi_d2f+0x2c>
 8003132:	0021      	movs	r1, r4
 8003134:	3117      	adds	r1, #23
 8003136:	dbdb      	blt.n	80030f0 <__aeabi_d2f+0x3c>
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	201e      	movs	r0, #30
 800313c:	0409      	lsls	r1, r1, #16
 800313e:	4339      	orrs	r1, r7
 8003140:	1b00      	subs	r0, r0, r4
 8003142:	281f      	cmp	r0, #31
 8003144:	dd1b      	ble.n	800317e <__aeabi_d2f+0xca>
 8003146:	2602      	movs	r6, #2
 8003148:	4276      	negs	r6, r6
 800314a:	1b34      	subs	r4, r6, r4
 800314c:	000e      	movs	r6, r1
 800314e:	40e6      	lsrs	r6, r4
 8003150:	0034      	movs	r4, r6
 8003152:	2820      	cmp	r0, #32
 8003154:	d004      	beq.n	8003160 <__aeabi_d2f+0xac>
 8003156:	4817      	ldr	r0, [pc, #92]	@ (80031b4 <__aeabi_d2f+0x100>)
 8003158:	4684      	mov	ip, r0
 800315a:	4463      	add	r3, ip
 800315c:	4099      	lsls	r1, r3
 800315e:	430d      	orrs	r5, r1
 8003160:	002b      	movs	r3, r5
 8003162:	1e59      	subs	r1, r3, #1
 8003164:	418b      	sbcs	r3, r1
 8003166:	4323      	orrs	r3, r4
 8003168:	0759      	lsls	r1, r3, #29
 800316a:	d015      	beq.n	8003198 <__aeabi_d2f+0xe4>
 800316c:	210f      	movs	r1, #15
 800316e:	2400      	movs	r4, #0
 8003170:	4019      	ands	r1, r3
 8003172:	2904      	cmp	r1, #4
 8003174:	d117      	bne.n	80031a6 <__aeabi_d2f+0xf2>
 8003176:	019b      	lsls	r3, r3, #6
 8003178:	0a5b      	lsrs	r3, r3, #9
 800317a:	b2e0      	uxtb	r0, r4
 800317c:	e7b0      	b.n	80030e0 <__aeabi_d2f+0x2c>
 800317e:	4c0e      	ldr	r4, [pc, #56]	@ (80031b8 <__aeabi_d2f+0x104>)
 8003180:	191c      	adds	r4, r3, r4
 8003182:	002b      	movs	r3, r5
 8003184:	40a5      	lsls	r5, r4
 8003186:	40c3      	lsrs	r3, r0
 8003188:	40a1      	lsls	r1, r4
 800318a:	1e68      	subs	r0, r5, #1
 800318c:	4185      	sbcs	r5, r0
 800318e:	4329      	orrs	r1, r5
 8003190:	430b      	orrs	r3, r1
 8003192:	2400      	movs	r4, #0
 8003194:	0759      	lsls	r1, r3, #29
 8003196:	d1c1      	bne.n	800311c <__aeabi_d2f+0x68>
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	2000      	movs	r0, #0
 800319c:	0a5b      	lsrs	r3, r3, #9
 800319e:	e79f      	b.n	80030e0 <__aeabi_d2f+0x2c>
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	b2e0      	uxtb	r0, r4
 80031a4:	e79c      	b.n	80030e0 <__aeabi_d2f+0x2c>
 80031a6:	3304      	adds	r3, #4
 80031a8:	e7e5      	b.n	8003176 <__aeabi_d2f+0xc2>
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	000007fe 	.word	0x000007fe
 80031b0:	fffffc80 	.word	0xfffffc80
 80031b4:	fffffca2 	.word	0xfffffca2
 80031b8:	fffffc82 	.word	0xfffffc82

080031bc <__clzsi2>:
 80031bc:	211c      	movs	r1, #28
 80031be:	2301      	movs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	4298      	cmp	r0, r3
 80031c4:	d301      	bcc.n	80031ca <__clzsi2+0xe>
 80031c6:	0c00      	lsrs	r0, r0, #16
 80031c8:	3910      	subs	r1, #16
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	4298      	cmp	r0, r3
 80031ce:	d301      	bcc.n	80031d4 <__clzsi2+0x18>
 80031d0:	0a00      	lsrs	r0, r0, #8
 80031d2:	3908      	subs	r1, #8
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	4298      	cmp	r0, r3
 80031d8:	d301      	bcc.n	80031de <__clzsi2+0x22>
 80031da:	0900      	lsrs	r0, r0, #4
 80031dc:	3904      	subs	r1, #4
 80031de:	a202      	add	r2, pc, #8	@ (adr r2, 80031e8 <__clzsi2+0x2c>)
 80031e0:	5c10      	ldrb	r0, [r2, r0]
 80031e2:	1840      	adds	r0, r0, r1
 80031e4:	4770      	bx	lr
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	02020304 	.word	0x02020304
 80031ec:	01010101 	.word	0x01010101
	...

080031f8 <DS18B20_Init>:
 *@param	Port_DS18B20	Port used for the DS18B20 sensor
 *@param	Pin_DS18B20		Pin used for the DS18B20 sensor
 *@retval	None
 */
void DS18B20_Init(TIM_HandleTypeDef Timer_DS18B20, GPIO_TypeDef* Port_DS18B20, uint16_t Pin_DS18B20)
{
 80031f8:	b084      	sub	sp, #16
 80031fa:	b5b0      	push	{r4, r5, r7, lr}
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	2510      	movs	r5, #16
 8003200:	197c      	adds	r4, r7, r5
 8003202:	6020      	str	r0, [r4, #0]
 8003204:	6061      	str	r1, [r4, #4]
 8003206:	60a2      	str	r2, [r4, #8]
 8003208:	60e3      	str	r3, [r4, #12]
	timer = Timer_DS18B20;
 800320a:	4a0c      	ldr	r2, [pc, #48]	@ (800323c <DS18B20_Init+0x44>)
 800320c:	002c      	movs	r4, r5
 800320e:	193b      	adds	r3, r7, r4
 8003210:	0010      	movs	r0, r2
 8003212:	0019      	movs	r1, r3
 8003214:	2348      	movs	r3, #72	@ 0x48
 8003216:	001a      	movs	r2, r3
 8003218:	f007 f960 	bl	800a4dc <memcpy>
	Port = Port_DS18B20;
 800321c:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <DS18B20_Init+0x48>)
 800321e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003220:	601a      	str	r2, [r3, #0]
	Pin = Pin_DS18B20;
 8003222:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <DS18B20_Init+0x4c>)
 8003224:	224c      	movs	r2, #76	@ 0x4c
 8003226:	1912      	adds	r2, r2, r4
 8003228:	19d2      	adds	r2, r2, r7
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	801a      	strh	r2, [r3, #0]
}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	bcb0      	pop	{r4, r5, r7}
 8003234:	bc08      	pop	{r3}
 8003236:	b004      	add	sp, #16
 8003238:	4718      	bx	r3
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	20000204 	.word	0x20000204
 8003240:	2000024c 	.word	0x2000024c
 8003244:	20000250 	.word	0x20000250

08003248 <delay>:
 * @brief	Wait the micro-seconds of the parameter.
 * @param	Value	that indicate the microseconds to wait
 * @retval	None
 */
static void delay ( uint16_t us )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	0002      	movs	r2, r0
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//set the counter value a 0
 8003254:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <delay+0x30>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&timer) < us);	//wait for the counter to reach the us input in the parameter us
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <delay+0x30>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d3f8      	bcc.n	800325e <delay+0x16>
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	20000204 	.word	0x20000204

0800327c <Set_Pin_Input>:
 * @param	GPIOx		Port of the DS18B20 sensor
 * @param	GPIO_PIN	Pin of the DS18B20 sensor
 * @retval	None
 */
static void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN )
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	000a      	movs	r2, r1
 8003286:	1cbb      	adds	r3, r7, #2
 8003288:	801a      	strh	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	240c      	movs	r4, #12
 800328c:	193b      	adds	r3, r7, r4
 800328e:	0018      	movs	r0, r3
 8003290:	2314      	movs	r3, #20
 8003292:	001a      	movs	r2, r3
 8003294:	2100      	movs	r1, #0
 8003296:	f007 f873 	bl	800a380 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN;
 800329a:	1cbb      	adds	r3, r7, #2
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a2:	193b      	adds	r3, r7, r4
 80032a4:	2200      	movs	r2, #0
 80032a6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	2201      	movs	r2, #1
 80032ac:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80032ae:	193a      	adds	r2, r7, r4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0011      	movs	r1, r2
 80032b4:	0018      	movs	r0, r3
 80032b6:	f002 fe5f 	bl	8005f78 <HAL_GPIO_Init>
}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b009      	add	sp, #36	@ 0x24
 80032c0:	bd90      	pop	{r4, r7, pc}

080032c2 <Set_Pin_Output>:
 * @param	GPIOx		Port of the DS18B20 sensor
 * @param	GPIO_PIN	Pin of the DS18B20 sensor
 * @retval	None
 */
static void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN )
{
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b089      	sub	sp, #36	@ 0x24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	000a      	movs	r2, r1
 80032cc:	1cbb      	adds	r3, r7, #2
 80032ce:	801a      	strh	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	240c      	movs	r4, #12
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	0018      	movs	r0, r3
 80032d6:	2314      	movs	r3, #20
 80032d8:	001a      	movs	r2, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	f007 f850 	bl	800a380 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN;
 80032e0:	1cbb      	adds	r3, r7, #2
 80032e2:	881a      	ldrh	r2, [r3, #0]
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	2201      	movs	r2, #1
 80032ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80032f4:	193a      	adds	r2, r7, r4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0011      	movs	r1, r2
 80032fa:	0018      	movs	r0, r3
 80032fc:	f002 fe3c 	bl	8005f78 <HAL_GPIO_Init>

}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b009      	add	sp, #36	@ 0x24
 8003306:	bd90      	pop	{r4, r7, pc}

08003308 <DS18B20_Start>:
 * 			with master.
 * @retval	Return value of presence of the DS18B20 sensor. If value=1,
 * 			detected sensor, but valure=0, the not detected sensor.
 */
static uint8_t DS18B20_Start ( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0

	uint8_t Response = 0;
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Port, Pin);
 8003314:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <DS18B20_Start+0x84>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b1d      	ldr	r3, [pc, #116]	@ (8003390 <DS18B20_Start+0x88>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	0019      	movs	r1, r3
 800331e:	0010      	movs	r0, r2
 8003320:	f7ff ffcf 	bl	80032c2 <Set_Pin_Output>
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003324:	4b19      	ldr	r3, [pc, #100]	@ (800338c <DS18B20_Start+0x84>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <DS18B20_Start+0x88>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	2200      	movs	r2, #0
 800332e:	0019      	movs	r1, r3
 8003330:	f002 ffaf 	bl	8006292 <HAL_GPIO_WritePin>
	delay (500);
 8003334:	23fa      	movs	r3, #250	@ 0xfa
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff ff85 	bl	8003248 <delay>

	Set_Pin_Input(Port, Pin);
 800333e:	4b13      	ldr	r3, [pc, #76]	@ (800338c <DS18B20_Start+0x84>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b13      	ldr	r3, [pc, #76]	@ (8003390 <DS18B20_Start+0x88>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	0019      	movs	r1, r3
 8003348:	0010      	movs	r0, r2
 800334a:	f7ff ff97 	bl	800327c <Set_Pin_Input>

	delay (80);
 800334e:	2050      	movs	r0, #80	@ 0x50
 8003350:	f7ff ff7a 	bl	8003248 <delay>

	if(!(HAL_GPIO_ReadPin(Port, Pin))) Response = 1;
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <DS18B20_Start+0x84>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <DS18B20_Start+0x88>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	0019      	movs	r1, r3
 800335e:	0010      	movs	r0, r2
 8003360:	f002 ff7a 	bl	8006258 <HAL_GPIO_ReadPin>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d103      	bne.n	8003370 <DS18B20_Start+0x68>
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e002      	b.n	8003376 <DS18B20_Start+0x6e>
	else Response = 0;
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]

	delay (400);
 8003376:	23c8      	movs	r3, #200	@ 0xc8
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	0018      	movs	r0, r3
 800337c:	f7ff ff64 	bl	8003248 <delay>

	return Response;
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	781b      	ldrb	r3, [r3, #0]
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}
 800338c:	2000024c 	.word	0x2000024c
 8003390:	20000250 	.word	0x20000250

08003394 <DS18B20_Write>:
 * @brief	Write a byte to the DS18B20 for start a process
 * @param	data	byte that indicate the process to start
 * @retval	None
 */
static void DS18B20_Write ( uint8_t data )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	0002      	movs	r2, r0
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	701a      	strb	r2, [r3, #0]

	Set_Pin_Output(Port, Pin);
 80033a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <DS18B20_Write+0xbc>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003454 <DS18B20_Write+0xc0>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	0019      	movs	r1, r3
 80033aa:	0010      	movs	r0, r2
 80033ac:	f7ff ff89 	bl	80032c2 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e044      	b.n	8003440 <DS18B20_Write+0xac>
	{

		if ((data & (1<<i)) !=0 )	//if the bit is high
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	411a      	asrs	r2, r3
 80033be:	0013      	movs	r3, r2
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d01e      	beq.n	8003404 <DS18B20_Write+0x70>
		{

			//write 1
			Set_Pin_Output(Port, Pin);
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <DS18B20_Write+0xbc>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <DS18B20_Write+0xc0>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	0019      	movs	r1, r3
 80033d0:	0010      	movs	r0, r2
 80033d2:	f7ff ff76 	bl	80032c2 <Set_Pin_Output>
			HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80033d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003450 <DS18B20_Write+0xbc>)
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <DS18B20_Write+0xc0>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	0019      	movs	r1, r3
 80033e2:	f002 ff56 	bl	8006292 <HAL_GPIO_WritePin>
			delay (1);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f7ff ff2e 	bl	8003248 <delay>

			Set_Pin_Input(Port, Pin);
 80033ec:	4b18      	ldr	r3, [pc, #96]	@ (8003450 <DS18B20_Write+0xbc>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <DS18B20_Write+0xc0>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	0019      	movs	r1, r3
 80033f6:	0010      	movs	r0, r2
 80033f8:	f7ff ff40 	bl	800327c <Set_Pin_Input>
			delay (60);
 80033fc:	203c      	movs	r0, #60	@ 0x3c
 80033fe:	f7ff ff23 	bl	8003248 <delay>
 8003402:	e01a      	b.n	800343a <DS18B20_Write+0xa6>

		}else //if the bit is low
		{

			//write 0
			Set_Pin_Output(Port, Pin);
 8003404:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <DS18B20_Write+0xbc>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <DS18B20_Write+0xc0>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	0019      	movs	r1, r3
 800340e:	0010      	movs	r0, r2
 8003410:	f7ff ff57 	bl	80032c2 <Set_Pin_Output>
			HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <DS18B20_Write+0xbc>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <DS18B20_Write+0xc0>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	0019      	movs	r1, r3
 8003420:	f002 ff37 	bl	8006292 <HAL_GPIO_WritePin>
			delay (60); //wait for 60 us
 8003424:	203c      	movs	r0, #60	@ 0x3c
 8003426:	f7ff ff0f 	bl	8003248 <delay>

			Set_Pin_Input(Port, Pin);
 800342a:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <DS18B20_Write+0xbc>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <DS18B20_Write+0xc0>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	0019      	movs	r1, r3
 8003434:	0010      	movs	r0, r2
 8003436:	f7ff ff21 	bl	800327c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b07      	cmp	r3, #7
 8003444:	ddb7      	ble.n	80033b6 <DS18B20_Write+0x22>
		}
	}
}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	2000024c 	.word	0x2000024c
 8003454:	20000250 	.word	0x20000250

08003458 <DS18B20_Read>:
/*
 * @brief	Read byte of the DS18B20 sensor
 * @retval	Byte returned by the DS18B20 sensor
 */
static uint8_t DS18B20_Read (void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0

	uint8_t value = 0;
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
	Set_Pin_Input(Port, Pin);
 8003464:	4b26      	ldr	r3, [pc, #152]	@ (8003500 <DS18B20_Read+0xa8>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b26      	ldr	r3, [pc, #152]	@ (8003504 <DS18B20_Read+0xac>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	0019      	movs	r1, r3
 800346e:	0010      	movs	r0, r2
 8003470:	f7ff ff04 	bl	800327c <Set_Pin_Input>

	for(int i=0; i<8; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	e039      	b.n	80034ee <DS18B20_Read+0x96>
	{
		Set_Pin_Output(Port, Pin);
 800347a:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <DS18B20_Read+0xa8>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b21      	ldr	r3, [pc, #132]	@ (8003504 <DS18B20_Read+0xac>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	0019      	movs	r1, r3
 8003484:	0010      	movs	r0, r2
 8003486:	f7ff ff1c 	bl	80032c2 <Set_Pin_Output>

		HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800348a:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <DS18B20_Read+0xa8>)
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <DS18B20_Read+0xac>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	0019      	movs	r1, r3
 8003496:	f002 fefc 	bl	8006292 <HAL_GPIO_WritePin>
		delay (2);
 800349a:	2002      	movs	r0, #2
 800349c:	f7ff fed4 	bl	8003248 <delay>

		Set_Pin_Input(Port, Pin);
 80034a0:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <DS18B20_Read+0xa8>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b17      	ldr	r3, [pc, #92]	@ (8003504 <DS18B20_Read+0xac>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	0019      	movs	r1, r3
 80034aa:	0010      	movs	r0, r2
 80034ac:	f7ff fee6 	bl	800327c <Set_Pin_Input>
		delay (5);
 80034b0:	2005      	movs	r0, #5
 80034b2:	f7ff fec9 	bl	8003248 <delay>
		if(HAL_GPIO_ReadPin(Port, Pin))
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <DS18B20_Read+0xa8>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <DS18B20_Read+0xac>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	0019      	movs	r1, r3
 80034c0:	0010      	movs	r0, r2
 80034c2:	f002 fec9 	bl	8006258 <HAL_GPIO_ReadPin>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d00b      	beq.n	80034e2 <DS18B20_Read+0x8a>
		{
			value |= 1<<i; //read=1
 80034ca:	2201      	movs	r2, #1
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	409a      	lsls	r2, r3
 80034d0:	0013      	movs	r3, r2
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	701a      	strb	r2, [r3, #0]
		}
		delay (60);
 80034e2:	203c      	movs	r0, #60	@ 0x3c
 80034e4:	f7ff feb0 	bl	8003248 <delay>
	for(int i=0; i<8; i++)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b07      	cmp	r3, #7
 80034f2:	ddc2      	ble.n	800347a <DS18B20_Read+0x22>
	}
	return value;
 80034f4:	1dfb      	adds	r3, r7, #7
 80034f6:	781b      	ldrb	r3, [r3, #0]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	2000024c 	.word	0x2000024c
 8003504:	20000250 	.word	0x20000250

08003508 <convert_temperature>:
 * @param	byte_1	Byte #1 to convert
 * @param	byte_2	Byte #2 to convert
 * @retval	Decimal value of temperature
 */
static float convert_temperature(uint8_t byte_1, uint8_t byte_2)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	0002      	movs	r2, r0
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	1dbb      	adds	r3, r7, #6
 8003516:	1c0a      	adds	r2, r1, #0
 8003518:	701a      	strb	r2, [r3, #0]
	uint16_t tempval = byte_2 << 8 | byte_1;
 800351a:	1dbb      	adds	r3, r7, #6
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	b21a      	sxth	r2, r3
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b21b      	sxth	r3, r3
 8003528:	4313      	orrs	r3, r2
 800352a:	b21a      	sxth	r2, r3
 800352c:	210e      	movs	r1, #14
 800352e:	187b      	adds	r3, r7, r1
 8003530:	801a      	strh	r2, [r3, #0]
	float result_temp = (128.0/2048)*tempval;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	0018      	movs	r0, r3
 8003538:	f7ff fd22 	bl	8002f80 <__aeabi_i2d>
 800353c:	2200      	movs	r2, #0
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <convert_temperature+0x58>)
 8003540:	f7fe fe5c 	bl	80021fc <__aeabi_dmul>
 8003544:	0002      	movs	r2, r0
 8003546:	000b      	movs	r3, r1
 8003548:	0010      	movs	r0, r2
 800354a:	0019      	movs	r1, r3
 800354c:	f7ff fdb2 	bl	80030b4 <__aeabi_d2f>
 8003550:	1c03      	adds	r3, r0, #0
 8003552:	60bb      	str	r3, [r7, #8]

	return result_temp;
 8003554:	68bb      	ldr	r3, [r7, #8]
}
 8003556:	1c18      	adds	r0, r3, #0
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	3fb00000 	.word	0x3fb00000

08003564 <DS18B20_Get_temperature>:
/*
 * @brief	Get the temperature value
 * @retval	float with the temperature value
 */
float DS18B20_Get_temperature( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 8003568:	f7ff fece 	bl	8003308 <DS18B20_Start>
 800356c:	0003      	movs	r3, r0
 800356e:	001a      	movs	r2, r3
 8003570:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <DS18B20_Get_temperature+0x78>)
 8003572:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8003574:	2001      	movs	r0, #1
 8003576:	f002 f949 	bl	800580c <HAL_Delay>
	DS18B20_Write(SKIP_ROM);
 800357a:	20cc      	movs	r0, #204	@ 0xcc
 800357c:	f7ff ff0a 	bl	8003394 <DS18B20_Write>
	DS18B20_Write(CONVERT_T);
 8003580:	2044      	movs	r0, #68	@ 0x44
 8003582:	f7ff ff07 	bl	8003394 <DS18B20_Write>
	//HAL_Delay(50);

	Presence = DS18B20_Start();
 8003586:	f7ff febf 	bl	8003308 <DS18B20_Start>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <DS18B20_Get_temperature+0x78>)
 8003590:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f002 f93a 	bl	800580c <HAL_Delay>
	DS18B20_Write(SKIP_ROM);
 8003598:	20cc      	movs	r0, #204	@ 0xcc
 800359a:	f7ff fefb 	bl	8003394 <DS18B20_Write>
	DS18B20_Write(READ_SCRATCHPAD);
 800359e:	20be      	movs	r0, #190	@ 0xbe
 80035a0:	f7ff fef8 	bl	8003394 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 80035a4:	f7ff ff58 	bl	8003458 <DS18B20_Read>
 80035a8:	0003      	movs	r3, r0
 80035aa:	001a      	movs	r2, r3
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <DS18B20_Get_temperature+0x7c>)
 80035ae:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 80035b0:	f7ff ff52 	bl	8003458 <DS18B20_Read>
 80035b4:	0003      	movs	r3, r0
 80035b6:	001a      	movs	r2, r3
 80035b8:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <DS18B20_Get_temperature+0x80>)
 80035ba:	701a      	strb	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1, (const uint8_t *)&read, 6, 1000);
	//size_to_send = sprintf( (char *)&transmit_text, "presence %d el primer %d y el segundo %d \r\n", Presence, Temp_byte1, Temp_byte2);
	//HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, 1000);
	temp_dec = convert_temperature(Temp_byte1, Temp_byte2);
 80035bc:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <DS18B20_Get_temperature+0x7c>)
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <DS18B20_Get_temperature+0x80>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	0019      	movs	r1, r3
 80035c6:	0010      	movs	r0, r2
 80035c8:	f7ff ff9e 	bl	8003508 <convert_temperature>
 80035cc:	1c02      	adds	r2, r0, #0
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <DS18B20_Get_temperature+0x84>)
 80035d0:	601a      	str	r2, [r3, #0]

	return temp_dec;
 80035d2:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <DS18B20_Get_temperature+0x84>)
 80035d4:	681b      	ldr	r3, [r3, #0]
}
 80035d6:	1c18      	adds	r0, r3, #0
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000252 	.word	0x20000252
 80035e0:	20000253 	.word	0x20000253
 80035e4:	20000254 	.word	0x20000254
 80035e8:	20000258 	.word	0x20000258

080035ec <flash_csn>:
	//Bring CSN high
	flash_csn(1);
}


void flash_csn( uint8_t val){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	0002      	movs	r2, r0
 80035f4:	1dfb      	adds	r3, r7, #7
 80035f6:	701a      	strb	r2, [r3, #0]
	if ( val == 0 )
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <flash_csn+0x26>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	0219      	lsls	r1, r3, #8
 8003604:	2390      	movs	r3, #144	@ 0x90
 8003606:	05db      	lsls	r3, r3, #23
 8003608:	2200      	movs	r2, #0
 800360a:	0018      	movs	r0, r3
 800360c:	f002 fe41 	bl	8006292 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);

}
 8003610:	e007      	b.n	8003622 <flash_csn+0x36>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	0219      	lsls	r1, r3, #8
 8003616:	2390      	movs	r3, #144	@ 0x90
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	2201      	movs	r2, #1
 800361c:	0018      	movs	r0, r3
 800361e:	f002 fe38 	bl	8006292 <HAL_GPIO_WritePin>
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b002      	add	sp, #8
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <Write_flash_enable>:
	HAL_SPI_Transmit(&hspi1, &spiBuf[0], 2 , 100);
	//Bring CSN high
	flash_csn(1);
}

void Write_flash_enable(){
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
	uint8_t spiBuf = WREN;
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	2206      	movs	r2, #6
 8003636:	701a      	strb	r2, [r3, #0]
	//Put CSN low
	flash_csn(0);
 8003638:	2000      	movs	r0, #0
 800363a:	f7ff ffd7 	bl	80035ec <flash_csn>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, &spiBuf, 1, 1000);
 800363e:	23fa      	movs	r3, #250	@ 0xfa
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	1df9      	adds	r1, r7, #7
 8003644:	4805      	ldr	r0, [pc, #20]	@ (800365c <Write_flash_enable+0x30>)
 8003646:	2201      	movs	r2, #1
 8003648:	f003 fc5c 	bl	8006f04 <HAL_SPI_Transmit>
	flash_csn(1);
 800364c:	2001      	movs	r0, #1
 800364e:	f7ff ffcd 	bl	80035ec <flash_csn>
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	200003cc 	.word	0x200003cc

08003660 <Flash_verificate_status>:


void Flash_verificate_status()
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
	uint8_t spiBuf[1];
	//Put CSN low
	spiBuf[0] = READ_STATUS_REG_1;
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	2205      	movs	r2, #5
 800366a:	701a      	strb	r2, [r3, #0]
	uint8_t bussy = 1;
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
	while (bussy == 1){
 8003672:	e019      	b.n	80036a8 <Flash_verificate_status+0x48>
		flash_csn(0);
 8003674:	2000      	movs	r0, #0
 8003676:	f7ff ffb9 	bl	80035ec <flash_csn>
		//Transmit register address
		HAL_SPI_Transmit(&hspi1, &spiBuf[0], 1, 1000);
 800367a:	23fa      	movs	r3, #250	@ 0xfa
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	1d39      	adds	r1, r7, #4
 8003680:	480e      	ldr	r0, [pc, #56]	@ (80036bc <Flash_verificate_status+0x5c>)
 8003682:	2201      	movs	r2, #1
 8003684:	f003 fc3e 	bl	8006f04 <HAL_SPI_Transmit>
		//Receive data
		HAL_SPI_Receive(&hspi1, &read_flash_Byte[0], 1, 1000);
 8003688:	23fa      	movs	r3, #250	@ 0xfa
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	490c      	ldr	r1, [pc, #48]	@ (80036c0 <Flash_verificate_status+0x60>)
 800368e:	480b      	ldr	r0, [pc, #44]	@ (80036bc <Flash_verificate_status+0x5c>)
 8003690:	2201      	movs	r2, #1
 8003692:	f003 fd97 	bl	80071c4 <HAL_SPI_Receive>
		//Bring CSN high
		flash_csn(1);
 8003696:	2001      	movs	r0, #1
 8003698:	f7ff ffa8 	bl	80035ec <flash_csn>
		bussy = read_flash_Byte[0] & 0X01;
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <Flash_verificate_status+0x60>)
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	2101      	movs	r1, #1
 80036a4:	400a      	ands	r2, r1
 80036a6:	701a      	strb	r2, [r3, #0]
	while (bussy == 1){
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d0e1      	beq.n	8003674 <Flash_verificate_status+0x14>
	}
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	200003cc 	.word	0x200003cc
 80036c0:	2000025c 	.word	0x2000025c

080036c4 <Flash_write_page>:



void Flash_write_page(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t *value_to_write, uint8_t length)
{
 80036c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c6:	46c6      	mov	lr, r8
 80036c8:	b500      	push	{lr}
 80036ca:	b08c      	sub	sp, #48	@ 0x30
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	0006      	movs	r6, r0
 80036d0:	0008      	movs	r0, r1
 80036d2:	0011      	movs	r1, r2
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	231f      	movs	r3, #31
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	1c32      	adds	r2, r6, #0
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	231e      	movs	r3, #30
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	1c02      	adds	r2, r0, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	231d      	movs	r3, #29
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	1c0a      	adds	r2, r1, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	466b      	mov	r3, sp
 80036f0:	4698      	mov	r8, r3
	Flash_verificate_status();
 80036f2:	f7ff ffb5 	bl	8003660 <Flash_verificate_status>

	Write_flash_enable();
 80036f6:	f7ff ff99 	bl	800362c <Write_flash_enable>

	char spiBuf[length + 4];
 80036fa:	2328      	movs	r3, #40	@ 0x28
 80036fc:	2218      	movs	r2, #24
 80036fe:	1898      	adds	r0, r3, r2
 8003700:	19c3      	adds	r3, r0, r7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	3304      	adds	r3, #4
 8003706:	1e5a      	subs	r2, r3, #1
 8003708:	627a      	str	r2, [r7, #36]	@ 0x24
 800370a:	001a      	movs	r2, r3
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	60fa      	str	r2, [r7, #12]
 8003712:	68b8      	ldr	r0, [r7, #8]
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	0002      	movs	r2, r0
 8003718:	0f52      	lsrs	r2, r2, #29
 800371a:	000e      	movs	r6, r1
 800371c:	00f6      	lsls	r6, r6, #3
 800371e:	617e      	str	r6, [r7, #20]
 8003720:	697e      	ldr	r6, [r7, #20]
 8003722:	4316      	orrs	r6, r2
 8003724:	617e      	str	r6, [r7, #20]
 8003726:	0002      	movs	r2, r0
 8003728:	00d2      	lsls	r2, r2, #3
 800372a:	613a      	str	r2, [r7, #16]
 800372c:	001a      	movs	r2, r3
 800372e:	603a      	str	r2, [r7, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	6838      	ldr	r0, [r7, #0]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	0002      	movs	r2, r0
 800373a:	0f52      	lsrs	r2, r2, #29
 800373c:	000e      	movs	r6, r1
 800373e:	00f5      	lsls	r5, r6, #3
 8003740:	4315      	orrs	r5, r2
 8003742:	0002      	movs	r2, r0
 8003744:	00d4      	lsls	r4, r2, #3
 8003746:	3307      	adds	r3, #7
 8003748:	08db      	lsrs	r3, r3, #3
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	466a      	mov	r2, sp
 800374e:	1ad2      	subs	r2, r2, r3
 8003750:	4695      	mov	sp, r2
 8003752:	ab02      	add	r3, sp, #8
 8003754:	3300      	adds	r3, #0
 8003756:	623b      	str	r3, [r7, #32]

	spiBuf[0] = PAGE_PROGRAM;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
	// concatenate all the data to be sent
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	1c58      	adds	r0, r3, #1
 8003762:	241f      	movs	r4, #31
 8003764:	193b      	adds	r3, r7, r4
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	211e      	movs	r1, #30
 800376a:	187b      	adds	r3, r7, r1
 800376c:	781c      	ldrb	r4, [r3, #0]
 800376e:	231d      	movs	r3, #29
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4913      	ldr	r1, [pc, #76]	@ (80037c4 <Flash_write_page+0x100>)
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	0023      	movs	r3, r4
 800377a:	f006 fcf5 	bl	800a168 <siprintf>
	strncpy( &spiBuf[4], (char *)value_to_write, length );
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	1d18      	adds	r0, r3, #4
 8003782:	2428      	movs	r4, #40	@ 0x28
 8003784:	2518      	movs	r5, #24
 8003786:	1963      	adds	r3, r4, r5
 8003788:	19db      	adds	r3, r3, r7
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	0019      	movs	r1, r3
 8003790:	f006 fdfe 	bl	800a390 <strncpy>
	//Put CSN low
	flash_csn(0);
 8003794:	2000      	movs	r0, #0
 8003796:	f7ff ff29 	bl	80035ec <flash_csn>
	//Transmit register address and data
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spiBuf[0], length+4 , 100);
 800379a:	6a39      	ldr	r1, [r7, #32]
 800379c:	1963      	adds	r3, r4, r5
 800379e:	19db      	adds	r3, r3, r7
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3304      	adds	r3, #4
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	4807      	ldr	r0, [pc, #28]	@ (80037c8 <Flash_write_page+0x104>)
 80037aa:	2364      	movs	r3, #100	@ 0x64
 80037ac:	f003 fbaa 	bl	8006f04 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 80037b0:	2001      	movs	r0, #1
 80037b2:	f7ff ff1b 	bl	80035ec <flash_csn>
 80037b6:	46c5      	mov	sp, r8
}
 80037b8:	46c0      	nop			@ (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b00a      	add	sp, #40	@ 0x28
 80037be:	bc80      	pop	{r7}
 80037c0:	46b8      	mov	r8, r7
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c4:	0800d3c8 	.word	0x0800d3c8
 80037c8:	200003cc 	.word	0x200003cc

080037cc <Flash_read_page>:


void Flash_read_page(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t aux_length)
{
 80037cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	0005      	movs	r5, r0
 80037d4:	000c      	movs	r4, r1
 80037d6:	0010      	movs	r0, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	1c2a      	adds	r2, r5, #0
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	1c22      	adds	r2, r4, #0
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	1d7b      	adds	r3, r7, #5
 80037e8:	1c02      	adds	r2, r0, #0
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	1c0a      	adds	r2, r1, #0
 80037f0:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[4];
	Flash_verificate_status();
 80037f2:	f7ff ff35 	bl	8003660 <Flash_verificate_status>
	//Put CSN low
	flash_csn(0);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7ff fef8 	bl	80035ec <flash_csn>
	// concatenate all the data to be sent
	spiBuf[0] = READ_PAGE;
 80037fc:	200c      	movs	r0, #12
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	2203      	movs	r2, #3
 8003802:	701a      	strb	r2, [r3, #0]
	sprintf( (char *)&spiBuf[1], "%c%c%c", address_1, address_2, address_3);
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781c      	ldrb	r4, [r3, #0]
 8003808:	1dbb      	adds	r3, r7, #6
 800380a:	781d      	ldrb	r5, [r3, #0]
 800380c:	1d7b      	adds	r3, r7, #5
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	490f      	ldr	r1, [pc, #60]	@ (8003850 <Flash_read_page+0x84>)
 8003812:	0006      	movs	r6, r0
 8003814:	183a      	adds	r2, r7, r0
 8003816:	1c50      	adds	r0, r2, #1
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	002b      	movs	r3, r5
 800381c:	0022      	movs	r2, r4
 800381e:	f006 fca3 	bl	800a168 <siprintf>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spiBuf, 4, 1000);
 8003822:	23fa      	movs	r3, #250	@ 0xfa
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	19b9      	adds	r1, r7, r6
 8003828:	480a      	ldr	r0, [pc, #40]	@ (8003854 <Flash_read_page+0x88>)
 800382a:	2204      	movs	r2, #4
 800382c:	f003 fb6a 	bl	8006f04 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi1, &read_flash_Byte[0], aux_length, 1000);
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b29a      	uxth	r2, r3
 8003836:	23fa      	movs	r3, #250	@ 0xfa
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4907      	ldr	r1, [pc, #28]	@ (8003858 <Flash_read_page+0x8c>)
 800383c:	4805      	ldr	r0, [pc, #20]	@ (8003854 <Flash_read_page+0x88>)
 800383e:	f003 fcc1 	bl	80071c4 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f7ff fed2 	bl	80035ec <flash_csn>
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b005      	add	sp, #20
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	0800d3c8 	.word	0x0800d3c8
 8003854:	200003cc 	.word	0x200003cc
 8003858:	2000025c 	.word	0x2000025c

0800385c <Flash_page_erase>:


void Flash_page_erase(uint8_t address_1, uint8_t address_2, uint8_t address_3)
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af02      	add	r7, sp, #8
 8003862:	0004      	movs	r4, r0
 8003864:	0008      	movs	r0, r1
 8003866:	0011      	movs	r1, r2
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	1c22      	adds	r2, r4, #0
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	1dbb      	adds	r3, r7, #6
 8003870:	1c02      	adds	r2, r0, #0
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	1d7b      	adds	r3, r7, #5
 8003876:	1c0a      	adds	r2, r1, #0
 8003878:	701a      	strb	r2, [r3, #0]
	Flash_verificate_status();
 800387a:	f7ff fef1 	bl	8003660 <Flash_verificate_status>
	// Activate WREN
	Write_flash_enable();
 800387e:	f7ff fed5 	bl	800362c <Write_flash_enable>
	uint8_t spiBuf[4];

	//Put CSN low
	flash_csn(0);
 8003882:	2000      	movs	r0, #0
 8003884:	f7ff feb2 	bl	80035ec <flash_csn>
	// concatenate all the data to be sent
	spiBuf[0] = PAGE_ERASE;
 8003888:	200c      	movs	r0, #12
 800388a:	183b      	adds	r3, r7, r0
 800388c:	2281      	movs	r2, #129	@ 0x81
 800388e:	701a      	strb	r2, [r3, #0]
	sprintf( (char *)&spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	781c      	ldrb	r4, [r3, #0]
 8003894:	1dbb      	adds	r3, r7, #6
 8003896:	781d      	ldrb	r5, [r3, #0]
 8003898:	1d7b      	adds	r3, r7, #5
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	490b      	ldr	r1, [pc, #44]	@ (80038cc <Flash_page_erase+0x70>)
 800389e:	0006      	movs	r6, r0
 80038a0:	183a      	adds	r2, r7, r0
 80038a2:	1c50      	adds	r0, r2, #1
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	002b      	movs	r3, r5
 80038a8:	0022      	movs	r2, r4
 80038aa:	f006 fc5d 	bl	800a168 <siprintf>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spiBuf, 4, 1000);
 80038ae:	23fa      	movs	r3, #250	@ 0xfa
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	19b9      	adds	r1, r7, r6
 80038b4:	4806      	ldr	r0, [pc, #24]	@ (80038d0 <Flash_page_erase+0x74>)
 80038b6:	2204      	movs	r2, #4
 80038b8:	f003 fb24 	bl	8006f04 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 80038bc:	2001      	movs	r0, #1
 80038be:	f7ff fe95 	bl	80035ec <flash_csn>
}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b005      	add	sp, #20
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	0800d3c8 	.word	0x0800d3c8
 80038d0:	200003cc 	.word	0x200003cc

080038d4 <RGB_Init>:
 * @brief	Set the ports and pins where the LEDs are connected
 * @param	Structure that contain the pins and ports of the LEDS
 * @retval 	None
 */
void RGB_Init(RGB_LEDS_struct_t parameters)
{
 80038d4:	b084      	sub	sp, #16
 80038d6:	b5b0      	push	{r4, r5, r7, lr}
 80038d8:	af00      	add	r7, sp, #0
 80038da:	250c      	movs	r5, #12
 80038dc:	1d2c      	adds	r4, r5, #4
 80038de:	19e4      	adds	r4, r4, r7
 80038e0:	6020      	str	r0, [r4, #0]
 80038e2:	6061      	str	r1, [r4, #4]
 80038e4:	60a2      	str	r2, [r4, #8]
 80038e6:	60e3      	str	r3, [r4, #12]
	parameters_LEDS = parameters;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <RGB_Init+0x38>)
 80038ea:	1d2a      	adds	r2, r5, #4
 80038ec:	19d2      	adds	r2, r2, r7
 80038ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80038f0:	c313      	stmia	r3!, {r0, r1, r4}
 80038f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80038f4:	c313      	stmia	r3!, {r0, r1, r4}
 80038f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80038f8:	c313      	stmia	r3!, {r0, r1, r4}
 80038fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80038fc:	c313      	stmia	r3!, {r0, r1, r4}
}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	bcb0      	pop	{r4, r5, r7}
 8003904:	bc08      	pop	{r3}
 8003906:	b004      	add	sp, #16
 8003908:	4718      	bx	r3
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	2000035c 	.word	0x2000035c

08003910 <RGB_RED_ON>:
 * @brief	Turn on the red LED of ID parameter
 * @param	Identifier of the LED to turn on
 * @retval	None
 */
void RGB_RED_ON(ID_LED ID)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dfb      	adds	r3, r7, #7
 800391a:	701a      	strb	r2, [r3, #0]
	switch(ID)
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d01d      	beq.n	8003960 <RGB_RED_ON+0x50>
 8003924:	dc36      	bgt.n	8003994 <RGB_RED_ON+0x84>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d033      	beq.n	8003992 <RGB_RED_ON+0x82>
 800392a:	2b01      	cmp	r3, #1
 800392c:	d132      	bne.n	8003994 <RGB_RED_ON+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_SET);
 800392e:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <RGB_RED_ON+0x8c>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <RGB_RED_ON+0x8c>)
 8003934:	889b      	ldrh	r3, [r3, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	0019      	movs	r1, r3
 800393a:	f002 fcaa 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_RESET);
 800393e:	4b17      	ldr	r3, [pc, #92]	@ (800399c <RGB_RED_ON+0x8c>)
 8003940:	6898      	ldr	r0, [r3, #8]
 8003942:	4b16      	ldr	r3, [pc, #88]	@ (800399c <RGB_RED_ON+0x8c>)
 8003944:	899b      	ldrh	r3, [r3, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	0019      	movs	r1, r3
 800394a:	f002 fca2 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_RESET);
 800394e:	4b13      	ldr	r3, [pc, #76]	@ (800399c <RGB_RED_ON+0x8c>)
 8003950:	6918      	ldr	r0, [r3, #16]
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <RGB_RED_ON+0x8c>)
 8003954:	8a9b      	ldrh	r3, [r3, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	0019      	movs	r1, r3
 800395a:	f002 fc9a 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 800395e:	e019      	b.n	8003994 <RGB_RED_ON+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_SET);
 8003960:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <RGB_RED_ON+0x8c>)
 8003962:	6998      	ldr	r0, [r3, #24]
 8003964:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <RGB_RED_ON+0x8c>)
 8003966:	8b9b      	ldrh	r3, [r3, #28]
 8003968:	2201      	movs	r2, #1
 800396a:	0019      	movs	r1, r3
 800396c:	f002 fc91 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_RESET);
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <RGB_RED_ON+0x8c>)
 8003972:	6a18      	ldr	r0, [r3, #32]
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <RGB_RED_ON+0x8c>)
 8003976:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003978:	2200      	movs	r2, #0
 800397a:	0019      	movs	r1, r3
 800397c:	f002 fc89 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_RESET);
 8003980:	4b06      	ldr	r3, [pc, #24]	@ (800399c <RGB_RED_ON+0x8c>)
 8003982:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <RGB_RED_ON+0x8c>)
 8003986:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003988:	2200      	movs	r2, #0
 800398a:	0019      	movs	r1, r3
 800398c:	f002 fc81 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 8003990:	e000      	b.n	8003994 <RGB_RED_ON+0x84>
		case NONE:
			break;
 8003992:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000035c 	.word	0x2000035c

080039a0 <RGB_GREEN_ON>:
 * @brief	Turn on the green LED of ID parameter
 * @param	Identifier of the LED to turn on
 * @retval	None
 */
void RGB_GREEN_ON(ID_LED ID)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	0002      	movs	r2, r0
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	701a      	strb	r2, [r3, #0]
	switch(ID)
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d01d      	beq.n	80039f0 <RGB_GREEN_ON+0x50>
 80039b4:	dc36      	bgt.n	8003a24 <RGB_GREEN_ON+0x84>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d033      	beq.n	8003a22 <RGB_GREEN_ON+0x82>
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d132      	bne.n	8003a24 <RGB_GREEN_ON+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_RESET);
 80039be:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	0019      	movs	r1, r3
 80039ca:	f002 fc62 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_SET);
 80039ce:	4b17      	ldr	r3, [pc, #92]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039d0:	6898      	ldr	r0, [r3, #8]
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039d4:	899b      	ldrh	r3, [r3, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	0019      	movs	r1, r3
 80039da:	f002 fc5a 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_RESET);
 80039de:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039e0:	6918      	ldr	r0, [r3, #16]
 80039e2:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039e4:	8a9b      	ldrh	r3, [r3, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	0019      	movs	r1, r3
 80039ea:	f002 fc52 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 80039ee:	e019      	b.n	8003a24 <RGB_GREEN_ON+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_RESET);
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039f2:	6998      	ldr	r0, [r3, #24]
 80039f4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 80039f6:	8b9b      	ldrh	r3, [r3, #28]
 80039f8:	2200      	movs	r2, #0
 80039fa:	0019      	movs	r1, r3
 80039fc:	f002 fc49 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_SET);
 8003a00:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 8003a02:	6a18      	ldr	r0, [r3, #32]
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 8003a06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a08:	2201      	movs	r2, #1
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	f002 fc41 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_RESET);
 8003a10:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 8003a12:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <RGB_GREEN_ON+0x8c>)
 8003a16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	f002 fc39 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 8003a20:	e000      	b.n	8003a24 <RGB_GREEN_ON+0x84>
		case NONE:
			break;
 8003a22:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	2000035c 	.word	0x2000035c

08003a30 <RGB_BLUE_ON>:
 * @brief	Turn on the blue LED of ID parameter
 * @param	Identifier of the LED to turn on
 * @retval	None
 */
void RGB_BLUE_ON(ID_LED ID)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	0002      	movs	r2, r0
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	701a      	strb	r2, [r3, #0]
	switch(ID)
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d01d      	beq.n	8003a80 <RGB_BLUE_ON+0x50>
 8003a44:	dc36      	bgt.n	8003ab4 <RGB_BLUE_ON+0x84>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d033      	beq.n	8003ab2 <RGB_BLUE_ON+0x82>
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d132      	bne.n	8003ab4 <RGB_BLUE_ON+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_RESET);
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	4b1a      	ldr	r3, [pc, #104]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a54:	889b      	ldrh	r3, [r3, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	0019      	movs	r1, r3
 8003a5a:	f002 fc1a 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_RESET);
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a60:	6898      	ldr	r0, [r3, #8]
 8003a62:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a64:	899b      	ldrh	r3, [r3, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	0019      	movs	r1, r3
 8003a6a:	f002 fc12 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_SET);
 8003a6e:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a70:	6918      	ldr	r0, [r3, #16]
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a74:	8a9b      	ldrh	r3, [r3, #20]
 8003a76:	2201      	movs	r2, #1
 8003a78:	0019      	movs	r1, r3
 8003a7a:	f002 fc0a 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 8003a7e:	e019      	b.n	8003ab4 <RGB_BLUE_ON+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_RESET);
 8003a80:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a82:	6998      	ldr	r0, [r3, #24]
 8003a84:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a86:	8b9b      	ldrh	r3, [r3, #28]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	f002 fc01 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_RESET);
 8003a90:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a92:	6a18      	ldr	r0, [r3, #32]
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003a96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a98:	2200      	movs	r2, #0
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	f002 fbf9 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_SET);
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003aa2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003aa4:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <RGB_BLUE_ON+0x8c>)
 8003aa6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	0019      	movs	r1, r3
 8003aac:	f002 fbf1 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 8003ab0:	e000      	b.n	8003ab4 <RGB_BLUE_ON+0x84>
		case NONE:
			break;
 8003ab2:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2000035c 	.word	0x2000035c

08003ac0 <RGB_ALL_OFF>:
 * @brief	Turn off all LEDs of ID parameter
 * @param	Identifier of the LEDs to turn off
 * @retval	None
 */
void RGB_ALL_OFF(ID_LED ID)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	701a      	strb	r2, [r3, #0]
	switch(ID)
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d01d      	beq.n	8003b10 <RGB_ALL_OFF+0x50>
 8003ad4:	dc36      	bgt.n	8003b44 <RGB_ALL_OFF+0x84>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d033      	beq.n	8003b42 <RGB_ALL_OFF+0x82>
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d132      	bne.n	8003b44 <RGB_ALL_OFF+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_RESET);
 8003ade:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003ae4:	889b      	ldrh	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	0019      	movs	r1, r3
 8003aea:	f002 fbd2 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_RESET);
 8003aee:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003af0:	6898      	ldr	r0, [r3, #8]
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003af4:	899b      	ldrh	r3, [r3, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	0019      	movs	r1, r3
 8003afa:	f002 fbca 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_RESET);
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b00:	6918      	ldr	r0, [r3, #16]
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b04:	8a9b      	ldrh	r3, [r3, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	0019      	movs	r1, r3
 8003b0a:	f002 fbc2 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 8003b0e:	e019      	b.n	8003b44 <RGB_ALL_OFF+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_RESET);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b12:	6998      	ldr	r0, [r3, #24]
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b16:	8b9b      	ldrh	r3, [r3, #28]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	f002 fbb9 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_RESET);
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b22:	6a18      	ldr	r0, [r3, #32]
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b28:	2200      	movs	r2, #0
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f002 fbb1 	bl	8006292 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_RESET);
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b32:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <RGB_ALL_OFF+0x8c>)
 8003b36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	f002 fba9 	bl	8006292 <HAL_GPIO_WritePin>
			break;
 8003b40:	e000      	b.n	8003b44 <RGB_ALL_OFF+0x84>
		case NONE:
			break;
 8003b42:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	2000035c 	.word	0x2000035c

08003b50 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int flie, char *ptr, int len)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, MAX_TIME_WAIT_TO_TRANSMIT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4804      	ldr	r0, [pc, #16]	@ (8003b74 <_write+0x24>)
 8003b64:	2364      	movs	r3, #100	@ 0x64
 8003b66:	f004 fb6f 	bl	8008248 <HAL_UART_Transmit>
	return len;
 8003b6a:	687b      	ldr	r3, [r7, #4]
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000478 	.word	0x20000478

08003b78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <HAL_UART_RxCpltCallback+0x40>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d112      	bne.n	8003bb0 <HAL_UART_RxCpltCallback+0x38>
		data_usart1_rx = USART1->RDR;
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_UART_RxCpltCallback+0x40>)
 8003b8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <HAL_UART_RxCpltCallback+0x44>)
 8003b94:	701a      	strb	r2, [r3, #0]
		ring_buffer_write(&rb_usart1, data_usart1_rx);
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_UART_RxCpltCallback+0x44>)
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <HAL_UART_RxCpltCallback+0x48>)
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f001 fb28 	bl	80051f4 <ring_buffer_write>
		HAL_UART_Receive_IT(&huart1, &data_usart1_rx, 1);
 8003ba4:	4905      	ldr	r1, [pc, #20]	@ (8003bbc <HAL_UART_RxCpltCallback+0x44>)
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <HAL_UART_RxCpltCallback+0x4c>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	0018      	movs	r0, r3
 8003bac:	f004 fbeb 	bl	8008386 <HAL_UART_Receive_IT>
	}
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	20000518 	.word	0x20000518
 8003bc0:	20000500 	.word	0x20000500
 8003bc4:	20000478 	.word	0x20000478

08003bc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	0002      	movs	r2, r0
 8003bd0:	1dbb      	adds	r3, r7, #6
 8003bd2:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == SPEED_SENSOR_DIGITAL_Pin)
 8003bd4:	1dbb      	adds	r3, r7, #6
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d119      	bne.n	8003c10 <HAL_GPIO_EXTI_Callback+0x48>
  {
	  if(move_speed_flag == False)
 8003bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8003d18 <HAL_GPIO_EXTI_Callback+0x150>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		  RGB_GREEN_ON(SPEED);
 8003be4:	2001      	movs	r0, #1
 8003be6:	f7ff fedb 	bl	80039a0 <RGB_GREEN_ON>
		  move_speed_flag = True;
 8003bea:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <HAL_GPIO_EXTI_Callback+0x150>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
	  }

	  last_move_speed = HAL_GetTick();
 8003bf0:	f001 fe02 	bl	80057f8 <HAL_GetTick>
 8003bf4:	0002      	movs	r2, r0
 8003bf6:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <HAL_GPIO_EXTI_Callback+0x154>)
 8003bf8:	601a      	str	r2, [r3, #0]
	  counter_speed_pulse++;
 8003bfa:	4b49      	ldr	r3, [pc, #292]	@ (8003d20 <HAL_GPIO_EXTI_Callback+0x158>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	21fe      	movs	r1, #254	@ 0xfe
 8003c00:	0589      	lsls	r1, r1, #22
 8003c02:	1c18      	adds	r0, r3, #0
 8003c04:	f7fc fc94 	bl	8000530 <__aeabi_fadd>
 8003c08:	1c03      	adds	r3, r0, #0
 8003c0a:	1c1a      	adds	r2, r3, #0
 8003c0c:	4b44      	ldr	r3, [pc, #272]	@ (8003d20 <HAL_GPIO_EXTI_Callback+0x158>)
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  if(GPIO_Pin == UP_BUTTON_Pin)
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	01db      	lsls	r3, r3, #7
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d122      	bne.n	8003c62 <HAL_GPIO_EXTI_Callback+0x9a>
  {
	  if((HAL_GetTick()-last_press_button) >= DEBOUNCE_TIME)
 8003c1c:	f001 fdec 	bl	80057f8 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	4b40      	ldr	r3, [pc, #256]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c2a:	d91a      	bls.n	8003c62 <HAL_GPIO_EXTI_Callback+0x9a>
	  {
		  last_press_button = HAL_GetTick();
 8003c2c:	f001 fde4 	bl	80057f8 <HAL_GetTick>
 8003c30:	0002      	movs	r2, r0
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003c34:	601a      	str	r2, [r3, #0]
		  max_speed_RPM++;
 8003c36:	4b3c      	ldr	r3, [pc, #240]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0x160>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	21fe      	movs	r1, #254	@ 0xfe
 8003c3c:	0589      	lsls	r1, r1, #22
 8003c3e:	1c18      	adds	r0, r3, #0
 8003c40:	f7fc fc76 	bl	8000530 <__aeabi_fadd>
 8003c44:	1c03      	adds	r3, r0, #0
 8003c46:	1c1a      	adds	r2, r3, #0
 8003c48:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0x160>)
 8003c4a:	601a      	str	r2, [r3, #0]
		  printf("Max_RPM= %0.2f\r\n", max_speed_RPM);
 8003c4c:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0x160>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1c18      	adds	r0, r3, #0
 8003c52:	f7ff f9e7 	bl	8003024 <__aeabi_f2d>
 8003c56:	0002      	movs	r2, r0
 8003c58:	000b      	movs	r3, r1
 8003c5a:	4934      	ldr	r1, [pc, #208]	@ (8003d2c <HAL_GPIO_EXTI_Callback+0x164>)
 8003c5c:	0008      	movs	r0, r1
 8003c5e:	f006 fa13 	bl	800a088 <iprintf>
	  }
  }

  if(GPIO_Pin == DOWN_BUTTON_Pin)
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	015b      	lsls	r3, r3, #5
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d122      	bne.n	8003cb4 <HAL_GPIO_EXTI_Callback+0xec>
  {
	  if((HAL_GetTick()-last_press_button) >= DEBOUNCE_TIME)
 8003c6e:	f001 fdc3 	bl	80057f8 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	4b2b      	ldr	r3, [pc, #172]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c7c:	d91a      	bls.n	8003cb4 <HAL_GPIO_EXTI_Callback+0xec>
	  {
		  last_press_button = HAL_GetTick();
 8003c7e:	f001 fdbb 	bl	80057f8 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003c86:	601a      	str	r2, [r3, #0]
		  max_speed_RPM-- ;
 8003c88:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0x160>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	21fe      	movs	r1, #254	@ 0xfe
 8003c8e:	0589      	lsls	r1, r1, #22
 8003c90:	1c18      	adds	r0, r3, #0
 8003c92:	f7fd f8fb 	bl	8000e8c <__aeabi_fsub>
 8003c96:	1c03      	adds	r3, r0, #0
 8003c98:	1c1a      	adds	r2, r3, #0
 8003c9a:	4b23      	ldr	r3, [pc, #140]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0x160>)
 8003c9c:	601a      	str	r2, [r3, #0]
		  printf("Max_RPM= %0.2f\r\n", max_speed_RPM);
 8003c9e:	4b22      	ldr	r3, [pc, #136]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0x160>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1c18      	adds	r0, r3, #0
 8003ca4:	f7ff f9be 	bl	8003024 <__aeabi_f2d>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	000b      	movs	r3, r1
 8003cac:	491f      	ldr	r1, [pc, #124]	@ (8003d2c <HAL_GPIO_EXTI_Callback+0x164>)
 8003cae:	0008      	movs	r0, r1
 8003cb0:	f006 f9ea 	bl	800a088 <iprintf>
	  }
  }

  if(GPIO_Pin == MODE_BUTTON_Pin)
 8003cb4:	1dbb      	adds	r3, r7, #6
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	019b      	lsls	r3, r3, #6
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d126      	bne.n	8003d0e <HAL_GPIO_EXTI_Callback+0x146>
   {
 	  if((HAL_GetTick()-last_press_button) >= DEBOUNCE_TIME)
 8003cc0:	f001 fd9a 	bl	80057f8 <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cce:	d91e      	bls.n	8003d0e <HAL_GPIO_EXTI_Callback+0x146>
 	  {
 		  last_press_button = HAL_GetTick();
 8003cd0:	f001 fd92 	bl	80057f8 <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003cd8:	601a      	str	r2, [r3, #0]
 		  HAL_GPIO_TogglePin(LOAD_GPIO_Port, LOAD_Pin);
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	2390      	movs	r3, #144	@ 0x90
 8003ce0:	05db      	lsls	r3, r3, #23
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f002 faf1 	bl	80062cc <HAL_GPIO_TogglePin>
 		  printf("MOTOR= %s\r\n", (HAL_GPIO_ReadPin(LOAD_GPIO_Port, LOAD_Pin)?"ON":"OFF"));
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	2390      	movs	r3, #144	@ 0x90
 8003cf0:	05db      	lsls	r3, r3, #23
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f002 faaf 	bl	8006258 <HAL_GPIO_ReadPin>
 8003cfa:	1e03      	subs	r3, r0, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_GPIO_EXTI_Callback+0x13a>
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <HAL_GPIO_EXTI_Callback+0x168>)
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_EXTI_Callback+0x13c>
 8003d02:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003d04:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <HAL_GPIO_EXTI_Callback+0x170>)
 8003d06:	0019      	movs	r1, r3
 8003d08:	0010      	movs	r0, r2
 8003d0a:	f006 f9bd 	bl	800a088 <iprintf>
 	  }
   }
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	20000688 	.word	0x20000688
 8003d1c:	2000068c 	.word	0x2000068c
 8003d20:	20000668 	.word	0x20000668
 8003d24:	20000694 	.word	0x20000694
 8003d28:	20000690 	.word	0x20000690
 8003d2c:	0800d3d0 	.word	0x0800d3d0
 8003d30:	0800d3e4 	.word	0x0800d3e4
 8003d34:	0800d3e8 	.word	0x0800d3e8
 8003d38:	0800d3ec 	.word	0x0800d3ec

08003d3c <set_value_received>:

void set_value_received()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af02      	add	r7, sp, #8
	boolean_enum error_value = False;
 8003d42:	1dfb      	adds	r3, r7, #7
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]

	if(!strcmp((const char *)&key, (const char *)ID_TEMP_MIN_RED_LED))
 8003d48:	4ab5      	ldr	r2, [pc, #724]	@ (8004020 <set_value_received+0x2e4>)
 8003d4a:	4bb6      	ldr	r3, [pc, #728]	@ (8004024 <set_value_received+0x2e8>)
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7fc f9da 	bl	8000108 <strcmp>
 8003d54:	1e03      	subs	r3, r0, #0
 8003d56:	d135      	bne.n	8003dc4 <set_value_received+0x88>
	{
		if((value_decimal >= max_green_temperature) && (value_decimal < max_red_temperature))
 8003d58:	4bb3      	ldr	r3, [pc, #716]	@ (8004028 <set_value_received+0x2ec>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff f90e 	bl	8002f80 <__aeabi_i2d>
 8003d64:	4bb1      	ldr	r3, [pc, #708]	@ (800402c <set_value_received+0x2f0>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f7fc fb89 	bl	8000480 <__aeabi_dcmple>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d024      	beq.n	8003dbc <set_value_received+0x80>
 8003d72:	4baf      	ldr	r3, [pc, #700]	@ (8004030 <set_value_received+0x2f4>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7ff f901 	bl	8002f80 <__aeabi_i2d>
 8003d7e:	4bab      	ldr	r3, [pc, #684]	@ (800402c <set_value_received+0x2f0>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f7fc fb86 	bl	8000494 <__aeabi_dcmpgt>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d017      	beq.n	8003dbc <set_value_received+0x80>
		{
			min_red_temperature = (int8_t)value_decimal;
 8003d8c:	4ba7      	ldr	r3, [pc, #668]	@ (800402c <set_value_received+0x2f0>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	0010      	movs	r0, r2
 8003d94:	0019      	movs	r1, r3
 8003d96:	f7ff f8b7 	bl	8002f08 <__aeabi_d2iz>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	b25a      	sxtb	r2, r3
 8003d9e:	4ba5      	ldr	r3, [pc, #660]	@ (8004034 <set_value_received+0x2f8>)
 8003da0:	701a      	strb	r2, [r3, #0]
			write_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MIN_RED, ADDRESS_FOR_ALL, min_red_temperature, SIZE_TO_READ_AND_WRITE);
 8003da2:	4ba4      	ldr	r3, [pc, #656]	@ (8004034 <set_value_received+0x2f8>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	001a      	movs	r2, r3
 8003daa:	23ff      	movs	r3, #255	@ 0xff
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	0013      	movs	r3, r2
 8003db0:	2200      	movs	r2, #0
 8003db2:	2100      	movs	r1, #0
 8003db4:	2000      	movs	r0, #0
 8003db6:	f000 fcb1 	bl	800471c <write_flash>
 8003dba:	e1bb      	b.n	8004134 <set_value_received+0x3f8>

		}else{error_value = True;}
 8003dbc:	1dfb      	adds	r3, r7, #7
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e1b7      	b.n	8004134 <set_value_received+0x3f8>

	}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MAX_RED_LED))
 8003dc4:	4a9c      	ldr	r2, [pc, #624]	@ (8004038 <set_value_received+0x2fc>)
 8003dc6:	4b97      	ldr	r3, [pc, #604]	@ (8004024 <set_value_received+0x2e8>)
 8003dc8:	0011      	movs	r1, r2
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7fc f99c 	bl	8000108 <strcmp>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d131      	bne.n	8003e38 <set_value_received+0xfc>
		{
			if((value_decimal > min_red_temperature) && (value_decimal <= MAX_TEMPERATURE_MEASURE_DS18B20_SENSOR))
 8003dd4:	4b97      	ldr	r3, [pc, #604]	@ (8004034 <set_value_received+0x2f8>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff f8d0 	bl	8002f80 <__aeabi_i2d>
 8003de0:	4b92      	ldr	r3, [pc, #584]	@ (800402c <set_value_received+0x2f0>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f7fc fb41 	bl	800046c <__aeabi_dcmplt>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d020      	beq.n	8003e30 <set_value_received+0xf4>
 8003dee:	4b8f      	ldr	r3, [pc, #572]	@ (800402c <set_value_received+0x2f0>)
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	4b91      	ldr	r3, [pc, #580]	@ (800403c <set_value_received+0x300>)
 8003df8:	f7fc fb42 	bl	8000480 <__aeabi_dcmple>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d017      	beq.n	8003e30 <set_value_received+0xf4>
			{
				max_red_temperature = (int8_t)value_decimal;
 8003e00:	4b8a      	ldr	r3, [pc, #552]	@ (800402c <set_value_received+0x2f0>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0010      	movs	r0, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	f7ff f87d 	bl	8002f08 <__aeabi_d2iz>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	b25a      	sxtb	r2, r3
 8003e12:	4b87      	ldr	r3, [pc, #540]	@ (8004030 <set_value_received+0x2f4>)
 8003e14:	701a      	strb	r2, [r3, #0]
				write_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MAX_RED, ADDRESS_FOR_ALL, max_red_temperature, SIZE_TO_READ_AND_WRITE);
 8003e16:	4b86      	ldr	r3, [pc, #536]	@ (8004030 <set_value_received+0x2f4>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b25b      	sxtb	r3, r3
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	23ff      	movs	r3, #255	@ 0xff
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	0013      	movs	r3, r2
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f000 fc77 	bl	800471c <write_flash>
 8003e2e:	e181      	b.n	8004134 <set_value_received+0x3f8>

			}else{error_value = True;}
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e17d      	b.n	8004134 <set_value_received+0x3f8>
		}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MIN_GREEN_LED))
 8003e38:	4a81      	ldr	r2, [pc, #516]	@ (8004040 <set_value_received+0x304>)
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004024 <set_value_received+0x2e8>)
 8003e3c:	0011      	movs	r1, r2
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7fc f962 	bl	8000108 <strcmp>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d135      	bne.n	8003eb4 <set_value_received+0x178>
			{
				if((value_decimal >= max_blue_temperature) && (value_decimal < max_green_temperature))
 8003e48:	4b7e      	ldr	r3, [pc, #504]	@ (8004044 <set_value_received+0x308>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff f896 	bl	8002f80 <__aeabi_i2d>
 8003e54:	4b75      	ldr	r3, [pc, #468]	@ (800402c <set_value_received+0x2f0>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f7fc fb11 	bl	8000480 <__aeabi_dcmple>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d024      	beq.n	8003eac <set_value_received+0x170>
 8003e62:	4b71      	ldr	r3, [pc, #452]	@ (8004028 <set_value_received+0x2ec>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff f889 	bl	8002f80 <__aeabi_i2d>
 8003e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800402c <set_value_received+0x2f0>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f7fc fb0e 	bl	8000494 <__aeabi_dcmpgt>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d017      	beq.n	8003eac <set_value_received+0x170>
				{
					min_green_temperature = (int8_t)value_decimal;
 8003e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800402c <set_value_received+0x2f0>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	f7ff f83f 	bl	8002f08 <__aeabi_d2iz>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	b25a      	sxtb	r2, r3
 8003e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8004048 <set_value_received+0x30c>)
 8003e90:	701a      	strb	r2, [r3, #0]
					write_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MIN_GREEN, ADDRESS_FOR_ALL, min_green_temperature, SIZE_TO_READ_AND_WRITE);
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <set_value_received+0x30c>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	001a      	movs	r2, r3
 8003e9a:	23ff      	movs	r3, #255	@ 0xff
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	0013      	movs	r3, r2
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f000 fc39 	bl	800471c <write_flash>
 8003eaa:	e143      	b.n	8004134 <set_value_received+0x3f8>

				}else{error_value = True;}
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e13f      	b.n	8004134 <set_value_received+0x3f8>
			}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MAX_GREEN_LED))
 8003eb4:	4a65      	ldr	r2, [pc, #404]	@ (800404c <set_value_received+0x310>)
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004024 <set_value_received+0x2e8>)
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fc f924 	bl	8000108 <strcmp>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d135      	bne.n	8003f30 <set_value_received+0x1f4>
				{
					if((value_decimal > min_green_temperature) && (value_decimal <= min_red_temperature))
 8003ec4:	4b60      	ldr	r3, [pc, #384]	@ (8004048 <set_value_received+0x30c>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	b25b      	sxtb	r3, r3
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff f858 	bl	8002f80 <__aeabi_i2d>
 8003ed0:	4b56      	ldr	r3, [pc, #344]	@ (800402c <set_value_received+0x2f0>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f7fc fac9 	bl	800046c <__aeabi_dcmplt>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d024      	beq.n	8003f28 <set_value_received+0x1ec>
 8003ede:	4b55      	ldr	r3, [pc, #340]	@ (8004034 <set_value_received+0x2f8>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	b25b      	sxtb	r3, r3
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff f84b 	bl	8002f80 <__aeabi_i2d>
 8003eea:	4b50      	ldr	r3, [pc, #320]	@ (800402c <set_value_received+0x2f0>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f7fc fada 	bl	80004a8 <__aeabi_dcmpge>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d017      	beq.n	8003f28 <set_value_received+0x1ec>
					{
						max_green_temperature = (int8_t)value_decimal;
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800402c <set_value_received+0x2f0>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0010      	movs	r0, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	f7ff f801 	bl	8002f08 <__aeabi_d2iz>
 8003f06:	0003      	movs	r3, r0
 8003f08:	b25a      	sxtb	r2, r3
 8003f0a:	4b47      	ldr	r3, [pc, #284]	@ (8004028 <set_value_received+0x2ec>)
 8003f0c:	701a      	strb	r2, [r3, #0]
						write_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MAX_GREEN, ADDRESS_FOR_ALL, max_green_temperature, SIZE_TO_READ_AND_WRITE);
 8003f0e:	4b46      	ldr	r3, [pc, #280]	@ (8004028 <set_value_received+0x2ec>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	001a      	movs	r2, r3
 8003f16:	23ff      	movs	r3, #255	@ 0xff
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	0013      	movs	r3, r2
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2103      	movs	r1, #3
 8003f20:	2000      	movs	r0, #0
 8003f22:	f000 fbfb 	bl	800471c <write_flash>
 8003f26:	e105      	b.n	8004134 <set_value_received+0x3f8>

					}else{error_value = True;}
 8003f28:	1dfb      	adds	r3, r7, #7
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e101      	b.n	8004134 <set_value_received+0x3f8>
				}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MIN_BLUE_LED))
 8003f30:	4a47      	ldr	r2, [pc, #284]	@ (8004050 <set_value_received+0x314>)
 8003f32:	4b3c      	ldr	r3, [pc, #240]	@ (8004024 <set_value_received+0x2e8>)
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7fc f8e6 	bl	8000108 <strcmp>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d131      	bne.n	8003fa4 <set_value_received+0x268>
					{
						if((value_decimal >= MIN_TEMPERATURE_MEASURE_DS18B20_SENSOR) && (value_decimal < max_blue_temperature))
 8003f40:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <set_value_received+0x2f0>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	4b42      	ldr	r3, [pc, #264]	@ (8004054 <set_value_received+0x318>)
 8003f4a:	f7fc faad 	bl	80004a8 <__aeabi_dcmpge>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d024      	beq.n	8003f9c <set_value_received+0x260>
 8003f52:	4b3c      	ldr	r3, [pc, #240]	@ (8004044 <set_value_received+0x308>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff f811 	bl	8002f80 <__aeabi_i2d>
 8003f5e:	4b33      	ldr	r3, [pc, #204]	@ (800402c <set_value_received+0x2f0>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f7fc fa96 	bl	8000494 <__aeabi_dcmpgt>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d017      	beq.n	8003f9c <set_value_received+0x260>
						{
							min_blue_temperature = (int8_t)value_decimal;
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800402c <set_value_received+0x2f0>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0010      	movs	r0, r2
 8003f74:	0019      	movs	r1, r3
 8003f76:	f7fe ffc7 	bl	8002f08 <__aeabi_d2iz>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	b25a      	sxtb	r2, r3
 8003f7e:	4b36      	ldr	r3, [pc, #216]	@ (8004058 <set_value_received+0x31c>)
 8003f80:	701a      	strb	r2, [r3, #0]
							write_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MIN_BLUE, ADDRESS_FOR_ALL, min_blue_temperature, SIZE_TO_READ_AND_WRITE);
 8003f82:	4b35      	ldr	r3, [pc, #212]	@ (8004058 <set_value_received+0x31c>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	001a      	movs	r2, r3
 8003f8a:	23ff      	movs	r3, #255	@ 0xff
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	0013      	movs	r3, r2
 8003f90:	2200      	movs	r2, #0
 8003f92:	2104      	movs	r1, #4
 8003f94:	2000      	movs	r0, #0
 8003f96:	f000 fbc1 	bl	800471c <write_flash>
 8003f9a:	e0cb      	b.n	8004134 <set_value_received+0x3f8>

						}else{error_value = True;}
 8003f9c:	1dfb      	adds	r3, r7, #7
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e0c7      	b.n	8004134 <set_value_received+0x3f8>
					}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MAX_BLUE_LED))
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <set_value_received+0x320>)
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <set_value_received+0x2e8>)
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7fc f8ac 	bl	8000108 <strcmp>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d155      	bne.n	8004060 <set_value_received+0x324>
						{
							if((value_decimal > min_blue_temperature) && (value_decimal <= min_green_temperature))
 8003fb4:	4b28      	ldr	r3, [pc, #160]	@ (8004058 <set_value_received+0x31c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f7fe ffe0 	bl	8002f80 <__aeabi_i2d>
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <set_value_received+0x2f0>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f7fc fa51 	bl	800046c <__aeabi_dcmplt>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d024      	beq.n	8004018 <set_value_received+0x2dc>
 8003fce:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <set_value_received+0x30c>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7fe ffd3 	bl	8002f80 <__aeabi_i2d>
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <set_value_received+0x2f0>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f7fc fa62 	bl	80004a8 <__aeabi_dcmpge>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	d017      	beq.n	8004018 <set_value_received+0x2dc>
							{
								max_blue_temperature = (int8_t)value_decimal;
 8003fe8:	4b10      	ldr	r3, [pc, #64]	@ (800402c <set_value_received+0x2f0>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	0010      	movs	r0, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	f7fe ff89 	bl	8002f08 <__aeabi_d2iz>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	b25a      	sxtb	r2, r3
 8003ffa:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <set_value_received+0x308>)
 8003ffc:	701a      	strb	r2, [r3, #0]
								write_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MAX_BLUE, ADDRESS_FOR_ALL, max_blue_temperature, SIZE_TO_READ_AND_WRITE);
 8003ffe:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <set_value_received+0x308>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	b25b      	sxtb	r3, r3
 8004004:	001a      	movs	r2, r3
 8004006:	23ff      	movs	r3, #255	@ 0xff
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	0013      	movs	r3, r2
 800400c:	2200      	movs	r2, #0
 800400e:	2105      	movs	r1, #5
 8004010:	2000      	movs	r0, #0
 8004012:	f000 fb83 	bl	800471c <write_flash>
 8004016:	e08d      	b.n	8004134 <set_value_received+0x3f8>

							}else{error_value = True;}
 8004018:	1dfb      	adds	r3, r7, #7
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e089      	b.n	8004134 <set_value_received+0x3f8>
 8004020:	0800d3f8 	.word	0x0800d3f8
 8004024:	20000560 	.word	0x20000560
 8004028:	20000663 	.word	0x20000663
 800402c:	20000578 	.word	0x20000578
 8004030:	20000661 	.word	0x20000661
 8004034:	20000660 	.word	0x20000660
 8004038:	0800d404 	.word	0x0800d404
 800403c:	405e0000 	.word	0x405e0000
 8004040:	0800d410 	.word	0x0800d410
 8004044:	20000665 	.word	0x20000665
 8004048:	20000662 	.word	0x20000662
 800404c:	0800d41c 	.word	0x0800d41c
 8004050:	0800d428 	.word	0x0800d428
 8004054:	c0490000 	.word	0xc0490000
 8004058:	20000664 	.word	0x20000664
 800405c:	0800d434 	.word	0x0800d434
						}else if(!strcmp((const char *)&key, (const char *)ID_MAX_RPM))
 8004060:	4a5b      	ldr	r2, [pc, #364]	@ (80041d0 <set_value_received+0x494>)
 8004062:	4b5c      	ldr	r3, [pc, #368]	@ (80041d4 <set_value_received+0x498>)
 8004064:	0011      	movs	r1, r2
 8004066:	0018      	movs	r0, r3
 8004068:	f7fc f84e 	bl	8000108 <strcmp>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d12e      	bne.n	80040ce <set_value_received+0x392>
							{
								if(value_decimal>=0 && value_decimal<=255)
 8004070:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <set_value_received+0x49c>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	2300      	movs	r3, #0
 800407a:	f7fc fa15 	bl	80004a8 <__aeabi_dcmpge>
 800407e:	1e03      	subs	r3, r0, #0
 8004080:	d021      	beq.n	80040c6 <set_value_received+0x38a>
 8004082:	4b55      	ldr	r3, [pc, #340]	@ (80041d8 <set_value_received+0x49c>)
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	4b54      	ldr	r3, [pc, #336]	@ (80041dc <set_value_received+0x4a0>)
 800408c:	f7fc f9f8 	bl	8000480 <__aeabi_dcmple>
 8004090:	1e03      	subs	r3, r0, #0
 8004092:	d018      	beq.n	80040c6 <set_value_received+0x38a>
								{
									max_speed_RPM = value_decimal;
 8004094:	4b50      	ldr	r3, [pc, #320]	@ (80041d8 <set_value_received+0x49c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0010      	movs	r0, r2
 800409c:	0019      	movs	r1, r3
 800409e:	f7ff f809 	bl	80030b4 <__aeabi_d2f>
 80040a2:	1c02      	adds	r2, r0, #0
 80040a4:	4b4e      	ldr	r3, [pc, #312]	@ (80041e0 <set_value_received+0x4a4>)
 80040a6:	601a      	str	r2, [r3, #0]
									write_flash(BLOCK_FOR_ALL, DIR_RPM_MAX, ADDRESS_FOR_ALL, max_speed_RPM, SIZE_TO_READ_AND_WRITE);
 80040a8:	4b4d      	ldr	r3, [pc, #308]	@ (80041e0 <set_value_received+0x4a4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1c18      	adds	r0, r3, #0
 80040ae:	f7fd f891 	bl	80011d4 <__aeabi_f2iz>
 80040b2:	0002      	movs	r2, r0
 80040b4:	23ff      	movs	r3, #255	@ 0xff
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	0013      	movs	r3, r2
 80040ba:	2200      	movs	r2, #0
 80040bc:	2107      	movs	r1, #7
 80040be:	2000      	movs	r0, #0
 80040c0:	f000 fb2c 	bl	800471c <write_flash>
 80040c4:	e036      	b.n	8004134 <set_value_received+0x3f8>

								}else{error_value = True;}
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e032      	b.n	8004134 <set_value_received+0x3f8>
							}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_GET_MEAN))
 80040ce:	4a45      	ldr	r2, [pc, #276]	@ (80041e4 <set_value_received+0x4a8>)
 80040d0:	4b40      	ldr	r3, [pc, #256]	@ (80041d4 <set_value_received+0x498>)
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fc f817 	bl	8000108 <strcmp>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d10f      	bne.n	80040fe <set_value_received+0x3c2>
								{
									Flash_read_page(BLOCK_FOR_ALL, DIR_MEAN_TEMPERATURE, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 80040de:	23ff      	movs	r3, #255	@ 0xff
 80040e0:	2200      	movs	r2, #0
 80040e2:	2106      	movs	r1, #6
 80040e4:	2000      	movs	r0, #0
 80040e6:	f7ff fb71 	bl	80037cc <Flash_read_page>
									printf("The mean temperature of the last minute is= %s °C\r\n", (char *)&read_flash_Byte);
 80040ea:	4a3f      	ldr	r2, [pc, #252]	@ (80041e8 <set_value_received+0x4ac>)
 80040ec:	4b3f      	ldr	r3, [pc, #252]	@ (80041ec <set_value_received+0x4b0>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f005 ffc9 	bl	800a088 <iprintf>
									error_value = Get;
 80040f6:	1dfb      	adds	r3, r7, #7
 80040f8:	2202      	movs	r2, #2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e01a      	b.n	8004134 <set_value_received+0x3f8>
								}else if(!strcmp((const char *)&key, (const char *)ID_SPEED_GET_MEAN))
 80040fe:	4a3c      	ldr	r2, [pc, #240]	@ (80041f0 <set_value_received+0x4b4>)
 8004100:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <set_value_received+0x498>)
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f7fb ffff 	bl	8000108 <strcmp>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d10f      	bne.n	800412e <set_value_received+0x3f2>
									{
										Flash_read_page(BLOCK_FOR_ALL, DIR_MEAN_SPEED, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 800410e:	23ff      	movs	r3, #255	@ 0xff
 8004110:	2200      	movs	r2, #0
 8004112:	2108      	movs	r1, #8
 8004114:	2000      	movs	r0, #0
 8004116:	f7ff fb59 	bl	80037cc <Flash_read_page>
										printf("The mean speed of the three minutes last is= %s RPM\r\n", (char *)&read_flash_Byte);
 800411a:	4a33      	ldr	r2, [pc, #204]	@ (80041e8 <set_value_received+0x4ac>)
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <set_value_received+0x4b8>)
 800411e:	0011      	movs	r1, r2
 8004120:	0018      	movs	r0, r3
 8004122:	f005 ffb1 	bl	800a088 <iprintf>
										error_value = Get;
 8004126:	1dfb      	adds	r3, r7, #7
 8004128:	2202      	movs	r2, #2
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e002      	b.n	8004134 <set_value_received+0x3f8>
									}else{error_value = None;}
 800412e:	1dfb      	adds	r3, r7, #7
 8004130:	2203      	movs	r2, #3
 8004132:	701a      	strb	r2, [r3, #0]

	if(error_value == True)
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10a      	bne.n	8004152 <set_value_received+0x416>
	{
		size_to_send = sprintf((char *)&transmit_text, "---------------\r\n!Error configuring the value, verify the ranges!\r\n---------------\r\n\r\n");
 800413c:	4a2e      	ldr	r2, [pc, #184]	@ (80041f8 <set_value_received+0x4bc>)
 800413e:	4b2f      	ldr	r3, [pc, #188]	@ (80041fc <set_value_received+0x4c0>)
 8004140:	0011      	movs	r1, r2
 8004142:	0018      	movs	r0, r3
 8004144:	f006 f810 	bl	800a168 <siprintf>
 8004148:	0003      	movs	r3, r0
 800414a:	b2da      	uxtb	r2, r3
 800414c:	4b2c      	ldr	r3, [pc, #176]	@ (8004200 <set_value_received+0x4c4>)
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e02e      	b.n	80041b0 <set_value_received+0x474>
	}else if(error_value == False){
 8004152:	1dfb      	adds	r3, r7, #7
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d111      	bne.n	800417e <set_value_received+0x442>
		size_to_send = sprintf((char *)&transmit_text, "---------------\r\n%s=%d configured successfully!\r\n---------------\r\n\r\n", (char *)&key, (int)value_decimal);
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <set_value_received+0x49c>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0010      	movs	r0, r2
 8004162:	0019      	movs	r1, r3
 8004164:	f7fe fed0 	bl	8002f08 <__aeabi_d2iz>
 8004168:	0003      	movs	r3, r0
 800416a:	4a1a      	ldr	r2, [pc, #104]	@ (80041d4 <set_value_received+0x498>)
 800416c:	4925      	ldr	r1, [pc, #148]	@ (8004204 <set_value_received+0x4c8>)
 800416e:	4823      	ldr	r0, [pc, #140]	@ (80041fc <set_value_received+0x4c0>)
 8004170:	f005 fffa 	bl	800a168 <siprintf>
 8004174:	0003      	movs	r3, r0
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <set_value_received+0x4c4>)
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e018      	b.n	80041b0 <set_value_received+0x474>
	}else if(error_value == Get)
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d10a      	bne.n	800419c <set_value_received+0x460>
	{
		size_to_send = sprintf((char *)&transmit_text, "---------------\r\nMean read correctly from the FLASH!\r\n---------------\r\n\r\n");
 8004186:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <set_value_received+0x4cc>)
 8004188:	4b1c      	ldr	r3, [pc, #112]	@ (80041fc <set_value_received+0x4c0>)
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f005 ffeb 	bl	800a168 <siprintf>
 8004192:	0003      	movs	r3, r0
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <set_value_received+0x4c4>)
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e009      	b.n	80041b0 <set_value_received+0x474>
	}else{
		size_to_send = sprintf((char *)&transmit_text, "---------------\r\nUnrecognized command!\r\n---------------\r\n\r\n");
 800419c:	4a1b      	ldr	r2, [pc, #108]	@ (800420c <set_value_received+0x4d0>)
 800419e:	4b17      	ldr	r3, [pc, #92]	@ (80041fc <set_value_received+0x4c0>)
 80041a0:	0011      	movs	r1, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f005 ffe0 	bl	800a168 <siprintf>
 80041a8:	0003      	movs	r3, r0
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <set_value_received+0x4c4>)
 80041ae:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 80041b0:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <set_value_received+0x4c4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	001a      	movs	r2, r3
 80041b6:	4911      	ldr	r1, [pc, #68]	@ (80041fc <set_value_received+0x4c0>)
 80041b8:	4815      	ldr	r0, [pc, #84]	@ (8004210 <set_value_received+0x4d4>)
 80041ba:	2364      	movs	r3, #100	@ 0x64
 80041bc:	f004 f844 	bl	8008248 <HAL_UART_Transmit>
	new_parameter_to_set_flag = False;
 80041c0:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <set_value_received+0x4d8>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b002      	add	sp, #8
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	0800d440 	.word	0x0800d440
 80041d4:	20000560 	.word	0x20000560
 80041d8:	20000578 	.word	0x20000578
 80041dc:	406fe000 	.word	0x406fe000
 80041e0:	20000690 	.word	0x20000690
 80041e4:	0800d448 	.word	0x0800d448
 80041e8:	2000025c 	.word	0x2000025c
 80041ec:	0800d458 	.word	0x0800d458
 80041f0:	0800d490 	.word	0x0800d490
 80041f4:	0800d4a0 	.word	0x0800d4a0
 80041f8:	0800d4d8 	.word	0x0800d4d8
 80041fc:	20000580 	.word	0x20000580
 8004200:	20000600 	.word	0x20000600
 8004204:	0800d530 	.word	0x0800d530
 8004208:	0800d578 	.word	0x0800d578
 800420c:	0800d5c4 	.word	0x0800d5c4
 8004210:	20000478 	.word	0x20000478
 8004214:	20000639 	.word	0x20000639

08004218 <print_temperature>:

void print_temperature(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	temperature = DS18B20_Get_temperature();
 800421c:	f7ff f9a2 	bl	8003564 <DS18B20_Get_temperature>
 8004220:	1c02      	adds	r2, r0, #0
 8004222:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <print_temperature+0x60>)
 8004224:	601a      	str	r2, [r3, #0]
	size_to_send = sprintf((char *)&transmit_text, "Temperature = %0.2f °C \r\n", temperature);
 8004226:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <print_temperature+0x60>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c18      	adds	r0, r3, #0
 800422c:	f7fe fefa 	bl	8003024 <__aeabi_f2d>
 8004230:	0002      	movs	r2, r0
 8004232:	000b      	movs	r3, r1
 8004234:	4911      	ldr	r1, [pc, #68]	@ (800427c <print_temperature+0x64>)
 8004236:	4812      	ldr	r0, [pc, #72]	@ (8004280 <print_temperature+0x68>)
 8004238:	f005 ff96 	bl	800a168 <siprintf>
 800423c:	0003      	movs	r3, r0
 800423e:	b2da      	uxtb	r2, r3
 8004240:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <print_temperature+0x6c>)
 8004242:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, 500);
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <print_temperature+0x6c>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	001a      	movs	r2, r3
 800424a:	23fa      	movs	r3, #250	@ 0xfa
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	490c      	ldr	r1, [pc, #48]	@ (8004280 <print_temperature+0x68>)
 8004250:	480d      	ldr	r0, [pc, #52]	@ (8004288 <print_temperature+0x70>)
 8004252:	f003 fff9 	bl	8008248 <HAL_UART_Transmit>

	values_for_mean_temperature[temperature_mean_counter-1] = temperature;
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <print_temperature+0x74>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <print_temperature+0x60>)
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <print_temperature+0x78>)
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	50d1      	str	r1, [r2, r3]

	temperature_printing_control = HAL_GetTick();
 8004266:	f001 fac7 	bl	80057f8 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <print_temperature+0x7c>)
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	46c0      	nop			@ (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	2000063c 	.word	0x2000063c
 800427c:	0800d600 	.word	0x0800d600
 8004280:	20000580 	.word	0x20000580
 8004284:	20000600 	.word	0x20000600
 8004288:	20000478 	.word	0x20000478
 800428c:	20000644 	.word	0x20000644
 8004290:	20000648 	.word	0x20000648
 8004294:	20000604 	.word	0x20000604

08004298 <update_temperature_indicator>:

void update_temperature_indicator(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	if((temperature >= min_blue_temperature) && (temperature <= max_blue_temperature)){
 800429c:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <update_temperature_indicator+0xe0>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7fc ffb6 	bl	8001214 <__aeabi_i2f>
 80042a8:	1c02      	adds	r2, r0, #0
 80042aa:	4b34      	ldr	r3, [pc, #208]	@ (800437c <update_temperature_indicator+0xe4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	1c19      	adds	r1, r3, #0
 80042b0:	1c10      	adds	r0, r2, #0
 80042b2:	f7fc f91f 	bl	80004f4 <__aeabi_fcmple>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d012      	beq.n	80042e0 <update_temperature_indicator+0x48>
 80042ba:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <update_temperature_indicator+0xe8>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7fc ffa7 	bl	8001214 <__aeabi_i2f>
 80042c6:	1c02      	adds	r2, r0, #0
 80042c8:	4b2c      	ldr	r3, [pc, #176]	@ (800437c <update_temperature_indicator+0xe4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1c19      	adds	r1, r3, #0
 80042ce:	1c10      	adds	r0, r2, #0
 80042d0:	f7fc f924 	bl	800051c <__aeabi_fcmpge>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d003      	beq.n	80042e0 <update_temperature_indicator+0x48>
		RGB_BLUE_ON(TEMPERATURE);
 80042d8:	2002      	movs	r0, #2
 80042da:	f7ff fba9 	bl	8003a30 <RGB_BLUE_ON>
 80042de:	e047      	b.n	8004370 <update_temperature_indicator+0xd8>
	}else if((temperature > min_green_temperature) && (temperature <= max_green_temperature)){
 80042e0:	4b28      	ldr	r3, [pc, #160]	@ (8004384 <update_temperature_indicator+0xec>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b25b      	sxtb	r3, r3
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7fc ff94 	bl	8001214 <__aeabi_i2f>
 80042ec:	1c02      	adds	r2, r0, #0
 80042ee:	4b23      	ldr	r3, [pc, #140]	@ (800437c <update_temperature_indicator+0xe4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1c19      	adds	r1, r3, #0
 80042f4:	1c10      	adds	r0, r2, #0
 80042f6:	f7fc f8f3 	bl	80004e0 <__aeabi_fcmplt>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d012      	beq.n	8004324 <update_temperature_indicator+0x8c>
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <update_temperature_indicator+0xf0>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b25b      	sxtb	r3, r3
 8004304:	0018      	movs	r0, r3
 8004306:	f7fc ff85 	bl	8001214 <__aeabi_i2f>
 800430a:	1c02      	adds	r2, r0, #0
 800430c:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <update_temperature_indicator+0xe4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1c19      	adds	r1, r3, #0
 8004312:	1c10      	adds	r0, r2, #0
 8004314:	f7fc f902 	bl	800051c <__aeabi_fcmpge>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d003      	beq.n	8004324 <update_temperature_indicator+0x8c>
		RGB_GREEN_ON(TEMPERATURE);
 800431c:	2002      	movs	r0, #2
 800431e:	f7ff fb3f 	bl	80039a0 <RGB_GREEN_ON>
 8004322:	e025      	b.n	8004370 <update_temperature_indicator+0xd8>
	}else if((temperature > min_red_temperature) && (temperature <= max_red_temperature)){
 8004324:	4b19      	ldr	r3, [pc, #100]	@ (800438c <update_temperature_indicator+0xf4>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	b25b      	sxtb	r3, r3
 800432a:	0018      	movs	r0, r3
 800432c:	f7fc ff72 	bl	8001214 <__aeabi_i2f>
 8004330:	1c02      	adds	r2, r0, #0
 8004332:	4b12      	ldr	r3, [pc, #72]	@ (800437c <update_temperature_indicator+0xe4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1c19      	adds	r1, r3, #0
 8004338:	1c10      	adds	r0, r2, #0
 800433a:	f7fc f8d1 	bl	80004e0 <__aeabi_fcmplt>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d012      	beq.n	8004368 <update_temperature_indicator+0xd0>
 8004342:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <update_temperature_indicator+0xf8>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b25b      	sxtb	r3, r3
 8004348:	0018      	movs	r0, r3
 800434a:	f7fc ff63 	bl	8001214 <__aeabi_i2f>
 800434e:	1c02      	adds	r2, r0, #0
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <update_temperature_indicator+0xe4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c19      	adds	r1, r3, #0
 8004356:	1c10      	adds	r0, r2, #0
 8004358:	f7fc f8e0 	bl	800051c <__aeabi_fcmpge>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d003      	beq.n	8004368 <update_temperature_indicator+0xd0>
		RGB_RED_ON(TEMPERATURE);
 8004360:	2002      	movs	r0, #2
 8004362:	f7ff fad5 	bl	8003910 <RGB_RED_ON>
 8004366:	e003      	b.n	8004370 <update_temperature_indicator+0xd8>
	}else{
		RGB_ALL_OFF(TEMPERATURE);
 8004368:	2002      	movs	r0, #2
 800436a:	f7ff fba9 	bl	8003ac0 <RGB_ALL_OFF>
	}
}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	20000664 	.word	0x20000664
 800437c:	2000063c 	.word	0x2000063c
 8004380:	20000665 	.word	0x20000665
 8004384:	20000662 	.word	0x20000662
 8004388:	20000663 	.word	0x20000663
 800438c:	20000660 	.word	0x20000660
 8004390:	20000661 	.word	0x20000661

08004394 <calculate_mean_temperature>:

void calculate_mean_temperature(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0c4      	sub	sp, #272	@ 0x110
 8004398:	af02      	add	r7, sp, #8
	float temporal_temperature_mean = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	1d7a      	adds	r2, r7, #5
 800439e:	32ff      	adds	r2, #255	@ 0xff
 80043a0:	6013      	str	r3, [r2, #0]

	for(int i=0; i<MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN; i++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	1c7a      	adds	r2, r7, #1
 80043a6:	32ff      	adds	r2, #255	@ 0xff
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e016      	b.n	80043da <calculate_mean_temperature+0x46>
	{
	 temporal_temperature_mean += values_for_mean_temperature[i];
 80043ac:	4b32      	ldr	r3, [pc, #200]	@ (8004478 <calculate_mean_temperature+0xe4>)
 80043ae:	1c7a      	adds	r2, r7, #1
 80043b0:	32ff      	adds	r2, #255	@ 0xff
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	0092      	lsls	r2, r2, #2
 80043b6:	58d3      	ldr	r3, [r2, r3]
 80043b8:	1c19      	adds	r1, r3, #0
 80043ba:	1d7b      	adds	r3, r7, #5
 80043bc:	33ff      	adds	r3, #255	@ 0xff
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	f7fc f8b6 	bl	8000530 <__aeabi_fadd>
 80043c4:	1c03      	adds	r3, r0, #0
 80043c6:	1d7a      	adds	r2, r7, #5
 80043c8:	32ff      	adds	r2, #255	@ 0xff
 80043ca:	6013      	str	r3, [r2, #0]
	for(int i=0; i<MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN; i++)
 80043cc:	1c7b      	adds	r3, r7, #1
 80043ce:	33ff      	adds	r3, #255	@ 0xff
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	1c7a      	adds	r2, r7, #1
 80043d6:	32ff      	adds	r2, #255	@ 0xff
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	1c7b      	adds	r3, r7, #1
 80043dc:	33ff      	adds	r3, #255	@ 0xff
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	dde3      	ble.n	80043ac <calculate_mean_temperature+0x18>
	}
	temperature_mean = temporal_temperature_mean/MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN;
 80043e4:	4925      	ldr	r1, [pc, #148]	@ (800447c <calculate_mean_temperature+0xe8>)
 80043e6:	1d7b      	adds	r3, r7, #5
 80043e8:	33ff      	adds	r3, #255	@ 0xff
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	f7fc fa2a 	bl	8000844 <__aeabi_fdiv>
 80043f0:	1c03      	adds	r3, r0, #0
 80043f2:	1c1a      	adds	r2, r3, #0
 80043f4:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <calculate_mean_temperature+0xec>)
 80043f6:	601a      	str	r2, [r3, #0]

	size_to_send = sprintf((char *)&transmit_text, "-----Mean temperature= %0.2f-----\r\n", temperature_mean);
 80043f8:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <calculate_mean_temperature+0xec>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	1c18      	adds	r0, r3, #0
 80043fe:	f7fe fe11 	bl	8003024 <__aeabi_f2d>
 8004402:	0002      	movs	r2, r0
 8004404:	000b      	movs	r3, r1
 8004406:	491f      	ldr	r1, [pc, #124]	@ (8004484 <calculate_mean_temperature+0xf0>)
 8004408:	481f      	ldr	r0, [pc, #124]	@ (8004488 <calculate_mean_temperature+0xf4>)
 800440a:	f005 fead 	bl	800a168 <siprintf>
 800440e:	0003      	movs	r3, r0
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <calculate_mean_temperature+0xf8>)
 8004414:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <calculate_mean_temperature+0xf8>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	001a      	movs	r2, r3
 800441c:	491a      	ldr	r1, [pc, #104]	@ (8004488 <calculate_mean_temperature+0xf4>)
 800441e:	481c      	ldr	r0, [pc, #112]	@ (8004490 <calculate_mean_temperature+0xfc>)
 8004420:	2364      	movs	r3, #100	@ 0x64
 8004422:	f003 ff11 	bl	8008248 <HAL_UART_Transmit>

	uint8_t buffer_to_send_mean[255];
	Flash_page_erase(BLOCK_FOR_ALL, DIR_MEAN_TEMPERATURE, ADDRESS_FOR_ALL);
 8004426:	2200      	movs	r2, #0
 8004428:	2106      	movs	r1, #6
 800442a:	2000      	movs	r0, #0
 800442c:	f7ff fa16 	bl	800385c <Flash_page_erase>
	sprintf((char *)&buffer_to_send_mean,"%0.2f", temperature_mean);
 8004430:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <calculate_mean_temperature+0xec>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1c18      	adds	r0, r3, #0
 8004436:	f7fe fdf5 	bl	8003024 <__aeabi_f2d>
 800443a:	0002      	movs	r2, r0
 800443c:	000b      	movs	r3, r1
 800443e:	4915      	ldr	r1, [pc, #84]	@ (8004494 <calculate_mean_temperature+0x100>)
 8004440:	0038      	movs	r0, r7
 8004442:	f005 fe91 	bl	800a168 <siprintf>
	Flash_write_page(BLOCK_FOR_ALL, DIR_MEAN_TEMPERATURE, ADDRESS_FOR_ALL, &buffer_to_send_mean[0], SIZE_TO_READ_AND_WRITE);
 8004446:	003b      	movs	r3, r7
 8004448:	22ff      	movs	r2, #255	@ 0xff
 800444a:	9200      	str	r2, [sp, #0]
 800444c:	2200      	movs	r2, #0
 800444e:	2106      	movs	r1, #6
 8004450:	2000      	movs	r0, #0
 8004452:	f7ff f937 	bl	80036c4 <Flash_write_page>
	printf("VALUE SAVED IN FLASH!\r\n");
 8004456:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <calculate_mean_temperature+0x104>)
 8004458:	0018      	movs	r0, r3
 800445a:	f005 fe7b 	bl	800a154 <puts>

	temperature_mean_counter = 0;
 800445e:	4b0f      	ldr	r3, [pc, #60]	@ (800449c <calculate_mean_temperature+0x108>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
	memset(&values_for_mean_temperature, 0, sizeof(values_for_mean_temperature));
 8004464:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <calculate_mean_temperature+0xe4>)
 8004466:	2218      	movs	r2, #24
 8004468:	2100      	movs	r1, #0
 800446a:	0018      	movs	r0, r3
 800446c:	f005 ff88 	bl	800a380 <memset>
}
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b042      	add	sp, #264	@ 0x108
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000648 	.word	0x20000648
 800447c:	40c00000 	.word	0x40c00000
 8004480:	20000640 	.word	0x20000640
 8004484:	0800d61c 	.word	0x0800d61c
 8004488:	20000580 	.word	0x20000580
 800448c:	20000600 	.word	0x20000600
 8004490:	20000478 	.word	0x20000478
 8004494:	0800d640 	.word	0x0800d640
 8004498:	0800d648 	.word	0x0800d648
 800449c:	20000644 	.word	0x20000644

080044a0 <measure_speed_RPM>:

void measure_speed_RPM(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
	if(HAL_GetTick()-time_measure_speed >= TIME_MEASURE_RPM)
 80044a4:	f001 f9a8 	bl	80057f8 <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <measure_speed_RPM+0x4c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	23fa      	movs	r3, #250	@ 0xfa
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d316      	bcc.n	80044e6 <measure_speed_RPM+0x46>
	{
	  time_measure_speed = HAL_GetTick();
 80044b8:	f001 f99e 	bl	80057f8 <HAL_GetTick>
 80044bc:	0002      	movs	r2, r0
 80044be:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <measure_speed_RPM+0x4c>)
 80044c0:	601a      	str	r2, [r3, #0]

	  speed_in_RPM = (counter_speed_pulse/QUANTITY_HOLES)*60;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <measure_speed_RPM+0x50>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	490b      	ldr	r1, [pc, #44]	@ (80044f4 <measure_speed_RPM+0x54>)
 80044c8:	1c18      	adds	r0, r3, #0
 80044ca:	f7fc f9bb 	bl	8000844 <__aeabi_fdiv>
 80044ce:	1c03      	adds	r3, r0, #0
 80044d0:	4909      	ldr	r1, [pc, #36]	@ (80044f8 <measure_speed_RPM+0x58>)
 80044d2:	1c18      	adds	r0, r3, #0
 80044d4:	f7fc fb9c 	bl	8000c10 <__aeabi_fmul>
 80044d8:	1c03      	adds	r3, r0, #0
 80044da:	1c1a      	adds	r2, r3, #0
 80044dc:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <measure_speed_RPM+0x5c>)
 80044de:	601a      	str	r2, [r3, #0]
	  counter_speed_pulse = 0;
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <measure_speed_RPM+0x50>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
	}
}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	2000066c 	.word	0x2000066c
 80044f0:	20000668 	.word	0x20000668
 80044f4:	41a00000 	.word	0x41a00000
 80044f8:	42700000 	.word	0x42700000
 80044fc:	20000670 	.word	0x20000670

08004500 <print_speed>:

void print_speed(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
	printf("Speed= %0.1f RPM\r\n", speed_in_RPM);
 8004504:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <print_speed+0x3c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	1c18      	adds	r0, r3, #0
 800450a:	f7fe fd8b 	bl	8003024 <__aeabi_f2d>
 800450e:	0002      	movs	r2, r0
 8004510:	000b      	movs	r3, r1
 8004512:	490b      	ldr	r1, [pc, #44]	@ (8004540 <print_speed+0x40>)
 8004514:	0008      	movs	r0, r1
 8004516:	f005 fdb7 	bl	800a088 <iprintf>

	values_for_mean_speed[speed_mean_counter-1] = speed_in_RPM;
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <print_speed+0x44>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <print_speed+0x3c>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <print_speed+0x48>)
 8004526:	0092      	lsls	r2, r2, #2
 8004528:	50d1      	str	r1, [r2, r3]
	time_print_speed = HAL_GetTick();
 800452a:	f001 f965 	bl	80057f8 <HAL_GetTick>
 800452e:	0002      	movs	r2, r0
 8004530:	4b06      	ldr	r3, [pc, #24]	@ (800454c <print_speed+0x4c>)
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	20000670 	.word	0x20000670
 8004540:	0800d660 	.word	0x0800d660
 8004544:	20000678 	.word	0x20000678
 8004548:	2000067c 	.word	0x2000067c
 800454c:	20000674 	.word	0x20000674

08004550 <calculate_mean_speed>:

void calculate_mean_speed(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b0c4      	sub	sp, #272	@ 0x110
 8004554:	af02      	add	r7, sp, #8
	float temporal_speed_mean = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	1d7a      	adds	r2, r7, #5
 800455a:	32ff      	adds	r2, #255	@ 0xff
 800455c:	6013      	str	r3, [r2, #0]

  for(int i=0; i<MAX_MEASURES_OF_SPEED_FOR_MEAN; i++)
 800455e:	2300      	movs	r3, #0
 8004560:	1c7a      	adds	r2, r7, #1
 8004562:	32ff      	adds	r2, #255	@ 0xff
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e016      	b.n	8004596 <calculate_mean_speed+0x46>
	{
	 temporal_speed_mean += values_for_mean_speed[i];
 8004568:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <calculate_mean_speed+0xc4>)
 800456a:	1c7a      	adds	r2, r7, #1
 800456c:	32ff      	adds	r2, #255	@ 0xff
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	58d3      	ldr	r3, [r2, r3]
 8004574:	1c19      	adds	r1, r3, #0
 8004576:	1d7b      	adds	r3, r7, #5
 8004578:	33ff      	adds	r3, #255	@ 0xff
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	f7fb ffd8 	bl	8000530 <__aeabi_fadd>
 8004580:	1c03      	adds	r3, r0, #0
 8004582:	1d7a      	adds	r2, r7, #5
 8004584:	32ff      	adds	r2, #255	@ 0xff
 8004586:	6013      	str	r3, [r2, #0]
  for(int i=0; i<MAX_MEASURES_OF_SPEED_FOR_MEAN; i++)
 8004588:	1c7b      	adds	r3, r7, #1
 800458a:	33ff      	adds	r3, #255	@ 0xff
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	1c7a      	adds	r2, r7, #1
 8004592:	32ff      	adds	r2, #255	@ 0xff
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	1c7b      	adds	r3, r7, #1
 8004598:	33ff      	adds	r3, #255	@ 0xff
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	dde3      	ble.n	8004568 <calculate_mean_speed+0x18>
	}
	speed_mean = temporal_speed_mean/MAX_MEASURES_OF_SPEED_FOR_MEAN;
 80045a0:	2180      	movs	r1, #128	@ 0x80
 80045a2:	05c9      	lsls	r1, r1, #23
 80045a4:	1d7b      	adds	r3, r7, #5
 80045a6:	33ff      	adds	r3, #255	@ 0xff
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f7fc f94b 	bl	8000844 <__aeabi_fdiv>
 80045ae:	1c03      	adds	r3, r0, #0
 80045b0:	1c1a      	adds	r2, r3, #0
 80045b2:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <calculate_mean_speed+0xc8>)
 80045b4:	601a      	str	r2, [r3, #0]

	speed_mean_counter = 0;
 80045b6:	4b19      	ldr	r3, [pc, #100]	@ (800461c <calculate_mean_speed+0xcc>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]

	uint8_t buffer_to_send_mean[255];
	Flash_page_erase(BLOCK_FOR_ALL, DIR_MEAN_SPEED, ADDRESS_FOR_ALL);
 80045bc:	2200      	movs	r2, #0
 80045be:	2108      	movs	r1, #8
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7ff f94b 	bl	800385c <Flash_page_erase>
	sprintf((char *)&buffer_to_send_mean,"%0.1f", speed_mean);
 80045c6:	4b14      	ldr	r3, [pc, #80]	@ (8004618 <calculate_mean_speed+0xc8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	1c18      	adds	r0, r3, #0
 80045cc:	f7fe fd2a 	bl	8003024 <__aeabi_f2d>
 80045d0:	0002      	movs	r2, r0
 80045d2:	000b      	movs	r3, r1
 80045d4:	4912      	ldr	r1, [pc, #72]	@ (8004620 <calculate_mean_speed+0xd0>)
 80045d6:	0038      	movs	r0, r7
 80045d8:	f005 fdc6 	bl	800a168 <siprintf>
	Flash_write_page(BLOCK_FOR_ALL, DIR_MEAN_SPEED, ADDRESS_FOR_ALL, &buffer_to_send_mean[0], SIZE_TO_READ_AND_WRITE);
 80045dc:	003b      	movs	r3, r7
 80045de:	22ff      	movs	r2, #255	@ 0xff
 80045e0:	9200      	str	r2, [sp, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2108      	movs	r1, #8
 80045e6:	2000      	movs	r0, #0
 80045e8:	f7ff f86c 	bl	80036c4 <Flash_write_page>
	printf("VALUE SAVED IN FLASH!\r\n");
 80045ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <calculate_mean_speed+0xd4>)
 80045ee:	0018      	movs	r0, r3
 80045f0:	f005 fdb0 	bl	800a154 <puts>

	printf("-----Mean speed= %0.1f RPM-----\r\n", speed_mean);
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <calculate_mean_speed+0xc8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1c18      	adds	r0, r3, #0
 80045fa:	f7fe fd13 	bl	8003024 <__aeabi_f2d>
 80045fe:	0002      	movs	r2, r0
 8004600:	000b      	movs	r3, r1
 8004602:	4909      	ldr	r1, [pc, #36]	@ (8004628 <calculate_mean_speed+0xd8>)
 8004604:	0008      	movs	r0, r1
 8004606:	f005 fd3f 	bl	800a088 <iprintf>
}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b042      	add	sp, #264	@ 0x108
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	2000067c 	.word	0x2000067c
 8004618:	20000684 	.word	0x20000684
 800461c:	20000678 	.word	0x20000678
 8004620:	0800d674 	.word	0x0800d674
 8004624:	0800d648 	.word	0x0800d648
 8004628:	0800d67c 	.word	0x0800d67c

0800462c <read_flash>:

int8_t read_flash(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t aux_length)
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	0005      	movs	r5, r0
 8004634:	000c      	movs	r4, r1
 8004636:	0010      	movs	r0, r2
 8004638:	0019      	movs	r1, r3
 800463a:	1dfb      	adds	r3, r7, #7
 800463c:	1c2a      	adds	r2, r5, #0
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	1dbb      	adds	r3, r7, #6
 8004642:	1c22      	adds	r2, r4, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	1d7b      	adds	r3, r7, #5
 8004648:	1c02      	adds	r2, r0, #0
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	1c0a      	adds	r2, r1, #0
 8004650:	701a      	strb	r2, [r3, #0]
	int8_t read_flash_value = 0;
 8004652:	230f      	movs	r3, #15
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]

	Flash_read_page(address_1, address_2, address_3, aux_length);
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	781c      	ldrb	r4, [r3, #0]
 800465e:	1d7b      	adds	r3, r7, #5
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	1dbb      	adds	r3, r7, #6
 8004664:	7819      	ldrb	r1, [r3, #0]
 8004666:	1dfb      	adds	r3, r7, #7
 8004668:	7818      	ldrb	r0, [r3, #0]
 800466a:	0023      	movs	r3, r4
 800466c:	f7ff f8ae 	bl	80037cc <Flash_read_page>
	for(int i=0; i<strlen((const char *)&read_flash_Byte); i++){
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	e03d      	b.n	80046f2 <read_flash+0xc6>
	  read_flash_value += (read_flash_Byte[i]-'0') * pow(10, (strlen((const char *)&read_flash_Byte)-i-1));
 8004676:	4a27      	ldr	r2, [pc, #156]	@ (8004714 <read_flash+0xe8>)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	18d3      	adds	r3, r2, r3
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	3b30      	subs	r3, #48	@ 0x30
 8004680:	0018      	movs	r0, r3
 8004682:	f7fe fc7d 	bl	8002f80 <__aeabi_i2d>
 8004686:	0004      	movs	r4, r0
 8004688:	000d      	movs	r5, r1
 800468a:	4b22      	ldr	r3, [pc, #136]	@ (8004714 <read_flash+0xe8>)
 800468c:	0018      	movs	r0, r3
 800468e:	f7fb fd45 	bl	800011c <strlen>
 8004692:	0002      	movs	r2, r0
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	0018      	movs	r0, r3
 800469c:	f7fe fc9e 	bl	8002fdc <__aeabi_ui2d>
 80046a0:	0002      	movs	r2, r0
 80046a2:	000b      	movs	r3, r1
 80046a4:	2000      	movs	r0, #0
 80046a6:	491c      	ldr	r1, [pc, #112]	@ (8004718 <read_flash+0xec>)
 80046a8:	f007 ff58 	bl	800c55c <pow>
 80046ac:	0002      	movs	r2, r0
 80046ae:	000b      	movs	r3, r1
 80046b0:	0020      	movs	r0, r4
 80046b2:	0029      	movs	r1, r5
 80046b4:	f7fd fda2 	bl	80021fc <__aeabi_dmul>
 80046b8:	0002      	movs	r2, r0
 80046ba:	000b      	movs	r3, r1
 80046bc:	0014      	movs	r4, r2
 80046be:	001d      	movs	r5, r3
 80046c0:	260f      	movs	r6, #15
 80046c2:	19bb      	adds	r3, r7, r6
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fe fc59 	bl	8002f80 <__aeabi_i2d>
 80046ce:	0002      	movs	r2, r0
 80046d0:	000b      	movs	r3, r1
 80046d2:	0020      	movs	r0, r4
 80046d4:	0029      	movs	r1, r5
 80046d6:	f7fc fde9 	bl	80012ac <__aeabi_dadd>
 80046da:	0002      	movs	r2, r0
 80046dc:	000b      	movs	r3, r1
 80046de:	19bc      	adds	r4, r7, r6
 80046e0:	0010      	movs	r0, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	f7fe fc10 	bl	8002f08 <__aeabi_d2iz>
 80046e8:	0003      	movs	r3, r0
 80046ea:	7023      	strb	r3, [r4, #0]
	for(int i=0; i<strlen((const char *)&read_flash_Byte); i++){
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <read_flash+0xe8>)
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd11 	bl	800011c <strlen>
 80046fa:	0002      	movs	r2, r0
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d8b9      	bhi.n	8004676 <read_flash+0x4a>
	}
	return read_flash_value;
 8004702:	230f      	movs	r3, #15
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b25b      	sxtb	r3, r3
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b005      	add	sp, #20
 8004710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	2000025c 	.word	0x2000025c
 8004718:	40240000 	.word	0x40240000

0800471c <write_flash>:

void write_flash(uint8_t address_1, uint8_t address_2, uint8_t address_3, int value_to_write, uint8_t length)
{
 800471c:	b5b0      	push	{r4, r5, r7, lr}
 800471e:	b0c4      	sub	sp, #272	@ 0x110
 8004720:	af02      	add	r7, sp, #8
 8004722:	0004      	movs	r4, r0
 8004724:	0008      	movs	r0, r1
 8004726:	0011      	movs	r1, r2
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <write_flash+0x98>)
 800472c:	2584      	movs	r5, #132	@ 0x84
 800472e:	006d      	lsls	r5, r5, #1
 8004730:	195b      	adds	r3, r3, r5
 8004732:	19db      	adds	r3, r3, r7
 8004734:	1c22      	adds	r2, r4, #0
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <write_flash+0x9c>)
 800473a:	195b      	adds	r3, r3, r5
 800473c:	19db      	adds	r3, r3, r7
 800473e:	1c02      	adds	r2, r0, #0
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <write_flash+0xa0>)
 8004744:	195b      	adds	r3, r3, r5
 8004746:	19db      	adds	r3, r3, r7
 8004748:	1c0a      	adds	r2, r1, #0
 800474a:	701a      	strb	r2, [r3, #0]
	uint8_t buffer_to_send[255];

	Flash_page_erase(address_1, address_2, address_3);
 800474c:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <write_flash+0xa0>)
 800474e:	195b      	adds	r3, r3, r5
 8004750:	19db      	adds	r3, r3, r7
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <write_flash+0x9c>)
 8004756:	195b      	adds	r3, r3, r5
 8004758:	19db      	adds	r3, r3, r7
 800475a:	7819      	ldrb	r1, [r3, #0]
 800475c:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <write_flash+0x98>)
 800475e:	195b      	adds	r3, r3, r5
 8004760:	19db      	adds	r3, r3, r7
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff f879 	bl	800385c <Flash_page_erase>
	sprintf((char *)&buffer_to_send,"%d", value_to_write);
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4914      	ldr	r1, [pc, #80]	@ (80047c0 <write_flash+0xa4>)
 800476e:	2408      	movs	r4, #8
 8004770:	193b      	adds	r3, r7, r4
 8004772:	0018      	movs	r0, r3
 8004774:	f005 fcf8 	bl	800a168 <siprintf>
	Flash_write_page(address_1, address_2, address_3, &buffer_to_send[0], length);
 8004778:	193c      	adds	r4, r7, r4
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <write_flash+0xa0>)
 800477c:	195b      	adds	r3, r3, r5
 800477e:	19db      	adds	r3, r3, r7
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <write_flash+0x9c>)
 8004784:	195b      	adds	r3, r3, r5
 8004786:	19db      	adds	r3, r3, r7
 8004788:	7819      	ldrb	r1, [r3, #0]
 800478a:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <write_flash+0x98>)
 800478c:	195b      	adds	r3, r3, r5
 800478e:	19db      	adds	r3, r3, r7
 8004790:	7818      	ldrb	r0, [r3, #0]
 8004792:	238c      	movs	r3, #140	@ 0x8c
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	0023      	movs	r3, r4
 800479e:	f7fe ff91 	bl	80036c4 <Flash_write_page>
	printf("VALUE SAVED IN FLASH!\r\n");
 80047a2:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <write_flash+0xa8>)
 80047a4:	0018      	movs	r0, r3
 80047a6:	f005 fcd5 	bl	800a154 <puts>
}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b042      	add	sp, #264	@ 0x108
 80047b0:	bdb0      	pop	{r4, r5, r7, pc}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	fffffeff 	.word	0xfffffeff
 80047b8:	fffffefe 	.word	0xfffffefe
 80047bc:	fffffefd 	.word	0xfffffefd
 80047c0:	0800d6a0 	.word	0x0800d6a0
 80047c4:	0800d648 	.word	0x0800d648

080047c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047c8:	b5b0      	push	{r4, r5, r7, lr}
 80047ca:	b092      	sub	sp, #72	@ 0x48
 80047cc:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047ce:	f000 ffb9 	bl	8005744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047d2:	f000 fa87 	bl	8004ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047d6:	f000 fc0d 	bl	8004ff4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80047da:	f000 fb47 	bl	8004e6c <MX_SPI1_Init>
  MX_TIM3_Init();
 80047de:	f000 fb83 	bl	8004ee8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80047e2:	f000 fbd7 	bl	8004f94 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80047e6:	f000 fae5 	bl	8004db4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 80047ea:	4bd6      	ldr	r3, [pc, #856]	@ (8004b44 <main+0x37c>)
 80047ec:	0018      	movs	r0, r3
 80047ee:	f003 fa41 	bl	8007c74 <HAL_TIM_Base_Start_IT>
  DS18B20_Init(htim3, DS18B20_GPIO_Port, DS18B20_Pin);
 80047f2:	4cd4      	ldr	r4, [pc, #848]	@ (8004b44 <main+0x37c>)
 80047f4:	2304      	movs	r3, #4
 80047f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80047f8:	2390      	movs	r3, #144	@ 0x90
 80047fa:	05db      	lsls	r3, r3, #23
 80047fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80047fe:	466b      	mov	r3, sp
 8004800:	0018      	movs	r0, r3
 8004802:	0023      	movs	r3, r4
 8004804:	3310      	adds	r3, #16
 8004806:	2238      	movs	r2, #56	@ 0x38
 8004808:	0019      	movs	r1, r3
 800480a:	f005 fe67 	bl	800a4dc <memcpy>
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	6861      	ldr	r1, [r4, #4]
 8004812:	68a2      	ldr	r2, [r4, #8]
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	f7fe fcef 	bl	80031f8 <DS18B20_Init>

  parameter_RGB_leds.RED_Speed_Port = R_SPEED_LED_GPIO_Port;
 800481a:	4bcb      	ldr	r3, [pc, #812]	@ (8004b48 <main+0x380>)
 800481c:	4acb      	ldr	r2, [pc, #812]	@ (8004b4c <main+0x384>)
 800481e:	601a      	str	r2, [r3, #0]
  parameter_RGB_leds.RED_Speed_Pin = R_SPEED_LED_Pin;
 8004820:	4bc9      	ldr	r3, [pc, #804]	@ (8004b48 <main+0x380>)
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	809a      	strh	r2, [r3, #4]
  parameter_RGB_leds.GREEN_Speed_Port = G_SPEED_LED_GPIO_Port;
 8004828:	4bc7      	ldr	r3, [pc, #796]	@ (8004b48 <main+0x380>)
 800482a:	4ac8      	ldr	r2, [pc, #800]	@ (8004b4c <main+0x384>)
 800482c:	609a      	str	r2, [r3, #8]
  parameter_RGB_leds.GREEN_Speed_Pin = G_SPEED_LED_Pin;
 800482e:	4bc6      	ldr	r3, [pc, #792]	@ (8004b48 <main+0x380>)
 8004830:	2280      	movs	r2, #128	@ 0x80
 8004832:	00d2      	lsls	r2, r2, #3
 8004834:	819a      	strh	r2, [r3, #12]
  parameter_RGB_leds.BLUE_Speed_Port = B_SPEED_LED_GPIO_Port;
 8004836:	4bc4      	ldr	r3, [pc, #784]	@ (8004b48 <main+0x380>)
 8004838:	4ac4      	ldr	r2, [pc, #784]	@ (8004b4c <main+0x384>)
 800483a:	611a      	str	r2, [r3, #16]
  parameter_RGB_leds.BLUE_Speed_Pin = B_SPEED_LED_Pin;
 800483c:	4bc2      	ldr	r3, [pc, #776]	@ (8004b48 <main+0x380>)
 800483e:	2204      	movs	r2, #4
 8004840:	829a      	strh	r2, [r3, #20]

  parameter_RGB_leds.RED_Temperature_Port = R_TEMP_LED_GPIO_Port;
 8004842:	4bc1      	ldr	r3, [pc, #772]	@ (8004b48 <main+0x380>)
 8004844:	4ac1      	ldr	r2, [pc, #772]	@ (8004b4c <main+0x384>)
 8004846:	619a      	str	r2, [r3, #24]
  parameter_RGB_leds.RED_Temperature_Pin = R_TEMP_LED_Pin;
 8004848:	4bbf      	ldr	r3, [pc, #764]	@ (8004b48 <main+0x380>)
 800484a:	2202      	movs	r2, #2
 800484c:	839a      	strh	r2, [r3, #28]
  parameter_RGB_leds.GREEN_Temperature_Port = G_TEMP_LED_GPIO_Port;
 800484e:	4bbe      	ldr	r3, [pc, #760]	@ (8004b48 <main+0x380>)
 8004850:	4abe      	ldr	r2, [pc, #760]	@ (8004b4c <main+0x384>)
 8004852:	621a      	str	r2, [r3, #32]
  parameter_RGB_leds.GREEN_Temperature_Pin = G_TEMP_LED_Pin;
 8004854:	4bbc      	ldr	r3, [pc, #752]	@ (8004b48 <main+0x380>)
 8004856:	2201      	movs	r2, #1
 8004858:	849a      	strh	r2, [r3, #36]	@ 0x24
  parameter_RGB_leds.BLUE_Temperature_Port = B_TEMP_LED_GPIO_Port;
 800485a:	4bbb      	ldr	r3, [pc, #748]	@ (8004b48 <main+0x380>)
 800485c:	2290      	movs	r2, #144	@ 0x90
 800485e:	05d2      	lsls	r2, r2, #23
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
  parameter_RGB_leds.BLUE_Temperature_Pin = B_TEMP_LED_Pin;
 8004862:	4bb9      	ldr	r3, [pc, #740]	@ (8004b48 <main+0x380>)
 8004864:	2280      	movs	r2, #128	@ 0x80
 8004866:	859a      	strh	r2, [r3, #44]	@ 0x2c

  RGB_Init(parameter_RGB_leds);
 8004868:	4bb7      	ldr	r3, [pc, #732]	@ (8004b48 <main+0x380>)
 800486a:	466a      	mov	r2, sp
 800486c:	0011      	movs	r1, r2
 800486e:	001a      	movs	r2, r3
 8004870:	3210      	adds	r2, #16
 8004872:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004874:	c131      	stmia	r1!, {r0, r4, r5}
 8004876:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004878:	c131      	stmia	r1!, {r0, r4, r5}
 800487a:	ca11      	ldmia	r2!, {r0, r4}
 800487c:	c111      	stmia	r1!, {r0, r4}
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f7ff f825 	bl	80038d4 <RGB_Init>

  ring_buffer_init(&rb_usart1, rb_buffer_usart1, CAPACITY_USART1);
 800488a:	49b1      	ldr	r1, [pc, #708]	@ (8004b50 <main+0x388>)
 800488c:	4bb1      	ldr	r3, [pc, #708]	@ (8004b54 <main+0x38c>)
 800488e:	2210      	movs	r2, #16
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fc45 	bl	8005120 <ring_buffer_init>
  HAL_UART_Receive_IT(&huart1, &data_usart1_rx, 1);
 8004896:	49b0      	ldr	r1, [pc, #704]	@ (8004b58 <main+0x390>)
 8004898:	4bb0      	ldr	r3, [pc, #704]	@ (8004b5c <main+0x394>)
 800489a:	2201      	movs	r2, #1
 800489c:	0018      	movs	r0, r3
 800489e:	f003 fd72 	bl	8008386 <HAL_UART_Receive_IT>

  //Inicializa los valores para indicadores de temperatura de acuerdo con lo guardado en la FLASH
  min_blue_temperature = read_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MIN_BLUE, ADDRESS_FOR_ALL,SIZE_TO_READ_AND_WRITE);
 80048a2:	23ff      	movs	r3, #255	@ 0xff
 80048a4:	2200      	movs	r2, #0
 80048a6:	2104      	movs	r1, #4
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7ff febf 	bl	800462c <read_flash>
 80048ae:	0003      	movs	r3, r0
 80048b0:	001a      	movs	r2, r3
 80048b2:	4bab      	ldr	r3, [pc, #684]	@ (8004b60 <main+0x398>)
 80048b4:	701a      	strb	r2, [r3, #0]
  max_blue_temperature = read_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MAX_BLUE, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 80048b6:	23ff      	movs	r3, #255	@ 0xff
 80048b8:	2200      	movs	r2, #0
 80048ba:	2105      	movs	r1, #5
 80048bc:	2000      	movs	r0, #0
 80048be:	f7ff feb5 	bl	800462c <read_flash>
 80048c2:	0003      	movs	r3, r0
 80048c4:	001a      	movs	r2, r3
 80048c6:	4ba7      	ldr	r3, [pc, #668]	@ (8004b64 <main+0x39c>)
 80048c8:	701a      	strb	r2, [r3, #0]
  min_green_temperature = read_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MIN_GREEN, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 80048ca:	23ff      	movs	r3, #255	@ 0xff
 80048cc:	2200      	movs	r2, #0
 80048ce:	2102      	movs	r1, #2
 80048d0:	2000      	movs	r0, #0
 80048d2:	f7ff feab 	bl	800462c <read_flash>
 80048d6:	0003      	movs	r3, r0
 80048d8:	001a      	movs	r2, r3
 80048da:	4ba3      	ldr	r3, [pc, #652]	@ (8004b68 <main+0x3a0>)
 80048dc:	701a      	strb	r2, [r3, #0]
  max_green_temperature = read_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MAX_GREEN, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 80048de:	23ff      	movs	r3, #255	@ 0xff
 80048e0:	2200      	movs	r2, #0
 80048e2:	2103      	movs	r1, #3
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7ff fea1 	bl	800462c <read_flash>
 80048ea:	0003      	movs	r3, r0
 80048ec:	001a      	movs	r2, r3
 80048ee:	4b9f      	ldr	r3, [pc, #636]	@ (8004b6c <main+0x3a4>)
 80048f0:	701a      	strb	r2, [r3, #0]
  min_red_temperature = read_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MIN_RED, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 80048f2:	23ff      	movs	r3, #255	@ 0xff
 80048f4:	2200      	movs	r2, #0
 80048f6:	2100      	movs	r1, #0
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7ff fe97 	bl	800462c <read_flash>
 80048fe:	0003      	movs	r3, r0
 8004900:	001a      	movs	r2, r3
 8004902:	4b9b      	ldr	r3, [pc, #620]	@ (8004b70 <main+0x3a8>)
 8004904:	701a      	strb	r2, [r3, #0]
  max_red_temperature = read_flash(BLOCK_FOR_ALL, DIR_TEMPERATURE_MAX_RED, ADDRESS_FOR_ALL, SIZE_TO_READ_AND_WRITE);
 8004906:	23ff      	movs	r3, #255	@ 0xff
 8004908:	2200      	movs	r2, #0
 800490a:	2101      	movs	r1, #1
 800490c:	2000      	movs	r0, #0
 800490e:	f7ff fe8d 	bl	800462c <read_flash>
 8004912:	0003      	movs	r3, r0
 8004914:	001a      	movs	r2, r3
 8004916:	4b97      	ldr	r3, [pc, #604]	@ (8004b74 <main+0x3ac>)
 8004918:	701a      	strb	r2, [r3, #0]

  //Inicializa el umbral máximo de RPM de acuerdo al valor guardado en la FLASH
  max_speed_RPM = read_flash(BLOCK_FOR_ALL, DIR_RPM_MAX, ADDRESS_FOR_ALL,SIZE_TO_READ_AND_WRITE);
 800491a:	23ff      	movs	r3, #255	@ 0xff
 800491c:	2200      	movs	r2, #0
 800491e:	2107      	movs	r1, #7
 8004920:	2000      	movs	r0, #0
 8004922:	f7ff fe83 	bl	800462c <read_flash>
 8004926:	0003      	movs	r3, r0
 8004928:	0018      	movs	r0, r3
 800492a:	f7fc fc73 	bl	8001214 <__aeabi_i2f>
 800492e:	1c02      	adds	r2, r0, #0
 8004930:	4b91      	ldr	r3, [pc, #580]	@ (8004b78 <main+0x3b0>)
 8004932:	601a      	str	r2, [r3, #0]

  key_flag = False;
 8004934:	4b91      	ldr	r3, [pc, #580]	@ (8004b7c <main+0x3b4>)
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
  new_parameter_to_set_flag = False;
 800493a:	4b91      	ldr	r3, [pc, #580]	@ (8004b80 <main+0x3b8>)
 800493c:	2200      	movs	r2, #0
 800493e:	701a      	strb	r2, [r3, #0]
  read_buffer_ring_counter = 0;
 8004940:	4b90      	ldr	r3, [pc, #576]	@ (8004b84 <main+0x3bc>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
  value_decimal = 0;
 8004946:	4990      	ldr	r1, [pc, #576]	@ (8004b88 <main+0x3c0>)
 8004948:	2200      	movs	r2, #0
 800494a:	2300      	movs	r3, #0
 800494c:	600a      	str	r2, [r1, #0]
 800494e:	604b      	str	r3, [r1, #4]

  temperature = 0;
 8004950:	4b8e      	ldr	r3, [pc, #568]	@ (8004b8c <main+0x3c4>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
  temperature_mean = 0;
 8004956:	4b8e      	ldr	r3, [pc, #568]	@ (8004b90 <main+0x3c8>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
  temperature_mean_counter = 0;
 800495c:	4b8d      	ldr	r3, [pc, #564]	@ (8004b94 <main+0x3cc>)
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
  counter_speed_pulse = 0;
 8004962:	4b8d      	ldr	r3, [pc, #564]	@ (8004b98 <main+0x3d0>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
  time_measure_speed = 0;
 8004968:	4b8c      	ldr	r3, [pc, #560]	@ (8004b9c <main+0x3d4>)
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
  time_print_speed = 0;
 800496e:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba0 <main+0x3d8>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
  speed_in_RPM = 0;
 8004974:	4b8b      	ldr	r3, [pc, #556]	@ (8004ba4 <main+0x3dc>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
  speed_mean_counter = 0;
 800497a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ba8 <main+0x3e0>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
  speed_mean = 0;
 8004980:	4b8a      	ldr	r3, [pc, #552]	@ (8004bac <main+0x3e4>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
  move_speed_flag = False;
 8004986:	4b8a      	ldr	r3, [pc, #552]	@ (8004bb0 <main+0x3e8>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
  last_move_speed = 0;
 800498c:	4b89      	ldr	r3, [pc, #548]	@ (8004bb4 <main+0x3ec>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
  RGB_RED_ON(SPEED);
 8004992:	2001      	movs	r0, #1
 8004994:	f7fe ffbc 	bl	8003910 <RGB_RED_ON>
  last_press_button = 0;
 8004998:	4b87      	ldr	r3, [pc, #540]	@ (8004bb8 <main+0x3f0>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Asegurar la primera lectura apenas encienda el sistema
  temperature_mean_counter++;
 800499e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b94 <main+0x3cc>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <main+0x3cc>)
 80049a8:	701a      	strb	r2, [r3, #0]
  print_temperature();
 80049aa:	f7ff fc35 	bl	8004218 <print_temperature>
  update_temperature_indicator();
 80049ae:	f7ff fc73 	bl	8004298 <update_temperature_indicator>

	  /*
	  *Wait a time specified in WAIT_TEMPERATURE_PRINT and
	  *temperature print
	  */
	  if(HAL_GetTick() - temperature_printing_control >= WAIT_TEMPERATURE_PRINT)
 80049b2:	f000 ff21 	bl	80057f8 <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	4b80      	ldr	r3, [pc, #512]	@ (8004bbc <main+0x3f4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a80      	ldr	r2, [pc, #512]	@ (8004bc0 <main+0x3f8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d90f      	bls.n	80049e4 <main+0x21c>
	  {
		 temperature_mean_counter++;
 80049c4:	4b73      	ldr	r3, [pc, #460]	@ (8004b94 <main+0x3cc>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	4b71      	ldr	r3, [pc, #452]	@ (8004b94 <main+0x3cc>)
 80049ce:	701a      	strb	r2, [r3, #0]
		 print_temperature();
 80049d0:	f7ff fc22 	bl	8004218 <print_temperature>
		 update_temperature_indicator();
 80049d4:	f7ff fc60 	bl	8004298 <update_temperature_indicator>

		 (temperature_mean_counter == MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN)?calculate_mean_temperature():(void)0;
 80049d8:	4b6e      	ldr	r3, [pc, #440]	@ (8004b94 <main+0x3cc>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d101      	bne.n	80049e4 <main+0x21c>
 80049e0:	f7ff fcd8 	bl	8004394 <calculate_mean_temperature>
	  /*
	   * Speed measure
	   */

	  //Medición de velocidad
	  measure_speed_RPM();
 80049e4:	f7ff fd5c 	bl	80044a0 <measure_speed_RPM>

	  //Imprime cada 5 segundos la velocidad
	  if(HAL_GetTick()-time_print_speed >= WAIT_TIME_TO_SPEED_PRINT)
 80049e8:	f000 ff06 	bl	80057f8 <HAL_GetTick>
 80049ec:	0002      	movs	r2, r0
 80049ee:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba0 <main+0x3d8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	4a73      	ldr	r2, [pc, #460]	@ (8004bc4 <main+0x3fc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d90d      	bls.n	8004a16 <main+0x24e>
	  {
		  speed_mean_counter ++;
 80049fa:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba8 <main+0x3e0>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4b69      	ldr	r3, [pc, #420]	@ (8004ba8 <main+0x3e0>)
 8004a04:	701a      	strb	r2, [r3, #0]
		  print_speed();
 8004a06:	f7ff fd7b 	bl	8004500 <print_speed>

		  (speed_mean_counter == MAX_MEASURES_OF_SPEED_FOR_MEAN)? calculate_mean_speed(): (void)0 ;
 8004a0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ba8 <main+0x3e0>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d101      	bne.n	8004a16 <main+0x24e>
 8004a12:	f7ff fd9d 	bl	8004550 <calculate_mean_speed>
	  }

	  //Encencer verde si se mueve y rojo si se queda tiempo por 5 segundos o más
	  if((move_speed_flag == True) && ((HAL_GetTick()-last_move_speed)>= TIME_SPEED_STILL)){
 8004a16:	4b66      	ldr	r3, [pc, #408]	@ (8004bb0 <main+0x3e8>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10e      	bne.n	8004a3c <main+0x274>
 8004a1e:	f000 feeb 	bl	80057f8 <HAL_GetTick>
 8004a22:	0002      	movs	r2, r0
 8004a24:	4b63      	ldr	r3, [pc, #396]	@ (8004bb4 <main+0x3ec>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	4a66      	ldr	r2, [pc, #408]	@ (8004bc4 <main+0x3fc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d905      	bls.n	8004a3c <main+0x274>
		  RGB_RED_ON(SPEED);
 8004a30:	2001      	movs	r0, #1
 8004a32:	f7fe ff6d 	bl	8003910 <RGB_RED_ON>
		  move_speed_flag = False;
 8004a36:	4b5e      	ldr	r3, [pc, #376]	@ (8004bb0 <main+0x3e8>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
	  }

	  //Enciende rojo si supera el umbral (Inicial de 100 RPM)
	  (speed_in_RPM >= max_speed_RPM)? HAL_GPIO_WritePin(SETTING_LED_GPIO_Port, SETTING_LED_Pin, GPIO_PIN_SET): HAL_GPIO_WritePin(SETTING_LED_GPIO_Port, SETTING_LED_Pin, GPIO_PIN_RESET);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ba4 <main+0x3dc>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b4d      	ldr	r3, [pc, #308]	@ (8004b78 <main+0x3b0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1c19      	adds	r1, r3, #0
 8004a46:	1c10      	adds	r0, r2, #0
 8004a48:	f7fb fd68 	bl	800051c <__aeabi_fcmpge>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d008      	beq.n	8004a62 <main+0x29a>
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	0059      	lsls	r1, r3, #1
 8004a54:	2390      	movs	r3, #144	@ 0x90
 8004a56:	05db      	lsls	r3, r3, #23
 8004a58:	2201      	movs	r2, #1
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f001 fc19 	bl	8006292 <HAL_GPIO_WritePin>
 8004a60:	e007      	b.n	8004a72 <main+0x2aa>
 8004a62:	2380      	movs	r3, #128	@ 0x80
 8004a64:	0059      	lsls	r1, r3, #1
 8004a66:	2390      	movs	r3, #144	@ 0x90
 8004a68:	05db      	lsls	r3, r3, #23
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f001 fc10 	bl	8006292 <HAL_GPIO_WritePin>

	  /*
	   *UART parse
	   */
	  if(ring_buffer_is_empty(&rb_usart1) != 1)						//Si el buffer de rb_usart1 tiene datos para leer
 8004a72:	4b38      	ldr	r3, [pc, #224]	@ (8004b54 <main+0x38c>)
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 fba7 	bl	80051c8 <ring_buffer_is_empty>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d100      	bne.n	8004a82 <main+0x2ba>
 8004a80:	e112      	b.n	8004ca8 <main+0x4e0>
	  {
		  ring_buffer_read(&rb_usart1, &data_rb_usart1);			//lee un dato del buffer
 8004a82:	4a51      	ldr	r2, [pc, #324]	@ (8004bc8 <main+0x400>)
 8004a84:	4b33      	ldr	r3, [pc, #204]	@ (8004b54 <main+0x38c>)
 8004a86:	0011      	movs	r1, r2
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 fbf1 	bl	8005270 <ring_buffer_read>
		  /*
		   * Si detecta que el dato leído es igual al caracter "="
		   * Porcede a guardar lo que se encuentre en el arreglo
		   * buffer_usart1_rx en la variable "key"
		   */
		  if((data_rb_usart1 == '=') && (key_flag == False))
 8004a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004bc8 <main+0x400>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b3d      	cmp	r3, #61	@ 0x3d
 8004a94:	d12e      	bne.n	8004af4 <main+0x32c>
 8004a96:	4b39      	ldr	r3, [pc, #228]	@ (8004b7c <main+0x3b4>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d12a      	bne.n	8004af4 <main+0x32c>
		  {
			  memset(&key, 0, sizeof(key));
 8004a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bcc <main+0x404>)
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f005 fc6b 	bl	800a380 <memset>
			  strcpy((char *)&key, (const char *)&buffer_usart1_rx);
 8004aaa:	4a49      	ldr	r2, [pc, #292]	@ (8004bd0 <main+0x408>)
 8004aac:	4b47      	ldr	r3, [pc, #284]	@ (8004bcc <main+0x404>)
 8004aae:	0011      	movs	r1, r2
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f005 fd00 	bl	800a4b6 <strcpy>

			  memset(&buffer_usart1_rx, 0, sizeof(buffer_usart1_rx));
 8004ab6:	4b46      	ldr	r3, [pc, #280]	@ (8004bd0 <main+0x408>)
 8004ab8:	2240      	movs	r2, #64	@ 0x40
 8004aba:	2100      	movs	r1, #0
 8004abc:	0018      	movs	r0, r3
 8004abe:	f005 fc5f 	bl	800a380 <memset>
			  read_buffer_ring_counter = 0;
 8004ac2:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <main+0x3bc>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
			  key_flag = True;
 8004ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8004b7c <main+0x3b4>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]

			  size_to_send = sprintf((char *)&transmit_text, "\r\nUART received: Key= %s\t", key);
 8004ace:	4a3f      	ldr	r2, [pc, #252]	@ (8004bcc <main+0x404>)
 8004ad0:	4940      	ldr	r1, [pc, #256]	@ (8004bd4 <main+0x40c>)
 8004ad2:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <main+0x410>)
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f005 fb47 	bl	800a168 <siprintf>
 8004ada:	0003      	movs	r3, r0
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4b3f      	ldr	r3, [pc, #252]	@ (8004bdc <main+0x414>)
 8004ae0:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 8004ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bdc <main+0x414>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	493b      	ldr	r1, [pc, #236]	@ (8004bd8 <main+0x410>)
 8004aea:	481c      	ldr	r0, [pc, #112]	@ (8004b5c <main+0x394>)
 8004aec:	2364      	movs	r3, #100	@ 0x64
 8004aee:	f003 fbab 	bl	8008248 <HAL_UART_Transmit>

			  continue;
 8004af2:	e0e0      	b.n	8004cb6 <main+0x4ee>
		  }

		  buffer_usart1_rx[read_buffer_ring_counter] = data_rb_usart1;	//Va llenando un nuevo arreglo con el dato leído dle buffer
 8004af4:	4b23      	ldr	r3, [pc, #140]	@ (8004b84 <main+0x3bc>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	001a      	movs	r2, r3
 8004afa:	4b33      	ldr	r3, [pc, #204]	@ (8004bc8 <main+0x400>)
 8004afc:	7819      	ldrb	r1, [r3, #0]
 8004afe:	4b34      	ldr	r3, [pc, #208]	@ (8004bd0 <main+0x408>)
 8004b00:	5499      	strb	r1, [r3, r2]

		  /*
		   * Cuando ya no hay datos para leer, procede a guardar el arrelo
		   * buffer_usart1_rx en la variable value
		   */
		  if(ring_buffer_size(&rb_usart1) == 0 && key_flag == True)
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <main+0x38c>)
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 fb32 	bl	800516e <ring_buffer_size>
 8004b0a:	1e03      	subs	r3, r0, #0
 8004b0c:	d000      	beq.n	8004b10 <main+0x348>
 8004b0e:	e0c5      	b.n	8004c9c <main+0x4d4>
 8004b10:	4b1a      	ldr	r3, [pc, #104]	@ (8004b7c <main+0x3b4>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d000      	beq.n	8004b1a <main+0x352>
 8004b18:	e0c0      	b.n	8004c9c <main+0x4d4>
		  {
			  value_decimal = 0;
 8004b1a:	491b      	ldr	r1, [pc, #108]	@ (8004b88 <main+0x3c0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2300      	movs	r3, #0
 8004b20:	600a      	str	r2, [r1, #0]
 8004b22:	604b      	str	r3, [r1, #4]
			  memset(&value_str, 0, sizeof(value_str));
 8004b24:	4b2e      	ldr	r3, [pc, #184]	@ (8004be0 <main+0x418>)
 8004b26:	2208      	movs	r2, #8
 8004b28:	2100      	movs	r1, #0
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f005 fc28 	bl	800a380 <memset>
			  strcpy((char *)&value_str, (const char *)&buffer_usart1_rx);
 8004b30:	4a27      	ldr	r2, [pc, #156]	@ (8004bd0 <main+0x408>)
 8004b32:	4b2b      	ldr	r3, [pc, #172]	@ (8004be0 <main+0x418>)
 8004b34:	0011      	movs	r1, r2
 8004b36:	0018      	movs	r0, r3
 8004b38:	f005 fcbd 	bl	800a4b6 <strcpy>

			  for(int i = 0; i<strlen((const char *)value_str); i++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	e082      	b.n	8004c48 <main+0x480>
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	20000430 	.word	0x20000430
 8004b48:	20000608 	.word	0x20000608
 8004b4c:	48000400 	.word	0x48000400
 8004b50:	20000508 	.word	0x20000508
 8004b54:	20000500 	.word	0x20000500
 8004b58:	20000518 	.word	0x20000518
 8004b5c:	20000478 	.word	0x20000478
 8004b60:	20000664 	.word	0x20000664
 8004b64:	20000665 	.word	0x20000665
 8004b68:	20000662 	.word	0x20000662
 8004b6c:	20000663 	.word	0x20000663
 8004b70:	20000660 	.word	0x20000660
 8004b74:	20000661 	.word	0x20000661
 8004b78:	20000690 	.word	0x20000690
 8004b7c:	20000638 	.word	0x20000638
 8004b80:	20000639 	.word	0x20000639
 8004b84:	2000055c 	.word	0x2000055c
 8004b88:	20000578 	.word	0x20000578
 8004b8c:	2000063c 	.word	0x2000063c
 8004b90:	20000640 	.word	0x20000640
 8004b94:	20000644 	.word	0x20000644
 8004b98:	20000668 	.word	0x20000668
 8004b9c:	2000066c 	.word	0x2000066c
 8004ba0:	20000674 	.word	0x20000674
 8004ba4:	20000670 	.word	0x20000670
 8004ba8:	20000678 	.word	0x20000678
 8004bac:	20000684 	.word	0x20000684
 8004bb0:	20000688 	.word	0x20000688
 8004bb4:	2000068c 	.word	0x2000068c
 8004bb8:	20000694 	.word	0x20000694
 8004bbc:	20000604 	.word	0x20000604
 8004bc0:	0000270f 	.word	0x0000270f
 8004bc4:	00001387 	.word	0x00001387
 8004bc8:	20000519 	.word	0x20000519
 8004bcc:	20000560 	.word	0x20000560
 8004bd0:	2000051c 	.word	0x2000051c
 8004bd4:	0800d6a4 	.word	0x0800d6a4
 8004bd8:	20000580 	.word	0x20000580
 8004bdc:	20000600 	.word	0x20000600
 8004be0:	20000570 	.word	0x20000570
			  {
				  value_decimal += (value_str[i]-'0') * pow(10, (strlen((const char *)value_str)-1-i));
 8004be4:	4a34      	ldr	r2, [pc, #208]	@ (8004cb8 <main+0x4f0>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	3b30      	subs	r3, #48	@ 0x30
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7fe f9c6 	bl	8002f80 <__aeabi_i2d>
 8004bf4:	0004      	movs	r4, r0
 8004bf6:	000d      	movs	r5, r1
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb8 <main+0x4f0>)
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7fb fa8e 	bl	800011c <strlen>
 8004c00:	0002      	movs	r2, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fe f9e7 	bl	8002fdc <__aeabi_ui2d>
 8004c0e:	0002      	movs	r2, r0
 8004c10:	000b      	movs	r3, r1
 8004c12:	2000      	movs	r0, #0
 8004c14:	4929      	ldr	r1, [pc, #164]	@ (8004cbc <main+0x4f4>)
 8004c16:	f007 fca1 	bl	800c55c <pow>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	000b      	movs	r3, r1
 8004c1e:	0020      	movs	r0, r4
 8004c20:	0029      	movs	r1, r5
 8004c22:	f7fd faeb 	bl	80021fc <__aeabi_dmul>
 8004c26:	0002      	movs	r2, r0
 8004c28:	000b      	movs	r3, r1
 8004c2a:	0010      	movs	r0, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <main+0x4f8>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f7fc fb3a 	bl	80012ac <__aeabi_dadd>
 8004c38:	0002      	movs	r2, r0
 8004c3a:	000b      	movs	r3, r1
 8004c3c:	4920      	ldr	r1, [pc, #128]	@ (8004cc0 <main+0x4f8>)
 8004c3e:	600a      	str	r2, [r1, #0]
 8004c40:	604b      	str	r3, [r1, #4]
			  for(int i = 0; i<strlen((const char *)value_str); i++)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3301      	adds	r3, #1
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <main+0x4f0>)
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fb fa66 	bl	800011c <strlen>
 8004c50:	0002      	movs	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d8c5      	bhi.n	8004be4 <main+0x41c>
			  }

			  memset(&buffer_usart1_rx, 0, sizeof(buffer_usart1_rx));
 8004c58:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <main+0x4fc>)
 8004c5a:	2240      	movs	r2, #64	@ 0x40
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f005 fb8e 	bl	800a380 <memset>
			  read_buffer_ring_counter = 0;
 8004c64:	4b18      	ldr	r3, [pc, #96]	@ (8004cc8 <main+0x500>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
			  key_flag = False;
 8004c6a:	4b18      	ldr	r3, [pc, #96]	@ (8004ccc <main+0x504>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]

			  size_to_send = sprintf((char *)&transmit_text, "Value= %s\r\n", value_str);
 8004c70:	4a11      	ldr	r2, [pc, #68]	@ (8004cb8 <main+0x4f0>)
 8004c72:	4917      	ldr	r1, [pc, #92]	@ (8004cd0 <main+0x508>)
 8004c74:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <main+0x50c>)
 8004c76:	0018      	movs	r0, r3
 8004c78:	f005 fa76 	bl	800a168 <siprintf>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <main+0x510>)
 8004c82:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 8004c84:	4b14      	ldr	r3, [pc, #80]	@ (8004cd8 <main+0x510>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	001a      	movs	r2, r3
 8004c8a:	4912      	ldr	r1, [pc, #72]	@ (8004cd4 <main+0x50c>)
 8004c8c:	4813      	ldr	r0, [pc, #76]	@ (8004cdc <main+0x514>)
 8004c8e:	2364      	movs	r3, #100	@ 0x64
 8004c90:	f003 fada 	bl	8008248 <HAL_UART_Transmit>

			  new_parameter_to_set_flag = True;
 8004c94:	4b12      	ldr	r3, [pc, #72]	@ (8004ce0 <main+0x518>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
			  continue;
 8004c9a:	e00c      	b.n	8004cb6 <main+0x4ee>
		  }

		  read_buffer_ring_counter ++; //Va aumentando el contador de control del arreglo buffer_usart1_rx
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <main+0x500>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	4b08      	ldr	r3, [pc, #32]	@ (8004cc8 <main+0x500>)
 8004ca6:	701a      	strb	r2, [r3, #0]
	  }

	  /*
	   * After receive a new value, it sets it in the corresponding variable
	   */
	  if(new_parameter_to_set_flag == True)
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <main+0x518>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d000      	beq.n	8004cb2 <main+0x4ea>
 8004cb0:	e67f      	b.n	80049b2 <main+0x1ea>
	  {
		  set_value_received();
 8004cb2:	f7ff f843 	bl	8003d3c <set_value_received>
	  if(HAL_GetTick() - temperature_printing_control >= WAIT_TEMPERATURE_PRINT)
 8004cb6:	e67c      	b.n	80049b2 <main+0x1ea>
 8004cb8:	20000570 	.word	0x20000570
 8004cbc:	40240000 	.word	0x40240000
 8004cc0:	20000578 	.word	0x20000578
 8004cc4:	2000051c 	.word	0x2000051c
 8004cc8:	2000055c 	.word	0x2000055c
 8004ccc:	20000638 	.word	0x20000638
 8004cd0:	0800d6c0 	.word	0x0800d6c0
 8004cd4:	20000580 	.word	0x20000580
 8004cd8:	20000600 	.word	0x20000600
 8004cdc:	20000478 	.word	0x20000478
 8004ce0:	20000639 	.word	0x20000639

08004ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b095      	sub	sp, #84	@ 0x54
 8004ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cea:	2420      	movs	r4, #32
 8004cec:	193b      	adds	r3, r7, r4
 8004cee:	0018      	movs	r0, r3
 8004cf0:	2330      	movs	r3, #48	@ 0x30
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f005 fb43 	bl	800a380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	0018      	movs	r0, r3
 8004d00:	2310      	movs	r3, #16
 8004d02:	001a      	movs	r2, r3
 8004d04:	2100      	movs	r1, #0
 8004d06:	f005 fb3b 	bl	800a380 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d0a:	003b      	movs	r3, r7
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	2310      	movs	r3, #16
 8004d10:	001a      	movs	r2, r3
 8004d12:	2100      	movs	r1, #0
 8004d14:	f005 fb34 	bl	800a380 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004d18:	0021      	movs	r1, r4
 8004d1a:	187b      	adds	r3, r7, r1
 8004d1c:	2212      	movs	r2, #18
 8004d1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	2201      	movs	r2, #1
 8004d24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	2201      	movs	r2, #1
 8004d2a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	2210      	movs	r2, #16
 8004d30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	2210      	movs	r2, #16
 8004d36:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	2200      	movs	r2, #0
 8004d42:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	22a0      	movs	r2, #160	@ 0xa0
 8004d48:	0392      	lsls	r2, r2, #14
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004d4c:	187b      	adds	r3, r7, r1
 8004d4e:	2200      	movs	r2, #0
 8004d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d52:	187b      	adds	r3, r7, r1
 8004d54:	0018      	movs	r0, r3
 8004d56:	f001 faf1 	bl	800633c <HAL_RCC_OscConfig>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d001      	beq.n	8004d62 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8004d5e:	f000 f9d9 	bl	8005114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d62:	2110      	movs	r1, #16
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	2207      	movs	r2, #7
 8004d68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d76:	187b      	adds	r3, r7, r1
 8004d78:	2200      	movs	r2, #0
 8004d7a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	2101      	movs	r1, #1
 8004d80:	0018      	movs	r0, r3
 8004d82:	f001 fdf5 	bl	8006970 <HAL_RCC_ClockConfig>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d001      	beq.n	8004d8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004d8a:	f000 f9c3 	bl	8005114 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004d8e:	003b      	movs	r3, r7
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004d94:	003b      	movs	r3, r7
 8004d96:	2200      	movs	r2, #0
 8004d98:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d9a:	003b      	movs	r3, r7
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f001 ff2b 	bl	8006bf8 <HAL_RCCEx_PeriphCLKConfig>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d001      	beq.n	8004daa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004da6:	f000 f9b5 	bl	8005114 <Error_Handler>
  }
}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b015      	add	sp, #84	@ 0x54
 8004db0:	bd90      	pop	{r4, r7, pc}
	...

08004db4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	f005 fadc 	bl	800a380 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004dc8:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004dca:	4a27      	ldr	r2, [pc, #156]	@ (8004e68 <MX_ADC_Init+0xb4>)
 8004dcc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004dce:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004dd4:	4b23      	ldr	r3, [pc, #140]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004dda:	4b22      	ldr	r3, [pc, #136]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004de0:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004de6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004de8:	2204      	movs	r2, #4
 8004dea:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004df2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004df8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004dfe:	4b19      	ldr	r3, [pc, #100]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e04:	4b17      	ldr	r3, [pc, #92]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e06:	22c2      	movs	r2, #194	@ 0xc2
 8004e08:	32ff      	adds	r2, #255	@ 0xff
 8004e0a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e0c:	4b15      	ldr	r3, [pc, #84]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004e12:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e14:	2224      	movs	r2, #36	@ 0x24
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e1a:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004e20:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fd16 	bl	8005854 <HAL_ADC_Init>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d001      	beq.n	8004e30 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004e2c:	f000 f972 	bl	8005114 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	2203      	movs	r2, #3
 8004e34:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	2280      	movs	r2, #128	@ 0x80
 8004e3a:	0152      	lsls	r2, r2, #5
 8004e3c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	2280      	movs	r2, #128	@ 0x80
 8004e42:	0552      	lsls	r2, r2, #21
 8004e44:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004e46:	1d3a      	adds	r2, r7, #4
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <MX_ADC_Init+0xb0>)
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 fe41 	bl	8005ad4 <HAL_ADC_ConfigChannel>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d001      	beq.n	8004e5a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8004e56:	f000 f95d 	bl	8005114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004e5a:	46c0      	nop			@ (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b004      	add	sp, #16
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	2000038c 	.word	0x2000038c
 8004e68:	40012400 	.word	0x40012400

08004e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <MX_SPI1_Init+0x78>)
 8004e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e78:	2282      	movs	r2, #130	@ 0x82
 8004e7a:	0052      	lsls	r2, r2, #1
 8004e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e84:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e86:	22e0      	movs	r2, #224	@ 0xe0
 8004e88:	00d2      	lsls	r2, r2, #3
 8004e8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e92:	4b13      	ldr	r3, [pc, #76]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e98:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004e9a:	2280      	movs	r2, #128	@ 0x80
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004eba:	2207      	movs	r2, #7
 8004ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ebe:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <MX_SPI1_Init+0x74>)
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f001 ff61 	bl	8006d94 <HAL_SPI_Init>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d001      	beq.n	8004eda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004ed6:	f000 f91d 	bl	8005114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200003cc 	.word	0x200003cc
 8004ee4:	40013000 	.word	0x40013000

08004ee8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004eee:	2308      	movs	r3, #8
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f005 fa41 	bl	800a380 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004efe:	003b      	movs	r3, r7
 8004f00:	0018      	movs	r0, r3
 8004f02:	2308      	movs	r3, #8
 8004f04:	001a      	movs	r2, r3
 8004f06:	2100      	movs	r1, #0
 8004f08:	f005 fa3a 	bl	800a380 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f8c <MX_TIM3_Init+0xa4>)
 8004f10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8004f12:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f14:	222f      	movs	r2, #47	@ 0x2f
 8004f16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f18:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF-1;
 8004f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f20:	4a1b      	ldr	r2, [pc, #108]	@ (8004f90 <MX_TIM3_Init+0xa8>)
 8004f22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f24:	4b18      	ldr	r3, [pc, #96]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2a:	4b17      	ldr	r3, [pc, #92]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f30:	4b15      	ldr	r3, [pc, #84]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f32:	0018      	movs	r0, r3
 8004f34:	f002 fe4e 	bl	8007bd4 <HAL_TIM_Base_Init>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004f3c:	f000 f8ea 	bl	8005114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f40:	2108      	movs	r1, #8
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	2280      	movs	r2, #128	@ 0x80
 8004f46:	0152      	lsls	r2, r2, #5
 8004f48:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f4a:	187a      	adds	r2, r7, r1
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f4e:	0011      	movs	r1, r2
 8004f50:	0018      	movs	r0, r3
 8004f52:	f002 fedb 	bl	8007d0c <HAL_TIM_ConfigClockSource>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d001      	beq.n	8004f5e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004f5a:	f000 f8db 	bl	8005114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f5e:	003b      	movs	r3, r7
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f64:	003b      	movs	r3, r7
 8004f66:	2200      	movs	r2, #0
 8004f68:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f6a:	003a      	movs	r2, r7
 8004f6c:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <MX_TIM3_Init+0xa0>)
 8004f6e:	0011      	movs	r1, r2
 8004f70:	0018      	movs	r0, r3
 8004f72:	f003 f8bd 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f76:	1e03      	subs	r3, r0, #0
 8004f78:	d001      	beq.n	8004f7e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004f7a:	f000 f8cb 	bl	8005114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b006      	add	sp, #24
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	20000430 	.word	0x20000430
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	0000fffe 	.word	0x0000fffe

08004f94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f98:	4b14      	ldr	r3, [pc, #80]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004f9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <MX_USART1_UART_Init+0x5c>)
 8004f9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fa0:	22e1      	movs	r2, #225	@ 0xe1
 8004fa2:	0252      	lsls	r2, r2, #9
 8004fa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa6:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fac:	4b0f      	ldr	r3, [pc, #60]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fba:	220c      	movs	r2, #12
 8004fbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc4:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fca:	4b08      	ldr	r3, [pc, #32]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fd6:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <MX_USART1_UART_Init+0x58>)
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f003 f8e1 	bl	80081a0 <HAL_UART_Init>
 8004fde:	1e03      	subs	r3, r0, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004fe2:	f000 f897 	bl	8005114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000478 	.word	0x20000478
 8004ff0:	40013800 	.word	0x40013800

08004ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b089      	sub	sp, #36	@ 0x24
 8004ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffa:	240c      	movs	r4, #12
 8004ffc:	193b      	adds	r3, r7, r4
 8004ffe:	0018      	movs	r0, r3
 8005000:	2314      	movs	r3, #20
 8005002:	001a      	movs	r2, r3
 8005004:	2100      	movs	r1, #0
 8005006:	f005 f9bb 	bl	800a380 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800500a:	4b3e      	ldr	r3, [pc, #248]	@ (8005104 <MX_GPIO_Init+0x110>)
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <MX_GPIO_Init+0x110>)
 8005010:	2180      	movs	r1, #128	@ 0x80
 8005012:	0289      	lsls	r1, r1, #10
 8005014:	430a      	orrs	r2, r1
 8005016:	615a      	str	r2, [r3, #20]
 8005018:	4b3a      	ldr	r3, [pc, #232]	@ (8005104 <MX_GPIO_Init+0x110>)
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	029b      	lsls	r3, r3, #10
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005026:	4b37      	ldr	r3, [pc, #220]	@ (8005104 <MX_GPIO_Init+0x110>)
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	4b36      	ldr	r3, [pc, #216]	@ (8005104 <MX_GPIO_Init+0x110>)
 800502c:	2180      	movs	r1, #128	@ 0x80
 800502e:	02c9      	lsls	r1, r1, #11
 8005030:	430a      	orrs	r2, r1
 8005032:	615a      	str	r2, [r3, #20]
 8005034:	4b33      	ldr	r3, [pc, #204]	@ (8005104 <MX_GPIO_Init+0x110>)
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	02db      	lsls	r3, r3, #11
 800503c:	4013      	ands	r3, r2
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|B_TEMP_LED_Pin|SETTING_LED_Pin|LOAD_Pin
 8005042:	4931      	ldr	r1, [pc, #196]	@ (8005108 <MX_GPIO_Init+0x114>)
 8005044:	2390      	movs	r3, #144	@ 0x90
 8005046:	05db      	lsls	r3, r3, #23
 8005048:	2200      	movs	r2, #0
 800504a:	0018      	movs	r0, r3
 800504c:	f001 f921 	bl	8006292 <HAL_GPIO_WritePin>
                          |FLASH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_TEMP_LED_Pin|R_TEMP_LED_Pin|B_SPEED_LED_Pin|G_SPEED_LED_Pin
 8005050:	492e      	ldr	r1, [pc, #184]	@ (800510c <MX_GPIO_Init+0x118>)
 8005052:	4b2f      	ldr	r3, [pc, #188]	@ (8005110 <MX_GPIO_Init+0x11c>)
 8005054:	2200      	movs	r2, #0
 8005056:	0018      	movs	r0, r3
 8005058:	f001 f91b 	bl	8006292 <HAL_GPIO_WritePin>
                          |R_SPEED_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DS18B20_Pin B_TEMP_LED_Pin SETTING_LED_Pin LOAD_Pin
                           FLASH_CS_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin|B_TEMP_LED_Pin|SETTING_LED_Pin|LOAD_Pin
 800505c:	193b      	adds	r3, r7, r4
 800505e:	4a2a      	ldr	r2, [pc, #168]	@ (8005108 <MX_GPIO_Init+0x114>)
 8005060:	601a      	str	r2, [r3, #0]
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2201      	movs	r2, #1
 8005066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	193b      	adds	r3, r7, r4
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506e:	193b      	adds	r3, r7, r4
 8005070:	2200      	movs	r2, #0
 8005072:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005074:	193a      	adds	r2, r7, r4
 8005076:	2390      	movs	r3, #144	@ 0x90
 8005078:	05db      	lsls	r3, r3, #23
 800507a:	0011      	movs	r1, r2
 800507c:	0018      	movs	r0, r3
 800507e:	f000 ff7b 	bl	8005f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SENSOR_DIGITAL_Pin */
  GPIO_InitStruct.Pin = SPEED_SENSOR_DIGITAL_Pin;
 8005082:	193b      	adds	r3, r7, r4
 8005084:	2210      	movs	r2, #16
 8005086:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005088:	193b      	adds	r3, r7, r4
 800508a:	2284      	movs	r2, #132	@ 0x84
 800508c:	0392      	lsls	r2, r2, #14
 800508e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	193b      	adds	r3, r7, r4
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPEED_SENSOR_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 8005096:	193a      	adds	r2, r7, r4
 8005098:	2390      	movs	r3, #144	@ 0x90
 800509a:	05db      	lsls	r3, r3, #23
 800509c:	0011      	movs	r1, r2
 800509e:	0018      	movs	r0, r3
 80050a0:	f000 ff6a 	bl	8005f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_TEMP_LED_Pin R_TEMP_LED_Pin B_SPEED_LED_Pin G_SPEED_LED_Pin
                           R_SPEED_LED_Pin */
  GPIO_InitStruct.Pin = G_TEMP_LED_Pin|R_TEMP_LED_Pin|B_SPEED_LED_Pin|G_SPEED_LED_Pin
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	4a19      	ldr	r2, [pc, #100]	@ (800510c <MX_GPIO_Init+0x118>)
 80050a8:	601a      	str	r2, [r3, #0]
                          |R_SPEED_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	2201      	movs	r2, #1
 80050ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	2200      	movs	r2, #0
 80050ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050bc:	193b      	adds	r3, r7, r4
 80050be:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <MX_GPIO_Init+0x11c>)
 80050c0:	0019      	movs	r1, r3
 80050c2:	0010      	movs	r0, r2
 80050c4:	f000 ff58 	bl	8005f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_BUTTON_Pin MODE_BUTTON_Pin UP_BUTTON_Pin */
  GPIO_InitStruct.Pin = DOWN_BUTTON_Pin|MODE_BUTTON_Pin|UP_BUTTON_Pin;
 80050c8:	0021      	movs	r1, r4
 80050ca:	187b      	adds	r3, r7, r1
 80050cc:	22e0      	movs	r2, #224	@ 0xe0
 80050ce:	01d2      	lsls	r2, r2, #7
 80050d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	2288      	movs	r2, #136	@ 0x88
 80050d6:	0352      	lsls	r2, r2, #13
 80050d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	2200      	movs	r2, #0
 80050de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005110 <MX_GPIO_Init+0x11c>)
 80050e4:	0019      	movs	r1, r3
 80050e6:	0010      	movs	r0, r2
 80050e8:	f000 ff46 	bl	8005f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80050ec:	2200      	movs	r2, #0
 80050ee:	2100      	movs	r1, #0
 80050f0:	2007      	movs	r0, #7
 80050f2:	f000 fe91 	bl	8005e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80050f6:	2007      	movs	r0, #7
 80050f8:	f000 fea3 	bl	8005e42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b009      	add	sp, #36	@ 0x24
 8005102:	bd90      	pop	{r4, r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	00009184 	.word	0x00009184
 800510c:	00000c07 	.word	0x00000c07
 8005110:	48000400 	.word	0x48000400

08005114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005118:	b672      	cpsid	i
}
 800511a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800511c:	46c0      	nop			@ (mov r8, r8)
 800511e:	e7fd      	b.n	800511c <Error_Handler+0x8>

08005120 <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t capacity)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	701a      	strb	r2, [r3, #0]
	rb->buffer = mem_add;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	601a      	str	r2, [r3, #0]
	rb->capacity = capacity;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1dfa      	adds	r2, r7, #7
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 f804 	bl	800514c <ring_buffer_reset>
}
 8005144:	46c0      	nop			@ (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b004      	add	sp, #16
 800514a:	bd80      	pop	{r7, pc}

0800514c <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	719a      	strb	r2, [r3, #6]
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <ring_buffer_size>:
 * @brief Esta funcion calcula los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
uint8_t ring_buffer_size(ring_buffer_t *rb)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
	uint8_t size = 0;
 8005176:	200f      	movs	r0, #15
 8005178:	183b      	adds	r3, r7, r0
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
	if (rb->head >= rb->tail && rb->is_full == 0) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	791a      	ldrb	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	795b      	ldrb	r3, [r3, #5]
 8005186:	429a      	cmp	r2, r3
 8005188:	d30b      	bcc.n	80051a2 <ring_buffer_size+0x34>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	799b      	ldrb	r3, [r3, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <ring_buffer_size+0x34>
		size = rb->head - rb->tail;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	7919      	ldrb	r1, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	795a      	ldrb	r2, [r3, #5]
 800519a:	183b      	adds	r3, r7, r0
 800519c:	1a8a      	subs	r2, r1, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e00b      	b.n	80051ba <ring_buffer_size+0x4c>
	} else {
		size = (rb->capacity - rb->tail) + rb->head;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	79da      	ldrb	r2, [r3, #7]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	795b      	ldrb	r3, [r3, #5]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	b2d9      	uxtb	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	791a      	ldrb	r2, [r3, #4]
 80051b2:	230f      	movs	r3, #15
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	188a      	adds	r2, r1, r2
 80051b8:	701a      	strb	r2, [r3, #0]
	}
	return size;
 80051ba:	230f      	movs	r3, #15
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	781b      	ldrb	r3, [r3, #0]
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b004      	add	sp, #16
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <ring_buffer_is_empty>:
 * @brief Esta funcion revisa si el buffer esta vacio
 *
 * @retval 1 si esta vacio, 0 si no esta vacio
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *rb)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	return ((rb->head == rb->tail) && (rb->is_full == 0)) ? 1 : 0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	791a      	ldrb	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	795b      	ldrb	r3, [r3, #5]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d105      	bne.n	80051e8 <ring_buffer_is_empty+0x20>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	799b      	ldrb	r3, [r3, #6]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <ring_buffer_is_empty+0x20>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <ring_buffer_is_empty+0x22>
 80051e8:	2300      	movs	r3, #0
 80051ea:	b2db      	uxtb	r3, r3
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b002      	add	sp, #8
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	000a      	movs	r2, r1
 80051fe:	1cfb      	adds	r3, r7, #3
 8005200:	701a      	strb	r2, [r3, #0]
	rb->buffer[rb->head] = data;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	7912      	ldrb	r2, [r2, #4]
 800520a:	189b      	adds	r3, r3, r2
 800520c:	1cfa      	adds	r2, r7, #3
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	791b      	ldrb	r3, [r3, #4]
 8005216:	3301      	adds	r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	791a      	ldrb	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	79db      	ldrb	r3, [r3, #7]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <ring_buffer_write+0x3c>
	  rb->head = 0;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	799b      	ldrb	r3, [r3, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <ring_buffer_write+0x50>
	  rb->tail = rb->tail + 1;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	795b      	ldrb	r3, [r3, #5]
 800523c:	3301      	adds	r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	795a      	ldrb	r2, [r3, #5]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	79db      	ldrb	r3, [r3, #7]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <ring_buffer_write+0x62>
	  rb->tail = 0;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	791a      	ldrb	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	795b      	ldrb	r3, [r3, #5]
 800525e:	429a      	cmp	r2, r3
 8005260:	d102      	bne.n	8005268 <ring_buffer_write+0x74>
	  rb->is_full = 1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	719a      	strb	r2, [r3, #6]
	}
}
 8005268:	46c0      	nop			@ (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	b002      	add	sp, #8
 800526e:	bd80      	pop	{r7, pc}

08005270 <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb,uint8_t *byte) // 0x20
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	799b      	ldrb	r3, [r3, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <ring_buffer_read+0x1e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	791a      	ldrb	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	795b      	ldrb	r3, [r3, #5]
 800528a:	429a      	cmp	r2, r3
 800528c:	d01b      	beq.n	80052c6 <ring_buffer_read+0x56>
		*byte = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	7952      	ldrb	r2, [r2, #5]
 8005296:	189b      	adds	r3, r3, r2
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	795b      	ldrb	r3, [r3, #5]
 80052a2:	3301      	adds	r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	795a      	ldrb	r2, [r3, #5]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	79db      	ldrb	r3, [r3, #7]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <ring_buffer_read+0x4c>
			rb->tail = 0;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <HAL_MspInit+0x44>)
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	4b0e      	ldr	r3, [pc, #56]	@ (8005314 <HAL_MspInit+0x44>)
 80052dc:	2101      	movs	r1, #1
 80052de:	430a      	orrs	r2, r1
 80052e0:	619a      	str	r2, [r3, #24]
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_MspInit+0x44>)
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2201      	movs	r2, #1
 80052e8:	4013      	ands	r3, r2
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_MspInit+0x44>)
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_MspInit+0x44>)
 80052f4:	2180      	movs	r1, #128	@ 0x80
 80052f6:	0549      	lsls	r1, r1, #21
 80052f8:	430a      	orrs	r2, r1
 80052fa:	61da      	str	r2, [r3, #28]
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_MspInit+0x44>)
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	055b      	lsls	r3, r3, #21
 8005304:	4013      	ands	r3, r2
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800530a:	46c0      	nop			@ (mov r8, r8)
 800530c:	46bd      	mov	sp, r7
 800530e:	b002      	add	sp, #8
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	40021000 	.word	0x40021000

08005318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b08b      	sub	sp, #44	@ 0x2c
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	2414      	movs	r4, #20
 8005322:	193b      	adds	r3, r7, r4
 8005324:	0018      	movs	r0, r3
 8005326:	2314      	movs	r3, #20
 8005328:	001a      	movs	r2, r3
 800532a:	2100      	movs	r1, #0
 800532c:	f005 f828 	bl	800a380 <memset>
  if(hadc->Instance==ADC1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a19      	ldr	r2, [pc, #100]	@ (800539c <HAL_ADC_MspInit+0x84>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d12b      	bne.n	8005392 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800533a:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_ADC_MspInit+0x88>)
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	4b18      	ldr	r3, [pc, #96]	@ (80053a0 <HAL_ADC_MspInit+0x88>)
 8005340:	2180      	movs	r1, #128	@ 0x80
 8005342:	0089      	lsls	r1, r1, #2
 8005344:	430a      	orrs	r2, r1
 8005346:	619a      	str	r2, [r3, #24]
 8005348:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <HAL_ADC_MspInit+0x88>)
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4013      	ands	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005356:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <HAL_ADC_MspInit+0x88>)
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <HAL_ADC_MspInit+0x88>)
 800535c:	2180      	movs	r1, #128	@ 0x80
 800535e:	0289      	lsls	r1, r1, #10
 8005360:	430a      	orrs	r2, r1
 8005362:	615a      	str	r2, [r3, #20]
 8005364:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <HAL_ADC_MspInit+0x88>)
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	029b      	lsls	r3, r3, #10
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = SPEED_SENSOR_ANALOG_Pin;
 8005372:	193b      	adds	r3, r7, r4
 8005374:	2208      	movs	r2, #8
 8005376:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005378:	193b      	adds	r3, r7, r4
 800537a:	2203      	movs	r2, #3
 800537c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537e:	193b      	adds	r3, r7, r4
 8005380:	2200      	movs	r2, #0
 8005382:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SPEED_SENSOR_ANALOG_GPIO_Port, &GPIO_InitStruct);
 8005384:	193a      	adds	r2, r7, r4
 8005386:	2390      	movs	r3, #144	@ 0x90
 8005388:	05db      	lsls	r3, r3, #23
 800538a:	0011      	movs	r1, r2
 800538c:	0018      	movs	r0, r3
 800538e:	f000 fdf3 	bl	8005f78 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b00b      	add	sp, #44	@ 0x2c
 8005398:	bd90      	pop	{r4, r7, pc}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	40012400 	.word	0x40012400
 80053a0:	40021000 	.word	0x40021000

080053a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b08b      	sub	sp, #44	@ 0x2c
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ac:	2414      	movs	r4, #20
 80053ae:	193b      	adds	r3, r7, r4
 80053b0:	0018      	movs	r0, r3
 80053b2:	2314      	movs	r3, #20
 80053b4:	001a      	movs	r2, r3
 80053b6:	2100      	movs	r1, #0
 80053b8:	f004 ffe2 	bl	800a380 <memset>
  if(hspi->Instance==SPI1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_SPI_MspInit+0x90>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d131      	bne.n	800542a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005438 <HAL_SPI_MspInit+0x94>)
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <HAL_SPI_MspInit+0x94>)
 80053cc:	2180      	movs	r1, #128	@ 0x80
 80053ce:	0149      	lsls	r1, r1, #5
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]
 80053d4:	4b18      	ldr	r3, [pc, #96]	@ (8005438 <HAL_SPI_MspInit+0x94>)
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	2380      	movs	r3, #128	@ 0x80
 80053da:	015b      	lsls	r3, r3, #5
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e2:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <HAL_SPI_MspInit+0x94>)
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <HAL_SPI_MspInit+0x94>)
 80053e8:	2180      	movs	r1, #128	@ 0x80
 80053ea:	02c9      	lsls	r1, r1, #11
 80053ec:	430a      	orrs	r2, r1
 80053ee:	615a      	str	r2, [r3, #20]
 80053f0:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <HAL_SPI_MspInit+0x94>)
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	02db      	lsls	r3, r3, #11
 80053f8:	4013      	ands	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 80053fe:	0021      	movs	r1, r4
 8005400:	187b      	adds	r3, r7, r1
 8005402:	2238      	movs	r2, #56	@ 0x38
 8005404:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005406:	187b      	adds	r3, r7, r1
 8005408:	2202      	movs	r2, #2
 800540a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	187b      	adds	r3, r7, r1
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005412:	187b      	adds	r3, r7, r1
 8005414:	2203      	movs	r2, #3
 8005416:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005418:	187b      	adds	r3, r7, r1
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541e:	187b      	adds	r3, r7, r1
 8005420:	4a06      	ldr	r2, [pc, #24]	@ (800543c <HAL_SPI_MspInit+0x98>)
 8005422:	0019      	movs	r1, r3
 8005424:	0010      	movs	r0, r2
 8005426:	f000 fda7 	bl	8005f78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b00b      	add	sp, #44	@ 0x2c
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	40013000 	.word	0x40013000
 8005438:	40021000 	.word	0x40021000
 800543c:	48000400 	.word	0x48000400

08005440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a09      	ldr	r2, [pc, #36]	@ (8005474 <HAL_TIM_Base_MspInit+0x34>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10b      	bne.n	800546a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005452:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <HAL_TIM_Base_MspInit+0x38>)
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	4b08      	ldr	r3, [pc, #32]	@ (8005478 <HAL_TIM_Base_MspInit+0x38>)
 8005458:	2102      	movs	r1, #2
 800545a:	430a      	orrs	r2, r1
 800545c:	61da      	str	r2, [r3, #28]
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_TIM_Base_MspInit+0x38>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2202      	movs	r2, #2
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	40000400 	.word	0x40000400
 8005478:	40021000 	.word	0x40021000

0800547c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b08b      	sub	sp, #44	@ 0x2c
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005484:	2414      	movs	r4, #20
 8005486:	193b      	adds	r3, r7, r4
 8005488:	0018      	movs	r0, r3
 800548a:	2314      	movs	r3, #20
 800548c:	001a      	movs	r2, r3
 800548e:	2100      	movs	r1, #0
 8005490:	f004 ff76 	bl	800a380 <memset>
  if(huart->Instance==USART1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a20      	ldr	r2, [pc, #128]	@ (800551c <HAL_UART_MspInit+0xa0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d139      	bne.n	8005512 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800549e:	4b20      	ldr	r3, [pc, #128]	@ (8005520 <HAL_UART_MspInit+0xa4>)
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005520 <HAL_UART_MspInit+0xa4>)
 80054a4:	2180      	movs	r1, #128	@ 0x80
 80054a6:	01c9      	lsls	r1, r1, #7
 80054a8:	430a      	orrs	r2, r1
 80054aa:	619a      	str	r2, [r3, #24]
 80054ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005520 <HAL_UART_MspInit+0xa4>)
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ba:	4b19      	ldr	r3, [pc, #100]	@ (8005520 <HAL_UART_MspInit+0xa4>)
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	4b18      	ldr	r3, [pc, #96]	@ (8005520 <HAL_UART_MspInit+0xa4>)
 80054c0:	2180      	movs	r1, #128	@ 0x80
 80054c2:	02c9      	lsls	r1, r1, #11
 80054c4:	430a      	orrs	r2, r1
 80054c6:	615a      	str	r2, [r3, #20]
 80054c8:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <HAL_UART_MspInit+0xa4>)
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	02db      	lsls	r3, r3, #11
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80054d6:	0021      	movs	r1, r4
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	22c0      	movs	r2, #192	@ 0xc0
 80054dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054de:	187b      	adds	r3, r7, r1
 80054e0:	2202      	movs	r2, #2
 80054e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	187b      	adds	r3, r7, r1
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054ea:	187b      	adds	r3, r7, r1
 80054ec:	2203      	movs	r2, #3
 80054ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <HAL_UART_MspInit+0xa8>)
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f000 fd3b 	bl	8005f78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	201b      	movs	r0, #27
 8005508:	f000 fc86 	bl	8005e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800550c:	201b      	movs	r0, #27
 800550e:	f000 fc98 	bl	8005e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b00b      	add	sp, #44	@ 0x2c
 8005518:	bd90      	pop	{r4, r7, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	40013800 	.word	0x40013800
 8005520:	40021000 	.word	0x40021000
 8005524:	48000400 	.word	0x48000400

08005528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800552c:	46c0      	nop			@ (mov r8, r8)
 800552e:	e7fd      	b.n	800552c <NMI_Handler+0x4>

08005530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005534:	46c0      	nop			@ (mov r8, r8)
 8005536:	e7fd      	b.n	8005534 <HardFault_Handler+0x4>

08005538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800553c:	46c0      	nop			@ (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005550:	f000 f940 	bl	80057d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005554:	46c0      	nop			@ (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_SENSOR_DIGITAL_Pin);
 800555e:	2010      	movs	r0, #16
 8005560:	f000 fed0 	bl	8006304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUTTON_Pin);
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	015b      	lsls	r3, r3, #5
 8005568:	0018      	movs	r0, r3
 800556a:	f000 fecb 	bl	8006304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MODE_BUTTON_Pin);
 800556e:	2380      	movs	r3, #128	@ 0x80
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	0018      	movs	r0, r3
 8005574:	f000 fec6 	bl	8006304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_BUTTON_Pin);
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	01db      	lsls	r3, r3, #7
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fec1 	bl	8006304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005582:	46c0      	nop			@ (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800558c:	4b03      	ldr	r3, [pc, #12]	@ (800559c <USART1_IRQHandler+0x14>)
 800558e:	0018      	movs	r0, r3
 8005590:	f002 ff50 	bl	8008434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005594:	46c0      	nop			@ (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			@ (mov r8, r8)
 800559c:	20000478 	.word	0x20000478

080055a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  return 1;
 80055a4:	2301      	movs	r3, #1
}
 80055a6:	0018      	movs	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <_kill>:

int _kill(int pid, int sig)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80055b6:	f004 ff51 	bl	800a45c <__errno>
 80055ba:	0003      	movs	r3, r0
 80055bc:	2216      	movs	r2, #22
 80055be:	601a      	str	r2, [r3, #0]
  return -1;
 80055c0:	2301      	movs	r3, #1
 80055c2:	425b      	negs	r3, r3
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_exit>:

void _exit (int status)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055d4:	2301      	movs	r3, #1
 80055d6:	425a      	negs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff ffe5 	bl	80055ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	e7fd      	b.n	80055e2 <_exit+0x16>

080055e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e00a      	b.n	800560e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055f8:	e000      	b.n	80055fc <_read+0x16>
 80055fa:	bf00      	nop
 80055fc:	0001      	movs	r1, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	60ba      	str	r2, [r7, #8]
 8005604:	b2ca      	uxtb	r2, r1
 8005606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	3301      	adds	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	dbf0      	blt.n	80055f8 <_read+0x12>
  }

  return len;
 8005616:	687b      	ldr	r3, [r7, #4]
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	b006      	add	sp, #24
 800561e:	bd80      	pop	{r7, pc}

08005620 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005628:	2301      	movs	r3, #1
 800562a:	425b      	negs	r3, r3
}
 800562c:	0018      	movs	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2280      	movs	r2, #128	@ 0x80
 8005642:	0192      	lsls	r2, r2, #6
 8005644:	605a      	str	r2, [r3, #4]
  return 0;
 8005646:	2300      	movs	r3, #0
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <_isatty>:

int _isatty(int file)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005658:	2301      	movs	r3, #1
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b002      	add	sp, #8
 8005660:	bd80      	pop	{r7, pc}

08005662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800566e:	2300      	movs	r3, #0
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b004      	add	sp, #16
 8005676:	bd80      	pop	{r7, pc}

08005678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005680:	4a14      	ldr	r2, [pc, #80]	@ (80056d4 <_sbrk+0x5c>)
 8005682:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <_sbrk+0x60>)
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800568c:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <_sbrk+0x64>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005694:	4b11      	ldr	r3, [pc, #68]	@ (80056dc <_sbrk+0x64>)
 8005696:	4a12      	ldr	r2, [pc, #72]	@ (80056e0 <_sbrk+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800569a:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <_sbrk+0x64>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	18d3      	adds	r3, r2, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d207      	bcs.n	80056b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056a8:	f004 fed8 	bl	800a45c <__errno>
 80056ac:	0003      	movs	r3, r0
 80056ae:	220c      	movs	r2, #12
 80056b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	425b      	negs	r3, r3
 80056b6:	e009      	b.n	80056cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056b8:	4b08      	ldr	r3, [pc, #32]	@ (80056dc <_sbrk+0x64>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056be:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <_sbrk+0x64>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	18d2      	adds	r2, r2, r3
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <_sbrk+0x64>)
 80056c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	0018      	movs	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b006      	add	sp, #24
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20002000 	.word	0x20002000
 80056d8:	00000400 	.word	0x00000400
 80056dc:	20000698 	.word	0x20000698
 80056e0:	200007f0 	.word	0x200007f0

080056e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80056e8:	46c0      	nop			@ (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056f0:	480d      	ldr	r0, [pc, #52]	@ (8005728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80056f4:	f7ff fff6 	bl	80056e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056f8:	480c      	ldr	r0, [pc, #48]	@ (800572c <LoopForever+0x6>)
  ldr r1, =_edata
 80056fa:	490d      	ldr	r1, [pc, #52]	@ (8005730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <LoopForever+0xe>)
  movs r3, #0
 80056fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005700:	e002      	b.n	8005708 <LoopCopyDataInit>

08005702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005706:	3304      	adds	r3, #4

08005708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800570a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800570c:	d3f9      	bcc.n	8005702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800570e:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005710:	4c0a      	ldr	r4, [pc, #40]	@ (800573c <LoopForever+0x16>)
  movs r3, #0
 8005712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005714:	e001      	b.n	800571a <LoopFillZerobss>

08005716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005718:	3204      	adds	r2, #4

0800571a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800571a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800571c:	d3fb      	bcc.n	8005716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800571e:	f004 fea3 	bl	800a468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005722:	f7ff f851 	bl	80047c8 <main>

08005726 <LoopForever>:

LoopForever:
    b LoopForever
 8005726:	e7fe      	b.n	8005726 <LoopForever>
  ldr   r0, =_estack
 8005728:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800572c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005730:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005734:	0800db68 	.word	0x0800db68
  ldr r2, =_sbss
 8005738:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800573c:	200007ec 	.word	0x200007ec

08005740 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005740:	e7fe      	b.n	8005740 <ADC1_IRQHandler>
	...

08005744 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005748:	4b07      	ldr	r3, [pc, #28]	@ (8005768 <HAL_Init+0x24>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_Init+0x24>)
 800574e:	2110      	movs	r1, #16
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005754:	2003      	movs	r0, #3
 8005756:	f000 f809 	bl	800576c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800575a:	f7ff fdb9 	bl	80052d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	40022000 	.word	0x40022000

0800576c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005774:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <HAL_InitTick+0x5c>)
 8005776:	681c      	ldr	r4, [r3, #0]
 8005778:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <HAL_InitTick+0x60>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	0019      	movs	r1, r3
 800577e:	23fa      	movs	r3, #250	@ 0xfa
 8005780:	0098      	lsls	r0, r3, #2
 8005782:	f7fa fce7 	bl	8000154 <__udivsi3>
 8005786:	0003      	movs	r3, r0
 8005788:	0019      	movs	r1, r3
 800578a:	0020      	movs	r0, r4
 800578c:	f7fa fce2 	bl	8000154 <__udivsi3>
 8005790:	0003      	movs	r3, r0
 8005792:	0018      	movs	r0, r3
 8005794:	f000 fb65 	bl	8005e62 <HAL_SYSTICK_Config>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d001      	beq.n	80057a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e00f      	b.n	80057c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d80b      	bhi.n	80057be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	2301      	movs	r3, #1
 80057aa:	425b      	negs	r3, r3
 80057ac:	2200      	movs	r2, #0
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 fb32 	bl	8005e18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057b4:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <HAL_InitTick+0x64>)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e000      	b.n	80057c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b003      	add	sp, #12
 80057c6:	bd90      	pop	{r4, r7, pc}
 80057c8:	20000000 	.word	0x20000000
 80057cc:	20000008 	.word	0x20000008
 80057d0:	20000004 	.word	0x20000004

080057d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057d8:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <HAL_IncTick+0x1c>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	001a      	movs	r2, r3
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <HAL_IncTick+0x20>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	18d2      	adds	r2, r2, r3
 80057e4:	4b03      	ldr	r3, [pc, #12]	@ (80057f4 <HAL_IncTick+0x20>)
 80057e6:	601a      	str	r2, [r3, #0]
}
 80057e8:	46c0      	nop			@ (mov r8, r8)
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	20000008 	.word	0x20000008
 80057f4:	2000069c 	.word	0x2000069c

080057f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  return uwTick;
 80057fc:	4b02      	ldr	r3, [pc, #8]	@ (8005808 <HAL_GetTick+0x10>)
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	2000069c 	.word	0x2000069c

0800580c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005814:	f7ff fff0 	bl	80057f8 <HAL_GetTick>
 8005818:	0003      	movs	r3, r0
 800581a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	d005      	beq.n	8005832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005826:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <HAL_Delay+0x44>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	001a      	movs	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	189b      	adds	r3, r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	f7ff ffe0 	bl	80057f8 <HAL_GetTick>
 8005838:	0002      	movs	r2, r0
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	429a      	cmp	r2, r3
 8005842:	d8f7      	bhi.n	8005834 <HAL_Delay+0x28>
  {
  }
}
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	46c0      	nop			@ (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b004      	add	sp, #16
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	20000008 	.word	0x20000008

08005854 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800585c:	230f      	movs	r3, #15
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e125      	b.n	8005abe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2234      	movs	r2, #52	@ 0x34
 8005884:	2100      	movs	r1, #0
 8005886:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f7ff fd44 	bl	8005318 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	2210      	movs	r2, #16
 8005896:	4013      	ands	r3, r2
 8005898:	d000      	beq.n	800589c <HAL_ADC_Init+0x48>
 800589a:	e103      	b.n	8005aa4 <HAL_ADC_Init+0x250>
 800589c:	230f      	movs	r3, #15
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d000      	beq.n	80058a8 <HAL_ADC_Init+0x54>
 80058a6:	e0fd      	b.n	8005aa4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2204      	movs	r2, #4
 80058b0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80058b2:	d000      	beq.n	80058b6 <HAL_ADC_Init+0x62>
 80058b4:	e0f6      	b.n	8005aa4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	4a83      	ldr	r2, [pc, #524]	@ (8005ac8 <HAL_ADC_Init+0x274>)
 80058bc:	4013      	ands	r3, r2
 80058be:	2202      	movs	r2, #2
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2203      	movs	r2, #3
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d112      	bne.n	80058fa <HAL_ADC_Init+0xa6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2201      	movs	r2, #1
 80058dc:	4013      	ands	r3, r2
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d009      	beq.n	80058f6 <HAL_ADC_Init+0xa2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	401a      	ands	r2, r3
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d101      	bne.n	80058fa <HAL_ADC_Init+0xa6>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_ADC_Init+0xa8>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2218      	movs	r2, #24
 8005908:	4393      	bics	r3, r2
 800590a:	0019      	movs	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	0899      	lsrs	r1, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4964      	ldr	r1, [pc, #400]	@ (8005acc <HAL_ADC_Init+0x278>)
 800593a:	400a      	ands	r2, r1
 800593c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7e1b      	ldrb	r3, [r3, #24]
 8005942:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7e5b      	ldrb	r3, [r3, #25]
 8005948:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800594a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7e9b      	ldrb	r3, [r3, #26]
 8005950:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005952:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	2b01      	cmp	r3, #1
 800595a:	d002      	beq.n	8005962 <HAL_ADC_Init+0x10e>
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	015b      	lsls	r3, r3, #5
 8005960:	e000      	b.n	8005964 <HAL_ADC_Init+0x110>
 8005962:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005964:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800596a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d101      	bne.n	8005978 <HAL_ADC_Init+0x124>
 8005974:	2304      	movs	r3, #4
 8005976:	e000      	b.n	800597a <HAL_ADC_Init+0x126>
 8005978:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800597a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2124      	movs	r1, #36	@ 0x24
 8005980:	5c5b      	ldrb	r3, [r3, r1]
 8005982:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005984:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7edb      	ldrb	r3, [r3, #27]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d115      	bne.n	80059c0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	7e9b      	ldrb	r3, [r3, #26]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2280      	movs	r2, #128	@ 0x80
 80059a0:	0252      	lsls	r2, r2, #9
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	e00b      	b.n	80059c0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ac:	2220      	movs	r2, #32
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	2201      	movs	r2, #1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	23c2      	movs	r3, #194	@ 0xc2
 80059c6:	33ff      	adds	r3, #255	@ 0xff
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d007      	beq.n	80059dc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80059d4:	4313      	orrs	r3, r2
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	055b      	lsls	r3, r3, #21
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d01b      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d017      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d013      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d00f      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d00b      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	2b05      	cmp	r3, #5
 8005a1e:	d007      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d003      	beq.n	8005a30 <HAL_ADC_Init+0x1dc>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	2b07      	cmp	r3, #7
 8005a2e:	d112      	bne.n	8005a56 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2107      	movs	r1, #7
 8005a3c:	438a      	bics	r2, r1
 8005a3e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6959      	ldr	r1, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	2207      	movs	r2, #7
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <HAL_ADC_Init+0x27c>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10b      	bne.n	8005a7e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a70:	2203      	movs	r2, #3
 8005a72:	4393      	bics	r3, r2
 8005a74:	2201      	movs	r2, #1
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005a7c:	e01c      	b.n	8005ab8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	2212      	movs	r2, #18
 8005a84:	4393      	bics	r3, r2
 8005a86:	2210      	movs	r2, #16
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a92:	2201      	movs	r2, #1
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005a9a:	230f      	movs	r3, #15
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005aa2:	e009      	b.n	8005ab8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005ab0:	230f      	movs	r3, #15
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ab8:	230f      	movs	r3, #15
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	781b      	ldrb	r3, [r3, #0]
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b004      	add	sp, #16
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	fffffefd 	.word	0xfffffefd
 8005acc:	fffe0219 	.word	0xfffe0219
 8005ad0:	833fffe7 	.word	0x833fffe7

08005ad4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ade:	230f      	movs	r3, #15
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	055b      	lsls	r3, r3, #21
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d011      	beq.n	8005b1a <HAL_ADC_ConfigChannel+0x46>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d00d      	beq.n	8005b1a <HAL_ADC_ConfigChannel+0x46>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d009      	beq.n	8005b1a <HAL_ADC_ConfigChannel+0x46>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d005      	beq.n	8005b1a <HAL_ADC_ConfigChannel+0x46>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d001      	beq.n	8005b1a <HAL_ADC_ConfigChannel+0x46>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2234      	movs	r2, #52	@ 0x34
 8005b1e:	5c9b      	ldrb	r3, [r3, r2]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x54>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e0bb      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x1cc>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2234      	movs	r2, #52	@ 0x34
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2204      	movs	r2, #4
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d000      	beq.n	8005b3e <HAL_ADC_ConfigChannel+0x6a>
 8005b3c:	e09f      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4a59      	ldr	r2, [pc, #356]	@ (8005ca8 <HAL_ADC_ConfigChannel+0x1d4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <HAL_ADC_ConfigChannel+0x76>
 8005b48:	e077      	b.n	8005c3a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2201      	movs	r2, #1
 8005b56:	409a      	lsls	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b64:	2380      	movs	r3, #128	@ 0x80
 8005b66:	055b      	lsls	r3, r3, #21
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d037      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d033      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d02f      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d02b      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d027      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	d023      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d01f      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	2b07      	cmp	r3, #7
 8005ba2:	d01b      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	2107      	movs	r1, #7
 8005bb0:	400b      	ands	r3, r1
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d012      	beq.n	8005bdc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2107      	movs	r1, #7
 8005bc2:	438a      	bics	r2, r1
 8005bc4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6959      	ldr	r1, [r3, #20]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	401a      	ands	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d003      	beq.n	8005bec <HAL_ADC_ConfigChannel+0x118>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b11      	cmp	r3, #17
 8005bea:	d152      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005bec:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <HAL_ADC_ConfigChannel+0x1d8>)
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d102      	bne.n	8005bfe <HAL_ADC_ConfigChannel+0x12a>
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	e001      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x12e>
 8005bfe:	2380      	movs	r3, #128	@ 0x80
 8005c00:	03db      	lsls	r3, r3, #15
 8005c02:	4a2a      	ldr	r2, [pc, #168]	@ (8005cac <HAL_ADC_ConfigChannel+0x1d8>)
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d140      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c10:	4b27      	ldr	r3, [pc, #156]	@ (8005cb0 <HAL_ADC_ConfigChannel+0x1dc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4927      	ldr	r1, [pc, #156]	@ (8005cb4 <HAL_ADC_ConfigChannel+0x1e0>)
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7fa fa9c 	bl	8000154 <__udivsi3>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	001a      	movs	r2, r3
 8005c20:	0013      	movs	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	189b      	adds	r3, r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c2a:	e002      	b.n	8005c32 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f9      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x158>
 8005c38:	e02b      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	4099      	lsls	r1, r3
 8005c48:	000b      	movs	r3, r1
 8005c4a:	43d9      	mvns	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	400a      	ands	r2, r1
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d003      	beq.n	8005c64 <HAL_ADC_ConfigChannel+0x190>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b11      	cmp	r3, #17
 8005c62:	d116      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005c64:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <HAL_ADC_ConfigChannel+0x1d8>)
 8005c66:	6819      	ldr	r1, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d101      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x1a0>
 8005c70:	4a11      	ldr	r2, [pc, #68]	@ (8005cb8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005c72:	e000      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x1a2>
 8005c74:	4a11      	ldr	r2, [pc, #68]	@ (8005cbc <HAL_ADC_ConfigChannel+0x1e8>)
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_ADC_ConfigChannel+0x1d8>)
 8005c78:	400a      	ands	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e009      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	2220      	movs	r2, #32
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005c8a:	230f      	movs	r3, #15
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2234      	movs	r2, #52	@ 0x34
 8005c96:	2100      	movs	r1, #0
 8005c98:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005c9a:	230f      	movs	r3, #15
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b004      	add	sp, #16
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	00001001 	.word	0x00001001
 8005cac:	40012708 	.word	0x40012708
 8005cb0:	20000000 	.word	0x20000000
 8005cb4:	000f4240 	.word	0x000f4240
 8005cb8:	ff7fffff 	.word	0xff7fffff
 8005cbc:	ffbfffff 	.word	0xffbfffff

08005cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	0002      	movs	r2, r0
 8005cc8:	1dfb      	adds	r3, r7, #7
 8005cca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005ccc:	1dfb      	adds	r3, r7, #7
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cd2:	d809      	bhi.n	8005ce8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cd4:	1dfb      	adds	r3, r7, #7
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	001a      	movs	r2, r3
 8005cda:	231f      	movs	r3, #31
 8005cdc:	401a      	ands	r2, r3
 8005cde:	4b04      	ldr	r3, [pc, #16]	@ (8005cf0 <__NVIC_EnableIRQ+0x30>)
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4091      	lsls	r1, r2
 8005ce4:	000a      	movs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
  }
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	e000e100 	.word	0xe000e100

08005cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	0002      	movs	r2, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	1dfb      	adds	r3, r7, #7
 8005d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d02:	1dfb      	adds	r3, r7, #7
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d08:	d828      	bhi.n	8005d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc8 <__NVIC_SetPriority+0xd4>)
 8005d0c:	1dfb      	adds	r3, r7, #7
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b25b      	sxtb	r3, r3
 8005d12:	089b      	lsrs	r3, r3, #2
 8005d14:	33c0      	adds	r3, #192	@ 0xc0
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	589b      	ldr	r3, [r3, r2]
 8005d1a:	1dfa      	adds	r2, r7, #7
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	0011      	movs	r1, r2
 8005d20:	2203      	movs	r2, #3
 8005d22:	400a      	ands	r2, r1
 8005d24:	00d2      	lsls	r2, r2, #3
 8005d26:	21ff      	movs	r1, #255	@ 0xff
 8005d28:	4091      	lsls	r1, r2
 8005d2a:	000a      	movs	r2, r1
 8005d2c:	43d2      	mvns	r2, r2
 8005d2e:	401a      	ands	r2, r3
 8005d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	22ff      	movs	r2, #255	@ 0xff
 8005d38:	401a      	ands	r2, r3
 8005d3a:	1dfb      	adds	r3, r7, #7
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	0018      	movs	r0, r3
 8005d40:	2303      	movs	r3, #3
 8005d42:	4003      	ands	r3, r0
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d48:	481f      	ldr	r0, [pc, #124]	@ (8005dc8 <__NVIC_SetPriority+0xd4>)
 8005d4a:	1dfb      	adds	r3, r7, #7
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	430a      	orrs	r2, r1
 8005d54:	33c0      	adds	r3, #192	@ 0xc0
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005d5a:	e031      	b.n	8005dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dcc <__NVIC_SetPriority+0xd8>)
 8005d5e:	1dfb      	adds	r3, r7, #7
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	0019      	movs	r1, r3
 8005d64:	230f      	movs	r3, #15
 8005d66:	400b      	ands	r3, r1
 8005d68:	3b08      	subs	r3, #8
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	3306      	adds	r3, #6
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	18d3      	adds	r3, r2, r3
 8005d72:	3304      	adds	r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	1dfa      	adds	r2, r7, #7
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	400a      	ands	r2, r1
 8005d80:	00d2      	lsls	r2, r2, #3
 8005d82:	21ff      	movs	r1, #255	@ 0xff
 8005d84:	4091      	lsls	r1, r2
 8005d86:	000a      	movs	r2, r1
 8005d88:	43d2      	mvns	r2, r2
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	019b      	lsls	r3, r3, #6
 8005d92:	22ff      	movs	r2, #255	@ 0xff
 8005d94:	401a      	ands	r2, r3
 8005d96:	1dfb      	adds	r3, r7, #7
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	4003      	ands	r3, r0
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005da4:	4809      	ldr	r0, [pc, #36]	@ (8005dcc <__NVIC_SetPriority+0xd8>)
 8005da6:	1dfb      	adds	r3, r7, #7
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	001c      	movs	r4, r3
 8005dac:	230f      	movs	r3, #15
 8005dae:	4023      	ands	r3, r4
 8005db0:	3b08      	subs	r3, #8
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	430a      	orrs	r2, r1
 8005db6:	3306      	adds	r3, #6
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	18c3      	adds	r3, r0, r3
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	601a      	str	r2, [r3, #0]
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bd90      	pop	{r4, r7, pc}
 8005dc8:	e000e100 	.word	0xe000e100
 8005dcc:	e000ed00 	.word	0xe000ed00

08005dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1e5a      	subs	r2, r3, #1
 8005ddc:	2380      	movs	r3, #128	@ 0x80
 8005dde:	045b      	lsls	r3, r3, #17
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d301      	bcc.n	8005de8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005de4:	2301      	movs	r3, #1
 8005de6:	e010      	b.n	8005e0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005de8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e14 <SysTick_Config+0x44>)
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	3a01      	subs	r2, #1
 8005dee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005df0:	2301      	movs	r3, #1
 8005df2:	425b      	negs	r3, r3
 8005df4:	2103      	movs	r1, #3
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7ff ff7c 	bl	8005cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dfc:	4b05      	ldr	r3, [pc, #20]	@ (8005e14 <SysTick_Config+0x44>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e02:	4b04      	ldr	r3, [pc, #16]	@ (8005e14 <SysTick_Config+0x44>)
 8005e04:	2207      	movs	r2, #7
 8005e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b002      	add	sp, #8
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	e000e010 	.word	0xe000e010

08005e18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	210f      	movs	r1, #15
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	1c02      	adds	r2, r0, #0
 8005e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	0011      	movs	r1, r2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7ff ff5d 	bl	8005cf4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b004      	add	sp, #16
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	0002      	movs	r2, r0
 8005e4a:	1dfb      	adds	r3, r7, #7
 8005e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e4e:	1dfb      	adds	r3, r7, #7
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	b25b      	sxtb	r3, r3
 8005e54:	0018      	movs	r0, r3
 8005e56:	f7ff ff33 	bl	8005cc0 <__NVIC_EnableIRQ>
}
 8005e5a:	46c0      	nop			@ (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7ff ffaf 	bl	8005dd0 <SysTick_Config>
 8005e72:	0003      	movs	r3, r0
}
 8005e74:	0018      	movs	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2221      	movs	r2, #33	@ 0x21
 8005e88:	5c9b      	ldrb	r3, [r3, r2]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d008      	beq.n	8005ea2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2204      	movs	r2, #4
 8005e94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e020      	b.n	8005ee4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	210e      	movs	r1, #14
 8005eae:	438a      	bics	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4091      	lsls	r1, r2
 8005ece:	000a      	movs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2221      	movs	r2, #33	@ 0x21
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	2100      	movs	r1, #0
 8005ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b002      	add	sp, #8
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	210f      	movs	r1, #15
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2221      	movs	r2, #33	@ 0x21
 8005f00:	5c9b      	ldrb	r3, [r3, r2]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d006      	beq.n	8005f16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8005f0e:	187b      	adds	r3, r7, r1
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e028      	b.n	8005f68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	210e      	movs	r1, #14
 8005f22:	438a      	bics	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2101      	movs	r1, #1
 8005f32:	438a      	bics	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4091      	lsls	r1, r2
 8005f42:	000a      	movs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2221      	movs	r2, #33	@ 0x21
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	2100      	movs	r1, #0
 8005f54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	0010      	movs	r0, r2
 8005f66:	4798      	blx	r3
    }
  }
  return status;
 8005f68:	230f      	movs	r3, #15
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	781b      	ldrb	r3, [r3, #0]
}
 8005f6e:	0018      	movs	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b004      	add	sp, #16
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f86:	e14f      	b.n	8006228 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4091      	lsls	r1, r2
 8005f92:	000a      	movs	r2, r1
 8005f94:	4013      	ands	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d100      	bne.n	8005fa0 <HAL_GPIO_Init+0x28>
 8005f9e:	e140      	b.n	8006222 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d005      	beq.n	8005fb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d130      	bne.n	800601a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	0013      	movs	r3, r2
 8005fc8:	43da      	mvns	r2, r3
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	0013      	movs	r3, r2
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fee:	2201      	movs	r2, #1
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	0013      	movs	r3, r2
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	2201      	movs	r2, #1
 8006006:	401a      	ands	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	409a      	lsls	r2, r3
 800600c:	0013      	movs	r3, r2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2203      	movs	r2, #3
 8006020:	4013      	ands	r3, r2
 8006022:	2b03      	cmp	r3, #3
 8006024:	d017      	beq.n	8006056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	2203      	movs	r2, #3
 8006032:	409a      	lsls	r2, r3
 8006034:	0013      	movs	r3, r2
 8006036:	43da      	mvns	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4013      	ands	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	409a      	lsls	r2, r3
 8006048:	0013      	movs	r3, r2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2203      	movs	r2, #3
 800605c:	4013      	ands	r3, r2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d123      	bne.n	80060aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	08da      	lsrs	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3208      	adds	r2, #8
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	58d3      	ldr	r3, [r2, r3]
 800606e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2207      	movs	r2, #7
 8006074:	4013      	ands	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	220f      	movs	r2, #15
 800607a:	409a      	lsls	r2, r3
 800607c:	0013      	movs	r3, r2
 800607e:	43da      	mvns	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4013      	ands	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2107      	movs	r1, #7
 800608e:	400b      	ands	r3, r1
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	409a      	lsls	r2, r3
 8006094:	0013      	movs	r3, r2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	08da      	lsrs	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3208      	adds	r2, #8
 80060a4:	0092      	lsls	r2, r2, #2
 80060a6:	6939      	ldr	r1, [r7, #16]
 80060a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	2203      	movs	r2, #3
 80060b6:	409a      	lsls	r2, r3
 80060b8:	0013      	movs	r3, r2
 80060ba:	43da      	mvns	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4013      	ands	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2203      	movs	r2, #3
 80060c8:	401a      	ands	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	409a      	lsls	r2, r3
 80060d0:	0013      	movs	r3, r2
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	23c0      	movs	r3, #192	@ 0xc0
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	4013      	ands	r3, r2
 80060e8:	d100      	bne.n	80060ec <HAL_GPIO_Init+0x174>
 80060ea:	e09a      	b.n	8006222 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ec:	4b54      	ldr	r3, [pc, #336]	@ (8006240 <HAL_GPIO_Init+0x2c8>)
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	4b53      	ldr	r3, [pc, #332]	@ (8006240 <HAL_GPIO_Init+0x2c8>)
 80060f2:	2101      	movs	r1, #1
 80060f4:	430a      	orrs	r2, r1
 80060f6:	619a      	str	r2, [r3, #24]
 80060f8:	4b51      	ldr	r3, [pc, #324]	@ (8006240 <HAL_GPIO_Init+0x2c8>)
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2201      	movs	r2, #1
 80060fe:	4013      	ands	r3, r2
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006104:	4a4f      	ldr	r2, [pc, #316]	@ (8006244 <HAL_GPIO_Init+0x2cc>)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	089b      	lsrs	r3, r3, #2
 800610a:	3302      	adds	r3, #2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	589b      	ldr	r3, [r3, r2]
 8006110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2203      	movs	r2, #3
 8006116:	4013      	ands	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	220f      	movs	r2, #15
 800611c:	409a      	lsls	r2, r3
 800611e:	0013      	movs	r3, r2
 8006120:	43da      	mvns	r2, r3
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4013      	ands	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	2390      	movs	r3, #144	@ 0x90
 800612c:	05db      	lsls	r3, r3, #23
 800612e:	429a      	cmp	r2, r3
 8006130:	d013      	beq.n	800615a <HAL_GPIO_Init+0x1e2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a44      	ldr	r2, [pc, #272]	@ (8006248 <HAL_GPIO_Init+0x2d0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00d      	beq.n	8006156 <HAL_GPIO_Init+0x1de>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a43      	ldr	r2, [pc, #268]	@ (800624c <HAL_GPIO_Init+0x2d4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <HAL_GPIO_Init+0x1da>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a42      	ldr	r2, [pc, #264]	@ (8006250 <HAL_GPIO_Init+0x2d8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_GPIO_Init+0x1d6>
 800614a:	2303      	movs	r3, #3
 800614c:	e006      	b.n	800615c <HAL_GPIO_Init+0x1e4>
 800614e:	2305      	movs	r3, #5
 8006150:	e004      	b.n	800615c <HAL_GPIO_Init+0x1e4>
 8006152:	2302      	movs	r3, #2
 8006154:	e002      	b.n	800615c <HAL_GPIO_Init+0x1e4>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_GPIO_Init+0x1e4>
 800615a:	2300      	movs	r3, #0
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	2103      	movs	r1, #3
 8006160:	400a      	ands	r2, r1
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	4093      	lsls	r3, r2
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800616c:	4935      	ldr	r1, [pc, #212]	@ (8006244 <HAL_GPIO_Init+0x2cc>)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	3302      	adds	r3, #2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800617a:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	43da      	mvns	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4013      	ands	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	2380      	movs	r3, #128	@ 0x80
 8006190:	035b      	lsls	r3, r3, #13
 8006192:	4013      	ands	r3, r2
 8006194:	d003      	beq.n	800619e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800619e:	4b2d      	ldr	r3, [pc, #180]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80061a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	43da      	mvns	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	039b      	lsls	r3, r3, #14
 80061bc:	4013      	ands	r3, r2
 80061be:	d003      	beq.n	80061c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061c8:	4b22      	ldr	r3, [pc, #136]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80061ce:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	43da      	mvns	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	2380      	movs	r3, #128	@ 0x80
 80061e4:	029b      	lsls	r3, r3, #10
 80061e6:	4013      	ands	r3, r2
 80061e8:	d003      	beq.n	80061f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80061f2:	4b18      	ldr	r3, [pc, #96]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80061f8:	4b16      	ldr	r3, [pc, #88]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	43da      	mvns	r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	025b      	lsls	r3, r3, #9
 8006210:	4013      	ands	r3, r2
 8006212:	d003      	beq.n	800621c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800621c:	4b0d      	ldr	r3, [pc, #52]	@ (8006254 <HAL_GPIO_Init+0x2dc>)
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	3301      	adds	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	40da      	lsrs	r2, r3
 8006230:	1e13      	subs	r3, r2, #0
 8006232:	d000      	beq.n	8006236 <HAL_GPIO_Init+0x2be>
 8006234:	e6a8      	b.n	8005f88 <HAL_GPIO_Init+0x10>
  } 
}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b006      	add	sp, #24
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	40010000 	.word	0x40010000
 8006248:	48000400 	.word	0x48000400
 800624c:	48000800 	.word	0x48000800
 8006250:	48000c00 	.word	0x48000c00
 8006254:	40010400 	.word	0x40010400

08006258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	000a      	movs	r2, r1
 8006262:	1cbb      	adds	r3, r7, #2
 8006264:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	1cba      	adds	r2, r7, #2
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	4013      	ands	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e003      	b.n	8006284 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006284:	230f      	movs	r3, #15
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	781b      	ldrb	r3, [r3, #0]
  }
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b004      	add	sp, #16
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	0008      	movs	r0, r1
 800629c:	0011      	movs	r1, r2
 800629e:	1cbb      	adds	r3, r7, #2
 80062a0:	1c02      	adds	r2, r0, #0
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	1c7b      	adds	r3, r7, #1
 80062a6:	1c0a      	adds	r2, r1, #0
 80062a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062aa:	1c7b      	adds	r3, r7, #1
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062b2:	1cbb      	adds	r3, r7, #2
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80062ba:	e003      	b.n	80062c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062bc:	1cbb      	adds	r3, r7, #2
 80062be:	881a      	ldrh	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80062c4:	46c0      	nop			@ (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	000a      	movs	r2, r1
 80062d6:	1cbb      	adds	r3, r7, #2
 80062d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062e0:	1cbb      	adds	r3, r7, #2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4013      	ands	r3, r2
 80062e8:	041a      	lsls	r2, r3, #16
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	1cb9      	adds	r1, r7, #2
 80062f0:	8809      	ldrh	r1, [r1, #0]
 80062f2:	400b      	ands	r3, r1
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	619a      	str	r2, [r3, #24]
}
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	0002      	movs	r2, r0
 800630c:	1dbb      	adds	r3, r7, #6
 800630e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006310:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	1dba      	adds	r2, r7, #6
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	4013      	ands	r3, r2
 800631a:	d008      	beq.n	800632e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800631c:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800631e:	1dba      	adds	r2, r7, #6
 8006320:	8812      	ldrh	r2, [r2, #0]
 8006322:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006324:	1dbb      	adds	r3, r7, #6
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	0018      	movs	r0, r3
 800632a:	f7fd fc4d 	bl	8003bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b002      	add	sp, #8
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			@ (mov r8, r8)
 8006338:	40010400 	.word	0x40010400

0800633c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e301      	b.n	8006952 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	4013      	ands	r3, r2
 8006356:	d100      	bne.n	800635a <HAL_RCC_OscConfig+0x1e>
 8006358:	e08d      	b.n	8006476 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800635a:	4bc3      	ldr	r3, [pc, #780]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	220c      	movs	r2, #12
 8006360:	4013      	ands	r3, r2
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00e      	beq.n	8006384 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006366:	4bc0      	ldr	r3, [pc, #768]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	220c      	movs	r2, #12
 800636c:	4013      	ands	r3, r2
 800636e:	2b08      	cmp	r3, #8
 8006370:	d116      	bne.n	80063a0 <HAL_RCC_OscConfig+0x64>
 8006372:	4bbd      	ldr	r3, [pc, #756]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	2380      	movs	r3, #128	@ 0x80
 8006378:	025b      	lsls	r3, r3, #9
 800637a:	401a      	ands	r2, r3
 800637c:	2380      	movs	r3, #128	@ 0x80
 800637e:	025b      	lsls	r3, r3, #9
 8006380:	429a      	cmp	r2, r3
 8006382:	d10d      	bne.n	80063a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006384:	4bb8      	ldr	r3, [pc, #736]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	4013      	ands	r3, r2
 800638e:	d100      	bne.n	8006392 <HAL_RCC_OscConfig+0x56>
 8006390:	e070      	b.n	8006474 <HAL_RCC_OscConfig+0x138>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d000      	beq.n	800639c <HAL_RCC_OscConfig+0x60>
 800639a:	e06b      	b.n	8006474 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e2d8      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d107      	bne.n	80063b8 <HAL_RCC_OscConfig+0x7c>
 80063a8:	4baf      	ldr	r3, [pc, #700]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4bae      	ldr	r3, [pc, #696]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063ae:	2180      	movs	r1, #128	@ 0x80
 80063b0:	0249      	lsls	r1, r1, #9
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e02f      	b.n	8006418 <HAL_RCC_OscConfig+0xdc>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <HAL_RCC_OscConfig+0x9e>
 80063c0:	4ba9      	ldr	r3, [pc, #676]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	4ba8      	ldr	r3, [pc, #672]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063c6:	49a9      	ldr	r1, [pc, #676]	@ (800666c <HAL_RCC_OscConfig+0x330>)
 80063c8:	400a      	ands	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	4ba6      	ldr	r3, [pc, #664]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4ba5      	ldr	r3, [pc, #660]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063d2:	49a7      	ldr	r1, [pc, #668]	@ (8006670 <HAL_RCC_OscConfig+0x334>)
 80063d4:	400a      	ands	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e01e      	b.n	8006418 <HAL_RCC_OscConfig+0xdc>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d10e      	bne.n	8006400 <HAL_RCC_OscConfig+0xc4>
 80063e2:	4ba1      	ldr	r3, [pc, #644]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4ba0      	ldr	r3, [pc, #640]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063e8:	2180      	movs	r1, #128	@ 0x80
 80063ea:	02c9      	lsls	r1, r1, #11
 80063ec:	430a      	orrs	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b9c      	ldr	r3, [pc, #624]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80063f6:	2180      	movs	r1, #128	@ 0x80
 80063f8:	0249      	lsls	r1, r1, #9
 80063fa:	430a      	orrs	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e00b      	b.n	8006418 <HAL_RCC_OscConfig+0xdc>
 8006400:	4b99      	ldr	r3, [pc, #612]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4b98      	ldr	r3, [pc, #608]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006406:	4999      	ldr	r1, [pc, #612]	@ (800666c <HAL_RCC_OscConfig+0x330>)
 8006408:	400a      	ands	r2, r1
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	4b96      	ldr	r3, [pc, #600]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b95      	ldr	r3, [pc, #596]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006412:	4997      	ldr	r1, [pc, #604]	@ (8006670 <HAL_RCC_OscConfig+0x334>)
 8006414:	400a      	ands	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d014      	beq.n	800644a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7ff f9ea 	bl	80057f8 <HAL_GetTick>
 8006424:	0003      	movs	r3, r0
 8006426:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800642a:	f7ff f9e5 	bl	80057f8 <HAL_GetTick>
 800642e:	0002      	movs	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b64      	cmp	r3, #100	@ 0x64
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e28a      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643c:	4b8a      	ldr	r3, [pc, #552]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	2380      	movs	r3, #128	@ 0x80
 8006442:	029b      	lsls	r3, r3, #10
 8006444:	4013      	ands	r3, r2
 8006446:	d0f0      	beq.n	800642a <HAL_RCC_OscConfig+0xee>
 8006448:	e015      	b.n	8006476 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644a:	f7ff f9d5 	bl	80057f8 <HAL_GetTick>
 800644e:	0003      	movs	r3, r0
 8006450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006454:	f7ff f9d0 	bl	80057f8 <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b64      	cmp	r3, #100	@ 0x64
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e275      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006466:	4b80      	ldr	r3, [pc, #512]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	2380      	movs	r3, #128	@ 0x80
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	4013      	ands	r3, r2
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x118>
 8006472:	e000      	b.n	8006476 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006474:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2202      	movs	r2, #2
 800647c:	4013      	ands	r3, r2
 800647e:	d100      	bne.n	8006482 <HAL_RCC_OscConfig+0x146>
 8006480:	e069      	b.n	8006556 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006482:	4b79      	ldr	r3, [pc, #484]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	220c      	movs	r2, #12
 8006488:	4013      	ands	r3, r2
 800648a:	d00b      	beq.n	80064a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800648c:	4b76      	ldr	r3, [pc, #472]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	220c      	movs	r2, #12
 8006492:	4013      	ands	r3, r2
 8006494:	2b08      	cmp	r3, #8
 8006496:	d11c      	bne.n	80064d2 <HAL_RCC_OscConfig+0x196>
 8006498:	4b73      	ldr	r3, [pc, #460]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	025b      	lsls	r3, r3, #9
 80064a0:	4013      	ands	r3, r2
 80064a2:	d116      	bne.n	80064d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a4:	4b70      	ldr	r3, [pc, #448]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2202      	movs	r2, #2
 80064aa:	4013      	ands	r3, r2
 80064ac:	d005      	beq.n	80064ba <HAL_RCC_OscConfig+0x17e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e24b      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ba:	4b6b      	ldr	r3, [pc, #428]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	22f8      	movs	r2, #248	@ 0xf8
 80064c0:	4393      	bics	r3, r2
 80064c2:	0019      	movs	r1, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	00da      	lsls	r2, r3, #3
 80064ca:	4b67      	ldr	r3, [pc, #412]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80064cc:	430a      	orrs	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d0:	e041      	b.n	8006556 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d024      	beq.n	8006524 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064da:	4b63      	ldr	r3, [pc, #396]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b62      	ldr	r3, [pc, #392]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80064e0:	2101      	movs	r1, #1
 80064e2:	430a      	orrs	r2, r1
 80064e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e6:	f7ff f987 	bl	80057f8 <HAL_GetTick>
 80064ea:	0003      	movs	r3, r0
 80064ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f0:	f7ff f982 	bl	80057f8 <HAL_GetTick>
 80064f4:	0002      	movs	r2, r0
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e227      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006502:	4b59      	ldr	r3, [pc, #356]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2202      	movs	r2, #2
 8006508:	4013      	ands	r3, r2
 800650a:	d0f1      	beq.n	80064f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650c:	4b56      	ldr	r3, [pc, #344]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	22f8      	movs	r2, #248	@ 0xf8
 8006512:	4393      	bics	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	00da      	lsls	r2, r3, #3
 800651c:	4b52      	ldr	r3, [pc, #328]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800651e:	430a      	orrs	r2, r1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e018      	b.n	8006556 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006524:	4b50      	ldr	r3, [pc, #320]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b4f      	ldr	r3, [pc, #316]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800652a:	2101      	movs	r1, #1
 800652c:	438a      	bics	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006530:	f7ff f962 	bl	80057f8 <HAL_GetTick>
 8006534:	0003      	movs	r3, r0
 8006536:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800653a:	f7ff f95d 	bl	80057f8 <HAL_GetTick>
 800653e:	0002      	movs	r2, r0
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e202      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800654c:	4b46      	ldr	r3, [pc, #280]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2202      	movs	r2, #2
 8006552:	4013      	ands	r3, r2
 8006554:	d1f1      	bne.n	800653a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2208      	movs	r2, #8
 800655c:	4013      	ands	r3, r2
 800655e:	d036      	beq.n	80065ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d019      	beq.n	800659c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006568:	4b3f      	ldr	r3, [pc, #252]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800656a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800656c:	4b3e      	ldr	r3, [pc, #248]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800656e:	2101      	movs	r1, #1
 8006570:	430a      	orrs	r2, r1
 8006572:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006574:	f7ff f940 	bl	80057f8 <HAL_GetTick>
 8006578:	0003      	movs	r3, r0
 800657a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800657e:	f7ff f93b 	bl	80057f8 <HAL_GetTick>
 8006582:	0002      	movs	r2, r0
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e1e0      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006590:	4b35      	ldr	r3, [pc, #212]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006594:	2202      	movs	r2, #2
 8006596:	4013      	ands	r3, r2
 8006598:	d0f1      	beq.n	800657e <HAL_RCC_OscConfig+0x242>
 800659a:	e018      	b.n	80065ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800659c:	4b32      	ldr	r3, [pc, #200]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800659e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065a0:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80065a2:	2101      	movs	r1, #1
 80065a4:	438a      	bics	r2, r1
 80065a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a8:	f7ff f926 	bl	80057f8 <HAL_GetTick>
 80065ac:	0003      	movs	r3, r0
 80065ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b2:	f7ff f921 	bl	80057f8 <HAL_GetTick>
 80065b6:	0002      	movs	r2, r0
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e1c6      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c4:	4b28      	ldr	r3, [pc, #160]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	2202      	movs	r2, #2
 80065ca:	4013      	ands	r3, r2
 80065cc:	d1f1      	bne.n	80065b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4013      	ands	r3, r2
 80065d6:	d100      	bne.n	80065da <HAL_RCC_OscConfig+0x29e>
 80065d8:	e0b4      	b.n	8006744 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065da:	201f      	movs	r0, #31
 80065dc:	183b      	adds	r3, r7, r0
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e2:	4b21      	ldr	r3, [pc, #132]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	2380      	movs	r3, #128	@ 0x80
 80065e8:	055b      	lsls	r3, r3, #21
 80065ea:	4013      	ands	r3, r2
 80065ec:	d110      	bne.n	8006610 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80065f0:	69da      	ldr	r2, [r3, #28]
 80065f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80065f4:	2180      	movs	r1, #128	@ 0x80
 80065f6:	0549      	lsls	r1, r1, #21
 80065f8:	430a      	orrs	r2, r1
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	055b      	lsls	r3, r3, #21
 8006604:	4013      	ands	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800660a:	183b      	adds	r3, r7, r0
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006610:	4b18      	ldr	r3, [pc, #96]	@ (8006674 <HAL_RCC_OscConfig+0x338>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2380      	movs	r3, #128	@ 0x80
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4013      	ands	r3, r2
 800661a:	d11a      	bne.n	8006652 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800661c:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <HAL_RCC_OscConfig+0x338>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b14      	ldr	r3, [pc, #80]	@ (8006674 <HAL_RCC_OscConfig+0x338>)
 8006622:	2180      	movs	r1, #128	@ 0x80
 8006624:	0049      	lsls	r1, r1, #1
 8006626:	430a      	orrs	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800662a:	f7ff f8e5 	bl	80057f8 <HAL_GetTick>
 800662e:	0003      	movs	r3, r0
 8006630:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006634:	f7ff f8e0 	bl	80057f8 <HAL_GetTick>
 8006638:	0002      	movs	r2, r0
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	@ 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e185      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006646:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <HAL_RCC_OscConfig+0x338>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	4013      	ands	r3, r2
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10e      	bne.n	8006678 <HAL_RCC_OscConfig+0x33c>
 800665a:	4b03      	ldr	r3, [pc, #12]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	4b02      	ldr	r3, [pc, #8]	@ (8006668 <HAL_RCC_OscConfig+0x32c>)
 8006660:	2101      	movs	r1, #1
 8006662:	430a      	orrs	r2, r1
 8006664:	621a      	str	r2, [r3, #32]
 8006666:	e035      	b.n	80066d4 <HAL_RCC_OscConfig+0x398>
 8006668:	40021000 	.word	0x40021000
 800666c:	fffeffff 	.word	0xfffeffff
 8006670:	fffbffff 	.word	0xfffbffff
 8006674:	40007000 	.word	0x40007000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <HAL_RCC_OscConfig+0x35e>
 8006680:	4bb6      	ldr	r3, [pc, #728]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006682:	6a1a      	ldr	r2, [r3, #32]
 8006684:	4bb5      	ldr	r3, [pc, #724]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006686:	2101      	movs	r1, #1
 8006688:	438a      	bics	r2, r1
 800668a:	621a      	str	r2, [r3, #32]
 800668c:	4bb3      	ldr	r3, [pc, #716]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	4bb2      	ldr	r3, [pc, #712]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006692:	2104      	movs	r1, #4
 8006694:	438a      	bics	r2, r1
 8006696:	621a      	str	r2, [r3, #32]
 8006698:	e01c      	b.n	80066d4 <HAL_RCC_OscConfig+0x398>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d10c      	bne.n	80066bc <HAL_RCC_OscConfig+0x380>
 80066a2:	4bae      	ldr	r3, [pc, #696]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066a4:	6a1a      	ldr	r2, [r3, #32]
 80066a6:	4bad      	ldr	r3, [pc, #692]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066a8:	2104      	movs	r1, #4
 80066aa:	430a      	orrs	r2, r1
 80066ac:	621a      	str	r2, [r3, #32]
 80066ae:	4bab      	ldr	r3, [pc, #684]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066b0:	6a1a      	ldr	r2, [r3, #32]
 80066b2:	4baa      	ldr	r3, [pc, #680]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066b4:	2101      	movs	r1, #1
 80066b6:	430a      	orrs	r2, r1
 80066b8:	621a      	str	r2, [r3, #32]
 80066ba:	e00b      	b.n	80066d4 <HAL_RCC_OscConfig+0x398>
 80066bc:	4ba7      	ldr	r3, [pc, #668]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	4ba6      	ldr	r3, [pc, #664]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066c2:	2101      	movs	r1, #1
 80066c4:	438a      	bics	r2, r1
 80066c6:	621a      	str	r2, [r3, #32]
 80066c8:	4ba4      	ldr	r3, [pc, #656]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	4ba3      	ldr	r3, [pc, #652]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066ce:	2104      	movs	r1, #4
 80066d0:	438a      	bics	r2, r1
 80066d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d014      	beq.n	8006706 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066dc:	f7ff f88c 	bl	80057f8 <HAL_GetTick>
 80066e0:	0003      	movs	r3, r0
 80066e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e4:	e009      	b.n	80066fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7ff f887 	bl	80057f8 <HAL_GetTick>
 80066ea:	0002      	movs	r2, r0
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	4a9b      	ldr	r2, [pc, #620]	@ (8006960 <HAL_RCC_OscConfig+0x624>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e12b      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066fa:	4b98      	ldr	r3, [pc, #608]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	2202      	movs	r2, #2
 8006700:	4013      	ands	r3, r2
 8006702:	d0f0      	beq.n	80066e6 <HAL_RCC_OscConfig+0x3aa>
 8006704:	e013      	b.n	800672e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006706:	f7ff f877 	bl	80057f8 <HAL_GetTick>
 800670a:	0003      	movs	r3, r0
 800670c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800670e:	e009      	b.n	8006724 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006710:	f7ff f872 	bl	80057f8 <HAL_GetTick>
 8006714:	0002      	movs	r2, r0
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	4a91      	ldr	r2, [pc, #580]	@ (8006960 <HAL_RCC_OscConfig+0x624>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e116      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006724:	4b8d      	ldr	r3, [pc, #564]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	2202      	movs	r2, #2
 800672a:	4013      	ands	r3, r2
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800672e:	231f      	movs	r3, #31
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d105      	bne.n	8006744 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006738:	4b88      	ldr	r3, [pc, #544]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	4b87      	ldr	r3, [pc, #540]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800673e:	4989      	ldr	r1, [pc, #548]	@ (8006964 <HAL_RCC_OscConfig+0x628>)
 8006740:	400a      	ands	r2, r1
 8006742:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2210      	movs	r2, #16
 800674a:	4013      	ands	r3, r2
 800674c:	d063      	beq.n	8006816 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d12a      	bne.n	80067ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006756:	4b81      	ldr	r3, [pc, #516]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800675a:	4b80      	ldr	r3, [pc, #512]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800675c:	2104      	movs	r1, #4
 800675e:	430a      	orrs	r2, r1
 8006760:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006762:	4b7e      	ldr	r3, [pc, #504]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006766:	4b7d      	ldr	r3, [pc, #500]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006768:	2101      	movs	r1, #1
 800676a:	430a      	orrs	r2, r1
 800676c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676e:	f7ff f843 	bl	80057f8 <HAL_GetTick>
 8006772:	0003      	movs	r3, r0
 8006774:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006778:	f7ff f83e 	bl	80057f8 <HAL_GetTick>
 800677c:	0002      	movs	r2, r0
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e0e3      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800678a:	4b74      	ldr	r3, [pc, #464]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	2202      	movs	r2, #2
 8006790:	4013      	ands	r3, r2
 8006792:	d0f1      	beq.n	8006778 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006794:	4b71      	ldr	r3, [pc, #452]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006798:	22f8      	movs	r2, #248	@ 0xf8
 800679a:	4393      	bics	r3, r2
 800679c:	0019      	movs	r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	00da      	lsls	r2, r3, #3
 80067a4:	4b6d      	ldr	r3, [pc, #436]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067a6:	430a      	orrs	r2, r1
 80067a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80067aa:	e034      	b.n	8006816 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	3305      	adds	r3, #5
 80067b2:	d111      	bne.n	80067d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80067b4:	4b69      	ldr	r3, [pc, #420]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067b8:	4b68      	ldr	r3, [pc, #416]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067ba:	2104      	movs	r1, #4
 80067bc:	438a      	bics	r2, r1
 80067be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80067c0:	4b66      	ldr	r3, [pc, #408]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c4:	22f8      	movs	r2, #248	@ 0xf8
 80067c6:	4393      	bics	r3, r2
 80067c8:	0019      	movs	r1, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	00da      	lsls	r2, r3, #3
 80067d0:	4b62      	ldr	r3, [pc, #392]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067d2:	430a      	orrs	r2, r1
 80067d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80067d6:	e01e      	b.n	8006816 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80067d8:	4b60      	ldr	r3, [pc, #384]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067dc:	4b5f      	ldr	r3, [pc, #380]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067de:	2104      	movs	r1, #4
 80067e0:	430a      	orrs	r2, r1
 80067e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80067e4:	4b5d      	ldr	r3, [pc, #372]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e8:	4b5c      	ldr	r3, [pc, #368]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80067ea:	2101      	movs	r1, #1
 80067ec:	438a      	bics	r2, r1
 80067ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f0:	f7ff f802 	bl	80057f8 <HAL_GetTick>
 80067f4:	0003      	movs	r3, r0
 80067f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80067fa:	f7fe fffd 	bl	80057f8 <HAL_GetTick>
 80067fe:	0002      	movs	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e0a2      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800680c:	4b53      	ldr	r3, [pc, #332]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800680e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006810:	2202      	movs	r2, #2
 8006812:	4013      	ands	r3, r2
 8006814:	d1f1      	bne.n	80067fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d100      	bne.n	8006820 <HAL_RCC_OscConfig+0x4e4>
 800681e:	e097      	b.n	8006950 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006820:	4b4e      	ldr	r3, [pc, #312]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	220c      	movs	r2, #12
 8006826:	4013      	ands	r3, r2
 8006828:	2b08      	cmp	r3, #8
 800682a:	d100      	bne.n	800682e <HAL_RCC_OscConfig+0x4f2>
 800682c:	e06b      	b.n	8006906 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d14c      	bne.n	80068d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006836:	4b49      	ldr	r3, [pc, #292]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b48      	ldr	r3, [pc, #288]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800683c:	494a      	ldr	r1, [pc, #296]	@ (8006968 <HAL_RCC_OscConfig+0x62c>)
 800683e:	400a      	ands	r2, r1
 8006840:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006842:	f7fe ffd9 	bl	80057f8 <HAL_GetTick>
 8006846:	0003      	movs	r3, r0
 8006848:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684c:	f7fe ffd4 	bl	80057f8 <HAL_GetTick>
 8006850:	0002      	movs	r2, r0
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e079      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800685e:	4b3f      	ldr	r3, [pc, #252]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	049b      	lsls	r3, r3, #18
 8006866:	4013      	ands	r3, r2
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686a:	4b3c      	ldr	r3, [pc, #240]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	220f      	movs	r2, #15
 8006870:	4393      	bics	r3, r2
 8006872:	0019      	movs	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006878:	4b38      	ldr	r3, [pc, #224]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800687a:	430a      	orrs	r2, r1
 800687c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800687e:	4b37      	ldr	r3, [pc, #220]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4a3a      	ldr	r2, [pc, #232]	@ (800696c <HAL_RCC_OscConfig+0x630>)
 8006884:	4013      	ands	r3, r2
 8006886:	0019      	movs	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	431a      	orrs	r2, r3
 8006892:	4b32      	ldr	r3, [pc, #200]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006898:	4b30      	ldr	r3, [pc, #192]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b2f      	ldr	r3, [pc, #188]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800689e:	2180      	movs	r1, #128	@ 0x80
 80068a0:	0449      	lsls	r1, r1, #17
 80068a2:	430a      	orrs	r2, r1
 80068a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a6:	f7fe ffa7 	bl	80057f8 <HAL_GetTick>
 80068aa:	0003      	movs	r3, r0
 80068ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fe ffa2 	bl	80057f8 <HAL_GetTick>
 80068b4:	0002      	movs	r2, r0
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e047      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068c2:	4b26      	ldr	r3, [pc, #152]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	2380      	movs	r3, #128	@ 0x80
 80068c8:	049b      	lsls	r3, r3, #18
 80068ca:	4013      	ands	r3, r2
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0x574>
 80068ce:	e03f      	b.n	8006950 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b22      	ldr	r3, [pc, #136]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b21      	ldr	r3, [pc, #132]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80068d6:	4924      	ldr	r1, [pc, #144]	@ (8006968 <HAL_RCC_OscConfig+0x62c>)
 80068d8:	400a      	ands	r2, r1
 80068da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068dc:	f7fe ff8c 	bl	80057f8 <HAL_GetTick>
 80068e0:	0003      	movs	r3, r0
 80068e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e6:	f7fe ff87 	bl	80057f8 <HAL_GetTick>
 80068ea:	0002      	movs	r2, r0
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e02c      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f8:	4b18      	ldr	r3, [pc, #96]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	2380      	movs	r3, #128	@ 0x80
 80068fe:	049b      	lsls	r3, r3, #18
 8006900:	4013      	ands	r3, r2
 8006902:	d1f0      	bne.n	80068e6 <HAL_RCC_OscConfig+0x5aa>
 8006904:	e024      	b.n	8006950 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e01f      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006912:	4b12      	ldr	r3, [pc, #72]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006918:	4b10      	ldr	r3, [pc, #64]	@ (800695c <HAL_RCC_OscConfig+0x620>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	2380      	movs	r3, #128	@ 0x80
 8006922:	025b      	lsls	r3, r3, #9
 8006924:	401a      	ands	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	429a      	cmp	r2, r3
 800692c:	d10e      	bne.n	800694c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	220f      	movs	r2, #15
 8006932:	401a      	ands	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	429a      	cmp	r2, r3
 800693a:	d107      	bne.n	800694c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	23f0      	movs	r3, #240	@ 0xf0
 8006940:	039b      	lsls	r3, r3, #14
 8006942:	401a      	ands	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006948:	429a      	cmp	r2, r3
 800694a:	d001      	beq.n	8006950 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	0018      	movs	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	b008      	add	sp, #32
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	40021000 	.word	0x40021000
 8006960:	00001388 	.word	0x00001388
 8006964:	efffffff 	.word	0xefffffff
 8006968:	feffffff 	.word	0xfeffffff
 800696c:	ffc2ffff 	.word	0xffc2ffff

08006970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0b3      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006984:	4b5b      	ldr	r3, [pc, #364]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2201      	movs	r2, #1
 800698a:	4013      	ands	r3, r2
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d911      	bls.n	80069b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b58      	ldr	r3, [pc, #352]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2201      	movs	r2, #1
 8006998:	4393      	bics	r3, r2
 800699a:	0019      	movs	r1, r3
 800699c:	4b55      	ldr	r3, [pc, #340]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a4:	4b53      	ldr	r3, [pc, #332]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2201      	movs	r2, #1
 80069aa:	4013      	ands	r3, r2
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d001      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e09a      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2202      	movs	r2, #2
 80069bc:	4013      	ands	r3, r2
 80069be:	d015      	beq.n	80069ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2204      	movs	r2, #4
 80069c6:	4013      	ands	r3, r2
 80069c8:	d006      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069ca:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	4b4a      	ldr	r3, [pc, #296]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 80069d0:	21e0      	movs	r1, #224	@ 0xe0
 80069d2:	00c9      	lsls	r1, r1, #3
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d8:	4b47      	ldr	r3, [pc, #284]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	22f0      	movs	r2, #240	@ 0xf0
 80069de:	4393      	bics	r3, r2
 80069e0:	0019      	movs	r1, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	4b44      	ldr	r3, [pc, #272]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2201      	movs	r2, #1
 80069f2:	4013      	ands	r3, r2
 80069f4:	d040      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d107      	bne.n	8006a0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fe:	4b3e      	ldr	r3, [pc, #248]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	2380      	movs	r3, #128	@ 0x80
 8006a04:	029b      	lsls	r3, r3, #10
 8006a06:	4013      	ands	r3, r2
 8006a08:	d114      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e06e      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d107      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a16:	4b38      	ldr	r3, [pc, #224]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	2380      	movs	r3, #128	@ 0x80
 8006a1c:	049b      	lsls	r3, r3, #18
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d108      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e062      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a26:	4b34      	ldr	r3, [pc, #208]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e05b      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a34:	4b30      	ldr	r3, [pc, #192]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4393      	bics	r3, r2
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	4b2d      	ldr	r3, [pc, #180]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a48:	f7fe fed6 	bl	80057f8 <HAL_GetTick>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a50:	e009      	b.n	8006a66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a52:	f7fe fed1 	bl	80057f8 <HAL_GetTick>
 8006a56:	0002      	movs	r2, r0
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	4a27      	ldr	r2, [pc, #156]	@ (8006afc <HAL_RCC_ClockConfig+0x18c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e042      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a66:	4b24      	ldr	r3, [pc, #144]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	220c      	movs	r2, #12
 8006a6c:	401a      	ands	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d1ec      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a78:	4b1e      	ldr	r3, [pc, #120]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	4013      	ands	r3, r2
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d211      	bcs.n	8006aaa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b1b      	ldr	r3, [pc, #108]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	4393      	bics	r3, r2
 8006a8e:	0019      	movs	r1, r3
 8006a90:	4b18      	ldr	r3, [pc, #96]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a98:	4b16      	ldr	r3, [pc, #88]	@ (8006af4 <HAL_RCC_ClockConfig+0x184>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d001      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e020      	b.n	8006aec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a11      	ldr	r2, [pc, #68]	@ (8006b00 <HAL_RCC_ClockConfig+0x190>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	0019      	movs	r1, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ac8:	f000 f820 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8006acc:	0001      	movs	r1, r0
 8006ace:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <HAL_RCC_ClockConfig+0x188>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	091b      	lsrs	r3, r3, #4
 8006ad4:	220f      	movs	r2, #15
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8006b04 <HAL_RCC_ClockConfig+0x194>)
 8006ada:	5cd3      	ldrb	r3, [r2, r3]
 8006adc:	000a      	movs	r2, r1
 8006ade:	40da      	lsrs	r2, r3
 8006ae0:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <HAL_RCC_ClockConfig+0x198>)
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ae4:	2003      	movs	r0, #3
 8006ae6:	f7fe fe41 	bl	800576c <HAL_InitTick>
  
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	0018      	movs	r0, r3
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b004      	add	sp, #16
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40022000 	.word	0x40022000
 8006af8:	40021000 	.word	0x40021000
 8006afc:	00001388 	.word	0x00001388
 8006b00:	fffff8ff 	.word	0xfffff8ff
 8006b04:	0800d788 	.word	0x0800d788
 8006b08:	20000000 	.word	0x20000000

08006b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006b26:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	220c      	movs	r2, #12
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d002      	beq.n	8006b3c <HAL_RCC_GetSysClockFreq+0x30>
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d003      	beq.n	8006b42 <HAL_RCC_GetSysClockFreq+0x36>
 8006b3a:	e02c      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8006b3e:	613b      	str	r3, [r7, #16]
      break;
 8006b40:	e02c      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0c9b      	lsrs	r3, r3, #18
 8006b46:	220f      	movs	r2, #15
 8006b48:	4013      	ands	r3, r2
 8006b4a:	4a19      	ldr	r2, [pc, #100]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006b4c:	5cd3      	ldrb	r3, [r2, r3]
 8006b4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b50:	4b15      	ldr	r3, [pc, #84]	@ (8006ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	220f      	movs	r2, #15
 8006b56:	4013      	ands	r3, r2
 8006b58:	4a16      	ldr	r2, [pc, #88]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006b5a:	5cd3      	ldrb	r3, [r2, r3]
 8006b5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	2380      	movs	r3, #128	@ 0x80
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	4013      	ands	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	4810      	ldr	r0, [pc, #64]	@ (8006bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8006b6c:	f7f9 faf2 	bl	8000154 <__udivsi3>
 8006b70:	0003      	movs	r3, r0
 8006b72:	001a      	movs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4353      	muls	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e009      	b.n	8006b90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	000a      	movs	r2, r1
 8006b80:	0152      	lsls	r2, r2, #5
 8006b82:	1a52      	subs	r2, r2, r1
 8006b84:	0193      	lsls	r3, r2, #6
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	185b      	adds	r3, r3, r1
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	613b      	str	r3, [r7, #16]
      break;
 8006b94:	e002      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b96:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8006b98:	613b      	str	r3, [r7, #16]
      break;
 8006b9a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006b9c:	693b      	ldr	r3, [r7, #16]
}
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b006      	add	sp, #24
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	007a1200 	.word	0x007a1200
 8006bb0:	0800d7a0 	.word	0x0800d7a0
 8006bb4:	0800d7b0 	.word	0x0800d7b0

08006bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bbc:	4b02      	ldr	r3, [pc, #8]	@ (8006bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	20000000 	.word	0x20000000

08006bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006bd0:	f7ff fff2 	bl	8006bb8 <HAL_RCC_GetHCLKFreq>
 8006bd4:	0001      	movs	r1, r0
 8006bd6:	4b06      	ldr	r3, [pc, #24]	@ (8006bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	2207      	movs	r2, #7
 8006bde:	4013      	ands	r3, r2
 8006be0:	4a04      	ldr	r2, [pc, #16]	@ (8006bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006be2:	5cd3      	ldrb	r3, [r2, r3]
 8006be4:	40d9      	lsrs	r1, r3
 8006be6:	000b      	movs	r3, r1
}    
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	0800d798 	.word	0x0800d798

08006bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	2380      	movs	r3, #128	@ 0x80
 8006c0e:	025b      	lsls	r3, r3, #9
 8006c10:	4013      	ands	r3, r2
 8006c12:	d100      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006c14:	e08e      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006c16:	2017      	movs	r0, #23
 8006c18:	183b      	adds	r3, r7, r0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1e:	4b57      	ldr	r3, [pc, #348]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	2380      	movs	r3, #128	@ 0x80
 8006c24:	055b      	lsls	r3, r3, #21
 8006c26:	4013      	ands	r3, r2
 8006c28:	d110      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c2a:	4b54      	ldr	r3, [pc, #336]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c2c:	69da      	ldr	r2, [r3, #28]
 8006c2e:	4b53      	ldr	r3, [pc, #332]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c30:	2180      	movs	r1, #128	@ 0x80
 8006c32:	0549      	lsls	r1, r1, #21
 8006c34:	430a      	orrs	r2, r1
 8006c36:	61da      	str	r2, [r3, #28]
 8006c38:	4b50      	ldr	r3, [pc, #320]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	2380      	movs	r3, #128	@ 0x80
 8006c3e:	055b      	lsls	r3, r3, #21
 8006c40:	4013      	ands	r3, r2
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c46:	183b      	adds	r3, r7, r0
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	2380      	movs	r3, #128	@ 0x80
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	4013      	ands	r3, r2
 8006c56:	d11a      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c58:	4b49      	ldr	r3, [pc, #292]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b48      	ldr	r3, [pc, #288]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006c5e:	2180      	movs	r1, #128	@ 0x80
 8006c60:	0049      	lsls	r1, r1, #1
 8006c62:	430a      	orrs	r2, r1
 8006c64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c66:	f7fe fdc7 	bl	80057f8 <HAL_GetTick>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6e:	e008      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c70:	f7fe fdc2 	bl	80057f8 <HAL_GetTick>
 8006c74:	0002      	movs	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b64      	cmp	r3, #100	@ 0x64
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e077      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c82:	4b3f      	ldr	r3, [pc, #252]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	2380      	movs	r3, #128	@ 0x80
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	d0f0      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	23c0      	movs	r3, #192	@ 0xc0
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4013      	ands	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d034      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	23c0      	movs	r3, #192	@ 0xc0
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4013      	ands	r3, r2
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d02c      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cb0:	4b32      	ldr	r3, [pc, #200]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	4a33      	ldr	r2, [pc, #204]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cba:	4b30      	ldr	r3, [pc, #192]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006cc0:	2180      	movs	r1, #128	@ 0x80
 8006cc2:	0249      	lsls	r1, r1, #9
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006cce:	492e      	ldr	r1, [pc, #184]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006cd0:	400a      	ands	r2, r1
 8006cd2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006cd4:	4b29      	ldr	r3, [pc, #164]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce2:	f7fe fd89 	bl	80057f8 <HAL_GetTick>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cea:	e009      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cec:	f7fe fd84 	bl	80057f8 <HAL_GetTick>
 8006cf0:	0002      	movs	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4a25      	ldr	r2, [pc, #148]	@ (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e038      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d00:	4b1e      	ldr	r3, [pc, #120]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	2202      	movs	r2, #2
 8006d06:	4013      	ands	r3, r2
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	0019      	movs	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	4b18      	ldr	r3, [pc, #96]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d1e:	2317      	movs	r3, #23
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d28:	4b14      	ldr	r3, [pc, #80]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	4b13      	ldr	r3, [pc, #76]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d2e:	4918      	ldr	r1, [pc, #96]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006d30:	400a      	ands	r2, r1
 8006d32:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	2203      	movs	r2, #3
 8006d44:	4393      	bics	r3, r2
 8006d46:	0019      	movs	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2220      	movs	r2, #32
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d5c:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	2210      	movs	r2, #16
 8006d62:	4393      	bics	r3, r2
 8006d64:	0019      	movs	r1, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	0018      	movs	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b006      	add	sp, #24
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40007000 	.word	0x40007000
 8006d84:	fffffcff 	.word	0xfffffcff
 8006d88:	fffeffff 	.word	0xfffeffff
 8006d8c:	00001388 	.word	0x00001388
 8006d90:	efffffff 	.word	0xefffffff

08006d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0a8      	b.n	8006ef8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	2382      	movs	r3, #130	@ 0x82
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d009      	beq.n	8006dce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	61da      	str	r2, [r3, #28]
 8006dc0:	e005      	b.n	8006dce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	225d      	movs	r2, #93	@ 0x5d
 8006dd8:	5c9b      	ldrb	r3, [r3, r2]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d107      	bne.n	8006df0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	225c      	movs	r2, #92	@ 0x5c
 8006de4:	2100      	movs	r1, #0
 8006de6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7fe fada 	bl	80053a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	225d      	movs	r2, #93	@ 0x5d
 8006df4:	2102      	movs	r1, #2
 8006df6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2140      	movs	r1, #64	@ 0x40
 8006e04:	438a      	bics	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	23e0      	movs	r3, #224	@ 0xe0
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d902      	bls.n	8006e1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e002      	b.n	8006e20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e1a:	2380      	movs	r3, #128	@ 0x80
 8006e1c:	015b      	lsls	r3, r3, #5
 8006e1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	23f0      	movs	r3, #240	@ 0xf0
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d008      	beq.n	8006e3e <HAL_SPI_Init+0xaa>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	23e0      	movs	r3, #224	@ 0xe0
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	2382      	movs	r3, #130	@ 0x82
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	401a      	ands	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6899      	ldr	r1, [r3, #8]
 8006e4c:	2384      	movs	r3, #132	@ 0x84
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	400b      	ands	r3, r1
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2102      	movs	r1, #2
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	2101      	movs	r1, #1
 8006e64:	400b      	ands	r3, r1
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6999      	ldr	r1, [r3, #24]
 8006e6c:	2380      	movs	r3, #128	@ 0x80
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	400b      	ands	r3, r1
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	2138      	movs	r1, #56	@ 0x38
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	2180      	movs	r1, #128	@ 0x80
 8006e84:	400b      	ands	r3, r1
 8006e86:	431a      	orrs	r2, r3
 8006e88:	0011      	movs	r1, r2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e8e:	2380      	movs	r3, #128	@ 0x80
 8006e90:	019b      	lsls	r3, r3, #6
 8006e92:	401a      	ands	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	0c1b      	lsrs	r3, r3, #16
 8006ea2:	2204      	movs	r2, #4
 8006ea4:	401a      	ands	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eaa:	2110      	movs	r1, #16
 8006eac:	400b      	ands	r3, r1
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb4:	2108      	movs	r1, #8
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68d9      	ldr	r1, [r3, #12]
 8006ebe:	23f0      	movs	r3, #240	@ 0xf0
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	0011      	movs	r1, r2
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	2380      	movs	r3, #128	@ 0x80
 8006ecc:	015b      	lsls	r3, r3, #5
 8006ece:	401a      	ands	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69da      	ldr	r2, [r3, #28]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4907      	ldr	r1, [pc, #28]	@ (8006f00 <HAL_SPI_Init+0x16c>)
 8006ee4:	400a      	ands	r2, r1
 8006ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	225d      	movs	r2, #93	@ 0x5d
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	0018      	movs	r0, r3
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b004      	add	sp, #16
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	fffff7ff 	.word	0xfffff7ff

08006f04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	1dbb      	adds	r3, r7, #6
 8006f12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f14:	231f      	movs	r3, #31
 8006f16:	18fb      	adds	r3, r7, r3
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	225c      	movs	r2, #92	@ 0x5c
 8006f20:	5c9b      	ldrb	r3, [r3, r2]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_SPI_Transmit+0x26>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e147      	b.n	80071ba <HAL_SPI_Transmit+0x2b6>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	225c      	movs	r2, #92	@ 0x5c
 8006f2e:	2101      	movs	r1, #1
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f32:	f7fe fc61 	bl	80057f8 <HAL_GetTick>
 8006f36:	0003      	movs	r3, r0
 8006f38:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f3a:	2316      	movs	r3, #22
 8006f3c:	18fb      	adds	r3, r7, r3
 8006f3e:	1dba      	adds	r2, r7, #6
 8006f40:	8812      	ldrh	r2, [r2, #0]
 8006f42:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	225d      	movs	r2, #93	@ 0x5d
 8006f48:	5c9b      	ldrb	r3, [r3, r2]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d004      	beq.n	8006f5a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006f50:	231f      	movs	r3, #31
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	2202      	movs	r2, #2
 8006f56:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f58:	e128      	b.n	80071ac <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_SPI_Transmit+0x64>
 8006f60:	1dbb      	adds	r3, r7, #6
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006f68:	231f      	movs	r3, #31
 8006f6a:	18fb      	adds	r3, r7, r3
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f70:	e11c      	b.n	80071ac <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	225d      	movs	r2, #93	@ 0x5d
 8006f76:	2103      	movs	r1, #3
 8006f78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	1dba      	adds	r2, r7, #6
 8006f8a:	8812      	ldrh	r2, [r2, #0]
 8006f8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1dba      	adds	r2, r7, #6
 8006f92:	8812      	ldrh	r2, [r2, #0]
 8006f94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2244      	movs	r2, #68	@ 0x44
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2246      	movs	r2, #70	@ 0x46
 8006fa8:	2100      	movs	r1, #0
 8006faa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	2380      	movs	r3, #128	@ 0x80
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d110      	bne.n	8006fe6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2140      	movs	r1, #64	@ 0x40
 8006fd0:	438a      	bics	r2, r1
 8006fd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2180      	movs	r1, #128	@ 0x80
 8006fe0:	01c9      	lsls	r1, r1, #7
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2240      	movs	r2, #64	@ 0x40
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b40      	cmp	r3, #64	@ 0x40
 8006ff2:	d007      	beq.n	8007004 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2140      	movs	r1, #64	@ 0x40
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	23e0      	movs	r3, #224	@ 0xe0
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	429a      	cmp	r2, r3
 800700e:	d952      	bls.n	80070b6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_SPI_Transmit+0x11e>
 8007018:	2316      	movs	r3, #22
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d143      	bne.n	80070aa <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007046:	e030      	b.n	80070aa <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2202      	movs	r2, #2
 8007050:	4013      	ands	r3, r2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d112      	bne.n	800707c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	881a      	ldrh	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007066:	1c9a      	adds	r2, r3, #2
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800707a:	e016      	b.n	80070aa <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707c:	f7fe fbbc 	bl	80057f8 <HAL_GetTick>
 8007080:	0002      	movs	r2, r0
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d802      	bhi.n	8007092 <HAL_SPI_Transmit+0x18e>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	d102      	bne.n	8007098 <HAL_SPI_Transmit+0x194>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d108      	bne.n	80070aa <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007098:	231f      	movs	r3, #31
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	2203      	movs	r2, #3
 800709e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	225d      	movs	r2, #93	@ 0x5d
 80070a4:	2101      	movs	r1, #1
 80070a6:	5499      	strb	r1, [r3, r2]
          goto error;
 80070a8:	e080      	b.n	80071ac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1c9      	bne.n	8007048 <HAL_SPI_Transmit+0x144>
 80070b4:	e053      	b.n	800715e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <HAL_SPI_Transmit+0x1c4>
 80070be:	2316      	movs	r3, #22
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d145      	bne.n	8007154 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	7812      	ldrb	r2, [r2, #0]
 80070d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80070ee:	e031      	b.n	8007154 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2202      	movs	r2, #2
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d113      	bne.n	8007126 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007124:	e016      	b.n	8007154 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007126:	f7fe fb67 	bl	80057f8 <HAL_GetTick>
 800712a:	0002      	movs	r2, r0
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d802      	bhi.n	800713c <HAL_SPI_Transmit+0x238>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	d102      	bne.n	8007142 <HAL_SPI_Transmit+0x23e>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d108      	bne.n	8007154 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007142:	231f      	movs	r3, #31
 8007144:	18fb      	adds	r3, r7, r3
 8007146:	2203      	movs	r2, #3
 8007148:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	225d      	movs	r2, #93	@ 0x5d
 800714e:	2101      	movs	r1, #1
 8007150:	5499      	strb	r1, [r3, r2]
          goto error;
 8007152:	e02b      	b.n	80071ac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1c8      	bne.n	80070f0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	0018      	movs	r0, r3
 8007166:	f000 fcef 	bl	8007b48 <SPI_EndRxTxTransaction>
 800716a:	1e03      	subs	r3, r0, #0
 800716c:	d002      	beq.n	8007174 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007196:	2b00      	cmp	r3, #0
 8007198:	d004      	beq.n	80071a4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800719a:	231f      	movs	r3, #31
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	2201      	movs	r2, #1
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e003      	b.n	80071ac <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	225d      	movs	r2, #93	@ 0x5d
 80071a8:	2101      	movs	r1, #1
 80071aa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	225c      	movs	r2, #92	@ 0x5c
 80071b0:	2100      	movs	r1, #0
 80071b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071b4:	231f      	movs	r3, #31
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	781b      	ldrb	r3, [r3, #0]
}
 80071ba:	0018      	movs	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	b008      	add	sp, #32
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c4:	b590      	push	{r4, r7, lr}
 80071c6:	b089      	sub	sp, #36	@ 0x24
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	1dbb      	adds	r3, r7, #6
 80071d2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071d4:	2117      	movs	r1, #23
 80071d6:	187b      	adds	r3, r7, r1
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	225d      	movs	r2, #93	@ 0x5d
 80071e0:	5c9b      	ldrb	r3, [r3, r2]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d003      	beq.n	80071f0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80071e8:	187b      	adds	r3, r7, r1
 80071ea:	2202      	movs	r2, #2
 80071ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80071ee:	e12b      	b.n	8007448 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	2382      	movs	r3, #130	@ 0x82
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d113      	bne.n	8007224 <HAL_SPI_Receive+0x60>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10f      	bne.n	8007224 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	225d      	movs	r2, #93	@ 0x5d
 8007208:	2104      	movs	r1, #4
 800720a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800720c:	1dbb      	adds	r3, r7, #6
 800720e:	881c      	ldrh	r4, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	0023      	movs	r3, r4
 800721c:	f000 f924 	bl	8007468 <HAL_SPI_TransmitReceive>
 8007220:	0003      	movs	r3, r0
 8007222:	e118      	b.n	8007456 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	225c      	movs	r2, #92	@ 0x5c
 8007228:	5c9b      	ldrb	r3, [r3, r2]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_SPI_Receive+0x6e>
 800722e:	2302      	movs	r3, #2
 8007230:	e111      	b.n	8007456 <HAL_SPI_Receive+0x292>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	225c      	movs	r2, #92	@ 0x5c
 8007236:	2101      	movs	r1, #1
 8007238:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723a:	f7fe fadd 	bl	80057f8 <HAL_GetTick>
 800723e:	0003      	movs	r3, r0
 8007240:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_SPI_Receive+0x8c>
 8007248:	1dbb      	adds	r3, r7, #6
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007250:	2317      	movs	r3, #23
 8007252:	18fb      	adds	r3, r7, r3
 8007254:	2201      	movs	r2, #1
 8007256:	701a      	strb	r2, [r3, #0]
    goto error;
 8007258:	e0f6      	b.n	8007448 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	225d      	movs	r2, #93	@ 0x5d
 800725e:	2104      	movs	r1, #4
 8007260:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1dba      	adds	r2, r7, #6
 8007272:	2144      	movs	r1, #68	@ 0x44
 8007274:	8812      	ldrh	r2, [r2, #0]
 8007276:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	1dba      	adds	r2, r7, #6
 800727c:	2146      	movs	r1, #70	@ 0x46
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	23e0      	movs	r3, #224	@ 0xe0
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d908      	bls.n	80072be <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	496a      	ldr	r1, [pc, #424]	@ (8007460 <HAL_SPI_Receive+0x29c>)
 80072b8:	400a      	ands	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	e008      	b.n	80072d0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2180      	movs	r1, #128	@ 0x80
 80072ca:	0149      	lsls	r1, r1, #5
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	2380      	movs	r3, #128	@ 0x80
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	429a      	cmp	r2, r3
 80072da:	d10f      	bne.n	80072fc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2140      	movs	r1, #64	@ 0x40
 80072e8:	438a      	bics	r2, r1
 80072ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	495b      	ldr	r1, [pc, #364]	@ (8007464 <HAL_SPI_Receive+0x2a0>)
 80072f8:	400a      	ands	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2240      	movs	r2, #64	@ 0x40
 8007304:	4013      	ands	r3, r2
 8007306:	2b40      	cmp	r3, #64	@ 0x40
 8007308:	d007      	beq.n	800731a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2140      	movs	r1, #64	@ 0x40
 8007316:	430a      	orrs	r2, r1
 8007318:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	23e0      	movs	r3, #224	@ 0xe0
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	429a      	cmp	r2, r3
 8007324:	d900      	bls.n	8007328 <HAL_SPI_Receive+0x164>
 8007326:	e071      	b.n	800740c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007328:	e035      	b.n	8007396 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2201      	movs	r2, #1
 8007332:	4013      	ands	r3, r2
 8007334:	2b01      	cmp	r3, #1
 8007336:	d117      	bne.n	8007368 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	001a      	movs	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2246      	movs	r2, #70	@ 0x46
 8007358:	5a9b      	ldrh	r3, [r3, r2]
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b299      	uxth	r1, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2246      	movs	r2, #70	@ 0x46
 8007364:	5299      	strh	r1, [r3, r2]
 8007366:	e016      	b.n	8007396 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007368:	f7fe fa46 	bl	80057f8 <HAL_GetTick>
 800736c:	0002      	movs	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d802      	bhi.n	800737e <HAL_SPI_Receive+0x1ba>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	d102      	bne.n	8007384 <HAL_SPI_Receive+0x1c0>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d108      	bne.n	8007396 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007384:	2317      	movs	r3, #23
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	2203      	movs	r2, #3
 800738a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	225d      	movs	r2, #93	@ 0x5d
 8007390:	2101      	movs	r1, #1
 8007392:	5499      	strb	r1, [r3, r2]
          goto error;
 8007394:	e058      	b.n	8007448 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2246      	movs	r2, #70	@ 0x46
 800739a:	5a9b      	ldrh	r3, [r3, r2]
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1c3      	bne.n	800732a <HAL_SPI_Receive+0x166>
 80073a2:	e039      	b.n	8007418 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2201      	movs	r2, #1
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d115      	bne.n	80073de <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	b292      	uxth	r2, r2
 80073be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	1c9a      	adds	r2, r3, #2
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2246      	movs	r2, #70	@ 0x46
 80073ce:	5a9b      	ldrh	r3, [r3, r2]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b299      	uxth	r1, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2246      	movs	r2, #70	@ 0x46
 80073da:	5299      	strh	r1, [r3, r2]
 80073dc:	e016      	b.n	800740c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073de:	f7fe fa0b 	bl	80057f8 <HAL_GetTick>
 80073e2:	0002      	movs	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d802      	bhi.n	80073f4 <HAL_SPI_Receive+0x230>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	3301      	adds	r3, #1
 80073f2:	d102      	bne.n	80073fa <HAL_SPI_Receive+0x236>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d108      	bne.n	800740c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80073fa:	2317      	movs	r3, #23
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2203      	movs	r2, #3
 8007400:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	225d      	movs	r2, #93	@ 0x5d
 8007406:	2101      	movs	r1, #1
 8007408:	5499      	strb	r1, [r3, r2]
          goto error;
 800740a:	e01d      	b.n	8007448 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2246      	movs	r2, #70	@ 0x46
 8007410:	5a9b      	ldrh	r3, [r3, r2]
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1c5      	bne.n	80073a4 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	0018      	movs	r0, r3
 8007420:	f000 fb34 	bl	8007a8c <SPI_EndRxTransaction>
 8007424:	1e03      	subs	r3, r0, #0
 8007426:	d002      	beq.n	800742e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007436:	2317      	movs	r3, #23
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	2201      	movs	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e003      	b.n	8007448 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	225d      	movs	r2, #93	@ 0x5d
 8007444:	2101      	movs	r1, #1
 8007446:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	225c      	movs	r2, #92	@ 0x5c
 800744c:	2100      	movs	r1, #0
 800744e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007450:	2317      	movs	r3, #23
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	781b      	ldrb	r3, [r3, #0]
}
 8007456:	0018      	movs	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	b007      	add	sp, #28
 800745c:	bd90      	pop	{r4, r7, pc}
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	ffffefff 	.word	0xffffefff
 8007464:	ffffbfff 	.word	0xffffbfff

08007468 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	@ 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	001a      	movs	r2, r3
 8007476:	1cbb      	adds	r3, r7, #2
 8007478:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800747a:	2301      	movs	r3, #1
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800747e:	2323      	movs	r3, #35	@ 0x23
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	225c      	movs	r2, #92	@ 0x5c
 800748a:	5c9b      	ldrb	r3, [r3, r2]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x2c>
 8007490:	2302      	movs	r3, #2
 8007492:	e1c4      	b.n	800781e <HAL_SPI_TransmitReceive+0x3b6>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	225c      	movs	r2, #92	@ 0x5c
 8007498:	2101      	movs	r1, #1
 800749a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800749c:	f7fe f9ac 	bl	80057f8 <HAL_GetTick>
 80074a0:	0003      	movs	r3, r0
 80074a2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074a4:	201b      	movs	r0, #27
 80074a6:	183b      	adds	r3, r7, r0
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	215d      	movs	r1, #93	@ 0x5d
 80074ac:	5c52      	ldrb	r2, [r2, r1]
 80074ae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074b6:	2312      	movs	r3, #18
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	1cba      	adds	r2, r7, #2
 80074bc:	8812      	ldrh	r2, [r2, #0]
 80074be:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074c0:	183b      	adds	r3, r7, r0
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d011      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x84>
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	2382      	movs	r3, #130	@ 0x82
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d107      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x7a>
 80074da:	183b      	adds	r3, r7, r0
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d004      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80074e2:	2323      	movs	r3, #35	@ 0x23
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2202      	movs	r2, #2
 80074e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80074ea:	e191      	b.n	8007810 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d006      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x98>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x98>
 80074f8:	1cbb      	adds	r3, r7, #2
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007500:	2323      	movs	r3, #35	@ 0x23
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2201      	movs	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
    goto error;
 8007508:	e182      	b.n	8007810 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	225d      	movs	r2, #93	@ 0x5d
 800750e:	5c9b      	ldrb	r3, [r3, r2]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b04      	cmp	r3, #4
 8007514:	d003      	beq.n	800751e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	225d      	movs	r2, #93	@ 0x5d
 800751a:	2105      	movs	r1, #5
 800751c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1cba      	adds	r2, r7, #2
 800752e:	2146      	movs	r1, #70	@ 0x46
 8007530:	8812      	ldrh	r2, [r2, #0]
 8007532:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1cba      	adds	r2, r7, #2
 8007538:	2144      	movs	r1, #68	@ 0x44
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	1cba      	adds	r2, r7, #2
 8007548:	8812      	ldrh	r2, [r2, #0]
 800754a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	1cba      	adds	r2, r7, #2
 8007550:	8812      	ldrh	r2, [r2, #0]
 8007552:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	23e0      	movs	r3, #224	@ 0xe0
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	429a      	cmp	r2, r3
 800756a:	d908      	bls.n	800757e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	49ac      	ldr	r1, [pc, #688]	@ (8007828 <HAL_SPI_TransmitReceive+0x3c0>)
 8007578:	400a      	ands	r2, r1
 800757a:	605a      	str	r2, [r3, #4]
 800757c:	e008      	b.n	8007590 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2180      	movs	r1, #128	@ 0x80
 800758a:	0149      	lsls	r1, r1, #5
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2240      	movs	r2, #64	@ 0x40
 8007598:	4013      	ands	r3, r2
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d007      	beq.n	80075ae <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2140      	movs	r1, #64	@ 0x40
 80075aa:	430a      	orrs	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	23e0      	movs	r3, #224	@ 0xe0
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d800      	bhi.n	80075bc <HAL_SPI_TransmitReceive+0x154>
 80075ba:	e083      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_SPI_TransmitReceive+0x168>
 80075c4:	2312      	movs	r3, #18
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d000      	beq.n	80075d0 <HAL_SPI_TransmitReceive+0x168>
 80075ce:	e06d      	b.n	80076ac <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	881a      	ldrh	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e0:	1c9a      	adds	r2, r3, #2
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f4:	e05a      	b.n	80076ac <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2202      	movs	r2, #2
 80075fe:	4013      	ands	r3, r2
 8007600:	2b02      	cmp	r3, #2
 8007602:	d11b      	bne.n	800763c <HAL_SPI_TransmitReceive+0x1d4>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <HAL_SPI_TransmitReceive+0x1d4>
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	2b01      	cmp	r3, #1
 8007612:	d113      	bne.n	800763c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	881a      	ldrh	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007624:	1c9a      	adds	r2, r3, #2
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	2201      	movs	r2, #1
 8007644:	4013      	ands	r3, r2
 8007646:	2b01      	cmp	r3, #1
 8007648:	d11c      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x21c>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2246      	movs	r2, #70	@ 0x46
 800764e:	5a9b      	ldrh	r3, [r3, r2]
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007660:	b292      	uxth	r2, r2
 8007662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007668:	1c9a      	adds	r2, r3, #2
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2246      	movs	r2, #70	@ 0x46
 8007672:	5a9b      	ldrh	r3, [r3, r2]
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b299      	uxth	r1, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2246      	movs	r2, #70	@ 0x46
 800767e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007680:	2301      	movs	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007684:	f7fe f8b8 	bl	80057f8 <HAL_GetTick>
 8007688:	0002      	movs	r2, r0
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007690:	429a      	cmp	r2, r3
 8007692:	d80b      	bhi.n	80076ac <HAL_SPI_TransmitReceive+0x244>
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	3301      	adds	r3, #1
 8007698:	d008      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800769a:	2323      	movs	r3, #35	@ 0x23
 800769c:	18fb      	adds	r3, r7, r3
 800769e:	2203      	movs	r2, #3
 80076a0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	225d      	movs	r2, #93	@ 0x5d
 80076a6:	2101      	movs	r1, #1
 80076a8:	5499      	strb	r1, [r3, r2]
        goto error;
 80076aa:	e0b1      	b.n	8007810 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d19f      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x18e>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2246      	movs	r2, #70	@ 0x46
 80076ba:	5a9b      	ldrh	r3, [r3, r2]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d199      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x18e>
 80076c2:	e089      	b.n	80077d8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x270>
 80076cc:	2312      	movs	r3, #18
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d000      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x270>
 80076d6:	e074      	b.n	80077c2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fe:	e060      	b.n	80077c2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2202      	movs	r2, #2
 8007708:	4013      	ands	r3, r2
 800770a:	2b02      	cmp	r3, #2
 800770c:	d11c      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x2e0>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d017      	beq.n	8007748 <HAL_SPI_TransmitReceive+0x2e0>
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	2b01      	cmp	r3, #1
 800771c:	d114      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	330c      	adds	r3, #12
 8007728:	7812      	ldrb	r2, [r2, #0]
 800772a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2201      	movs	r2, #1
 8007750:	4013      	ands	r3, r2
 8007752:	2b01      	cmp	r3, #1
 8007754:	d11e      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x32c>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2246      	movs	r2, #70	@ 0x46
 800775a:	5a9b      	ldrh	r3, [r3, r2]
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d018      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	001a      	movs	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2246      	movs	r2, #70	@ 0x46
 8007782:	5a9b      	ldrh	r3, [r3, r2]
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b299      	uxth	r1, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2246      	movs	r2, #70	@ 0x46
 800778e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007790:	2301      	movs	r3, #1
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007794:	f7fe f830 	bl	80057f8 <HAL_GetTick>
 8007798:	0002      	movs	r2, r0
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d802      	bhi.n	80077aa <HAL_SPI_TransmitReceive+0x342>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	3301      	adds	r3, #1
 80077a8:	d102      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x348>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d108      	bne.n	80077c2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80077b0:	2323      	movs	r3, #35	@ 0x23
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	2203      	movs	r2, #3
 80077b6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	225d      	movs	r2, #93	@ 0x5d
 80077bc:	2101      	movs	r1, #1
 80077be:	5499      	strb	r1, [r3, r2]
        goto error;
 80077c0:	e026      	b.n	8007810 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d199      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x298>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2246      	movs	r2, #70	@ 0x46
 80077d0:	5a9b      	ldrh	r3, [r3, r2]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d193      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0018      	movs	r0, r3
 80077e0:	f000 f9b2 	bl	8007b48 <SPI_EndRxTxTransaction>
 80077e4:	1e03      	subs	r3, r0, #0
 80077e6:	d006      	beq.n	80077f6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80077e8:	2323      	movs	r3, #35	@ 0x23
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	2201      	movs	r2, #1
 80077ee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80077fe:	2323      	movs	r3, #35	@ 0x23
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e003      	b.n	8007810 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	225d      	movs	r2, #93	@ 0x5d
 800780c:	2101      	movs	r1, #1
 800780e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	225c      	movs	r2, #92	@ 0x5c
 8007814:	2100      	movs	r1, #0
 8007816:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007818:	2323      	movs	r3, #35	@ 0x23
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	781b      	ldrb	r3, [r3, #0]
}
 800781e:	0018      	movs	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	b00a      	add	sp, #40	@ 0x28
 8007824:	bd80      	pop	{r7, pc}
 8007826:	46c0      	nop			@ (mov r8, r8)
 8007828:	ffffefff 	.word	0xffffefff

0800782c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	1dfb      	adds	r3, r7, #7
 800783a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800783c:	f7fd ffdc 	bl	80057f8 <HAL_GetTick>
 8007840:	0002      	movs	r2, r0
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	18d3      	adds	r3, r2, r3
 800784a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800784c:	f7fd ffd4 	bl	80057f8 <HAL_GetTick>
 8007850:	0003      	movs	r3, r0
 8007852:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007854:	4b3a      	ldr	r3, [pc, #232]	@ (8007940 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	015b      	lsls	r3, r3, #5
 800785a:	0d1b      	lsrs	r3, r3, #20
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	4353      	muls	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007862:	e058      	b.n	8007916 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	3301      	adds	r3, #1
 8007868:	d055      	beq.n	8007916 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800786a:	f7fd ffc5 	bl	80057f8 <HAL_GetTick>
 800786e:	0002      	movs	r2, r0
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	429a      	cmp	r2, r3
 8007878:	d902      	bls.n	8007880 <SPI_WaitFlagStateUntilTimeout+0x54>
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d142      	bne.n	8007906 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	21e0      	movs	r1, #224	@ 0xe0
 800788c:	438a      	bics	r2, r1
 800788e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	2382      	movs	r3, #130	@ 0x82
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	429a      	cmp	r2, r3
 800789a:	d113      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	2380      	movs	r3, #128	@ 0x80
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d005      	beq.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	2380      	movs	r3, #128	@ 0x80
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d107      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2140      	movs	r1, #64	@ 0x40
 80078c0:	438a      	bics	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078c8:	2380      	movs	r3, #128	@ 0x80
 80078ca:	019b      	lsls	r3, r3, #6
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d110      	bne.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	491a      	ldr	r1, [pc, #104]	@ (8007944 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80078dc:	400a      	ands	r2, r1
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2180      	movs	r1, #128	@ 0x80
 80078ec:	0189      	lsls	r1, r1, #6
 80078ee:	430a      	orrs	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	225d      	movs	r2, #93	@ 0x5d
 80078f6:	2101      	movs	r1, #1
 80078f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	225c      	movs	r2, #92	@ 0x5c
 80078fe:	2100      	movs	r1, #0
 8007900:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e017      	b.n	8007936 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	3b01      	subs	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	425a      	negs	r2, r3
 8007926:	4153      	adcs	r3, r2
 8007928:	b2db      	uxtb	r3, r3
 800792a:	001a      	movs	r2, r3
 800792c:	1dfb      	adds	r3, r7, #7
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d197      	bne.n	8007864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	0018      	movs	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	b008      	add	sp, #32
 800793c:	bd80      	pop	{r7, pc}
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	20000000 	.word	0x20000000
 8007944:	ffffdfff 	.word	0xffffdfff

08007948 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08a      	sub	sp, #40	@ 0x28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007956:	2317      	movs	r3, #23
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	2200      	movs	r2, #0
 800795c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800795e:	f7fd ff4b 	bl	80057f8 <HAL_GetTick>
 8007962:	0002      	movs	r2, r0
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	18d3      	adds	r3, r2, r3
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800796e:	f7fd ff43 	bl	80057f8 <HAL_GetTick>
 8007972:	0003      	movs	r3, r0
 8007974:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800797e:	4b41      	ldr	r3, [pc, #260]	@ (8007a84 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	0013      	movs	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	189b      	adds	r3, r3, r2
 8007988:	00da      	lsls	r2, r3, #3
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	0d1b      	lsrs	r3, r3, #20
 800798e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007990:	4353      	muls	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007994:	e068      	b.n	8007a68 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	23c0      	movs	r3, #192	@ 0xc0
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	429a      	cmp	r2, r3
 800799e:	d10a      	bne.n	80079b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d107      	bne.n	80079b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	2117      	movs	r1, #23
 80079ae:	187b      	adds	r3, r7, r1
 80079b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079b2:	187b      	adds	r3, r7, r1
 80079b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	d055      	beq.n	8007a68 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079bc:	f7fd ff1c 	bl	80057f8 <HAL_GetTick>
 80079c0:	0002      	movs	r2, r0
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d902      	bls.n	80079d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d142      	bne.n	8007a58 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	21e0      	movs	r1, #224	@ 0xe0
 80079de:	438a      	bics	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	2382      	movs	r3, #130	@ 0x82
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d113      	bne.n	8007a16 <SPI_WaitFifoStateUntilTimeout+0xce>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	2380      	movs	r3, #128	@ 0x80
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d005      	beq.n	8007a06 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	2380      	movs	r3, #128	@ 0x80
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d107      	bne.n	8007a16 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2140      	movs	r1, #64	@ 0x40
 8007a12:	438a      	bics	r2, r1
 8007a14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a1a:	2380      	movs	r3, #128	@ 0x80
 8007a1c:	019b      	lsls	r3, r3, #6
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d110      	bne.n	8007a44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4916      	ldr	r1, [pc, #88]	@ (8007a88 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007a2e:	400a      	ands	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2180      	movs	r1, #128	@ 0x80
 8007a3e:	0189      	lsls	r1, r1, #6
 8007a40:	430a      	orrs	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	225d      	movs	r2, #93	@ 0x5d
 8007a48:	2101      	movs	r1, #1
 8007a4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	225c      	movs	r2, #92	@ 0x5c
 8007a50:	2100      	movs	r1, #0
 8007a52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e010      	b.n	8007a7a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4013      	ands	r3, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d18e      	bne.n	8007996 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b00a      	add	sp, #40	@ 0x28
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	20000000 	.word	0x20000000
 8007a88:	ffffdfff 	.word	0xffffdfff

08007a8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	2382      	movs	r3, #130	@ 0x82
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d113      	bne.n	8007acc <SPI_EndRxTransaction+0x40>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	2380      	movs	r3, #128	@ 0x80
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d005      	beq.n	8007abc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	2380      	movs	r3, #128	@ 0x80
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d107      	bne.n	8007acc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2140      	movs	r1, #64	@ 0x40
 8007ac8:	438a      	bics	r2, r1
 8007aca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	0013      	movs	r3, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2180      	movs	r1, #128	@ 0x80
 8007ada:	f7ff fea7 	bl	800782c <SPI_WaitFlagStateUntilTimeout>
 8007ade:	1e03      	subs	r3, r0, #0
 8007ae0:	d007      	beq.n	8007af2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e026      	b.n	8007b40 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	2382      	movs	r3, #130	@ 0x82
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d11f      	bne.n	8007b3e <SPI_EndRxTransaction+0xb2>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	2380      	movs	r3, #128	@ 0x80
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d005      	beq.n	8007b16 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	2380      	movs	r3, #128	@ 0x80
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d113      	bne.n	8007b3e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	23c0      	movs	r3, #192	@ 0xc0
 8007b1a:	00d9      	lsls	r1, r3, #3
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	0013      	movs	r3, r2
 8007b24:	2200      	movs	r2, #0
 8007b26:	f7ff ff0f 	bl	8007948 <SPI_WaitFifoStateUntilTimeout>
 8007b2a:	1e03      	subs	r3, r0, #0
 8007b2c:	d007      	beq.n	8007b3e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b32:	2220      	movs	r2, #32
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e000      	b.n	8007b40 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	0018      	movs	r0, r3
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b004      	add	sp, #16
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	23c0      	movs	r3, #192	@ 0xc0
 8007b58:	0159      	lsls	r1, r3, #5
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	0013      	movs	r3, r2
 8007b62:	2200      	movs	r2, #0
 8007b64:	f7ff fef0 	bl	8007948 <SPI_WaitFifoStateUntilTimeout>
 8007b68:	1e03      	subs	r3, r0, #0
 8007b6a:	d007      	beq.n	8007b7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b70:	2220      	movs	r2, #32
 8007b72:	431a      	orrs	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e027      	b.n	8007bcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	0013      	movs	r3, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	f7ff fe4f 	bl	800782c <SPI_WaitFlagStateUntilTimeout>
 8007b8e:	1e03      	subs	r3, r0, #0
 8007b90:	d007      	beq.n	8007ba2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b96:	2220      	movs	r2, #32
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e014      	b.n	8007bcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	23c0      	movs	r3, #192	@ 0xc0
 8007ba6:	00d9      	lsls	r1, r3, #3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	0013      	movs	r3, r2
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f7ff fec9 	bl	8007948 <SPI_WaitFifoStateUntilTimeout>
 8007bb6:	1e03      	subs	r3, r0, #0
 8007bb8:	d007      	beq.n	8007bca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e000      	b.n	8007bcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	0018      	movs	r0, r3
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b004      	add	sp, #16
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e042      	b.n	8007c6c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	223d      	movs	r2, #61	@ 0x3d
 8007bea:	5c9b      	ldrb	r3, [r3, r2]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d107      	bne.n	8007c02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	223c      	movs	r2, #60	@ 0x3c
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7fd fc1f 	bl	8005440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	223d      	movs	r2, #61	@ 0x3d
 8007c06:	2102      	movs	r1, #2
 8007c08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3304      	adds	r3, #4
 8007c12:	0019      	movs	r1, r3
 8007c14:	0010      	movs	r0, r2
 8007c16:	f000 f94d 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2246      	movs	r2, #70	@ 0x46
 8007c1e:	2101      	movs	r1, #1
 8007c20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	223e      	movs	r2, #62	@ 0x3e
 8007c26:	2101      	movs	r1, #1
 8007c28:	5499      	strb	r1, [r3, r2]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	223f      	movs	r2, #63	@ 0x3f
 8007c2e:	2101      	movs	r1, #1
 8007c30:	5499      	strb	r1, [r3, r2]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2240      	movs	r2, #64	@ 0x40
 8007c36:	2101      	movs	r1, #1
 8007c38:	5499      	strb	r1, [r3, r2]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2241      	movs	r2, #65	@ 0x41
 8007c3e:	2101      	movs	r1, #1
 8007c40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2242      	movs	r2, #66	@ 0x42
 8007c46:	2101      	movs	r1, #1
 8007c48:	5499      	strb	r1, [r3, r2]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2243      	movs	r2, #67	@ 0x43
 8007c4e:	2101      	movs	r1, #1
 8007c50:	5499      	strb	r1, [r3, r2]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2244      	movs	r2, #68	@ 0x44
 8007c56:	2101      	movs	r1, #1
 8007c58:	5499      	strb	r1, [r3, r2]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2245      	movs	r2, #69	@ 0x45
 8007c5e:	2101      	movs	r1, #1
 8007c60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	223d      	movs	r2, #61	@ 0x3d
 8007c66:	2101      	movs	r1, #1
 8007c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b002      	add	sp, #8
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	223d      	movs	r2, #61	@ 0x3d
 8007c80:	5c9b      	ldrb	r3, [r3, r2]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d001      	beq.n	8007c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e035      	b.n	8007cf8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	223d      	movs	r2, #61	@ 0x3d
 8007c90:	2102      	movs	r1, #2
 8007c92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a15      	ldr	r2, [pc, #84]	@ (8007d00 <HAL_TIM_Base_Start_IT+0x8c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIM_Base_Start_IT+0x4e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a14      	ldr	r2, [pc, #80]	@ (8007d04 <HAL_TIM_Base_Start_IT+0x90>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIM_Base_Start_IT+0x4e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a12      	ldr	r2, [pc, #72]	@ (8007d08 <HAL_TIM_Base_Start_IT+0x94>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d111      	bne.n	8007ce6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2207      	movs	r2, #7
 8007cca:	4013      	ands	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b06      	cmp	r3, #6
 8007cd2:	d010      	beq.n	8007cf6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce4:	e007      	b.n	8007cf6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b004      	add	sp, #16
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40012c00 	.word	0x40012c00
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40014000 	.word	0x40014000

08007d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d16:	230f      	movs	r3, #15
 8007d18:	18fb      	adds	r3, r7, r3
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	223c      	movs	r2, #60	@ 0x3c
 8007d22:	5c9b      	ldrb	r3, [r3, r2]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIM_ConfigClockSource+0x20>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e0bc      	b.n	8007ea6 <HAL_TIM_ConfigClockSource+0x19a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	223c      	movs	r2, #60	@ 0x3c
 8007d30:	2101      	movs	r1, #1
 8007d32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	223d      	movs	r2, #61	@ 0x3d
 8007d38:	2102      	movs	r1, #2
 8007d3a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2277      	movs	r2, #119	@ 0x77
 8007d48:	4393      	bics	r3, r2
 8007d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4a58      	ldr	r2, [pc, #352]	@ (8007eb0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2280      	movs	r2, #128	@ 0x80
 8007d62:	0192      	lsls	r2, r2, #6
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d040      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0xde>
 8007d68:	2280      	movs	r2, #128	@ 0x80
 8007d6a:	0192      	lsls	r2, r2, #6
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d900      	bls.n	8007d72 <HAL_TIM_ConfigClockSource+0x66>
 8007d70:	e088      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007d72:	2280      	movs	r2, #128	@ 0x80
 8007d74:	0152      	lsls	r2, r2, #5
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d100      	bne.n	8007d7c <HAL_TIM_ConfigClockSource+0x70>
 8007d7a:	e088      	b.n	8007e8e <HAL_TIM_ConfigClockSource+0x182>
 8007d7c:	2280      	movs	r2, #128	@ 0x80
 8007d7e:	0152      	lsls	r2, r2, #5
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d900      	bls.n	8007d86 <HAL_TIM_ConfigClockSource+0x7a>
 8007d84:	e07e      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007d86:	2b70      	cmp	r3, #112	@ 0x70
 8007d88:	d018      	beq.n	8007dbc <HAL_TIM_ConfigClockSource+0xb0>
 8007d8a:	d900      	bls.n	8007d8e <HAL_TIM_ConfigClockSource+0x82>
 8007d8c:	e07a      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007d8e:	2b60      	cmp	r3, #96	@ 0x60
 8007d90:	d04f      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x126>
 8007d92:	d900      	bls.n	8007d96 <HAL_TIM_ConfigClockSource+0x8a>
 8007d94:	e076      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007d96:	2b50      	cmp	r3, #80	@ 0x50
 8007d98:	d03b      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x106>
 8007d9a:	d900      	bls.n	8007d9e <HAL_TIM_ConfigClockSource+0x92>
 8007d9c:	e072      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007d9e:	2b40      	cmp	r3, #64	@ 0x40
 8007da0:	d057      	beq.n	8007e52 <HAL_TIM_ConfigClockSource+0x146>
 8007da2:	d900      	bls.n	8007da6 <HAL_TIM_ConfigClockSource+0x9a>
 8007da4:	e06e      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007da6:	2b30      	cmp	r3, #48	@ 0x30
 8007da8:	d063      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x166>
 8007daa:	d86b      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d060      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x166>
 8007db0:	d868      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d05d      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x166>
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d05b      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x166>
 8007dba:	e063      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dcc:	f000 f970 	bl	80080b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2277      	movs	r2, #119	@ 0x77
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	609a      	str	r2, [r3, #8]
      break;
 8007de8:	e052      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dfa:	f000 f959 	bl	80080b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2180      	movs	r1, #128	@ 0x80
 8007e0a:	01c9      	lsls	r1, r1, #7
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]
      break;
 8007e10:	e03e      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1e:	001a      	movs	r2, r3
 8007e20:	f000 f8cc 	bl	8007fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2150      	movs	r1, #80	@ 0x50
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f000 f926 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007e30:	e02e      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e3e:	001a      	movs	r2, r3
 8007e40:	f000 f8ea 	bl	8008018 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2160      	movs	r1, #96	@ 0x60
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f000 f916 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007e50:	e01e      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5e:	001a      	movs	r2, r3
 8007e60:	f000 f8ac 	bl	8007fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2140      	movs	r1, #64	@ 0x40
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f000 f906 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007e70:	e00e      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	0019      	movs	r1, r3
 8007e7c:	0010      	movs	r0, r2
 8007e7e:	f000 f8fd 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007e82:	e005      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007e84:	230f      	movs	r3, #15
 8007e86:	18fb      	adds	r3, r7, r3
 8007e88:	2201      	movs	r2, #1
 8007e8a:	701a      	strb	r2, [r3, #0]
      break;
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007e8e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	223d      	movs	r2, #61	@ 0x3d
 8007e94:	2101      	movs	r1, #1
 8007e96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	223c      	movs	r2, #60	@ 0x3c
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	5499      	strb	r1, [r3, r2]

  return status;
 8007ea0:	230f      	movs	r3, #15
 8007ea2:	18fb      	adds	r3, r7, r3
 8007ea4:	781b      	ldrb	r3, [r3, #0]
}
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	b004      	add	sp, #16
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	46c0      	nop			@ (mov r8, r8)
 8007eb0:	ffff00ff 	.word	0xffff00ff

08007eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a36      	ldr	r2, [pc, #216]	@ (8007fa0 <TIM_Base_SetConfig+0xec>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_Base_SetConfig+0x20>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a35      	ldr	r2, [pc, #212]	@ (8007fa4 <TIM_Base_SetConfig+0xf0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d108      	bne.n	8007ee6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2270      	movs	r2, #112	@ 0x70
 8007ed8:	4393      	bics	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8007fa0 <TIM_Base_SetConfig+0xec>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_Base_SetConfig+0x62>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa4 <TIM_Base_SetConfig+0xf0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_Base_SetConfig+0x62>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8007fa8 <TIM_Base_SetConfig+0xf4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_Base_SetConfig+0x62>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a2a      	ldr	r2, [pc, #168]	@ (8007fac <TIM_Base_SetConfig+0xf8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_Base_SetConfig+0x62>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a29      	ldr	r2, [pc, #164]	@ (8007fb0 <TIM_Base_SetConfig+0xfc>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_Base_SetConfig+0x62>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a28      	ldr	r2, [pc, #160]	@ (8007fb4 <TIM_Base_SetConfig+0x100>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d108      	bne.n	8007f28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a27      	ldr	r2, [pc, #156]	@ (8007fb8 <TIM_Base_SetConfig+0x104>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2280      	movs	r2, #128	@ 0x80
 8007f2c:	4393      	bics	r3, r2
 8007f2e:	001a      	movs	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a13      	ldr	r2, [pc, #76]	@ (8007fa0 <TIM_Base_SetConfig+0xec>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00b      	beq.n	8007f6e <TIM_Base_SetConfig+0xba>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a14      	ldr	r2, [pc, #80]	@ (8007fac <TIM_Base_SetConfig+0xf8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d007      	beq.n	8007f6e <TIM_Base_SetConfig+0xba>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a13      	ldr	r2, [pc, #76]	@ (8007fb0 <TIM_Base_SetConfig+0xfc>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d003      	beq.n	8007f6e <TIM_Base_SetConfig+0xba>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a12      	ldr	r2, [pc, #72]	@ (8007fb4 <TIM_Base_SetConfig+0x100>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d103      	bne.n	8007f76 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2201      	movs	r2, #1
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d106      	bne.n	8007f96 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4393      	bics	r3, r2
 8007f90:	001a      	movs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	611a      	str	r2, [r3, #16]
  }
}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b004      	add	sp, #16
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	46c0      	nop			@ (mov r8, r8)
 8007fa0:	40012c00 	.word	0x40012c00
 8007fa4:	40000400 	.word	0x40000400
 8007fa8:	40002000 	.word	0x40002000
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800
 8007fb8:	fffffcff 	.word	0xfffffcff

08007fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	4393      	bics	r3, r2
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	22f0      	movs	r2, #240	@ 0xf0
 8007fe6:	4393      	bics	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4393      	bics	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	621a      	str	r2, [r3, #32]
}
 8008010:	46c0      	nop			@ (mov r8, r8)
 8008012:	46bd      	mov	sp, r7
 8008014:	b006      	add	sp, #24
 8008016:	bd80      	pop	{r7, pc}

08008018 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	2210      	movs	r2, #16
 8008030:	4393      	bics	r3, r2
 8008032:	001a      	movs	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	4a0d      	ldr	r2, [pc, #52]	@ (8008078 <TIM_TI2_ConfigInputStage+0x60>)
 8008042:	4013      	ands	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	031b      	lsls	r3, r3, #12
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	22a0      	movs	r2, #160	@ 0xa0
 8008054:	4393      	bics	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	46c0      	nop			@ (mov r8, r8)
 8008070:	46bd      	mov	sp, r7
 8008072:	b006      	add	sp, #24
 8008074:	bd80      	pop	{r7, pc}
 8008076:	46c0      	nop			@ (mov r8, r8)
 8008078:	ffff0fff 	.word	0xffff0fff

0800807c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2270      	movs	r2, #112	@ 0x70
 8008090:	4393      	bics	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4313      	orrs	r3, r2
 800809a:	2207      	movs	r2, #7
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	609a      	str	r2, [r3, #8]
}
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b004      	add	sp, #16
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	4a09      	ldr	r2, [pc, #36]	@ (80080ec <TIM_ETR_SetConfig+0x3c>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	021a      	lsls	r2, r3, #8
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	609a      	str	r2, [r3, #8]
}
 80080e4:	46c0      	nop			@ (mov r8, r8)
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b006      	add	sp, #24
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	ffff00ff 	.word	0xffff00ff

080080f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	223c      	movs	r2, #60	@ 0x3c
 80080fe:	5c9b      	ldrb	r3, [r3, r2]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e041      	b.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	223c      	movs	r2, #60	@ 0x3c
 800810c:	2101      	movs	r1, #1
 800810e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	223d      	movs	r2, #61	@ 0x3d
 8008114:	2102      	movs	r1, #2
 8008116:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2270      	movs	r2, #112	@ 0x70
 800812c:	4393      	bics	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a13      	ldr	r2, [pc, #76]	@ (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d009      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a11      	ldr	r2, [pc, #68]	@ (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a10      	ldr	r2, [pc, #64]	@ (800819c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d10c      	bne.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2280      	movs	r2, #128	@ 0x80
 8008164:	4393      	bics	r3, r2
 8008166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	223d      	movs	r2, #61	@ 0x3d
 800817e:	2101      	movs	r1, #1
 8008180:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	223c      	movs	r2, #60	@ 0x3c
 8008186:	2100      	movs	r1, #0
 8008188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	b004      	add	sp, #16
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40012c00 	.word	0x40012c00
 8008198:	40000400 	.word	0x40000400
 800819c:	40014000 	.word	0x40014000

080081a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e044      	b.n	800823c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2278      	movs	r2, #120	@ 0x78
 80081be:	2100      	movs	r1, #0
 80081c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7fd f959 	bl	800547c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2224      	movs	r2, #36	@ 0x24
 80081ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2101      	movs	r1, #1
 80081dc:	438a      	bics	r2, r1
 80081de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	0018      	movs	r0, r3
 80081ec:	f000 fd46 	bl	8008c7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f000 fc02 	bl	80089fc <UART_SetConfig>
 80081f8:	0003      	movs	r3, r0
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e01c      	b.n	800823c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	490d      	ldr	r1, [pc, #52]	@ (8008244 <HAL_UART_Init+0xa4>)
 800820e:	400a      	ands	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2108      	movs	r1, #8
 800821e:	438a      	bics	r2, r1
 8008220:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2101      	movs	r1, #1
 800822e:	430a      	orrs	r2, r1
 8008230:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	0018      	movs	r0, r3
 8008236:	f000 fdd5 	bl	8008de4 <UART_CheckIdleState>
 800823a:	0003      	movs	r3, r0
}
 800823c:	0018      	movs	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	b002      	add	sp, #8
 8008242:	bd80      	pop	{r7, pc}
 8008244:	fffff7ff 	.word	0xfffff7ff

08008248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	@ 0x28
 800824c:	af02      	add	r7, sp, #8
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	1dbb      	adds	r3, r7, #6
 8008256:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825c:	2b20      	cmp	r3, #32
 800825e:	d000      	beq.n	8008262 <HAL_UART_Transmit+0x1a>
 8008260:	e08c      	b.n	800837c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_UART_Transmit+0x28>
 8008268:	1dbb      	adds	r3, r7, #6
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e084      	b.n	800837e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	2380      	movs	r3, #128	@ 0x80
 800827a:	015b      	lsls	r3, r3, #5
 800827c:	429a      	cmp	r2, r3
 800827e:	d109      	bne.n	8008294 <HAL_UART_Transmit+0x4c>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2201      	movs	r2, #1
 800828c:	4013      	ands	r3, r2
 800828e:	d001      	beq.n	8008294 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e074      	b.n	800837e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2284      	movs	r2, #132	@ 0x84
 8008298:	2100      	movs	r1, #0
 800829a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2221      	movs	r2, #33	@ 0x21
 80082a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a2:	f7fd faa9 	bl	80057f8 <HAL_GetTick>
 80082a6:	0003      	movs	r3, r0
 80082a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1dba      	adds	r2, r7, #6
 80082ae:	2150      	movs	r1, #80	@ 0x50
 80082b0:	8812      	ldrh	r2, [r2, #0]
 80082b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	1dba      	adds	r2, r7, #6
 80082b8:	2152      	movs	r1, #82	@ 0x52
 80082ba:	8812      	ldrh	r2, [r2, #0]
 80082bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	2380      	movs	r3, #128	@ 0x80
 80082c4:	015b      	lsls	r3, r3, #5
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d108      	bne.n	80082dc <HAL_UART_Transmit+0x94>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	e003      	b.n	80082e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082e4:	e02f      	b.n	8008346 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	0013      	movs	r3, r2
 80082f0:	2200      	movs	r2, #0
 80082f2:	2180      	movs	r1, #128	@ 0x80
 80082f4:	f000 fe1e 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 80082f8:	1e03      	subs	r3, r0, #0
 80082fa:	d004      	beq.n	8008306 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2220      	movs	r2, #32
 8008300:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e03b      	b.n	800837e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	881a      	ldrh	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	05d2      	lsls	r2, r2, #23
 8008316:	0dd2      	lsrs	r2, r2, #23
 8008318:	b292      	uxth	r2, r2
 800831a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	3302      	adds	r3, #2
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e007      	b.n	8008334 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	3301      	adds	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2252      	movs	r2, #82	@ 0x52
 8008338:	5a9b      	ldrh	r3, [r3, r2]
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b299      	uxth	r1, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2252      	movs	r2, #82	@ 0x52
 8008344:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2252      	movs	r2, #82	@ 0x52
 800834a:	5a9b      	ldrh	r3, [r3, r2]
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1c9      	bne.n	80082e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	0013      	movs	r3, r2
 800835c:	2200      	movs	r2, #0
 800835e:	2140      	movs	r1, #64	@ 0x40
 8008360:	f000 fde8 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008364:	1e03      	subs	r3, r0, #0
 8008366:	d004      	beq.n	8008372 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e005      	b.n	800837e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2220      	movs	r2, #32
 8008376:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800837c:	2302      	movs	r3, #2
  }
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	b008      	add	sp, #32
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b088      	sub	sp, #32
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	1dbb      	adds	r3, r7, #6
 8008392:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2280      	movs	r2, #128	@ 0x80
 8008398:	589b      	ldr	r3, [r3, r2]
 800839a:	2b20      	cmp	r3, #32
 800839c:	d145      	bne.n	800842a <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_UART_Receive_IT+0x26>
 80083a4:	1dbb      	adds	r3, r7, #6
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e03d      	b.n	800842c <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	2380      	movs	r3, #128	@ 0x80
 80083b6:	015b      	lsls	r3, r3, #5
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d109      	bne.n	80083d0 <HAL_UART_Receive_IT+0x4a>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2201      	movs	r2, #1
 80083c8:	4013      	ands	r3, r2
 80083ca:	d001      	beq.n	80083d0 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e02d      	b.n	800842c <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	041b      	lsls	r3, r3, #16
 80083e0:	4013      	ands	r3, r2
 80083e2:	d019      	beq.n	8008418 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e4:	f3ef 8310 	mrs	r3, PRIMASK
 80083e8:	613b      	str	r3, [r7, #16]
  return(result);
 80083ea:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	2301      	movs	r3, #1
 80083f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f383 8810 	msr	PRIMASK, r3
}
 80083f8:	46c0      	nop			@ (mov r8, r8)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2180      	movs	r1, #128	@ 0x80
 8008406:	04c9      	lsls	r1, r1, #19
 8008408:	430a      	orrs	r2, r1
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	f383 8810 	msr	PRIMASK, r3
}
 8008416:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008418:	1dbb      	adds	r3, r7, #6
 800841a:	881a      	ldrh	r2, [r3, #0]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	0018      	movs	r0, r3
 8008422:	f000 fdf7 	bl	8009014 <UART_Start_Receive_IT>
 8008426:	0003      	movs	r3, r0
 8008428:	e000      	b.n	800842c <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800842a:	2302      	movs	r3, #2
  }
}
 800842c:	0018      	movs	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	b008      	add	sp, #32
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008434:	b590      	push	{r4, r7, lr}
 8008436:	b0ab      	sub	sp, #172	@ 0xac
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	22a4      	movs	r2, #164	@ 0xa4
 8008444:	18b9      	adds	r1, r7, r2
 8008446:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	20a0      	movs	r0, #160	@ 0xa0
 8008450:	1839      	adds	r1, r7, r0
 8008452:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	219c      	movs	r1, #156	@ 0x9c
 800845c:	1879      	adds	r1, r7, r1
 800845e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008460:	0011      	movs	r1, r2
 8008462:	18bb      	adds	r3, r7, r2
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a99      	ldr	r2, [pc, #612]	@ (80086cc <HAL_UART_IRQHandler+0x298>)
 8008468:	4013      	ands	r3, r2
 800846a:	2298      	movs	r2, #152	@ 0x98
 800846c:	18bc      	adds	r4, r7, r2
 800846e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008470:	18bb      	adds	r3, r7, r2
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d114      	bne.n	80084a2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008478:	187b      	adds	r3, r7, r1
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2220      	movs	r2, #32
 800847e:	4013      	ands	r3, r2
 8008480:	d00f      	beq.n	80084a2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008482:	183b      	adds	r3, r7, r0
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2220      	movs	r2, #32
 8008488:	4013      	ands	r3, r2
 800848a:	d00a      	beq.n	80084a2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008490:	2b00      	cmp	r3, #0
 8008492:	d100      	bne.n	8008496 <HAL_UART_IRQHandler+0x62>
 8008494:	e286      	b.n	80089a4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	0010      	movs	r0, r2
 800849e:	4798      	blx	r3
      }
      return;
 80084a0:	e280      	b.n	80089a4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084a2:	2398      	movs	r3, #152	@ 0x98
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d100      	bne.n	80084ae <HAL_UART_IRQHandler+0x7a>
 80084ac:	e114      	b.n	80086d8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084ae:	239c      	movs	r3, #156	@ 0x9c
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2201      	movs	r2, #1
 80084b6:	4013      	ands	r3, r2
 80084b8:	d106      	bne.n	80084c8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084ba:	23a0      	movs	r3, #160	@ 0xa0
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a83      	ldr	r2, [pc, #524]	@ (80086d0 <HAL_UART_IRQHandler+0x29c>)
 80084c2:	4013      	ands	r3, r2
 80084c4:	d100      	bne.n	80084c8 <HAL_UART_IRQHandler+0x94>
 80084c6:	e107      	b.n	80086d8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084c8:	23a4      	movs	r3, #164	@ 0xa4
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2201      	movs	r2, #1
 80084d0:	4013      	ands	r3, r2
 80084d2:	d012      	beq.n	80084fa <HAL_UART_IRQHandler+0xc6>
 80084d4:	23a0      	movs	r3, #160	@ 0xa0
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	2380      	movs	r3, #128	@ 0x80
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	4013      	ands	r3, r2
 80084e0:	d00b      	beq.n	80084fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2201      	movs	r2, #1
 80084e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2284      	movs	r2, #132	@ 0x84
 80084ee:	589b      	ldr	r3, [r3, r2]
 80084f0:	2201      	movs	r2, #1
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2184      	movs	r1, #132	@ 0x84
 80084f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fa:	23a4      	movs	r3, #164	@ 0xa4
 80084fc:	18fb      	adds	r3, r7, r3
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2202      	movs	r2, #2
 8008502:	4013      	ands	r3, r2
 8008504:	d011      	beq.n	800852a <HAL_UART_IRQHandler+0xf6>
 8008506:	239c      	movs	r3, #156	@ 0x9c
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	4013      	ands	r3, r2
 8008510:	d00b      	beq.n	800852a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2202      	movs	r2, #2
 8008518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2284      	movs	r2, #132	@ 0x84
 800851e:	589b      	ldr	r3, [r3, r2]
 8008520:	2204      	movs	r2, #4
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2184      	movs	r1, #132	@ 0x84
 8008528:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800852a:	23a4      	movs	r3, #164	@ 0xa4
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2204      	movs	r2, #4
 8008532:	4013      	ands	r3, r2
 8008534:	d011      	beq.n	800855a <HAL_UART_IRQHandler+0x126>
 8008536:	239c      	movs	r3, #156	@ 0x9c
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2201      	movs	r2, #1
 800853e:	4013      	ands	r3, r2
 8008540:	d00b      	beq.n	800855a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2204      	movs	r2, #4
 8008548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2284      	movs	r2, #132	@ 0x84
 800854e:	589b      	ldr	r3, [r3, r2]
 8008550:	2202      	movs	r2, #2
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2184      	movs	r1, #132	@ 0x84
 8008558:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800855a:	23a4      	movs	r3, #164	@ 0xa4
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2208      	movs	r2, #8
 8008562:	4013      	ands	r3, r2
 8008564:	d017      	beq.n	8008596 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008566:	23a0      	movs	r3, #160	@ 0xa0
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2220      	movs	r2, #32
 800856e:	4013      	ands	r3, r2
 8008570:	d105      	bne.n	800857e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008572:	239c      	movs	r3, #156	@ 0x9c
 8008574:	18fb      	adds	r3, r7, r3
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2201      	movs	r2, #1
 800857a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800857c:	d00b      	beq.n	8008596 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2208      	movs	r2, #8
 8008584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2284      	movs	r2, #132	@ 0x84
 800858a:	589b      	ldr	r3, [r3, r2]
 800858c:	2208      	movs	r2, #8
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2184      	movs	r1, #132	@ 0x84
 8008594:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008596:	23a4      	movs	r3, #164	@ 0xa4
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	2380      	movs	r3, #128	@ 0x80
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	4013      	ands	r3, r2
 80085a2:	d013      	beq.n	80085cc <HAL_UART_IRQHandler+0x198>
 80085a4:	23a0      	movs	r3, #160	@ 0xa0
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	2380      	movs	r3, #128	@ 0x80
 80085ac:	04db      	lsls	r3, r3, #19
 80085ae:	4013      	ands	r3, r2
 80085b0:	d00c      	beq.n	80085cc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2280      	movs	r2, #128	@ 0x80
 80085b8:	0112      	lsls	r2, r2, #4
 80085ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2284      	movs	r2, #132	@ 0x84
 80085c0:	589b      	ldr	r3, [r3, r2]
 80085c2:	2220      	movs	r2, #32
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2184      	movs	r1, #132	@ 0x84
 80085ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2284      	movs	r2, #132	@ 0x84
 80085d0:	589b      	ldr	r3, [r3, r2]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d100      	bne.n	80085d8 <HAL_UART_IRQHandler+0x1a4>
 80085d6:	e1e7      	b.n	80089a8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085d8:	23a4      	movs	r3, #164	@ 0xa4
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2220      	movs	r2, #32
 80085e0:	4013      	ands	r3, r2
 80085e2:	d00e      	beq.n	8008602 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085e4:	23a0      	movs	r3, #160	@ 0xa0
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2220      	movs	r2, #32
 80085ec:	4013      	ands	r3, r2
 80085ee:	d008      	beq.n	8008602 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	0010      	movs	r0, r2
 8008600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2284      	movs	r2, #132	@ 0x84
 8008606:	589b      	ldr	r3, [r3, r2]
 8008608:	2194      	movs	r1, #148	@ 0x94
 800860a:	187a      	adds	r2, r7, r1
 800860c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2240      	movs	r2, #64	@ 0x40
 8008616:	4013      	ands	r3, r2
 8008618:	2b40      	cmp	r3, #64	@ 0x40
 800861a:	d004      	beq.n	8008626 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800861c:	187b      	adds	r3, r7, r1
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2228      	movs	r2, #40	@ 0x28
 8008622:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008624:	d047      	beq.n	80086b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	0018      	movs	r0, r3
 800862a:	f000 fda9 	bl	8009180 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	2240      	movs	r2, #64	@ 0x40
 8008636:	4013      	ands	r3, r2
 8008638:	2b40      	cmp	r3, #64	@ 0x40
 800863a:	d137      	bne.n	80086ac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863c:	f3ef 8310 	mrs	r3, PRIMASK
 8008640:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008644:	2090      	movs	r0, #144	@ 0x90
 8008646:	183a      	adds	r2, r7, r0
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	2301      	movs	r3, #1
 800864c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008650:	f383 8810 	msr	PRIMASK, r3
}
 8008654:	46c0      	nop			@ (mov r8, r8)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2140      	movs	r1, #64	@ 0x40
 8008662:	438a      	bics	r2, r1
 8008664:	609a      	str	r2, [r3, #8]
 8008666:	183b      	adds	r3, r7, r0
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800866c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800866e:	f383 8810 	msr	PRIMASK, r3
}
 8008672:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008678:	2b00      	cmp	r3, #0
 800867a:	d012      	beq.n	80086a2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008680:	4a14      	ldr	r2, [pc, #80]	@ (80086d4 <HAL_UART_IRQHandler+0x2a0>)
 8008682:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008688:	0018      	movs	r0, r3
 800868a:	f7fd fc2f 	bl	8005eec <HAL_DMA_Abort_IT>
 800868e:	1e03      	subs	r3, r0, #0
 8008690:	d01a      	beq.n	80086c8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869c:	0018      	movs	r0, r3
 800869e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a0:	e012      	b.n	80086c8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	0018      	movs	r0, r3
 80086a6:	f000 f995 	bl	80089d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086aa:	e00d      	b.n	80086c8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	0018      	movs	r0, r3
 80086b0:	f000 f990 	bl	80089d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b4:	e008      	b.n	80086c8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 f98b 	bl	80089d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2284      	movs	r2, #132	@ 0x84
 80086c2:	2100      	movs	r1, #0
 80086c4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80086c6:	e16f      	b.n	80089a8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	46c0      	nop			@ (mov r8, r8)
    return;
 80086ca:	e16d      	b.n	80089a8 <HAL_UART_IRQHandler+0x574>
 80086cc:	0000080f 	.word	0x0000080f
 80086d0:	04000120 	.word	0x04000120
 80086d4:	08009249 	.word	0x08009249

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d000      	beq.n	80086e2 <HAL_UART_IRQHandler+0x2ae>
 80086e0:	e139      	b.n	8008956 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086e2:	23a4      	movs	r3, #164	@ 0xa4
 80086e4:	18fb      	adds	r3, r7, r3
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2210      	movs	r2, #16
 80086ea:	4013      	ands	r3, r2
 80086ec:	d100      	bne.n	80086f0 <HAL_UART_IRQHandler+0x2bc>
 80086ee:	e132      	b.n	8008956 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086f0:	23a0      	movs	r3, #160	@ 0xa0
 80086f2:	18fb      	adds	r3, r7, r3
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2210      	movs	r2, #16
 80086f8:	4013      	ands	r3, r2
 80086fa:	d100      	bne.n	80086fe <HAL_UART_IRQHandler+0x2ca>
 80086fc:	e12b      	b.n	8008956 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2210      	movs	r2, #16
 8008704:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2240      	movs	r2, #64	@ 0x40
 800870e:	4013      	ands	r3, r2
 8008710:	2b40      	cmp	r3, #64	@ 0x40
 8008712:	d000      	beq.n	8008716 <HAL_UART_IRQHandler+0x2e2>
 8008714:	e09f      	b.n	8008856 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	217e      	movs	r1, #126	@ 0x7e
 8008720:	187b      	adds	r3, r7, r1
 8008722:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008724:	187b      	adds	r3, r7, r1
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d100      	bne.n	800872e <HAL_UART_IRQHandler+0x2fa>
 800872c:	e13e      	b.n	80089ac <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2258      	movs	r2, #88	@ 0x58
 8008732:	5a9b      	ldrh	r3, [r3, r2]
 8008734:	187a      	adds	r2, r7, r1
 8008736:	8812      	ldrh	r2, [r2, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d300      	bcc.n	800873e <HAL_UART_IRQHandler+0x30a>
 800873c:	e136      	b.n	80089ac <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	187a      	adds	r2, r7, r1
 8008742:	215a      	movs	r1, #90	@ 0x5a
 8008744:	8812      	ldrh	r2, [r2, #0]
 8008746:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	2b20      	cmp	r3, #32
 8008750:	d06f      	beq.n	8008832 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008752:	f3ef 8310 	mrs	r3, PRIMASK
 8008756:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800875a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800875c:	2301      	movs	r3, #1
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008762:	f383 8810 	msr	PRIMASK, r3
}
 8008766:	46c0      	nop			@ (mov r8, r8)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4992      	ldr	r1, [pc, #584]	@ (80089bc <HAL_UART_IRQHandler+0x588>)
 8008774:	400a      	ands	r2, r1
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800877a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877e:	f383 8810 	msr	PRIMASK, r3
}
 8008782:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008784:	f3ef 8310 	mrs	r3, PRIMASK
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800878a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	677b      	str	r3, [r7, #116]	@ 0x74
 800878e:	2301      	movs	r3, #1
 8008790:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008794:	f383 8810 	msr	PRIMASK, r3
}
 8008798:	46c0      	nop			@ (mov r8, r8)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2101      	movs	r1, #1
 80087a6:	438a      	bics	r2, r1
 80087a8:	609a      	str	r2, [r3, #8]
 80087aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087ac:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b0:	f383 8810 	msr	PRIMASK, r3
}
 80087b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80087bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087be:	673b      	str	r3, [r7, #112]	@ 0x70
 80087c0:	2301      	movs	r3, #1
 80087c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c6:	f383 8810 	msr	PRIMASK, r3
}
 80087ca:	46c0      	nop			@ (mov r8, r8)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2140      	movs	r1, #64	@ 0x40
 80087d8:	438a      	bics	r2, r1
 80087da:	609a      	str	r2, [r3, #8]
 80087dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087de:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087e2:	f383 8810 	msr	PRIMASK, r3
}
 80087e6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2280      	movs	r2, #128	@ 0x80
 80087ec:	2120      	movs	r1, #32
 80087ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f6:	f3ef 8310 	mrs	r3, PRIMASK
 80087fa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80087fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008800:	2301      	movs	r3, #1
 8008802:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008806:	f383 8810 	msr	PRIMASK, r3
}
 800880a:	46c0      	nop			@ (mov r8, r8)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2110      	movs	r1, #16
 8008818:	438a      	bics	r2, r1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800881e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008822:	f383 8810 	msr	PRIMASK, r3
}
 8008826:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800882c:	0018      	movs	r0, r3
 800882e:	f7fd fb25 	bl	8005e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2258      	movs	r2, #88	@ 0x58
 800883c:	5a9a      	ldrh	r2, [r3, r2]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	215a      	movs	r1, #90	@ 0x5a
 8008842:	5a5b      	ldrh	r3, [r3, r1]
 8008844:	b29b      	uxth	r3, r3
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	0011      	movs	r1, r2
 800884e:	0018      	movs	r0, r3
 8008850:	f000 f8c8 	bl	80089e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008854:	e0aa      	b.n	80089ac <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2258      	movs	r2, #88	@ 0x58
 800885a:	5a99      	ldrh	r1, [r3, r2]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	225a      	movs	r2, #90	@ 0x5a
 8008860:	5a9b      	ldrh	r3, [r3, r2]
 8008862:	b29a      	uxth	r2, r3
 8008864:	208e      	movs	r0, #142	@ 0x8e
 8008866:	183b      	adds	r3, r7, r0
 8008868:	1a8a      	subs	r2, r1, r2
 800886a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	225a      	movs	r2, #90	@ 0x5a
 8008870:	5a9b      	ldrh	r3, [r3, r2]
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	d100      	bne.n	800887a <HAL_UART_IRQHandler+0x446>
 8008878:	e09a      	b.n	80089b0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800887a:	183b      	adds	r3, r7, r0
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d100      	bne.n	8008884 <HAL_UART_IRQHandler+0x450>
 8008882:	e095      	b.n	80089b0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008884:	f3ef 8310 	mrs	r3, PRIMASK
 8008888:	60fb      	str	r3, [r7, #12]
  return(result);
 800888a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800888c:	2488      	movs	r4, #136	@ 0x88
 800888e:	193a      	adds	r2, r7, r4
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	2301      	movs	r3, #1
 8008894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f383 8810 	msr	PRIMASK, r3
}
 800889c:	46c0      	nop			@ (mov r8, r8)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4945      	ldr	r1, [pc, #276]	@ (80089c0 <HAL_UART_IRQHandler+0x58c>)
 80088aa:	400a      	ands	r2, r1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	193b      	adds	r3, r7, r4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f383 8810 	msr	PRIMASK, r3
}
 80088ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088bc:	f3ef 8310 	mrs	r3, PRIMASK
 80088c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80088c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c4:	2484      	movs	r4, #132	@ 0x84
 80088c6:	193a      	adds	r2, r7, r4
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	2301      	movs	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	f383 8810 	msr	PRIMASK, r3
}
 80088d4:	46c0      	nop			@ (mov r8, r8)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2101      	movs	r1, #1
 80088e2:	438a      	bics	r2, r1
 80088e4:	609a      	str	r2, [r3, #8]
 80088e6:	193b      	adds	r3, r7, r4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	f383 8810 	msr	PRIMASK, r3
}
 80088f2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2280      	movs	r2, #128	@ 0x80
 80088f8:	2120      	movs	r1, #32
 80088fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008908:	f3ef 8310 	mrs	r3, PRIMASK
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008910:	2480      	movs	r4, #128	@ 0x80
 8008912:	193a      	adds	r2, r7, r4
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	2301      	movs	r3, #1
 8008918:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	f383 8810 	msr	PRIMASK, r3
}
 8008920:	46c0      	nop			@ (mov r8, r8)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2110      	movs	r1, #16
 800892e:	438a      	bics	r2, r1
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	193b      	adds	r3, r7, r4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893a:	f383 8810 	msr	PRIMASK, r3
}
 800893e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008946:	183b      	adds	r3, r7, r0
 8008948:	881a      	ldrh	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	0011      	movs	r1, r2
 800894e:	0018      	movs	r0, r3
 8008950:	f000 f848 	bl	80089e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008954:	e02c      	b.n	80089b0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008956:	23a4      	movs	r3, #164	@ 0xa4
 8008958:	18fb      	adds	r3, r7, r3
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2280      	movs	r2, #128	@ 0x80
 800895e:	4013      	ands	r3, r2
 8008960:	d00f      	beq.n	8008982 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008962:	23a0      	movs	r3, #160	@ 0xa0
 8008964:	18fb      	adds	r3, r7, r3
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2280      	movs	r2, #128	@ 0x80
 800896a:	4013      	ands	r3, r2
 800896c:	d009      	beq.n	8008982 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01e      	beq.n	80089b4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	0010      	movs	r0, r2
 800897e:	4798      	blx	r3
    }
    return;
 8008980:	e018      	b.n	80089b4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008982:	23a4      	movs	r3, #164	@ 0xa4
 8008984:	18fb      	adds	r3, r7, r3
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2240      	movs	r2, #64	@ 0x40
 800898a:	4013      	ands	r3, r2
 800898c:	d013      	beq.n	80089b6 <HAL_UART_IRQHandler+0x582>
 800898e:	23a0      	movs	r3, #160	@ 0xa0
 8008990:	18fb      	adds	r3, r7, r3
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2240      	movs	r2, #64	@ 0x40
 8008996:	4013      	ands	r3, r2
 8008998:	d00d      	beq.n	80089b6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	0018      	movs	r0, r3
 800899e:	f000 fc6a 	bl	8009276 <UART_EndTransmit_IT>
    return;
 80089a2:	e008      	b.n	80089b6 <HAL_UART_IRQHandler+0x582>
      return;
 80089a4:	46c0      	nop			@ (mov r8, r8)
 80089a6:	e006      	b.n	80089b6 <HAL_UART_IRQHandler+0x582>
    return;
 80089a8:	46c0      	nop			@ (mov r8, r8)
 80089aa:	e004      	b.n	80089b6 <HAL_UART_IRQHandler+0x582>
      return;
 80089ac:	46c0      	nop			@ (mov r8, r8)
 80089ae:	e002      	b.n	80089b6 <HAL_UART_IRQHandler+0x582>
      return;
 80089b0:	46c0      	nop			@ (mov r8, r8)
 80089b2:	e000      	b.n	80089b6 <HAL_UART_IRQHandler+0x582>
    return;
 80089b4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b02b      	add	sp, #172	@ 0xac
 80089ba:	bd90      	pop	{r4, r7, pc}
 80089bc:	fffffeff 	.word	0xfffffeff
 80089c0:	fffffedf 	.word	0xfffffedf

080089c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089cc:	46c0      	nop			@ (mov r8, r8)
 80089ce:	46bd      	mov	sp, r7
 80089d0:	b002      	add	sp, #8
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089dc:	46c0      	nop			@ (mov r8, r8)
 80089de:	46bd      	mov	sp, r7
 80089e0:	b002      	add	sp, #8
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	000a      	movs	r2, r1
 80089ee:	1cbb      	adds	r3, r7, #2
 80089f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089f2:	46c0      	nop			@ (mov r8, r8)
 80089f4:	46bd      	mov	sp, r7
 80089f6:	b002      	add	sp, #8
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a04:	231e      	movs	r3, #30
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a8d      	ldr	r2, [pc, #564]	@ (8008c60 <UART_SetConfig+0x264>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	0019      	movs	r1, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4a88      	ldr	r2, [pc, #544]	@ (8008c64 <UART_SetConfig+0x268>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	0019      	movs	r1, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	4a7f      	ldr	r2, [pc, #508]	@ (8008c68 <UART_SetConfig+0x26c>)
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	0019      	movs	r1, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a7b      	ldr	r2, [pc, #492]	@ (8008c6c <UART_SetConfig+0x270>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d127      	bne.n	8008ad2 <UART_SetConfig+0xd6>
 8008a82:	4b7b      	ldr	r3, [pc, #492]	@ (8008c70 <UART_SetConfig+0x274>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a86:	2203      	movs	r2, #3
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d00d      	beq.n	8008aaa <UART_SetConfig+0xae>
 8008a8e:	d81b      	bhi.n	8008ac8 <UART_SetConfig+0xcc>
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d014      	beq.n	8008abe <UART_SetConfig+0xc2>
 8008a94:	d818      	bhi.n	8008ac8 <UART_SetConfig+0xcc>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <UART_SetConfig+0xa4>
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d00a      	beq.n	8008ab4 <UART_SetConfig+0xb8>
 8008a9e:	e013      	b.n	8008ac8 <UART_SetConfig+0xcc>
 8008aa0:	231f      	movs	r3, #31
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e021      	b.n	8008aee <UART_SetConfig+0xf2>
 8008aaa:	231f      	movs	r3, #31
 8008aac:	18fb      	adds	r3, r7, r3
 8008aae:	2202      	movs	r2, #2
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	e01c      	b.n	8008aee <UART_SetConfig+0xf2>
 8008ab4:	231f      	movs	r3, #31
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	2204      	movs	r2, #4
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e017      	b.n	8008aee <UART_SetConfig+0xf2>
 8008abe:	231f      	movs	r3, #31
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	2208      	movs	r2, #8
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	e012      	b.n	8008aee <UART_SetConfig+0xf2>
 8008ac8:	231f      	movs	r3, #31
 8008aca:	18fb      	adds	r3, r7, r3
 8008acc:	2210      	movs	r2, #16
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	e00d      	b.n	8008aee <UART_SetConfig+0xf2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a67      	ldr	r2, [pc, #412]	@ (8008c74 <UART_SetConfig+0x278>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d104      	bne.n	8008ae6 <UART_SetConfig+0xea>
 8008adc:	231f      	movs	r3, #31
 8008ade:	18fb      	adds	r3, r7, r3
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	e003      	b.n	8008aee <UART_SetConfig+0xf2>
 8008ae6:	231f      	movs	r3, #31
 8008ae8:	18fb      	adds	r3, r7, r3
 8008aea:	2210      	movs	r2, #16
 8008aec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69da      	ldr	r2, [r3, #28]
 8008af2:	2380      	movs	r3, #128	@ 0x80
 8008af4:	021b      	lsls	r3, r3, #8
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d15c      	bne.n	8008bb4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8008afa:	231f      	movs	r3, #31
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d015      	beq.n	8008b30 <UART_SetConfig+0x134>
 8008b04:	dc18      	bgt.n	8008b38 <UART_SetConfig+0x13c>
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d00d      	beq.n	8008b26 <UART_SetConfig+0x12a>
 8008b0a:	dc15      	bgt.n	8008b38 <UART_SetConfig+0x13c>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <UART_SetConfig+0x11a>
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d005      	beq.n	8008b20 <UART_SetConfig+0x124>
 8008b14:	e010      	b.n	8008b38 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b16:	f7fe f859 	bl	8006bcc <HAL_RCC_GetPCLK1Freq>
 8008b1a:	0003      	movs	r3, r0
 8008b1c:	61bb      	str	r3, [r7, #24]
        break;
 8008b1e:	e012      	b.n	8008b46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b20:	4b55      	ldr	r3, [pc, #340]	@ (8008c78 <UART_SetConfig+0x27c>)
 8008b22:	61bb      	str	r3, [r7, #24]
        break;
 8008b24:	e00f      	b.n	8008b46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fd fff1 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	61bb      	str	r3, [r7, #24]
        break;
 8008b2e:	e00a      	b.n	8008b46 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b30:	2380      	movs	r3, #128	@ 0x80
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	61bb      	str	r3, [r7, #24]
        break;
 8008b36:	e006      	b.n	8008b46 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b3c:	231e      	movs	r3, #30
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	2201      	movs	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]
        break;
 8008b44:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d100      	bne.n	8008b4e <UART_SetConfig+0x152>
 8008b4c:	e07a      	b.n	8008c44 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	005a      	lsls	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	085b      	lsrs	r3, r3, #1
 8008b58:	18d2      	adds	r2, r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	0019      	movs	r1, r3
 8008b60:	0010      	movs	r0, r2
 8008b62:	f7f7 faf7 	bl	8000154 <__udivsi3>
 8008b66:	0003      	movs	r3, r0
 8008b68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b0f      	cmp	r3, #15
 8008b6e:	d91c      	bls.n	8008baa <UART_SetConfig+0x1ae>
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	2380      	movs	r3, #128	@ 0x80
 8008b74:	025b      	lsls	r3, r3, #9
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d217      	bcs.n	8008baa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	200e      	movs	r0, #14
 8008b80:	183b      	adds	r3, r7, r0
 8008b82:	210f      	movs	r1, #15
 8008b84:	438a      	bics	r2, r1
 8008b86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2207      	movs	r2, #7
 8008b90:	4013      	ands	r3, r2
 8008b92:	b299      	uxth	r1, r3
 8008b94:	183b      	adds	r3, r7, r0
 8008b96:	183a      	adds	r2, r7, r0
 8008b98:	8812      	ldrh	r2, [r2, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	183a      	adds	r2, r7, r0
 8008ba4:	8812      	ldrh	r2, [r2, #0]
 8008ba6:	60da      	str	r2, [r3, #12]
 8008ba8:	e04c      	b.n	8008c44 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008baa:	231e      	movs	r3, #30
 8008bac:	18fb      	adds	r3, r7, r3
 8008bae:	2201      	movs	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e047      	b.n	8008c44 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bb4:	231f      	movs	r3, #31
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b08      	cmp	r3, #8
 8008bbc:	d015      	beq.n	8008bea <UART_SetConfig+0x1ee>
 8008bbe:	dc18      	bgt.n	8008bf2 <UART_SetConfig+0x1f6>
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d00d      	beq.n	8008be0 <UART_SetConfig+0x1e4>
 8008bc4:	dc15      	bgt.n	8008bf2 <UART_SetConfig+0x1f6>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <UART_SetConfig+0x1d4>
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d005      	beq.n	8008bda <UART_SetConfig+0x1de>
 8008bce:	e010      	b.n	8008bf2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd0:	f7fd fffc 	bl	8006bcc <HAL_RCC_GetPCLK1Freq>
 8008bd4:	0003      	movs	r3, r0
 8008bd6:	61bb      	str	r3, [r7, #24]
        break;
 8008bd8:	e012      	b.n	8008c00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bda:	4b27      	ldr	r3, [pc, #156]	@ (8008c78 <UART_SetConfig+0x27c>)
 8008bdc:	61bb      	str	r3, [r7, #24]
        break;
 8008bde:	e00f      	b.n	8008c00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be0:	f7fd ff94 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8008be4:	0003      	movs	r3, r0
 8008be6:	61bb      	str	r3, [r7, #24]
        break;
 8008be8:	e00a      	b.n	8008c00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bea:	2380      	movs	r3, #128	@ 0x80
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	61bb      	str	r3, [r7, #24]
        break;
 8008bf0:	e006      	b.n	8008c00 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008bf6:	231e      	movs	r3, #30
 8008bf8:	18fb      	adds	r3, r7, r3
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	701a      	strb	r2, [r3, #0]
        break;
 8008bfe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01e      	beq.n	8008c44 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	085a      	lsrs	r2, r3, #1
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	18d2      	adds	r2, r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	0019      	movs	r1, r3
 8008c16:	0010      	movs	r0, r2
 8008c18:	f7f7 fa9c 	bl	8000154 <__udivsi3>
 8008c1c:	0003      	movs	r3, r0
 8008c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2b0f      	cmp	r3, #15
 8008c24:	d90a      	bls.n	8008c3c <UART_SetConfig+0x240>
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	2380      	movs	r3, #128	@ 0x80
 8008c2a:	025b      	lsls	r3, r3, #9
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d205      	bcs.n	8008c3c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	e003      	b.n	8008c44 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3c:	231e      	movs	r3, #30
 8008c3e:	18fb      	adds	r3, r7, r3
 8008c40:	2201      	movs	r2, #1
 8008c42:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008c50:	231e      	movs	r3, #30
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	781b      	ldrb	r3, [r3, #0]
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b008      	add	sp, #32
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	46c0      	nop			@ (mov r8, r8)
 8008c60:	ffff69f3 	.word	0xffff69f3
 8008c64:	ffffcfff 	.word	0xffffcfff
 8008c68:	fffff4ff 	.word	0xfffff4ff
 8008c6c:	40013800 	.word	0x40013800
 8008c70:	40021000 	.word	0x40021000
 8008c74:	40004400 	.word	0x40004400
 8008c78:	007a1200 	.word	0x007a1200

08008c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c88:	2208      	movs	r2, #8
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	d00b      	beq.n	8008ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	4a4a      	ldr	r2, [pc, #296]	@ (8008dc0 <UART_AdvFeatureConfig+0x144>)
 8008c96:	4013      	ands	r3, r2
 8008c98:	0019      	movs	r1, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008caa:	2201      	movs	r2, #1
 8008cac:	4013      	ands	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	4a43      	ldr	r2, [pc, #268]	@ (8008dc4 <UART_AdvFeatureConfig+0x148>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	0019      	movs	r1, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ccc:	2202      	movs	r2, #2
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d00b      	beq.n	8008cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8008dc8 <UART_AdvFeatureConfig+0x14c>)
 8008cda:	4013      	ands	r3, r2
 8008cdc:	0019      	movs	r1, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cee:	2204      	movs	r2, #4
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4a34      	ldr	r2, [pc, #208]	@ (8008dcc <UART_AdvFeatureConfig+0x150>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	0019      	movs	r1, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d10:	2210      	movs	r2, #16
 8008d12:	4013      	ands	r3, r2
 8008d14:	d00b      	beq.n	8008d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008dd0 <UART_AdvFeatureConfig+0x154>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	0019      	movs	r1, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d32:	2220      	movs	r2, #32
 8008d34:	4013      	ands	r3, r2
 8008d36:	d00b      	beq.n	8008d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	4a25      	ldr	r2, [pc, #148]	@ (8008dd4 <UART_AdvFeatureConfig+0x158>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	0019      	movs	r1, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d54:	2240      	movs	r2, #64	@ 0x40
 8008d56:	4013      	ands	r3, r2
 8008d58:	d01d      	beq.n	8008d96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd8 <UART_AdvFeatureConfig+0x15c>)
 8008d62:	4013      	ands	r3, r2
 8008d64:	0019      	movs	r1, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d76:	2380      	movs	r3, #128	@ 0x80
 8008d78:	035b      	lsls	r3, r3, #13
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d10b      	bne.n	8008d96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4a15      	ldr	r2, [pc, #84]	@ (8008ddc <UART_AdvFeatureConfig+0x160>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	0019      	movs	r1, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9a:	2280      	movs	r2, #128	@ 0x80
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4a0e      	ldr	r2, [pc, #56]	@ (8008de0 <UART_AdvFeatureConfig+0x164>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	0019      	movs	r1, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	605a      	str	r2, [r3, #4]
  }
}
 8008db8:	46c0      	nop			@ (mov r8, r8)
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	b002      	add	sp, #8
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	ffff7fff 	.word	0xffff7fff
 8008dc4:	fffdffff 	.word	0xfffdffff
 8008dc8:	fffeffff 	.word	0xfffeffff
 8008dcc:	fffbffff 	.word	0xfffbffff
 8008dd0:	ffffefff 	.word	0xffffefff
 8008dd4:	ffffdfff 	.word	0xffffdfff
 8008dd8:	ffefffff 	.word	0xffefffff
 8008ddc:	ff9fffff 	.word	0xff9fffff
 8008de0:	fff7ffff 	.word	0xfff7ffff

08008de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b092      	sub	sp, #72	@ 0x48
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2284      	movs	r2, #132	@ 0x84
 8008df0:	2100      	movs	r1, #0
 8008df2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008df4:	f7fc fd00 	bl	80057f8 <HAL_GetTick>
 8008df8:	0003      	movs	r3, r0
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2208      	movs	r2, #8
 8008e04:	4013      	ands	r3, r2
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d12c      	bne.n	8008e64 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e0c:	2280      	movs	r2, #128	@ 0x80
 8008e0e:	0391      	lsls	r1, r2, #14
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4a46      	ldr	r2, [pc, #280]	@ (8008f2c <UART_CheckIdleState+0x148>)
 8008e14:	9200      	str	r2, [sp, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f000 f88c 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008e1c:	1e03      	subs	r3, r0, #0
 8008e1e:	d021      	beq.n	8008e64 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e20:	f3ef 8310 	mrs	r3, PRIMASK
 8008e24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	f383 8810 	msr	PRIMASK, r3
}
 8008e34:	46c0      	nop			@ (mov r8, r8)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2180      	movs	r1, #128	@ 0x80
 8008e42:	438a      	bics	r2, r1
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	f383 8810 	msr	PRIMASK, r3
}
 8008e50:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2278      	movs	r2, #120	@ 0x78
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e05f      	b.n	8008f24 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2204      	movs	r2, #4
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d146      	bne.n	8008f00 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e74:	2280      	movs	r2, #128	@ 0x80
 8008e76:	03d1      	lsls	r1, r2, #15
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f2c <UART_CheckIdleState+0x148>)
 8008e7c:	9200      	str	r2, [sp, #0]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f000 f858 	bl	8008f34 <UART_WaitOnFlagUntilTimeout>
 8008e84:	1e03      	subs	r3, r0, #0
 8008e86:	d03b      	beq.n	8008f00 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e88:	f3ef 8310 	mrs	r3, PRIMASK
 8008e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e92:	2301      	movs	r3, #1
 8008e94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f383 8810 	msr	PRIMASK, r3
}
 8008e9c:	46c0      	nop			@ (mov r8, r8)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4921      	ldr	r1, [pc, #132]	@ (8008f30 <UART_CheckIdleState+0x14c>)
 8008eaa:	400a      	ands	r2, r1
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f383 8810 	msr	PRIMASK, r3
}
 8008eb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eba:	f3ef 8310 	mrs	r3, PRIMASK
 8008ebe:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ec0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f383 8810 	msr	PRIMASK, r3
}
 8008ece:	46c0      	nop			@ (mov r8, r8)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2101      	movs	r1, #1
 8008edc:	438a      	bics	r2, r1
 8008ede:	609a      	str	r2, [r3, #8]
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	f383 8810 	msr	PRIMASK, r3
}
 8008eea:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2280      	movs	r2, #128	@ 0x80
 8008ef0:	2120      	movs	r1, #32
 8008ef2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2278      	movs	r2, #120	@ 0x78
 8008ef8:	2100      	movs	r1, #0
 8008efa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e011      	b.n	8008f24 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2280      	movs	r2, #128	@ 0x80
 8008f0a:	2120      	movs	r1, #32
 8008f0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2278      	movs	r2, #120	@ 0x78
 8008f1e:	2100      	movs	r1, #0
 8008f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b010      	add	sp, #64	@ 0x40
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	01ffffff 	.word	0x01ffffff
 8008f30:	fffffedf 	.word	0xfffffedf

08008f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	1dfb      	adds	r3, r7, #7
 8008f42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f44:	e051      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	d04e      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f4c:	f7fc fc54 	bl	80057f8 <HAL_GetTick>
 8008f50:	0002      	movs	r2, r0
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d302      	bcc.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e051      	b.n	800900a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	4013      	ands	r3, r2
 8008f70:	d03b      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb6>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b80      	cmp	r3, #128	@ 0x80
 8008f76:	d038      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb6>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b40      	cmp	r3, #64	@ 0x40
 8008f7c:	d035      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	2208      	movs	r2, #8
 8008f86:	4013      	ands	r3, r2
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d111      	bne.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2208      	movs	r2, #8
 8008f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 f8f2 	bl	8009180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2284      	movs	r2, #132	@ 0x84
 8008fa0:	2108      	movs	r1, #8
 8008fa2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2278      	movs	r2, #120	@ 0x78
 8008fa8:	2100      	movs	r1, #0
 8008faa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e02c      	b.n	800900a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69da      	ldr	r2, [r3, #28]
 8008fb6:	2380      	movs	r3, #128	@ 0x80
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	401a      	ands	r2, r3
 8008fbc:	2380      	movs	r3, #128	@ 0x80
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d112      	bne.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2280      	movs	r2, #128	@ 0x80
 8008fca:	0112      	lsls	r2, r2, #4
 8008fcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	f000 f8d5 	bl	8009180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2284      	movs	r2, #132	@ 0x84
 8008fda:	2120      	movs	r1, #32
 8008fdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2278      	movs	r2, #120	@ 0x78
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e00f      	b.n	800900a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	425a      	negs	r2, r3
 8008ffa:	4153      	adcs	r3, r2
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	001a      	movs	r2, r3
 8009000:	1dfb      	adds	r3, r7, #7
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d09e      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	0018      	movs	r0, r3
 800900c:	46bd      	mov	sp, r7
 800900e:	b004      	add	sp, #16
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b090      	sub	sp, #64	@ 0x40
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	1dbb      	adds	r3, r7, #6
 8009020:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	1dba      	adds	r2, r7, #6
 800902c:	2158      	movs	r1, #88	@ 0x58
 800902e:	8812      	ldrh	r2, [r2, #0]
 8009030:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1dba      	adds	r2, r7, #6
 8009036:	215a      	movs	r1, #90	@ 0x5a
 8009038:	8812      	ldrh	r2, [r2, #0]
 800903a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	2380      	movs	r3, #128	@ 0x80
 8009048:	015b      	lsls	r3, r3, #5
 800904a:	429a      	cmp	r2, r3
 800904c:	d10d      	bne.n	800906a <UART_Start_Receive_IT+0x56>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <UART_Start_Receive_IT+0x4c>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	225c      	movs	r2, #92	@ 0x5c
 800905a:	4946      	ldr	r1, [pc, #280]	@ (8009174 <UART_Start_Receive_IT+0x160>)
 800905c:	5299      	strh	r1, [r3, r2]
 800905e:	e01a      	b.n	8009096 <UART_Start_Receive_IT+0x82>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	225c      	movs	r2, #92	@ 0x5c
 8009064:	21ff      	movs	r1, #255	@ 0xff
 8009066:	5299      	strh	r1, [r3, r2]
 8009068:	e015      	b.n	8009096 <UART_Start_Receive_IT+0x82>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10d      	bne.n	800908e <UART_Start_Receive_IT+0x7a>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d104      	bne.n	8009084 <UART_Start_Receive_IT+0x70>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	225c      	movs	r2, #92	@ 0x5c
 800907e:	21ff      	movs	r1, #255	@ 0xff
 8009080:	5299      	strh	r1, [r3, r2]
 8009082:	e008      	b.n	8009096 <UART_Start_Receive_IT+0x82>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	225c      	movs	r2, #92	@ 0x5c
 8009088:	217f      	movs	r1, #127	@ 0x7f
 800908a:	5299      	strh	r1, [r3, r2]
 800908c:	e003      	b.n	8009096 <UART_Start_Receive_IT+0x82>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	225c      	movs	r2, #92	@ 0x5c
 8009092:	2100      	movs	r1, #0
 8009094:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2284      	movs	r2, #132	@ 0x84
 800909a:	2100      	movs	r1, #0
 800909c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2280      	movs	r2, #128	@ 0x80
 80090a2:	2122      	movs	r1, #34	@ 0x22
 80090a4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a6:	f3ef 8310 	mrs	r3, PRIMASK
 80090aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80090ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090b0:	2301      	movs	r3, #1
 80090b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b6:	f383 8810 	msr	PRIMASK, r3
}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2101      	movs	r1, #1
 80090c8:	430a      	orrs	r2, r1
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	f383 8810 	msr	PRIMASK, r3
}
 80090d6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	2380      	movs	r3, #128	@ 0x80
 80090de:	015b      	lsls	r3, r3, #5
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d107      	bne.n	80090f4 <UART_Start_Receive_IT+0xe0>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4a22      	ldr	r2, [pc, #136]	@ (8009178 <UART_Start_Receive_IT+0x164>)
 80090f0:	669a      	str	r2, [r3, #104]	@ 0x68
 80090f2:	e002      	b.n	80090fa <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a21      	ldr	r2, [pc, #132]	@ (800917c <UART_Start_Receive_IT+0x168>)
 80090f8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d019      	beq.n	8009136 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009102:	f3ef 8310 	mrs	r3, PRIMASK
 8009106:	61fb      	str	r3, [r7, #28]
  return(result);
 8009108:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
 800910c:	2301      	movs	r3, #1
 800910e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	f383 8810 	msr	PRIMASK, r3
}
 8009116:	46c0      	nop			@ (mov r8, r8)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2190      	movs	r1, #144	@ 0x90
 8009124:	0049      	lsls	r1, r1, #1
 8009126:	430a      	orrs	r2, r1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	f383 8810 	msr	PRIMASK, r3
}
 8009134:	e018      	b.n	8009168 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009136:	f3ef 8310 	mrs	r3, PRIMASK
 800913a:	613b      	str	r3, [r7, #16]
  return(result);
 800913c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800913e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f383 8810 	msr	PRIMASK, r3
}
 800914a:	46c0      	nop			@ (mov r8, r8)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2120      	movs	r1, #32
 8009158:	430a      	orrs	r2, r1
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f383 8810 	msr	PRIMASK, r3
}
 8009166:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	0018      	movs	r0, r3
 800916c:	46bd      	mov	sp, r7
 800916e:	b010      	add	sp, #64	@ 0x40
 8009170:	bd80      	pop	{r7, pc}
 8009172:	46c0      	nop			@ (mov r8, r8)
 8009174:	000001ff 	.word	0x000001ff
 8009178:	08009485 	.word	0x08009485
 800917c:	080092cd 	.word	0x080092cd

08009180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	@ 0x38
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009188:	f3ef 8310 	mrs	r3, PRIMASK
 800918c:	617b      	str	r3, [r7, #20]
  return(result);
 800918e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009190:	637b      	str	r3, [r7, #52]	@ 0x34
 8009192:	2301      	movs	r3, #1
 8009194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f383 8810 	msr	PRIMASK, r3
}
 800919c:	46c0      	nop			@ (mov r8, r8)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4926      	ldr	r1, [pc, #152]	@ (8009244 <UART_EndRxTransfer+0xc4>)
 80091aa:	400a      	ands	r2, r1
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	f383 8810 	msr	PRIMASK, r3
}
 80091b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ba:	f3ef 8310 	mrs	r3, PRIMASK
 80091be:	623b      	str	r3, [r7, #32]
  return(result);
 80091c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80091c4:	2301      	movs	r3, #1
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	f383 8810 	msr	PRIMASK, r3
}
 80091ce:	46c0      	nop			@ (mov r8, r8)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2101      	movs	r1, #1
 80091dc:	438a      	bics	r2, r1
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	f383 8810 	msr	PRIMASK, r3
}
 80091ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d118      	bne.n	8009226 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f4:	f3ef 8310 	mrs	r3, PRIMASK
 80091f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80091fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091fe:	2301      	movs	r3, #1
 8009200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f383 8810 	msr	PRIMASK, r3
}
 8009208:	46c0      	nop			@ (mov r8, r8)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2110      	movs	r1, #16
 8009216:	438a      	bics	r2, r1
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f383 8810 	msr	PRIMASK, r3
}
 8009224:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2280      	movs	r2, #128	@ 0x80
 800922a:	2120      	movs	r1, #32
 800922c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800923a:	46c0      	nop			@ (mov r8, r8)
 800923c:	46bd      	mov	sp, r7
 800923e:	b00e      	add	sp, #56	@ 0x38
 8009240:	bd80      	pop	{r7, pc}
 8009242:	46c0      	nop			@ (mov r8, r8)
 8009244:	fffffedf 	.word	0xfffffedf

08009248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	225a      	movs	r2, #90	@ 0x5a
 800925a:	2100      	movs	r1, #0
 800925c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2252      	movs	r2, #82	@ 0x52
 8009262:	2100      	movs	r1, #0
 8009264:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	0018      	movs	r0, r3
 800926a:	f7ff fbb3 	bl	80089d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	46bd      	mov	sp, r7
 8009272:	b004      	add	sp, #16
 8009274:	bd80      	pop	{r7, pc}

08009276 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b086      	sub	sp, #24
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800927e:	f3ef 8310 	mrs	r3, PRIMASK
 8009282:	60bb      	str	r3, [r7, #8]
  return(result);
 8009284:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	2301      	movs	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	46c0      	nop			@ (mov r8, r8)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2140      	movs	r1, #64	@ 0x40
 80092a0:	438a      	bics	r2, r1
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f383 8810 	msr	PRIMASK, r3
}
 80092ae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0018      	movs	r0, r3
 80092c0:	f7ff fb80 	bl	80089c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c4:	46c0      	nop			@ (mov r8, r8)
 80092c6:	46bd      	mov	sp, r7
 80092c8:	b006      	add	sp, #24
 80092ca:	bd80      	pop	{r7, pc}

080092cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b094      	sub	sp, #80	@ 0x50
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80092d4:	204e      	movs	r0, #78	@ 0x4e
 80092d6:	183b      	adds	r3, r7, r0
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	215c      	movs	r1, #92	@ 0x5c
 80092dc:	5a52      	ldrh	r2, [r2, r1]
 80092de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2280      	movs	r2, #128	@ 0x80
 80092e4:	589b      	ldr	r3, [r3, r2]
 80092e6:	2b22      	cmp	r3, #34	@ 0x22
 80092e8:	d000      	beq.n	80092ec <UART_RxISR_8BIT+0x20>
 80092ea:	e0ba      	b.n	8009462 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	214c      	movs	r1, #76	@ 0x4c
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80092f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092f8:	187b      	adds	r3, r7, r1
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	183b      	adds	r3, r7, r0
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b2d9      	uxtb	r1, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009308:	400a      	ands	r2, r1
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	225a      	movs	r2, #90	@ 0x5a
 800931c:	5a9b      	ldrh	r3, [r3, r2]
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b299      	uxth	r1, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	225a      	movs	r2, #90	@ 0x5a
 8009328:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	225a      	movs	r2, #90	@ 0x5a
 800932e:	5a9b      	ldrh	r3, [r3, r2]
 8009330:	b29b      	uxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d000      	beq.n	8009338 <UART_RxISR_8BIT+0x6c>
 8009336:	e09c      	b.n	8009472 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009338:	f3ef 8310 	mrs	r3, PRIMASK
 800933c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009342:	2301      	movs	r3, #1
 8009344:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009348:	f383 8810 	msr	PRIMASK, r3
}
 800934c:	46c0      	nop			@ (mov r8, r8)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4948      	ldr	r1, [pc, #288]	@ (800947c <UART_RxISR_8BIT+0x1b0>)
 800935a:	400a      	ands	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	f383 8810 	msr	PRIMASK, r3
}
 8009368:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800936a:	f3ef 8310 	mrs	r3, PRIMASK
 800936e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009372:	647b      	str	r3, [r7, #68]	@ 0x44
 8009374:	2301      	movs	r3, #1
 8009376:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937a:	f383 8810 	msr	PRIMASK, r3
}
 800937e:	46c0      	nop			@ (mov r8, r8)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2101      	movs	r1, #1
 800938c:	438a      	bics	r2, r1
 800938e:	609a      	str	r2, [r3, #8]
 8009390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009392:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	f383 8810 	msr	PRIMASK, r3
}
 800939a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2280      	movs	r2, #128	@ 0x80
 80093a0:	2120      	movs	r1, #32
 80093a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	2380      	movs	r3, #128	@ 0x80
 80093b8:	041b      	lsls	r3, r3, #16
 80093ba:	4013      	ands	r3, r2
 80093bc:	d018      	beq.n	80093f0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093be:	f3ef 8310 	mrs	r3, PRIMASK
 80093c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80093c4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093c8:	2301      	movs	r3, #1
 80093ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f383 8810 	msr	PRIMASK, r3
}
 80093d2:	46c0      	nop			@ (mov r8, r8)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4928      	ldr	r1, [pc, #160]	@ (8009480 <UART_RxISR_8BIT+0x1b4>)
 80093e0:	400a      	ands	r2, r1
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	f383 8810 	msr	PRIMASK, r3
}
 80093ee:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d12f      	bne.n	8009458 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009402:	60fb      	str	r3, [r7, #12]
  return(result);
 8009404:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009408:	2301      	movs	r3, #1
 800940a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f383 8810 	msr	PRIMASK, r3
}
 8009412:	46c0      	nop			@ (mov r8, r8)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2110      	movs	r1, #16
 8009420:	438a      	bics	r2, r1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f383 8810 	msr	PRIMASK, r3
}
 800942e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	2210      	movs	r2, #16
 8009438:	4013      	ands	r3, r2
 800943a:	2b10      	cmp	r3, #16
 800943c:	d103      	bne.n	8009446 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2210      	movs	r2, #16
 8009444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2258      	movs	r2, #88	@ 0x58
 800944a:	5a9a      	ldrh	r2, [r3, r2]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	0011      	movs	r1, r2
 8009450:	0018      	movs	r0, r3
 8009452:	f7ff fac7 	bl	80089e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009456:	e00c      	b.n	8009472 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	0018      	movs	r0, r3
 800945c:	f7fa fb8c 	bl	8003b78 <HAL_UART_RxCpltCallback>
}
 8009460:	e007      	b.n	8009472 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2108      	movs	r1, #8
 800946e:	430a      	orrs	r2, r1
 8009470:	619a      	str	r2, [r3, #24]
}
 8009472:	46c0      	nop			@ (mov r8, r8)
 8009474:	46bd      	mov	sp, r7
 8009476:	b014      	add	sp, #80	@ 0x50
 8009478:	bd80      	pop	{r7, pc}
 800947a:	46c0      	nop			@ (mov r8, r8)
 800947c:	fffffedf 	.word	0xfffffedf
 8009480:	fbffffff 	.word	0xfbffffff

08009484 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b094      	sub	sp, #80	@ 0x50
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800948c:	204e      	movs	r0, #78	@ 0x4e
 800948e:	183b      	adds	r3, r7, r0
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	215c      	movs	r1, #92	@ 0x5c
 8009494:	5a52      	ldrh	r2, [r2, r1]
 8009496:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2280      	movs	r2, #128	@ 0x80
 800949c:	589b      	ldr	r3, [r3, r2]
 800949e:	2b22      	cmp	r3, #34	@ 0x22
 80094a0:	d000      	beq.n	80094a4 <UART_RxISR_16BIT+0x20>
 80094a2:	e0ba      	b.n	800961a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	214c      	movs	r1, #76	@ 0x4c
 80094aa:	187b      	adds	r3, r7, r1
 80094ac:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80094ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80094b6:	187b      	adds	r3, r7, r1
 80094b8:	183a      	adds	r2, r7, r0
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	8812      	ldrh	r2, [r2, #0]
 80094be:	4013      	ands	r3, r2
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ca:	1c9a      	adds	r2, r3, #2
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	225a      	movs	r2, #90	@ 0x5a
 80094d4:	5a9b      	ldrh	r3, [r3, r2]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b299      	uxth	r1, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	225a      	movs	r2, #90	@ 0x5a
 80094e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	225a      	movs	r2, #90	@ 0x5a
 80094e6:	5a9b      	ldrh	r3, [r3, r2]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d000      	beq.n	80094f0 <UART_RxISR_16BIT+0x6c>
 80094ee:	e09c      	b.n	800962a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094f0:	f3ef 8310 	mrs	r3, PRIMASK
 80094f4:	623b      	str	r3, [r7, #32]
  return(result);
 80094f6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094fa:	2301      	movs	r3, #1
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009500:	f383 8810 	msr	PRIMASK, r3
}
 8009504:	46c0      	nop			@ (mov r8, r8)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4948      	ldr	r1, [pc, #288]	@ (8009634 <UART_RxISR_16BIT+0x1b0>)
 8009512:	400a      	ands	r2, r1
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009518:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	f383 8810 	msr	PRIMASK, r3
}
 8009520:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009522:	f3ef 8310 	mrs	r3, PRIMASK
 8009526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952a:	643b      	str	r3, [r7, #64]	@ 0x40
 800952c:	2301      	movs	r3, #1
 800952e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	f383 8810 	msr	PRIMASK, r3
}
 8009536:	46c0      	nop			@ (mov r8, r8)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2101      	movs	r1, #1
 8009544:	438a      	bics	r2, r1
 8009546:	609a      	str	r2, [r3, #8]
 8009548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800954a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800954c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954e:	f383 8810 	msr	PRIMASK, r3
}
 8009552:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2280      	movs	r2, #128	@ 0x80
 8009558:	2120      	movs	r1, #32
 800955a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	2380      	movs	r3, #128	@ 0x80
 8009570:	041b      	lsls	r3, r3, #16
 8009572:	4013      	ands	r3, r2
 8009574:	d018      	beq.n	80095a8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009576:	f3ef 8310 	mrs	r3, PRIMASK
 800957a:	617b      	str	r3, [r7, #20]
  return(result);
 800957c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009580:	2301      	movs	r3, #1
 8009582:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f383 8810 	msr	PRIMASK, r3
}
 800958a:	46c0      	nop			@ (mov r8, r8)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4928      	ldr	r1, [pc, #160]	@ (8009638 <UART_RxISR_16BIT+0x1b4>)
 8009598:	400a      	ands	r2, r1
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800959e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f383 8810 	msr	PRIMASK, r3
}
 80095a6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d12f      	bne.n	8009610 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b6:	f3ef 8310 	mrs	r3, PRIMASK
 80095ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80095bc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095c0:	2301      	movs	r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f383 8810 	msr	PRIMASK, r3
}
 80095ca:	46c0      	nop			@ (mov r8, r8)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2110      	movs	r1, #16
 80095d8:	438a      	bics	r2, r1
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f383 8810 	msr	PRIMASK, r3
}
 80095e6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	2210      	movs	r2, #16
 80095f0:	4013      	ands	r3, r2
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d103      	bne.n	80095fe <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2210      	movs	r2, #16
 80095fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2258      	movs	r2, #88	@ 0x58
 8009602:	5a9a      	ldrh	r2, [r3, r2]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	0011      	movs	r1, r2
 8009608:	0018      	movs	r0, r3
 800960a:	f7ff f9eb 	bl	80089e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800960e:	e00c      	b.n	800962a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	0018      	movs	r0, r3
 8009614:	f7fa fab0 	bl	8003b78 <HAL_UART_RxCpltCallback>
}
 8009618:	e007      	b.n	800962a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2108      	movs	r1, #8
 8009626:	430a      	orrs	r2, r1
 8009628:	619a      	str	r2, [r3, #24]
}
 800962a:	46c0      	nop			@ (mov r8, r8)
 800962c:	46bd      	mov	sp, r7
 800962e:	b014      	add	sp, #80	@ 0x50
 8009630:	bd80      	pop	{r7, pc}
 8009632:	46c0      	nop			@ (mov r8, r8)
 8009634:	fffffedf 	.word	0xfffffedf
 8009638:	fbffffff 	.word	0xfbffffff

0800963c <__cvt>:
 800963c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800963e:	001f      	movs	r7, r3
 8009640:	2300      	movs	r3, #0
 8009642:	0016      	movs	r6, r2
 8009644:	b08b      	sub	sp, #44	@ 0x2c
 8009646:	429f      	cmp	r7, r3
 8009648:	da04      	bge.n	8009654 <__cvt+0x18>
 800964a:	2180      	movs	r1, #128	@ 0x80
 800964c:	0609      	lsls	r1, r1, #24
 800964e:	187b      	adds	r3, r7, r1
 8009650:	001f      	movs	r7, r3
 8009652:	232d      	movs	r3, #45	@ 0x2d
 8009654:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009656:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009658:	7013      	strb	r3, [r2, #0]
 800965a:	2320      	movs	r3, #32
 800965c:	2203      	movs	r2, #3
 800965e:	439d      	bics	r5, r3
 8009660:	2d46      	cmp	r5, #70	@ 0x46
 8009662:	d007      	beq.n	8009674 <__cvt+0x38>
 8009664:	002b      	movs	r3, r5
 8009666:	3b45      	subs	r3, #69	@ 0x45
 8009668:	4259      	negs	r1, r3
 800966a:	414b      	adcs	r3, r1
 800966c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800966e:	3a01      	subs	r2, #1
 8009670:	18cb      	adds	r3, r1, r3
 8009672:	9310      	str	r3, [sp, #64]	@ 0x40
 8009674:	ab09      	add	r3, sp, #36	@ 0x24
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	ab08      	add	r3, sp, #32
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800967e:	9200      	str	r2, [sp, #0]
 8009680:	9302      	str	r3, [sp, #8]
 8009682:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009684:	0032      	movs	r2, r6
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	003b      	movs	r3, r7
 800968a:	f000 ffbf 	bl	800a60c <_dtoa_r>
 800968e:	0004      	movs	r4, r0
 8009690:	2d47      	cmp	r5, #71	@ 0x47
 8009692:	d11b      	bne.n	80096cc <__cvt+0x90>
 8009694:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d511      	bpl.n	80096be <__cvt+0x82>
 800969a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800969c:	18c3      	adds	r3, r0, r3
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	2200      	movs	r2, #0
 80096a2:	2300      	movs	r3, #0
 80096a4:	0030      	movs	r0, r6
 80096a6:	0039      	movs	r1, r7
 80096a8:	f7f6 feda 	bl	8000460 <__aeabi_dcmpeq>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d001      	beq.n	80096b4 <__cvt+0x78>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096b4:	2230      	movs	r2, #48	@ 0x30
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	9907      	ldr	r1, [sp, #28]
 80096ba:	428b      	cmp	r3, r1
 80096bc:	d320      	bcc.n	8009700 <__cvt+0xc4>
 80096be:	0020      	movs	r0, r4
 80096c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80096c4:	1b1b      	subs	r3, r3, r4
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	b00b      	add	sp, #44	@ 0x2c
 80096ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096ce:	18c3      	adds	r3, r0, r3
 80096d0:	9307      	str	r3, [sp, #28]
 80096d2:	2d46      	cmp	r5, #70	@ 0x46
 80096d4:	d1e4      	bne.n	80096a0 <__cvt+0x64>
 80096d6:	7803      	ldrb	r3, [r0, #0]
 80096d8:	2b30      	cmp	r3, #48	@ 0x30
 80096da:	d10c      	bne.n	80096f6 <__cvt+0xba>
 80096dc:	2200      	movs	r2, #0
 80096de:	2300      	movs	r3, #0
 80096e0:	0030      	movs	r0, r6
 80096e2:	0039      	movs	r1, r7
 80096e4:	f7f6 febc 	bl	8000460 <__aeabi_dcmpeq>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d104      	bne.n	80096f6 <__cvt+0xba>
 80096ec:	2301      	movs	r3, #1
 80096ee:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80096f0:	1a9b      	subs	r3, r3, r2
 80096f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096f8:	9a07      	ldr	r2, [sp, #28]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	18d3      	adds	r3, r2, r3
 80096fe:	e7ce      	b.n	800969e <__cvt+0x62>
 8009700:	1c59      	adds	r1, r3, #1
 8009702:	9109      	str	r1, [sp, #36]	@ 0x24
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	e7d6      	b.n	80096b6 <__cvt+0x7a>

08009708 <__exponent>:
 8009708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970a:	232b      	movs	r3, #43	@ 0x2b
 800970c:	0005      	movs	r5, r0
 800970e:	000c      	movs	r4, r1
 8009710:	b085      	sub	sp, #20
 8009712:	7002      	strb	r2, [r0, #0]
 8009714:	2900      	cmp	r1, #0
 8009716:	da01      	bge.n	800971c <__exponent+0x14>
 8009718:	424c      	negs	r4, r1
 800971a:	3302      	adds	r3, #2
 800971c:	706b      	strb	r3, [r5, #1]
 800971e:	2c09      	cmp	r4, #9
 8009720:	dd2c      	ble.n	800977c <__exponent+0x74>
 8009722:	ab02      	add	r3, sp, #8
 8009724:	1dde      	adds	r6, r3, #7
 8009726:	0020      	movs	r0, r4
 8009728:	210a      	movs	r1, #10
 800972a:	f7f6 fe83 	bl	8000434 <__aeabi_idivmod>
 800972e:	0037      	movs	r7, r6
 8009730:	3130      	adds	r1, #48	@ 0x30
 8009732:	3e01      	subs	r6, #1
 8009734:	0020      	movs	r0, r4
 8009736:	7031      	strb	r1, [r6, #0]
 8009738:	210a      	movs	r1, #10
 800973a:	9401      	str	r4, [sp, #4]
 800973c:	f7f6 fd94 	bl	8000268 <__divsi3>
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	0004      	movs	r4, r0
 8009744:	2b63      	cmp	r3, #99	@ 0x63
 8009746:	dcee      	bgt.n	8009726 <__exponent+0x1e>
 8009748:	1eba      	subs	r2, r7, #2
 800974a:	1ca8      	adds	r0, r5, #2
 800974c:	0001      	movs	r1, r0
 800974e:	0013      	movs	r3, r2
 8009750:	3430      	adds	r4, #48	@ 0x30
 8009752:	7014      	strb	r4, [r2, #0]
 8009754:	ac02      	add	r4, sp, #8
 8009756:	3407      	adds	r4, #7
 8009758:	429c      	cmp	r4, r3
 800975a:	d80a      	bhi.n	8009772 <__exponent+0x6a>
 800975c:	2300      	movs	r3, #0
 800975e:	42a2      	cmp	r2, r4
 8009760:	d803      	bhi.n	800976a <__exponent+0x62>
 8009762:	3309      	adds	r3, #9
 8009764:	aa02      	add	r2, sp, #8
 8009766:	189b      	adds	r3, r3, r2
 8009768:	1bdb      	subs	r3, r3, r7
 800976a:	18c0      	adds	r0, r0, r3
 800976c:	1b40      	subs	r0, r0, r5
 800976e:	b005      	add	sp, #20
 8009770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009772:	781c      	ldrb	r4, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	700c      	strb	r4, [r1, #0]
 8009778:	3101      	adds	r1, #1
 800977a:	e7eb      	b.n	8009754 <__exponent+0x4c>
 800977c:	2330      	movs	r3, #48	@ 0x30
 800977e:	18e4      	adds	r4, r4, r3
 8009780:	70ab      	strb	r3, [r5, #2]
 8009782:	1d28      	adds	r0, r5, #4
 8009784:	70ec      	strb	r4, [r5, #3]
 8009786:	e7f1      	b.n	800976c <__exponent+0x64>

08009788 <_printf_float>:
 8009788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978a:	b097      	sub	sp, #92	@ 0x5c
 800978c:	000d      	movs	r5, r1
 800978e:	920a      	str	r2, [sp, #40]	@ 0x28
 8009790:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009792:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009794:	9009      	str	r0, [sp, #36]	@ 0x24
 8009796:	f000 fe0f 	bl	800a3b8 <_localeconv_r>
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	0018      	movs	r0, r3
 800979e:	930d      	str	r3, [sp, #52]	@ 0x34
 80097a0:	f7f6 fcbc 	bl	800011c <strlen>
 80097a4:	2300      	movs	r3, #0
 80097a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80097a8:	9314      	str	r3, [sp, #80]	@ 0x50
 80097aa:	7e2b      	ldrb	r3, [r5, #24]
 80097ac:	2207      	movs	r2, #7
 80097ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80097b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	05c9      	lsls	r1, r1, #23
 80097ba:	d545      	bpl.n	8009848 <_printf_float+0xc0>
 80097bc:	189b      	adds	r3, r3, r2
 80097be:	4393      	bics	r3, r2
 80097c0:	001a      	movs	r2, r3
 80097c2:	3208      	adds	r2, #8
 80097c4:	6022      	str	r2, [r4, #0]
 80097c6:	2201      	movs	r2, #1
 80097c8:	681e      	ldr	r6, [r3, #0]
 80097ca:	685f      	ldr	r7, [r3, #4]
 80097cc:	007b      	lsls	r3, r7, #1
 80097ce:	085b      	lsrs	r3, r3, #1
 80097d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80097d2:	9610      	str	r6, [sp, #64]	@ 0x40
 80097d4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80097d6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80097d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80097da:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80097dc:	4ba7      	ldr	r3, [pc, #668]	@ (8009a7c <_printf_float+0x2f4>)
 80097de:	4252      	negs	r2, r2
 80097e0:	f7f9 fb70 	bl	8002ec4 <__aeabi_dcmpun>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d131      	bne.n	800984c <_printf_float+0xc4>
 80097e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80097ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80097ec:	2201      	movs	r2, #1
 80097ee:	4ba3      	ldr	r3, [pc, #652]	@ (8009a7c <_printf_float+0x2f4>)
 80097f0:	4252      	negs	r2, r2
 80097f2:	f7f6 fe45 	bl	8000480 <__aeabi_dcmple>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d128      	bne.n	800984c <_printf_float+0xc4>
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	0030      	movs	r0, r6
 8009800:	0039      	movs	r1, r7
 8009802:	f7f6 fe33 	bl	800046c <__aeabi_dcmplt>
 8009806:	2800      	cmp	r0, #0
 8009808:	d003      	beq.n	8009812 <_printf_float+0x8a>
 800980a:	002b      	movs	r3, r5
 800980c:	222d      	movs	r2, #45	@ 0x2d
 800980e:	3343      	adds	r3, #67	@ 0x43
 8009810:	701a      	strb	r2, [r3, #0]
 8009812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009814:	4f9a      	ldr	r7, [pc, #616]	@ (8009a80 <_printf_float+0x2f8>)
 8009816:	2b47      	cmp	r3, #71	@ 0x47
 8009818:	d900      	bls.n	800981c <_printf_float+0x94>
 800981a:	4f9a      	ldr	r7, [pc, #616]	@ (8009a84 <_printf_float+0x2fc>)
 800981c:	2303      	movs	r3, #3
 800981e:	2400      	movs	r4, #0
 8009820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009822:	612b      	str	r3, [r5, #16]
 8009824:	3301      	adds	r3, #1
 8009826:	439a      	bics	r2, r3
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800982c:	0029      	movs	r1, r5
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009834:	aa15      	add	r2, sp, #84	@ 0x54
 8009836:	f000 f9e5 	bl	8009c04 <_printf_common>
 800983a:	3001      	adds	r0, #1
 800983c:	d000      	beq.n	8009840 <_printf_float+0xb8>
 800983e:	e09f      	b.n	8009980 <_printf_float+0x1f8>
 8009840:	2001      	movs	r0, #1
 8009842:	4240      	negs	r0, r0
 8009844:	b017      	add	sp, #92	@ 0x5c
 8009846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009848:	3307      	adds	r3, #7
 800984a:	e7b8      	b.n	80097be <_printf_float+0x36>
 800984c:	0032      	movs	r2, r6
 800984e:	003b      	movs	r3, r7
 8009850:	0030      	movs	r0, r6
 8009852:	0039      	movs	r1, r7
 8009854:	f7f9 fb36 	bl	8002ec4 <__aeabi_dcmpun>
 8009858:	2800      	cmp	r0, #0
 800985a:	d00b      	beq.n	8009874 <_printf_float+0xec>
 800985c:	2f00      	cmp	r7, #0
 800985e:	da03      	bge.n	8009868 <_printf_float+0xe0>
 8009860:	002b      	movs	r3, r5
 8009862:	222d      	movs	r2, #45	@ 0x2d
 8009864:	3343      	adds	r3, #67	@ 0x43
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800986a:	4f87      	ldr	r7, [pc, #540]	@ (8009a88 <_printf_float+0x300>)
 800986c:	2b47      	cmp	r3, #71	@ 0x47
 800986e:	d9d5      	bls.n	800981c <_printf_float+0x94>
 8009870:	4f86      	ldr	r7, [pc, #536]	@ (8009a8c <_printf_float+0x304>)
 8009872:	e7d3      	b.n	800981c <_printf_float+0x94>
 8009874:	2220      	movs	r2, #32
 8009876:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009878:	686b      	ldr	r3, [r5, #4]
 800987a:	4394      	bics	r4, r2
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	d146      	bne.n	800990e <_printf_float+0x186>
 8009880:	3307      	adds	r3, #7
 8009882:	606b      	str	r3, [r5, #4]
 8009884:	2380      	movs	r3, #128	@ 0x80
 8009886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	4313      	orrs	r3, r2
 800988c:	2200      	movs	r2, #0
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	9206      	str	r2, [sp, #24]
 8009892:	aa14      	add	r2, sp, #80	@ 0x50
 8009894:	9205      	str	r2, [sp, #20]
 8009896:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009898:	a90a      	add	r1, sp, #40	@ 0x28
 800989a:	9204      	str	r2, [sp, #16]
 800989c:	aa13      	add	r2, sp, #76	@ 0x4c
 800989e:	9203      	str	r2, [sp, #12]
 80098a0:	2223      	movs	r2, #35	@ 0x23
 80098a2:	1852      	adds	r2, r2, r1
 80098a4:	9202      	str	r2, [sp, #8]
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	686b      	ldr	r3, [r5, #4]
 80098aa:	0032      	movs	r2, r6
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098b0:	003b      	movs	r3, r7
 80098b2:	f7ff fec3 	bl	800963c <__cvt>
 80098b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80098b8:	0007      	movs	r7, r0
 80098ba:	2c47      	cmp	r4, #71	@ 0x47
 80098bc:	d12d      	bne.n	800991a <_printf_float+0x192>
 80098be:	1cd3      	adds	r3, r2, #3
 80098c0:	db02      	blt.n	80098c8 <_printf_float+0x140>
 80098c2:	686b      	ldr	r3, [r5, #4]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	dd48      	ble.n	800995a <_printf_float+0x1d2>
 80098c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80098cc:	3b02      	subs	r3, #2
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80098d2:	0028      	movs	r0, r5
 80098d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098d6:	3901      	subs	r1, #1
 80098d8:	3050      	adds	r0, #80	@ 0x50
 80098da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098dc:	f7ff ff14 	bl	8009708 <__exponent>
 80098e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80098e2:	0004      	movs	r4, r0
 80098e4:	1813      	adds	r3, r2, r0
 80098e6:	612b      	str	r3, [r5, #16]
 80098e8:	2a01      	cmp	r2, #1
 80098ea:	dc02      	bgt.n	80098f2 <_printf_float+0x16a>
 80098ec:	682a      	ldr	r2, [r5, #0]
 80098ee:	07d2      	lsls	r2, r2, #31
 80098f0:	d501      	bpl.n	80098f6 <_printf_float+0x16e>
 80098f2:	3301      	adds	r3, #1
 80098f4:	612b      	str	r3, [r5, #16]
 80098f6:	2323      	movs	r3, #35	@ 0x23
 80098f8:	aa0a      	add	r2, sp, #40	@ 0x28
 80098fa:	189b      	adds	r3, r3, r2
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d100      	bne.n	8009904 <_printf_float+0x17c>
 8009902:	e792      	b.n	800982a <_printf_float+0xa2>
 8009904:	002b      	movs	r3, r5
 8009906:	222d      	movs	r2, #45	@ 0x2d
 8009908:	3343      	adds	r3, #67	@ 0x43
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e78d      	b.n	800982a <_printf_float+0xa2>
 800990e:	2c47      	cmp	r4, #71	@ 0x47
 8009910:	d1b8      	bne.n	8009884 <_printf_float+0xfc>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1b6      	bne.n	8009884 <_printf_float+0xfc>
 8009916:	3301      	adds	r3, #1
 8009918:	e7b3      	b.n	8009882 <_printf_float+0xfa>
 800991a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800991c:	0011      	movs	r1, r2
 800991e:	2b65      	cmp	r3, #101	@ 0x65
 8009920:	d9d7      	bls.n	80098d2 <_printf_float+0x14a>
 8009922:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009924:	2b66      	cmp	r3, #102	@ 0x66
 8009926:	d11a      	bne.n	800995e <_printf_float+0x1d6>
 8009928:	686b      	ldr	r3, [r5, #4]
 800992a:	2a00      	cmp	r2, #0
 800992c:	dd09      	ble.n	8009942 <_printf_float+0x1ba>
 800992e:	612a      	str	r2, [r5, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <_printf_float+0x1b2>
 8009934:	6829      	ldr	r1, [r5, #0]
 8009936:	07c9      	lsls	r1, r1, #31
 8009938:	d50b      	bpl.n	8009952 <_printf_float+0x1ca>
 800993a:	3301      	adds	r3, #1
 800993c:	189b      	adds	r3, r3, r2
 800993e:	612b      	str	r3, [r5, #16]
 8009940:	e007      	b.n	8009952 <_printf_float+0x1ca>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d103      	bne.n	800994e <_printf_float+0x1c6>
 8009946:	2201      	movs	r2, #1
 8009948:	6829      	ldr	r1, [r5, #0]
 800994a:	4211      	tst	r1, r2
 800994c:	d000      	beq.n	8009950 <_printf_float+0x1c8>
 800994e:	1c9a      	adds	r2, r3, #2
 8009950:	612a      	str	r2, [r5, #16]
 8009952:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009954:	2400      	movs	r4, #0
 8009956:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009958:	e7cd      	b.n	80098f6 <_printf_float+0x16e>
 800995a:	2367      	movs	r3, #103	@ 0x67
 800995c:	930c      	str	r3, [sp, #48]	@ 0x30
 800995e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009960:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009962:	4299      	cmp	r1, r3
 8009964:	db06      	blt.n	8009974 <_printf_float+0x1ec>
 8009966:	682b      	ldr	r3, [r5, #0]
 8009968:	6129      	str	r1, [r5, #16]
 800996a:	07db      	lsls	r3, r3, #31
 800996c:	d5f1      	bpl.n	8009952 <_printf_float+0x1ca>
 800996e:	3101      	adds	r1, #1
 8009970:	6129      	str	r1, [r5, #16]
 8009972:	e7ee      	b.n	8009952 <_printf_float+0x1ca>
 8009974:	2201      	movs	r2, #1
 8009976:	2900      	cmp	r1, #0
 8009978:	dce0      	bgt.n	800993c <_printf_float+0x1b4>
 800997a:	1892      	adds	r2, r2, r2
 800997c:	1a52      	subs	r2, r2, r1
 800997e:	e7dd      	b.n	800993c <_printf_float+0x1b4>
 8009980:	682a      	ldr	r2, [r5, #0]
 8009982:	0553      	lsls	r3, r2, #21
 8009984:	d408      	bmi.n	8009998 <_printf_float+0x210>
 8009986:	692b      	ldr	r3, [r5, #16]
 8009988:	003a      	movs	r2, r7
 800998a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800998c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800998e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009990:	47a0      	blx	r4
 8009992:	3001      	adds	r0, #1
 8009994:	d129      	bne.n	80099ea <_printf_float+0x262>
 8009996:	e753      	b.n	8009840 <_printf_float+0xb8>
 8009998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800999a:	2b65      	cmp	r3, #101	@ 0x65
 800999c:	d800      	bhi.n	80099a0 <_printf_float+0x218>
 800999e:	e0da      	b.n	8009b56 <_printf_float+0x3ce>
 80099a0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80099a2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80099a4:	2200      	movs	r2, #0
 80099a6:	2300      	movs	r3, #0
 80099a8:	f7f6 fd5a 	bl	8000460 <__aeabi_dcmpeq>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d033      	beq.n	8009a18 <_printf_float+0x290>
 80099b0:	2301      	movs	r3, #1
 80099b2:	4a37      	ldr	r2, [pc, #220]	@ (8009a90 <_printf_float+0x308>)
 80099b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80099ba:	47a0      	blx	r4
 80099bc:	3001      	adds	r0, #1
 80099be:	d100      	bne.n	80099c2 <_printf_float+0x23a>
 80099c0:	e73e      	b.n	8009840 <_printf_float+0xb8>
 80099c2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80099c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099c6:	42b3      	cmp	r3, r6
 80099c8:	db02      	blt.n	80099d0 <_printf_float+0x248>
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	07db      	lsls	r3, r3, #31
 80099ce:	d50c      	bpl.n	80099ea <_printf_float+0x262>
 80099d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80099d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099da:	47a0      	blx	r4
 80099dc:	2400      	movs	r4, #0
 80099de:	3001      	adds	r0, #1
 80099e0:	d100      	bne.n	80099e4 <_printf_float+0x25c>
 80099e2:	e72d      	b.n	8009840 <_printf_float+0xb8>
 80099e4:	1e73      	subs	r3, r6, #1
 80099e6:	42a3      	cmp	r3, r4
 80099e8:	dc0a      	bgt.n	8009a00 <_printf_float+0x278>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	079b      	lsls	r3, r3, #30
 80099ee:	d500      	bpl.n	80099f2 <_printf_float+0x26a>
 80099f0:	e105      	b.n	8009bfe <_printf_float+0x476>
 80099f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099f4:	68e8      	ldr	r0, [r5, #12]
 80099f6:	4298      	cmp	r0, r3
 80099f8:	db00      	blt.n	80099fc <_printf_float+0x274>
 80099fa:	e723      	b.n	8009844 <_printf_float+0xbc>
 80099fc:	0018      	movs	r0, r3
 80099fe:	e721      	b.n	8009844 <_printf_float+0xbc>
 8009a00:	002a      	movs	r2, r5
 8009a02:	2301      	movs	r3, #1
 8009a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a08:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009a0a:	321a      	adds	r2, #26
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d100      	bne.n	8009a14 <_printf_float+0x28c>
 8009a12:	e715      	b.n	8009840 <_printf_float+0xb8>
 8009a14:	3401      	adds	r4, #1
 8009a16:	e7e5      	b.n	80099e4 <_printf_float+0x25c>
 8009a18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	dc3a      	bgt.n	8009a94 <_printf_float+0x30c>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4a1b      	ldr	r2, [pc, #108]	@ (8009a90 <_printf_float+0x308>)
 8009a22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a28:	47a0      	blx	r4
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d100      	bne.n	8009a30 <_printf_float+0x2a8>
 8009a2e:	e707      	b.n	8009840 <_printf_float+0xb8>
 8009a30:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009a32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a34:	4333      	orrs	r3, r6
 8009a36:	d102      	bne.n	8009a3e <_printf_float+0x2b6>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d5d5      	bpl.n	80099ea <_printf_float+0x262>
 8009a3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a48:	47a0      	blx	r4
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d100      	bne.n	8009a52 <_printf_float+0x2ca>
 8009a50:	e6f6      	b.n	8009840 <_printf_float+0xb8>
 8009a52:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a58:	425b      	negs	r3, r3
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	dc01      	bgt.n	8009a62 <_printf_float+0x2da>
 8009a5e:	0033      	movs	r3, r6
 8009a60:	e792      	b.n	8009988 <_printf_float+0x200>
 8009a62:	002a      	movs	r2, r5
 8009a64:	2301      	movs	r3, #1
 8009a66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a6c:	321a      	adds	r2, #26
 8009a6e:	47a0      	blx	r4
 8009a70:	3001      	adds	r0, #1
 8009a72:	d100      	bne.n	8009a76 <_printf_float+0x2ee>
 8009a74:	e6e4      	b.n	8009840 <_printf_float+0xb8>
 8009a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a78:	3301      	adds	r3, #1
 8009a7a:	e7ea      	b.n	8009a52 <_printf_float+0x2ca>
 8009a7c:	7fefffff 	.word	0x7fefffff
 8009a80:	0800d7c0 	.word	0x0800d7c0
 8009a84:	0800d7c4 	.word	0x0800d7c4
 8009a88:	0800d7c8 	.word	0x0800d7c8
 8009a8c:	0800d7cc 	.word	0x0800d7cc
 8009a90:	0800d7d0 	.word	0x0800d7d0
 8009a94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a96:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009a98:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a9a:	429e      	cmp	r6, r3
 8009a9c:	dd00      	ble.n	8009aa0 <_printf_float+0x318>
 8009a9e:	001e      	movs	r6, r3
 8009aa0:	2e00      	cmp	r6, #0
 8009aa2:	dc31      	bgt.n	8009b08 <_printf_float+0x380>
 8009aa4:	43f3      	mvns	r3, r6
 8009aa6:	2400      	movs	r4, #0
 8009aa8:	17db      	asrs	r3, r3, #31
 8009aaa:	4033      	ands	r3, r6
 8009aac:	930e      	str	r3, [sp, #56]	@ 0x38
 8009aae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009ab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ab2:	1af3      	subs	r3, r6, r3
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	dc30      	bgt.n	8009b1a <_printf_float+0x392>
 8009ab8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009aba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009abc:	429a      	cmp	r2, r3
 8009abe:	dc38      	bgt.n	8009b32 <_printf_float+0x3aa>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	07db      	lsls	r3, r3, #31
 8009ac4:	d435      	bmi.n	8009b32 <_printf_float+0x3aa>
 8009ac6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009ac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009aca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009acc:	1b9b      	subs	r3, r3, r6
 8009ace:	1b14      	subs	r4, r2, r4
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	dd00      	ble.n	8009ad6 <_printf_float+0x34e>
 8009ad4:	001c      	movs	r4, r3
 8009ad6:	2c00      	cmp	r4, #0
 8009ad8:	dc34      	bgt.n	8009b44 <_printf_float+0x3bc>
 8009ada:	43e3      	mvns	r3, r4
 8009adc:	2600      	movs	r6, #0
 8009ade:	17db      	asrs	r3, r3, #31
 8009ae0:	401c      	ands	r4, r3
 8009ae2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ae4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	1b1b      	subs	r3, r3, r4
 8009aea:	42b3      	cmp	r3, r6
 8009aec:	dc00      	bgt.n	8009af0 <_printf_float+0x368>
 8009aee:	e77c      	b.n	80099ea <_printf_float+0x262>
 8009af0:	002a      	movs	r2, r5
 8009af2:	2301      	movs	r3, #1
 8009af4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009af8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009afa:	321a      	adds	r2, #26
 8009afc:	47b8      	blx	r7
 8009afe:	3001      	adds	r0, #1
 8009b00:	d100      	bne.n	8009b04 <_printf_float+0x37c>
 8009b02:	e69d      	b.n	8009840 <_printf_float+0xb8>
 8009b04:	3601      	adds	r6, #1
 8009b06:	e7ec      	b.n	8009ae2 <_printf_float+0x35a>
 8009b08:	0033      	movs	r3, r6
 8009b0a:	003a      	movs	r2, r7
 8009b0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009b12:	47a0      	blx	r4
 8009b14:	3001      	adds	r0, #1
 8009b16:	d1c5      	bne.n	8009aa4 <_printf_float+0x31c>
 8009b18:	e692      	b.n	8009840 <_printf_float+0xb8>
 8009b1a:	002a      	movs	r2, r5
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b24:	321a      	adds	r2, #26
 8009b26:	47b0      	blx	r6
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d100      	bne.n	8009b2e <_printf_float+0x3a6>
 8009b2c:	e688      	b.n	8009840 <_printf_float+0xb8>
 8009b2e:	3401      	adds	r4, #1
 8009b30:	e7bd      	b.n	8009aae <_printf_float+0x326>
 8009b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009b3c:	47a0      	blx	r4
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d1c1      	bne.n	8009ac6 <_printf_float+0x33e>
 8009b42:	e67d      	b.n	8009840 <_printf_float+0xb8>
 8009b44:	19ba      	adds	r2, r7, r6
 8009b46:	0023      	movs	r3, r4
 8009b48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b4e:	47b0      	blx	r6
 8009b50:	3001      	adds	r0, #1
 8009b52:	d1c2      	bne.n	8009ada <_printf_float+0x352>
 8009b54:	e674      	b.n	8009840 <_printf_float+0xb8>
 8009b56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b58:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	dc02      	bgt.n	8009b64 <_printf_float+0x3dc>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	421a      	tst	r2, r3
 8009b62:	d039      	beq.n	8009bd8 <_printf_float+0x450>
 8009b64:	2301      	movs	r3, #1
 8009b66:	003a      	movs	r2, r7
 8009b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b6e:	47b0      	blx	r6
 8009b70:	3001      	adds	r0, #1
 8009b72:	d100      	bne.n	8009b76 <_printf_float+0x3ee>
 8009b74:	e664      	b.n	8009840 <_printf_float+0xb8>
 8009b76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b7e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b80:	47b0      	blx	r6
 8009b82:	3001      	adds	r0, #1
 8009b84:	d100      	bne.n	8009b88 <_printf_float+0x400>
 8009b86:	e65b      	b.n	8009840 <_printf_float+0xb8>
 8009b88:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009b8a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009b8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b8e:	2200      	movs	r2, #0
 8009b90:	3b01      	subs	r3, #1
 8009b92:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b94:	2300      	movs	r3, #0
 8009b96:	f7f6 fc63 	bl	8000460 <__aeabi_dcmpeq>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d11a      	bne.n	8009bd4 <_printf_float+0x44c>
 8009b9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ba0:	1c7a      	adds	r2, r7, #1
 8009ba2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ba4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ba6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009ba8:	47b0      	blx	r6
 8009baa:	3001      	adds	r0, #1
 8009bac:	d10e      	bne.n	8009bcc <_printf_float+0x444>
 8009bae:	e647      	b.n	8009840 <_printf_float+0xb8>
 8009bb0:	002a      	movs	r2, r5
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009bba:	321a      	adds	r2, #26
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d100      	bne.n	8009bc4 <_printf_float+0x43c>
 8009bc2:	e63d      	b.n	8009840 <_printf_float+0xb8>
 8009bc4:	3601      	adds	r6, #1
 8009bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bc8:	429e      	cmp	r6, r3
 8009bca:	dbf1      	blt.n	8009bb0 <_printf_float+0x428>
 8009bcc:	002a      	movs	r2, r5
 8009bce:	0023      	movs	r3, r4
 8009bd0:	3250      	adds	r2, #80	@ 0x50
 8009bd2:	e6da      	b.n	800998a <_printf_float+0x202>
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	e7f6      	b.n	8009bc6 <_printf_float+0x43e>
 8009bd8:	003a      	movs	r2, r7
 8009bda:	e7e2      	b.n	8009ba2 <_printf_float+0x41a>
 8009bdc:	002a      	movs	r2, r5
 8009bde:	2301      	movs	r3, #1
 8009be0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009be4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009be6:	3219      	adds	r2, #25
 8009be8:	47b0      	blx	r6
 8009bea:	3001      	adds	r0, #1
 8009bec:	d100      	bne.n	8009bf0 <_printf_float+0x468>
 8009bee:	e627      	b.n	8009840 <_printf_float+0xb8>
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	68eb      	ldr	r3, [r5, #12]
 8009bf4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009bf6:	1a9b      	subs	r3, r3, r2
 8009bf8:	42a3      	cmp	r3, r4
 8009bfa:	dcef      	bgt.n	8009bdc <_printf_float+0x454>
 8009bfc:	e6f9      	b.n	80099f2 <_printf_float+0x26a>
 8009bfe:	2400      	movs	r4, #0
 8009c00:	e7f7      	b.n	8009bf2 <_printf_float+0x46a>
 8009c02:	46c0      	nop			@ (mov r8, r8)

08009c04 <_printf_common>:
 8009c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c06:	0016      	movs	r6, r2
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	688a      	ldr	r2, [r1, #8]
 8009c0c:	690b      	ldr	r3, [r1, #16]
 8009c0e:	000c      	movs	r4, r1
 8009c10:	9000      	str	r0, [sp, #0]
 8009c12:	4293      	cmp	r3, r2
 8009c14:	da00      	bge.n	8009c18 <_printf_common+0x14>
 8009c16:	0013      	movs	r3, r2
 8009c18:	0022      	movs	r2, r4
 8009c1a:	6033      	str	r3, [r6, #0]
 8009c1c:	3243      	adds	r2, #67	@ 0x43
 8009c1e:	7812      	ldrb	r2, [r2, #0]
 8009c20:	2a00      	cmp	r2, #0
 8009c22:	d001      	beq.n	8009c28 <_printf_common+0x24>
 8009c24:	3301      	adds	r3, #1
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	069b      	lsls	r3, r3, #26
 8009c2c:	d502      	bpl.n	8009c34 <_printf_common+0x30>
 8009c2e:	6833      	ldr	r3, [r6, #0]
 8009c30:	3302      	adds	r3, #2
 8009c32:	6033      	str	r3, [r6, #0]
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	2306      	movs	r3, #6
 8009c38:	0015      	movs	r5, r2
 8009c3a:	401d      	ands	r5, r3
 8009c3c:	421a      	tst	r2, r3
 8009c3e:	d027      	beq.n	8009c90 <_printf_common+0x8c>
 8009c40:	0023      	movs	r3, r4
 8009c42:	3343      	adds	r3, #67	@ 0x43
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	1e5a      	subs	r2, r3, #1
 8009c48:	4193      	sbcs	r3, r2
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	0692      	lsls	r2, r2, #26
 8009c4e:	d430      	bmi.n	8009cb2 <_printf_common+0xae>
 8009c50:	0022      	movs	r2, r4
 8009c52:	9901      	ldr	r1, [sp, #4]
 8009c54:	9800      	ldr	r0, [sp, #0]
 8009c56:	9d08      	ldr	r5, [sp, #32]
 8009c58:	3243      	adds	r2, #67	@ 0x43
 8009c5a:	47a8      	blx	r5
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	d025      	beq.n	8009cac <_printf_common+0xa8>
 8009c60:	2206      	movs	r2, #6
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	2500      	movs	r5, #0
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d105      	bne.n	8009c78 <_printf_common+0x74>
 8009c6c:	6833      	ldr	r3, [r6, #0]
 8009c6e:	68e5      	ldr	r5, [r4, #12]
 8009c70:	1aed      	subs	r5, r5, r3
 8009c72:	43eb      	mvns	r3, r5
 8009c74:	17db      	asrs	r3, r3, #31
 8009c76:	401d      	ands	r5, r3
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	6922      	ldr	r2, [r4, #16]
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	dd01      	ble.n	8009c84 <_printf_common+0x80>
 8009c80:	1a9b      	subs	r3, r3, r2
 8009c82:	18ed      	adds	r5, r5, r3
 8009c84:	2600      	movs	r6, #0
 8009c86:	42b5      	cmp	r5, r6
 8009c88:	d120      	bne.n	8009ccc <_printf_common+0xc8>
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	e010      	b.n	8009cb0 <_printf_common+0xac>
 8009c8e:	3501      	adds	r5, #1
 8009c90:	68e3      	ldr	r3, [r4, #12]
 8009c92:	6832      	ldr	r2, [r6, #0]
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	42ab      	cmp	r3, r5
 8009c98:	ddd2      	ble.n	8009c40 <_printf_common+0x3c>
 8009c9a:	0022      	movs	r2, r4
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	9901      	ldr	r1, [sp, #4]
 8009ca0:	9800      	ldr	r0, [sp, #0]
 8009ca2:	9f08      	ldr	r7, [sp, #32]
 8009ca4:	3219      	adds	r2, #25
 8009ca6:	47b8      	blx	r7
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d1f0      	bne.n	8009c8e <_printf_common+0x8a>
 8009cac:	2001      	movs	r0, #1
 8009cae:	4240      	negs	r0, r0
 8009cb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cb2:	2030      	movs	r0, #48	@ 0x30
 8009cb4:	18e1      	adds	r1, r4, r3
 8009cb6:	3143      	adds	r1, #67	@ 0x43
 8009cb8:	7008      	strb	r0, [r1, #0]
 8009cba:	0021      	movs	r1, r4
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	3145      	adds	r1, #69	@ 0x45
 8009cc0:	7809      	ldrb	r1, [r1, #0]
 8009cc2:	18a2      	adds	r2, r4, r2
 8009cc4:	3243      	adds	r2, #67	@ 0x43
 8009cc6:	3302      	adds	r3, #2
 8009cc8:	7011      	strb	r1, [r2, #0]
 8009cca:	e7c1      	b.n	8009c50 <_printf_common+0x4c>
 8009ccc:	0022      	movs	r2, r4
 8009cce:	2301      	movs	r3, #1
 8009cd0:	9901      	ldr	r1, [sp, #4]
 8009cd2:	9800      	ldr	r0, [sp, #0]
 8009cd4:	9f08      	ldr	r7, [sp, #32]
 8009cd6:	321a      	adds	r2, #26
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	d0e6      	beq.n	8009cac <_printf_common+0xa8>
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7d1      	b.n	8009c86 <_printf_common+0x82>
	...

08009ce4 <_printf_i>:
 8009ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce6:	b08b      	sub	sp, #44	@ 0x2c
 8009ce8:	9206      	str	r2, [sp, #24]
 8009cea:	000a      	movs	r2, r1
 8009cec:	3243      	adds	r2, #67	@ 0x43
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	9005      	str	r0, [sp, #20]
 8009cf2:	9203      	str	r2, [sp, #12]
 8009cf4:	7e0a      	ldrb	r2, [r1, #24]
 8009cf6:	000c      	movs	r4, r1
 8009cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cfa:	2a78      	cmp	r2, #120	@ 0x78
 8009cfc:	d809      	bhi.n	8009d12 <_printf_i+0x2e>
 8009cfe:	2a62      	cmp	r2, #98	@ 0x62
 8009d00:	d80b      	bhi.n	8009d1a <_printf_i+0x36>
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d100      	bne.n	8009d08 <_printf_i+0x24>
 8009d06:	e0bc      	b.n	8009e82 <_printf_i+0x19e>
 8009d08:	497b      	ldr	r1, [pc, #492]	@ (8009ef8 <_printf_i+0x214>)
 8009d0a:	9104      	str	r1, [sp, #16]
 8009d0c:	2a58      	cmp	r2, #88	@ 0x58
 8009d0e:	d100      	bne.n	8009d12 <_printf_i+0x2e>
 8009d10:	e090      	b.n	8009e34 <_printf_i+0x150>
 8009d12:	0025      	movs	r5, r4
 8009d14:	3542      	adds	r5, #66	@ 0x42
 8009d16:	702a      	strb	r2, [r5, #0]
 8009d18:	e022      	b.n	8009d60 <_printf_i+0x7c>
 8009d1a:	0010      	movs	r0, r2
 8009d1c:	3863      	subs	r0, #99	@ 0x63
 8009d1e:	2815      	cmp	r0, #21
 8009d20:	d8f7      	bhi.n	8009d12 <_printf_i+0x2e>
 8009d22:	f7f6 fa0d 	bl	8000140 <__gnu_thumb1_case_shi>
 8009d26:	0016      	.short	0x0016
 8009d28:	fff6001f 	.word	0xfff6001f
 8009d2c:	fff6fff6 	.word	0xfff6fff6
 8009d30:	001ffff6 	.word	0x001ffff6
 8009d34:	fff6fff6 	.word	0xfff6fff6
 8009d38:	fff6fff6 	.word	0xfff6fff6
 8009d3c:	003600a1 	.word	0x003600a1
 8009d40:	fff60080 	.word	0xfff60080
 8009d44:	00b2fff6 	.word	0x00b2fff6
 8009d48:	0036fff6 	.word	0x0036fff6
 8009d4c:	fff6fff6 	.word	0xfff6fff6
 8009d50:	0084      	.short	0x0084
 8009d52:	0025      	movs	r5, r4
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	3542      	adds	r5, #66	@ 0x42
 8009d58:	1d11      	adds	r1, r2, #4
 8009d5a:	6019      	str	r1, [r3, #0]
 8009d5c:	6813      	ldr	r3, [r2, #0]
 8009d5e:	702b      	strb	r3, [r5, #0]
 8009d60:	2301      	movs	r3, #1
 8009d62:	e0a0      	b.n	8009ea6 <_printf_i+0x1c2>
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	6809      	ldr	r1, [r1, #0]
 8009d68:	1d02      	adds	r2, r0, #4
 8009d6a:	060d      	lsls	r5, r1, #24
 8009d6c:	d50b      	bpl.n	8009d86 <_printf_i+0xa2>
 8009d6e:	6806      	ldr	r6, [r0, #0]
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	da03      	bge.n	8009d7e <_printf_i+0x9a>
 8009d76:	232d      	movs	r3, #45	@ 0x2d
 8009d78:	9a03      	ldr	r2, [sp, #12]
 8009d7a:	4276      	negs	r6, r6
 8009d7c:	7013      	strb	r3, [r2, #0]
 8009d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8009ef8 <_printf_i+0x214>)
 8009d80:	270a      	movs	r7, #10
 8009d82:	9304      	str	r3, [sp, #16]
 8009d84:	e018      	b.n	8009db8 <_printf_i+0xd4>
 8009d86:	6806      	ldr	r6, [r0, #0]
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	0649      	lsls	r1, r1, #25
 8009d8c:	d5f1      	bpl.n	8009d72 <_printf_i+0x8e>
 8009d8e:	b236      	sxth	r6, r6
 8009d90:	e7ef      	b.n	8009d72 <_printf_i+0x8e>
 8009d92:	6808      	ldr	r0, [r1, #0]
 8009d94:	6819      	ldr	r1, [r3, #0]
 8009d96:	c940      	ldmia	r1!, {r6}
 8009d98:	0605      	lsls	r5, r0, #24
 8009d9a:	d402      	bmi.n	8009da2 <_printf_i+0xbe>
 8009d9c:	0640      	lsls	r0, r0, #25
 8009d9e:	d500      	bpl.n	8009da2 <_printf_i+0xbe>
 8009da0:	b2b6      	uxth	r6, r6
 8009da2:	6019      	str	r1, [r3, #0]
 8009da4:	4b54      	ldr	r3, [pc, #336]	@ (8009ef8 <_printf_i+0x214>)
 8009da6:	270a      	movs	r7, #10
 8009da8:	9304      	str	r3, [sp, #16]
 8009daa:	2a6f      	cmp	r2, #111	@ 0x6f
 8009dac:	d100      	bne.n	8009db0 <_printf_i+0xcc>
 8009dae:	3f02      	subs	r7, #2
 8009db0:	0023      	movs	r3, r4
 8009db2:	2200      	movs	r2, #0
 8009db4:	3343      	adds	r3, #67	@ 0x43
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	60a3      	str	r3, [r4, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	db03      	blt.n	8009dc8 <_printf_i+0xe4>
 8009dc0:	2104      	movs	r1, #4
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	438a      	bics	r2, r1
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	d102      	bne.n	8009dd2 <_printf_i+0xee>
 8009dcc:	9d03      	ldr	r5, [sp, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00c      	beq.n	8009dec <_printf_i+0x108>
 8009dd2:	9d03      	ldr	r5, [sp, #12]
 8009dd4:	0030      	movs	r0, r6
 8009dd6:	0039      	movs	r1, r7
 8009dd8:	f7f6 fa42 	bl	8000260 <__aeabi_uidivmod>
 8009ddc:	9b04      	ldr	r3, [sp, #16]
 8009dde:	3d01      	subs	r5, #1
 8009de0:	5c5b      	ldrb	r3, [r3, r1]
 8009de2:	702b      	strb	r3, [r5, #0]
 8009de4:	0033      	movs	r3, r6
 8009de6:	0006      	movs	r6, r0
 8009de8:	429f      	cmp	r7, r3
 8009dea:	d9f3      	bls.n	8009dd4 <_printf_i+0xf0>
 8009dec:	2f08      	cmp	r7, #8
 8009dee:	d109      	bne.n	8009e04 <_printf_i+0x120>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	07db      	lsls	r3, r3, #31
 8009df4:	d506      	bpl.n	8009e04 <_printf_i+0x120>
 8009df6:	6862      	ldr	r2, [r4, #4]
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	dc02      	bgt.n	8009e04 <_printf_i+0x120>
 8009dfe:	2330      	movs	r3, #48	@ 0x30
 8009e00:	3d01      	subs	r5, #1
 8009e02:	702b      	strb	r3, [r5, #0]
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	1b5b      	subs	r3, r3, r5
 8009e08:	6123      	str	r3, [r4, #16]
 8009e0a:	9b07      	ldr	r3, [sp, #28]
 8009e0c:	0021      	movs	r1, r4
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	9805      	ldr	r0, [sp, #20]
 8009e12:	9b06      	ldr	r3, [sp, #24]
 8009e14:	aa09      	add	r2, sp, #36	@ 0x24
 8009e16:	f7ff fef5 	bl	8009c04 <_printf_common>
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d148      	bne.n	8009eb0 <_printf_i+0x1cc>
 8009e1e:	2001      	movs	r0, #1
 8009e20:	4240      	negs	r0, r0
 8009e22:	b00b      	add	sp, #44	@ 0x2c
 8009e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e26:	2220      	movs	r2, #32
 8009e28:	6809      	ldr	r1, [r1, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	2278      	movs	r2, #120	@ 0x78
 8009e30:	4932      	ldr	r1, [pc, #200]	@ (8009efc <_printf_i+0x218>)
 8009e32:	9104      	str	r1, [sp, #16]
 8009e34:	0021      	movs	r1, r4
 8009e36:	3145      	adds	r1, #69	@ 0x45
 8009e38:	700a      	strb	r2, [r1, #0]
 8009e3a:	6819      	ldr	r1, [r3, #0]
 8009e3c:	6822      	ldr	r2, [r4, #0]
 8009e3e:	c940      	ldmia	r1!, {r6}
 8009e40:	0610      	lsls	r0, r2, #24
 8009e42:	d402      	bmi.n	8009e4a <_printf_i+0x166>
 8009e44:	0650      	lsls	r0, r2, #25
 8009e46:	d500      	bpl.n	8009e4a <_printf_i+0x166>
 8009e48:	b2b6      	uxth	r6, r6
 8009e4a:	6019      	str	r1, [r3, #0]
 8009e4c:	07d3      	lsls	r3, r2, #31
 8009e4e:	d502      	bpl.n	8009e56 <_printf_i+0x172>
 8009e50:	2320      	movs	r3, #32
 8009e52:	4313      	orrs	r3, r2
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	d001      	beq.n	8009e5e <_printf_i+0x17a>
 8009e5a:	2710      	movs	r7, #16
 8009e5c:	e7a8      	b.n	8009db0 <_printf_i+0xcc>
 8009e5e:	2220      	movs	r2, #32
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	4393      	bics	r3, r2
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	e7f8      	b.n	8009e5a <_printf_i+0x176>
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	680d      	ldr	r5, [r1, #0]
 8009e6c:	1d10      	adds	r0, r2, #4
 8009e6e:	6949      	ldr	r1, [r1, #20]
 8009e70:	6018      	str	r0, [r3, #0]
 8009e72:	6813      	ldr	r3, [r2, #0]
 8009e74:	062e      	lsls	r6, r5, #24
 8009e76:	d501      	bpl.n	8009e7c <_printf_i+0x198>
 8009e78:	6019      	str	r1, [r3, #0]
 8009e7a:	e002      	b.n	8009e82 <_printf_i+0x19e>
 8009e7c:	066d      	lsls	r5, r5, #25
 8009e7e:	d5fb      	bpl.n	8009e78 <_printf_i+0x194>
 8009e80:	8019      	strh	r1, [r3, #0]
 8009e82:	2300      	movs	r3, #0
 8009e84:	9d03      	ldr	r5, [sp, #12]
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	e7bf      	b.n	8009e0a <_printf_i+0x126>
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	1d11      	adds	r1, r2, #4
 8009e8e:	6019      	str	r1, [r3, #0]
 8009e90:	6815      	ldr	r5, [r2, #0]
 8009e92:	2100      	movs	r1, #0
 8009e94:	0028      	movs	r0, r5
 8009e96:	6862      	ldr	r2, [r4, #4]
 8009e98:	f000 fb15 	bl	800a4c6 <memchr>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d001      	beq.n	8009ea4 <_printf_i+0x1c0>
 8009ea0:	1b40      	subs	r0, r0, r5
 8009ea2:	6060      	str	r0, [r4, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	6123      	str	r3, [r4, #16]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9a03      	ldr	r2, [sp, #12]
 8009eac:	7013      	strb	r3, [r2, #0]
 8009eae:	e7ac      	b.n	8009e0a <_printf_i+0x126>
 8009eb0:	002a      	movs	r2, r5
 8009eb2:	6923      	ldr	r3, [r4, #16]
 8009eb4:	9906      	ldr	r1, [sp, #24]
 8009eb6:	9805      	ldr	r0, [sp, #20]
 8009eb8:	9d07      	ldr	r5, [sp, #28]
 8009eba:	47a8      	blx	r5
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d0ae      	beq.n	8009e1e <_printf_i+0x13a>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	079b      	lsls	r3, r3, #30
 8009ec4:	d415      	bmi.n	8009ef2 <_printf_i+0x20e>
 8009ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec8:	68e0      	ldr	r0, [r4, #12]
 8009eca:	4298      	cmp	r0, r3
 8009ecc:	daa9      	bge.n	8009e22 <_printf_i+0x13e>
 8009ece:	0018      	movs	r0, r3
 8009ed0:	e7a7      	b.n	8009e22 <_printf_i+0x13e>
 8009ed2:	0022      	movs	r2, r4
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	9906      	ldr	r1, [sp, #24]
 8009ed8:	9805      	ldr	r0, [sp, #20]
 8009eda:	9e07      	ldr	r6, [sp, #28]
 8009edc:	3219      	adds	r2, #25
 8009ede:	47b0      	blx	r6
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d09c      	beq.n	8009e1e <_printf_i+0x13a>
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	42ab      	cmp	r3, r5
 8009eee:	dcf0      	bgt.n	8009ed2 <_printf_i+0x1ee>
 8009ef0:	e7e9      	b.n	8009ec6 <_printf_i+0x1e2>
 8009ef2:	2500      	movs	r5, #0
 8009ef4:	e7f7      	b.n	8009ee6 <_printf_i+0x202>
 8009ef6:	46c0      	nop			@ (mov r8, r8)
 8009ef8:	0800d7d2 	.word	0x0800d7d2
 8009efc:	0800d7e3 	.word	0x0800d7e3

08009f00 <std>:
 8009f00:	2300      	movs	r3, #0
 8009f02:	b510      	push	{r4, lr}
 8009f04:	0004      	movs	r4, r0
 8009f06:	6003      	str	r3, [r0, #0]
 8009f08:	6043      	str	r3, [r0, #4]
 8009f0a:	6083      	str	r3, [r0, #8]
 8009f0c:	8181      	strh	r1, [r0, #12]
 8009f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f10:	81c2      	strh	r2, [r0, #14]
 8009f12:	6103      	str	r3, [r0, #16]
 8009f14:	6143      	str	r3, [r0, #20]
 8009f16:	6183      	str	r3, [r0, #24]
 8009f18:	0019      	movs	r1, r3
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	305c      	adds	r0, #92	@ 0x5c
 8009f1e:	f000 fa2f 	bl	800a380 <memset>
 8009f22:	4b0b      	ldr	r3, [pc, #44]	@ (8009f50 <std+0x50>)
 8009f24:	6224      	str	r4, [r4, #32]
 8009f26:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f28:	4b0a      	ldr	r3, [pc, #40]	@ (8009f54 <std+0x54>)
 8009f2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f58 <std+0x58>)
 8009f2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f30:	4b0a      	ldr	r3, [pc, #40]	@ (8009f5c <std+0x5c>)
 8009f32:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f34:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <std+0x60>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	d005      	beq.n	8009f46 <std+0x46>
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f64 <std+0x64>)
 8009f3c:	429c      	cmp	r4, r3
 8009f3e:	d002      	beq.n	8009f46 <std+0x46>
 8009f40:	4b09      	ldr	r3, [pc, #36]	@ (8009f68 <std+0x68>)
 8009f42:	429c      	cmp	r4, r3
 8009f44:	d103      	bne.n	8009f4e <std+0x4e>
 8009f46:	0020      	movs	r0, r4
 8009f48:	3058      	adds	r0, #88	@ 0x58
 8009f4a:	f000 fab1 	bl	800a4b0 <__retarget_lock_init_recursive>
 8009f4e:	bd10      	pop	{r4, pc}
 8009f50:	0800a1a9 	.word	0x0800a1a9
 8009f54:	0800a1d1 	.word	0x0800a1d1
 8009f58:	0800a209 	.word	0x0800a209
 8009f5c:	0800a235 	.word	0x0800a235
 8009f60:	200006a0 	.word	0x200006a0
 8009f64:	20000708 	.word	0x20000708
 8009f68:	20000770 	.word	0x20000770

08009f6c <stdio_exit_handler>:
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	4a03      	ldr	r2, [pc, #12]	@ (8009f7c <stdio_exit_handler+0x10>)
 8009f70:	4903      	ldr	r1, [pc, #12]	@ (8009f80 <stdio_exit_handler+0x14>)
 8009f72:	4804      	ldr	r0, [pc, #16]	@ (8009f84 <stdio_exit_handler+0x18>)
 8009f74:	f000 f86c 	bl	800a050 <_fwalk_sglue>
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	46c0      	nop			@ (mov r8, r8)
 8009f7c:	2000000c 	.word	0x2000000c
 8009f80:	0800c199 	.word	0x0800c199
 8009f84:	2000001c 	.word	0x2000001c

08009f88 <cleanup_stdio>:
 8009f88:	6841      	ldr	r1, [r0, #4]
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb8 <cleanup_stdio+0x30>)
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	0004      	movs	r4, r0
 8009f90:	4299      	cmp	r1, r3
 8009f92:	d001      	beq.n	8009f98 <cleanup_stdio+0x10>
 8009f94:	f002 f900 	bl	800c198 <_fflush_r>
 8009f98:	68a1      	ldr	r1, [r4, #8]
 8009f9a:	4b08      	ldr	r3, [pc, #32]	@ (8009fbc <cleanup_stdio+0x34>)
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	d002      	beq.n	8009fa6 <cleanup_stdio+0x1e>
 8009fa0:	0020      	movs	r0, r4
 8009fa2:	f002 f8f9 	bl	800c198 <_fflush_r>
 8009fa6:	68e1      	ldr	r1, [r4, #12]
 8009fa8:	4b05      	ldr	r3, [pc, #20]	@ (8009fc0 <cleanup_stdio+0x38>)
 8009faa:	4299      	cmp	r1, r3
 8009fac:	d002      	beq.n	8009fb4 <cleanup_stdio+0x2c>
 8009fae:	0020      	movs	r0, r4
 8009fb0:	f002 f8f2 	bl	800c198 <_fflush_r>
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	46c0      	nop			@ (mov r8, r8)
 8009fb8:	200006a0 	.word	0x200006a0
 8009fbc:	20000708 	.word	0x20000708
 8009fc0:	20000770 	.word	0x20000770

08009fc4 <global_stdio_init.part.0>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <global_stdio_init.part.0+0x28>)
 8009fc8:	4a09      	ldr	r2, [pc, #36]	@ (8009ff0 <global_stdio_init.part.0+0x2c>)
 8009fca:	2104      	movs	r1, #4
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	4809      	ldr	r0, [pc, #36]	@ (8009ff4 <global_stdio_init.part.0+0x30>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7ff ff95 	bl	8009f00 <std>
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	2109      	movs	r1, #9
 8009fda:	4807      	ldr	r0, [pc, #28]	@ (8009ff8 <global_stdio_init.part.0+0x34>)
 8009fdc:	f7ff ff90 	bl	8009f00 <std>
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	2112      	movs	r1, #18
 8009fe4:	4805      	ldr	r0, [pc, #20]	@ (8009ffc <global_stdio_init.part.0+0x38>)
 8009fe6:	f7ff ff8b 	bl	8009f00 <std>
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	200007d8 	.word	0x200007d8
 8009ff0:	08009f6d 	.word	0x08009f6d
 8009ff4:	200006a0 	.word	0x200006a0
 8009ff8:	20000708 	.word	0x20000708
 8009ffc:	20000770 	.word	0x20000770

0800a000 <__sfp_lock_acquire>:
 800a000:	b510      	push	{r4, lr}
 800a002:	4802      	ldr	r0, [pc, #8]	@ (800a00c <__sfp_lock_acquire+0xc>)
 800a004:	f000 fa55 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	200007e1 	.word	0x200007e1

0800a010 <__sfp_lock_release>:
 800a010:	b510      	push	{r4, lr}
 800a012:	4802      	ldr	r0, [pc, #8]	@ (800a01c <__sfp_lock_release+0xc>)
 800a014:	f000 fa4e 	bl	800a4b4 <__retarget_lock_release_recursive>
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	46c0      	nop			@ (mov r8, r8)
 800a01c:	200007e1 	.word	0x200007e1

0800a020 <__sinit>:
 800a020:	b510      	push	{r4, lr}
 800a022:	0004      	movs	r4, r0
 800a024:	f7ff ffec 	bl	800a000 <__sfp_lock_acquire>
 800a028:	6a23      	ldr	r3, [r4, #32]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <__sinit+0x14>
 800a02e:	f7ff ffef 	bl	800a010 <__sfp_lock_release>
 800a032:	bd10      	pop	{r4, pc}
 800a034:	4b04      	ldr	r3, [pc, #16]	@ (800a048 <__sinit+0x28>)
 800a036:	6223      	str	r3, [r4, #32]
 800a038:	4b04      	ldr	r3, [pc, #16]	@ (800a04c <__sinit+0x2c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1f6      	bne.n	800a02e <__sinit+0xe>
 800a040:	f7ff ffc0 	bl	8009fc4 <global_stdio_init.part.0>
 800a044:	e7f3      	b.n	800a02e <__sinit+0xe>
 800a046:	46c0      	nop			@ (mov r8, r8)
 800a048:	08009f89 	.word	0x08009f89
 800a04c:	200007d8 	.word	0x200007d8

0800a050 <_fwalk_sglue>:
 800a050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a052:	0014      	movs	r4, r2
 800a054:	2600      	movs	r6, #0
 800a056:	9000      	str	r0, [sp, #0]
 800a058:	9101      	str	r1, [sp, #4]
 800a05a:	68a5      	ldr	r5, [r4, #8]
 800a05c:	6867      	ldr	r7, [r4, #4]
 800a05e:	3f01      	subs	r7, #1
 800a060:	d504      	bpl.n	800a06c <_fwalk_sglue+0x1c>
 800a062:	6824      	ldr	r4, [r4, #0]
 800a064:	2c00      	cmp	r4, #0
 800a066:	d1f8      	bne.n	800a05a <_fwalk_sglue+0xa>
 800a068:	0030      	movs	r0, r6
 800a06a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a06c:	89ab      	ldrh	r3, [r5, #12]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d908      	bls.n	800a084 <_fwalk_sglue+0x34>
 800a072:	220e      	movs	r2, #14
 800a074:	5eab      	ldrsh	r3, [r5, r2]
 800a076:	3301      	adds	r3, #1
 800a078:	d004      	beq.n	800a084 <_fwalk_sglue+0x34>
 800a07a:	0029      	movs	r1, r5
 800a07c:	9800      	ldr	r0, [sp, #0]
 800a07e:	9b01      	ldr	r3, [sp, #4]
 800a080:	4798      	blx	r3
 800a082:	4306      	orrs	r6, r0
 800a084:	3568      	adds	r5, #104	@ 0x68
 800a086:	e7ea      	b.n	800a05e <_fwalk_sglue+0xe>

0800a088 <iprintf>:
 800a088:	b40f      	push	{r0, r1, r2, r3}
 800a08a:	b507      	push	{r0, r1, r2, lr}
 800a08c:	4905      	ldr	r1, [pc, #20]	@ (800a0a4 <iprintf+0x1c>)
 800a08e:	ab04      	add	r3, sp, #16
 800a090:	6808      	ldr	r0, [r1, #0]
 800a092:	cb04      	ldmia	r3!, {r2}
 800a094:	6881      	ldr	r1, [r0, #8]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	f001 fedc 	bl	800be54 <_vfiprintf_r>
 800a09c:	b003      	add	sp, #12
 800a09e:	bc08      	pop	{r3}
 800a0a0:	b004      	add	sp, #16
 800a0a2:	4718      	bx	r3
 800a0a4:	20000018 	.word	0x20000018

0800a0a8 <_puts_r>:
 800a0a8:	6a03      	ldr	r3, [r0, #32]
 800a0aa:	b570      	push	{r4, r5, r6, lr}
 800a0ac:	0005      	movs	r5, r0
 800a0ae:	000e      	movs	r6, r1
 800a0b0:	6884      	ldr	r4, [r0, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <_puts_r+0x12>
 800a0b6:	f7ff ffb3 	bl	800a020 <__sinit>
 800a0ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0bc:	07db      	lsls	r3, r3, #31
 800a0be:	d405      	bmi.n	800a0cc <_puts_r+0x24>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	059b      	lsls	r3, r3, #22
 800a0c4:	d402      	bmi.n	800a0cc <_puts_r+0x24>
 800a0c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0c8:	f000 f9f3 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	071b      	lsls	r3, r3, #28
 800a0d0:	d502      	bpl.n	800a0d8 <_puts_r+0x30>
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d11f      	bne.n	800a118 <_puts_r+0x70>
 800a0d8:	0021      	movs	r1, r4
 800a0da:	0028      	movs	r0, r5
 800a0dc:	f000 f8f2 	bl	800a2c4 <__swsetup_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d019      	beq.n	800a118 <_puts_r+0x70>
 800a0e4:	2501      	movs	r5, #1
 800a0e6:	426d      	negs	r5, r5
 800a0e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0ea:	07db      	lsls	r3, r3, #31
 800a0ec:	d405      	bmi.n	800a0fa <_puts_r+0x52>
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	059b      	lsls	r3, r3, #22
 800a0f2:	d402      	bmi.n	800a0fa <_puts_r+0x52>
 800a0f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0f6:	f000 f9dd 	bl	800a4b4 <__retarget_lock_release_recursive>
 800a0fa:	0028      	movs	r0, r5
 800a0fc:	bd70      	pop	{r4, r5, r6, pc}
 800a0fe:	3601      	adds	r6, #1
 800a100:	60a3      	str	r3, [r4, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	da04      	bge.n	800a110 <_puts_r+0x68>
 800a106:	69a2      	ldr	r2, [r4, #24]
 800a108:	429a      	cmp	r2, r3
 800a10a:	dc16      	bgt.n	800a13a <_puts_r+0x92>
 800a10c:	290a      	cmp	r1, #10
 800a10e:	d014      	beq.n	800a13a <_puts_r+0x92>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	6022      	str	r2, [r4, #0]
 800a116:	7019      	strb	r1, [r3, #0]
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	7831      	ldrb	r1, [r6, #0]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	2900      	cmp	r1, #0
 800a120:	d1ed      	bne.n	800a0fe <_puts_r+0x56>
 800a122:	60a3      	str	r3, [r4, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	da0f      	bge.n	800a148 <_puts_r+0xa0>
 800a128:	0022      	movs	r2, r4
 800a12a:	0028      	movs	r0, r5
 800a12c:	310a      	adds	r1, #10
 800a12e:	f000 f887 	bl	800a240 <__swbuf_r>
 800a132:	3001      	adds	r0, #1
 800a134:	d0d6      	beq.n	800a0e4 <_puts_r+0x3c>
 800a136:	250a      	movs	r5, #10
 800a138:	e7d6      	b.n	800a0e8 <_puts_r+0x40>
 800a13a:	0022      	movs	r2, r4
 800a13c:	0028      	movs	r0, r5
 800a13e:	f000 f87f 	bl	800a240 <__swbuf_r>
 800a142:	3001      	adds	r0, #1
 800a144:	d1e8      	bne.n	800a118 <_puts_r+0x70>
 800a146:	e7cd      	b.n	800a0e4 <_puts_r+0x3c>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	6022      	str	r2, [r4, #0]
 800a14e:	220a      	movs	r2, #10
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	e7f0      	b.n	800a136 <_puts_r+0x8e>

0800a154 <puts>:
 800a154:	b510      	push	{r4, lr}
 800a156:	4b03      	ldr	r3, [pc, #12]	@ (800a164 <puts+0x10>)
 800a158:	0001      	movs	r1, r0
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	f7ff ffa4 	bl	800a0a8 <_puts_r>
 800a160:	bd10      	pop	{r4, pc}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	20000018 	.word	0x20000018

0800a168 <siprintf>:
 800a168:	b40e      	push	{r1, r2, r3}
 800a16a:	b500      	push	{lr}
 800a16c:	490b      	ldr	r1, [pc, #44]	@ (800a19c <siprintf+0x34>)
 800a16e:	b09c      	sub	sp, #112	@ 0x70
 800a170:	ab1d      	add	r3, sp, #116	@ 0x74
 800a172:	9002      	str	r0, [sp, #8]
 800a174:	9006      	str	r0, [sp, #24]
 800a176:	9107      	str	r1, [sp, #28]
 800a178:	9104      	str	r1, [sp, #16]
 800a17a:	4809      	ldr	r0, [pc, #36]	@ (800a1a0 <siprintf+0x38>)
 800a17c:	4909      	ldr	r1, [pc, #36]	@ (800a1a4 <siprintf+0x3c>)
 800a17e:	cb04      	ldmia	r3!, {r2}
 800a180:	9105      	str	r1, [sp, #20]
 800a182:	6800      	ldr	r0, [r0, #0]
 800a184:	a902      	add	r1, sp, #8
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	f001 fd3e 	bl	800bc08 <_svfiprintf_r>
 800a18c:	2200      	movs	r2, #0
 800a18e:	9b02      	ldr	r3, [sp, #8]
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	b01c      	add	sp, #112	@ 0x70
 800a194:	bc08      	pop	{r3}
 800a196:	b003      	add	sp, #12
 800a198:	4718      	bx	r3
 800a19a:	46c0      	nop			@ (mov r8, r8)
 800a19c:	7fffffff 	.word	0x7fffffff
 800a1a0:	20000018 	.word	0x20000018
 800a1a4:	ffff0208 	.word	0xffff0208

0800a1a8 <__sread>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	000c      	movs	r4, r1
 800a1ac:	250e      	movs	r5, #14
 800a1ae:	5f49      	ldrsh	r1, [r1, r5]
 800a1b0:	f000 f92c 	bl	800a40c <_read_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	db03      	blt.n	800a1c0 <__sread+0x18>
 800a1b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a1ba:	181b      	adds	r3, r3, r0
 800a1bc:	6563      	str	r3, [r4, #84]	@ 0x54
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	4a02      	ldr	r2, [pc, #8]	@ (800a1cc <__sread+0x24>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	e7f9      	b.n	800a1be <__sread+0x16>
 800a1ca:	46c0      	nop			@ (mov r8, r8)
 800a1cc:	ffffefff 	.word	0xffffefff

0800a1d0 <__swrite>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	001f      	movs	r7, r3
 800a1d4:	898b      	ldrh	r3, [r1, #12]
 800a1d6:	0005      	movs	r5, r0
 800a1d8:	000c      	movs	r4, r1
 800a1da:	0016      	movs	r6, r2
 800a1dc:	05db      	lsls	r3, r3, #23
 800a1de:	d505      	bpl.n	800a1ec <__swrite+0x1c>
 800a1e0:	230e      	movs	r3, #14
 800a1e2:	5ec9      	ldrsh	r1, [r1, r3]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	f000 f8fc 	bl	800a3e4 <_lseek_r>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	4a05      	ldr	r2, [pc, #20]	@ (800a204 <__swrite+0x34>)
 800a1f0:	0028      	movs	r0, r5
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	0032      	movs	r2, r6
 800a1f8:	230e      	movs	r3, #14
 800a1fa:	5ee1      	ldrsh	r1, [r4, r3]
 800a1fc:	003b      	movs	r3, r7
 800a1fe:	f000 f919 	bl	800a434 <_write_r>
 800a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a204:	ffffefff 	.word	0xffffefff

0800a208 <__sseek>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	000c      	movs	r4, r1
 800a20c:	250e      	movs	r5, #14
 800a20e:	5f49      	ldrsh	r1, [r1, r5]
 800a210:	f000 f8e8 	bl	800a3e4 <_lseek_r>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	1c42      	adds	r2, r0, #1
 800a218:	d103      	bne.n	800a222 <__sseek+0x1a>
 800a21a:	4a05      	ldr	r2, [pc, #20]	@ (800a230 <__sseek+0x28>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	bd70      	pop	{r4, r5, r6, pc}
 800a222:	2280      	movs	r2, #128	@ 0x80
 800a224:	0152      	lsls	r2, r2, #5
 800a226:	4313      	orrs	r3, r2
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a22c:	e7f8      	b.n	800a220 <__sseek+0x18>
 800a22e:	46c0      	nop			@ (mov r8, r8)
 800a230:	ffffefff 	.word	0xffffefff

0800a234 <__sclose>:
 800a234:	b510      	push	{r4, lr}
 800a236:	230e      	movs	r3, #14
 800a238:	5ec9      	ldrsh	r1, [r1, r3]
 800a23a:	f000 f8c1 	bl	800a3c0 <_close_r>
 800a23e:	bd10      	pop	{r4, pc}

0800a240 <__swbuf_r>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	0006      	movs	r6, r0
 800a244:	000d      	movs	r5, r1
 800a246:	0014      	movs	r4, r2
 800a248:	2800      	cmp	r0, #0
 800a24a:	d004      	beq.n	800a256 <__swbuf_r+0x16>
 800a24c:	6a03      	ldr	r3, [r0, #32]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <__swbuf_r+0x16>
 800a252:	f7ff fee5 	bl	800a020 <__sinit>
 800a256:	69a3      	ldr	r3, [r4, #24]
 800a258:	60a3      	str	r3, [r4, #8]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	071b      	lsls	r3, r3, #28
 800a25e:	d502      	bpl.n	800a266 <__swbuf_r+0x26>
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d109      	bne.n	800a27a <__swbuf_r+0x3a>
 800a266:	0021      	movs	r1, r4
 800a268:	0030      	movs	r0, r6
 800a26a:	f000 f82b 	bl	800a2c4 <__swsetup_r>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d003      	beq.n	800a27a <__swbuf_r+0x3a>
 800a272:	2501      	movs	r5, #1
 800a274:	426d      	negs	r5, r5
 800a276:	0028      	movs	r0, r5
 800a278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	b2ef      	uxtb	r7, r5
 800a280:	1ac0      	subs	r0, r0, r3
 800a282:	6963      	ldr	r3, [r4, #20]
 800a284:	b2ed      	uxtb	r5, r5
 800a286:	4283      	cmp	r3, r0
 800a288:	dc05      	bgt.n	800a296 <__swbuf_r+0x56>
 800a28a:	0021      	movs	r1, r4
 800a28c:	0030      	movs	r0, r6
 800a28e:	f001 ff83 	bl	800c198 <_fflush_r>
 800a292:	2800      	cmp	r0, #0
 800a294:	d1ed      	bne.n	800a272 <__swbuf_r+0x32>
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	3001      	adds	r0, #1
 800a29a:	3b01      	subs	r3, #1
 800a29c:	60a3      	str	r3, [r4, #8]
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	701f      	strb	r7, [r3, #0]
 800a2a6:	6963      	ldr	r3, [r4, #20]
 800a2a8:	4283      	cmp	r3, r0
 800a2aa:	d004      	beq.n	800a2b6 <__swbuf_r+0x76>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	07db      	lsls	r3, r3, #31
 800a2b0:	d5e1      	bpl.n	800a276 <__swbuf_r+0x36>
 800a2b2:	2d0a      	cmp	r5, #10
 800a2b4:	d1df      	bne.n	800a276 <__swbuf_r+0x36>
 800a2b6:	0021      	movs	r1, r4
 800a2b8:	0030      	movs	r0, r6
 800a2ba:	f001 ff6d 	bl	800c198 <_fflush_r>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d0d9      	beq.n	800a276 <__swbuf_r+0x36>
 800a2c2:	e7d6      	b.n	800a272 <__swbuf_r+0x32>

0800a2c4 <__swsetup_r>:
 800a2c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a37c <__swsetup_r+0xb8>)
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	0005      	movs	r5, r0
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	000c      	movs	r4, r1
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d004      	beq.n	800a2dc <__swsetup_r+0x18>
 800a2d2:	6a03      	ldr	r3, [r0, #32]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <__swsetup_r+0x18>
 800a2d8:	f7ff fea2 	bl	800a020 <__sinit>
 800a2dc:	230c      	movs	r3, #12
 800a2de:	5ee2      	ldrsh	r2, [r4, r3]
 800a2e0:	0713      	lsls	r3, r2, #28
 800a2e2:	d423      	bmi.n	800a32c <__swsetup_r+0x68>
 800a2e4:	06d3      	lsls	r3, r2, #27
 800a2e6:	d407      	bmi.n	800a2f8 <__swsetup_r+0x34>
 800a2e8:	2309      	movs	r3, #9
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	2340      	movs	r3, #64	@ 0x40
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	4240      	negs	r0, r0
 800a2f6:	e03a      	b.n	800a36e <__swsetup_r+0xaa>
 800a2f8:	0752      	lsls	r2, r2, #29
 800a2fa:	d513      	bpl.n	800a324 <__swsetup_r+0x60>
 800a2fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2fe:	2900      	cmp	r1, #0
 800a300:	d008      	beq.n	800a314 <__swsetup_r+0x50>
 800a302:	0023      	movs	r3, r4
 800a304:	3344      	adds	r3, #68	@ 0x44
 800a306:	4299      	cmp	r1, r3
 800a308:	d002      	beq.n	800a310 <__swsetup_r+0x4c>
 800a30a:	0028      	movs	r0, r5
 800a30c:	f000 ff72 	bl	800b1f4 <_free_r>
 800a310:	2300      	movs	r3, #0
 800a312:	6363      	str	r3, [r4, #52]	@ 0x34
 800a314:	2224      	movs	r2, #36	@ 0x24
 800a316:	89a3      	ldrh	r3, [r4, #12]
 800a318:	4393      	bics	r3, r2
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	2300      	movs	r3, #0
 800a31e:	6063      	str	r3, [r4, #4]
 800a320:	6923      	ldr	r3, [r4, #16]
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	2308      	movs	r3, #8
 800a326:	89a2      	ldrh	r2, [r4, #12]
 800a328:	4313      	orrs	r3, r2
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10b      	bne.n	800a34a <__swsetup_r+0x86>
 800a332:	21a0      	movs	r1, #160	@ 0xa0
 800a334:	2280      	movs	r2, #128	@ 0x80
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	0089      	lsls	r1, r1, #2
 800a33a:	0092      	lsls	r2, r2, #2
 800a33c:	400b      	ands	r3, r1
 800a33e:	4293      	cmp	r3, r2
 800a340:	d003      	beq.n	800a34a <__swsetup_r+0x86>
 800a342:	0021      	movs	r1, r4
 800a344:	0028      	movs	r0, r5
 800a346:	f001 ff7d 	bl	800c244 <__smakebuf_r>
 800a34a:	230c      	movs	r3, #12
 800a34c:	5ee2      	ldrsh	r2, [r4, r3]
 800a34e:	2101      	movs	r1, #1
 800a350:	0013      	movs	r3, r2
 800a352:	400b      	ands	r3, r1
 800a354:	420a      	tst	r2, r1
 800a356:	d00b      	beq.n	800a370 <__swsetup_r+0xac>
 800a358:	2300      	movs	r3, #0
 800a35a:	60a3      	str	r3, [r4, #8]
 800a35c:	6963      	ldr	r3, [r4, #20]
 800a35e:	425b      	negs	r3, r3
 800a360:	61a3      	str	r3, [r4, #24]
 800a362:	2000      	movs	r0, #0
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	4283      	cmp	r3, r0
 800a368:	d101      	bne.n	800a36e <__swsetup_r+0xaa>
 800a36a:	0613      	lsls	r3, r2, #24
 800a36c:	d4be      	bmi.n	800a2ec <__swsetup_r+0x28>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	0791      	lsls	r1, r2, #30
 800a372:	d400      	bmi.n	800a376 <__swsetup_r+0xb2>
 800a374:	6963      	ldr	r3, [r4, #20]
 800a376:	60a3      	str	r3, [r4, #8]
 800a378:	e7f3      	b.n	800a362 <__swsetup_r+0x9e>
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	20000018 	.word	0x20000018

0800a380 <memset>:
 800a380:	0003      	movs	r3, r0
 800a382:	1882      	adds	r2, r0, r2
 800a384:	4293      	cmp	r3, r2
 800a386:	d100      	bne.n	800a38a <memset+0xa>
 800a388:	4770      	bx	lr
 800a38a:	7019      	strb	r1, [r3, #0]
 800a38c:	3301      	adds	r3, #1
 800a38e:	e7f9      	b.n	800a384 <memset+0x4>

0800a390 <strncpy>:
 800a390:	0003      	movs	r3, r0
 800a392:	b530      	push	{r4, r5, lr}
 800a394:	001d      	movs	r5, r3
 800a396:	2a00      	cmp	r2, #0
 800a398:	d006      	beq.n	800a3a8 <strncpy+0x18>
 800a39a:	780c      	ldrb	r4, [r1, #0]
 800a39c:	3a01      	subs	r2, #1
 800a39e:	3301      	adds	r3, #1
 800a3a0:	702c      	strb	r4, [r5, #0]
 800a3a2:	3101      	adds	r1, #1
 800a3a4:	2c00      	cmp	r4, #0
 800a3a6:	d1f5      	bne.n	800a394 <strncpy+0x4>
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	189a      	adds	r2, r3, r2
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d100      	bne.n	800a3b2 <strncpy+0x22>
 800a3b0:	bd30      	pop	{r4, r5, pc}
 800a3b2:	7019      	strb	r1, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	e7f9      	b.n	800a3ac <strncpy+0x1c>

0800a3b8 <_localeconv_r>:
 800a3b8:	4800      	ldr	r0, [pc, #0]	@ (800a3bc <_localeconv_r+0x4>)
 800a3ba:	4770      	bx	lr
 800a3bc:	20000158 	.word	0x20000158

0800a3c0 <_close_r>:
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	b570      	push	{r4, r5, r6, lr}
 800a3c4:	4d06      	ldr	r5, [pc, #24]	@ (800a3e0 <_close_r+0x20>)
 800a3c6:	0004      	movs	r4, r0
 800a3c8:	0008      	movs	r0, r1
 800a3ca:	602b      	str	r3, [r5, #0]
 800a3cc:	f7fb f928 	bl	8005620 <_close>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d103      	bne.n	800a3dc <_close_r+0x1c>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d000      	beq.n	800a3dc <_close_r+0x1c>
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	46c0      	nop			@ (mov r8, r8)
 800a3e0:	200007dc 	.word	0x200007dc

0800a3e4 <_lseek_r>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	0004      	movs	r4, r0
 800a3e8:	0008      	movs	r0, r1
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	001a      	movs	r2, r3
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4d05      	ldr	r5, [pc, #20]	@ (800a408 <_lseek_r+0x24>)
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f7fb f935 	bl	8005662 <_lseek>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d103      	bne.n	800a404 <_lseek_r+0x20>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d000      	beq.n	800a404 <_lseek_r+0x20>
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	bd70      	pop	{r4, r5, r6, pc}
 800a406:	46c0      	nop			@ (mov r8, r8)
 800a408:	200007dc 	.word	0x200007dc

0800a40c <_read_r>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	0004      	movs	r4, r0
 800a410:	0008      	movs	r0, r1
 800a412:	0011      	movs	r1, r2
 800a414:	001a      	movs	r2, r3
 800a416:	2300      	movs	r3, #0
 800a418:	4d05      	ldr	r5, [pc, #20]	@ (800a430 <_read_r+0x24>)
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	f7fb f8e3 	bl	80055e6 <_read>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d103      	bne.n	800a42c <_read_r+0x20>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d000      	beq.n	800a42c <_read_r+0x20>
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	bd70      	pop	{r4, r5, r6, pc}
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	200007dc 	.word	0x200007dc

0800a434 <_write_r>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	0004      	movs	r4, r0
 800a438:	0008      	movs	r0, r1
 800a43a:	0011      	movs	r1, r2
 800a43c:	001a      	movs	r2, r3
 800a43e:	2300      	movs	r3, #0
 800a440:	4d05      	ldr	r5, [pc, #20]	@ (800a458 <_write_r+0x24>)
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f9 fb84 	bl	8003b50 <_write>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d103      	bne.n	800a454 <_write_r+0x20>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d000      	beq.n	800a454 <_write_r+0x20>
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	200007dc 	.word	0x200007dc

0800a45c <__errno>:
 800a45c:	4b01      	ldr	r3, [pc, #4]	@ (800a464 <__errno+0x8>)
 800a45e:	6818      	ldr	r0, [r3, #0]
 800a460:	4770      	bx	lr
 800a462:	46c0      	nop			@ (mov r8, r8)
 800a464:	20000018 	.word	0x20000018

0800a468 <__libc_init_array>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	2600      	movs	r6, #0
 800a46c:	4c0c      	ldr	r4, [pc, #48]	@ (800a4a0 <__libc_init_array+0x38>)
 800a46e:	4d0d      	ldr	r5, [pc, #52]	@ (800a4a4 <__libc_init_array+0x3c>)
 800a470:	1b64      	subs	r4, r4, r5
 800a472:	10a4      	asrs	r4, r4, #2
 800a474:	42a6      	cmp	r6, r4
 800a476:	d109      	bne.n	800a48c <__libc_init_array+0x24>
 800a478:	2600      	movs	r6, #0
 800a47a:	f002 ff97 	bl	800d3ac <_init>
 800a47e:	4c0a      	ldr	r4, [pc, #40]	@ (800a4a8 <__libc_init_array+0x40>)
 800a480:	4d0a      	ldr	r5, [pc, #40]	@ (800a4ac <__libc_init_array+0x44>)
 800a482:	1b64      	subs	r4, r4, r5
 800a484:	10a4      	asrs	r4, r4, #2
 800a486:	42a6      	cmp	r6, r4
 800a488:	d105      	bne.n	800a496 <__libc_init_array+0x2e>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	00b3      	lsls	r3, r6, #2
 800a48e:	58eb      	ldr	r3, [r5, r3]
 800a490:	4798      	blx	r3
 800a492:	3601      	adds	r6, #1
 800a494:	e7ee      	b.n	800a474 <__libc_init_array+0xc>
 800a496:	00b3      	lsls	r3, r6, #2
 800a498:	58eb      	ldr	r3, [r5, r3]
 800a49a:	4798      	blx	r3
 800a49c:	3601      	adds	r6, #1
 800a49e:	e7f2      	b.n	800a486 <__libc_init_array+0x1e>
 800a4a0:	0800db60 	.word	0x0800db60
 800a4a4:	0800db60 	.word	0x0800db60
 800a4a8:	0800db64 	.word	0x0800db64
 800a4ac:	0800db60 	.word	0x0800db60

0800a4b0 <__retarget_lock_init_recursive>:
 800a4b0:	4770      	bx	lr

0800a4b2 <__retarget_lock_acquire_recursive>:
 800a4b2:	4770      	bx	lr

0800a4b4 <__retarget_lock_release_recursive>:
 800a4b4:	4770      	bx	lr

0800a4b6 <strcpy>:
 800a4b6:	0003      	movs	r3, r0
 800a4b8:	780a      	ldrb	r2, [r1, #0]
 800a4ba:	3101      	adds	r1, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	2a00      	cmp	r2, #0
 800a4c2:	d1f9      	bne.n	800a4b8 <strcpy+0x2>
 800a4c4:	4770      	bx	lr

0800a4c6 <memchr>:
 800a4c6:	b2c9      	uxtb	r1, r1
 800a4c8:	1882      	adds	r2, r0, r2
 800a4ca:	4290      	cmp	r0, r2
 800a4cc:	d101      	bne.n	800a4d2 <memchr+0xc>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	4770      	bx	lr
 800a4d2:	7803      	ldrb	r3, [r0, #0]
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	d0fb      	beq.n	800a4d0 <memchr+0xa>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	e7f6      	b.n	800a4ca <memchr+0x4>

0800a4dc <memcpy>:
 800a4dc:	2300      	movs	r3, #0
 800a4de:	b510      	push	{r4, lr}
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d100      	bne.n	800a4e6 <memcpy+0xa>
 800a4e4:	bd10      	pop	{r4, pc}
 800a4e6:	5ccc      	ldrb	r4, [r1, r3]
 800a4e8:	54c4      	strb	r4, [r0, r3]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	e7f8      	b.n	800a4e0 <memcpy+0x4>

0800a4ee <quorem>:
 800a4ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4f0:	6902      	ldr	r2, [r0, #16]
 800a4f2:	690f      	ldr	r7, [r1, #16]
 800a4f4:	b087      	sub	sp, #28
 800a4f6:	0006      	movs	r6, r0
 800a4f8:	000b      	movs	r3, r1
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	9102      	str	r1, [sp, #8]
 800a4fe:	42ba      	cmp	r2, r7
 800a500:	db6d      	blt.n	800a5de <quorem+0xf0>
 800a502:	3f01      	subs	r7, #1
 800a504:	00bc      	lsls	r4, r7, #2
 800a506:	3314      	adds	r3, #20
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	191b      	adds	r3, r3, r4
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	0033      	movs	r3, r6
 800a510:	3314      	adds	r3, #20
 800a512:	191c      	adds	r4, r3, r4
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	9304      	str	r3, [sp, #16]
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	9804      	ldr	r0, [sp, #16]
 800a51e:	681d      	ldr	r5, [r3, #0]
 800a520:	3501      	adds	r5, #1
 800a522:	0029      	movs	r1, r5
 800a524:	f7f5 fe16 	bl	8000154 <__udivsi3>
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	9000      	str	r0, [sp, #0]
 800a52c:	42ab      	cmp	r3, r5
 800a52e:	d32b      	bcc.n	800a588 <quorem+0x9a>
 800a530:	9b05      	ldr	r3, [sp, #20]
 800a532:	9d01      	ldr	r5, [sp, #4]
 800a534:	469c      	mov	ip, r3
 800a536:	2300      	movs	r3, #0
 800a538:	9305      	str	r3, [sp, #20]
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	4662      	mov	r2, ip
 800a53e:	ca08      	ldmia	r2!, {r3}
 800a540:	6828      	ldr	r0, [r5, #0]
 800a542:	4694      	mov	ip, r2
 800a544:	9a00      	ldr	r2, [sp, #0]
 800a546:	b299      	uxth	r1, r3
 800a548:	4351      	muls	r1, r2
 800a54a:	9a05      	ldr	r2, [sp, #20]
 800a54c:	0c1b      	lsrs	r3, r3, #16
 800a54e:	1889      	adds	r1, r1, r2
 800a550:	9a00      	ldr	r2, [sp, #0]
 800a552:	4353      	muls	r3, r2
 800a554:	0c0a      	lsrs	r2, r1, #16
 800a556:	189b      	adds	r3, r3, r2
 800a558:	0c1a      	lsrs	r2, r3, #16
 800a55a:	b289      	uxth	r1, r1
 800a55c:	9205      	str	r2, [sp, #20]
 800a55e:	b282      	uxth	r2, r0
 800a560:	1a52      	subs	r2, r2, r1
 800a562:	9904      	ldr	r1, [sp, #16]
 800a564:	0c00      	lsrs	r0, r0, #16
 800a566:	1852      	adds	r2, r2, r1
 800a568:	b29b      	uxth	r3, r3
 800a56a:	1411      	asrs	r1, r2, #16
 800a56c:	1ac3      	subs	r3, r0, r3
 800a56e:	185b      	adds	r3, r3, r1
 800a570:	1419      	asrs	r1, r3, #16
 800a572:	b292      	uxth	r2, r2
 800a574:	041b      	lsls	r3, r3, #16
 800a576:	431a      	orrs	r2, r3
 800a578:	9b03      	ldr	r3, [sp, #12]
 800a57a:	9104      	str	r1, [sp, #16]
 800a57c:	c504      	stmia	r5!, {r2}
 800a57e:	4563      	cmp	r3, ip
 800a580:	d2dc      	bcs.n	800a53c <quorem+0x4e>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d030      	beq.n	800a5ea <quorem+0xfc>
 800a588:	0030      	movs	r0, r6
 800a58a:	9902      	ldr	r1, [sp, #8]
 800a58c:	f001 f9c6 	bl	800b91c <__mcmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	db23      	blt.n	800a5dc <quorem+0xee>
 800a594:	0034      	movs	r4, r6
 800a596:	2500      	movs	r5, #0
 800a598:	9902      	ldr	r1, [sp, #8]
 800a59a:	3414      	adds	r4, #20
 800a59c:	3114      	adds	r1, #20
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	c901      	ldmia	r1!, {r0}
 800a5a2:	9302      	str	r3, [sp, #8]
 800a5a4:	466b      	mov	r3, sp
 800a5a6:	891b      	ldrh	r3, [r3, #8]
 800a5a8:	b282      	uxth	r2, r0
 800a5aa:	1a9a      	subs	r2, r3, r2
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	1952      	adds	r2, r2, r5
 800a5b0:	0c00      	lsrs	r0, r0, #16
 800a5b2:	0c1b      	lsrs	r3, r3, #16
 800a5b4:	1a1b      	subs	r3, r3, r0
 800a5b6:	1410      	asrs	r0, r2, #16
 800a5b8:	181b      	adds	r3, r3, r0
 800a5ba:	141d      	asrs	r5, r3, #16
 800a5bc:	b292      	uxth	r2, r2
 800a5be:	041b      	lsls	r3, r3, #16
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	c404      	stmia	r4!, {r2}
 800a5c6:	428b      	cmp	r3, r1
 800a5c8:	d2e9      	bcs.n	800a59e <quorem+0xb0>
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	00bb      	lsls	r3, r7, #2
 800a5ce:	18d3      	adds	r3, r2, r3
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d013      	beq.n	800a5fe <quorem+0x110>
 800a5d6:	9b00      	ldr	r3, [sp, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	9800      	ldr	r0, [sp, #0]
 800a5de:	b007      	add	sp, #28
 800a5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d104      	bne.n	800a5f2 <quorem+0x104>
 800a5e8:	3f01      	subs	r7, #1
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	3c04      	subs	r4, #4
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	d3f7      	bcc.n	800a5e2 <quorem+0xf4>
 800a5f2:	6137      	str	r7, [r6, #16]
 800a5f4:	e7c8      	b.n	800a588 <quorem+0x9a>
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	d104      	bne.n	800a606 <quorem+0x118>
 800a5fc:	3f01      	subs	r7, #1
 800a5fe:	9a01      	ldr	r2, [sp, #4]
 800a600:	3b04      	subs	r3, #4
 800a602:	429a      	cmp	r2, r3
 800a604:	d3f7      	bcc.n	800a5f6 <quorem+0x108>
 800a606:	6137      	str	r7, [r6, #16]
 800a608:	e7e5      	b.n	800a5d6 <quorem+0xe8>
	...

0800a60c <_dtoa_r>:
 800a60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a60e:	0014      	movs	r4, r2
 800a610:	001d      	movs	r5, r3
 800a612:	69c6      	ldr	r6, [r0, #28]
 800a614:	b09d      	sub	sp, #116	@ 0x74
 800a616:	940a      	str	r4, [sp, #40]	@ 0x28
 800a618:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a61a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a61c:	9003      	str	r0, [sp, #12]
 800a61e:	2e00      	cmp	r6, #0
 800a620:	d10f      	bne.n	800a642 <_dtoa_r+0x36>
 800a622:	2010      	movs	r0, #16
 800a624:	f000 fe30 	bl	800b288 <malloc>
 800a628:	9b03      	ldr	r3, [sp, #12]
 800a62a:	1e02      	subs	r2, r0, #0
 800a62c:	61d8      	str	r0, [r3, #28]
 800a62e:	d104      	bne.n	800a63a <_dtoa_r+0x2e>
 800a630:	21ef      	movs	r1, #239	@ 0xef
 800a632:	4bc7      	ldr	r3, [pc, #796]	@ (800a950 <_dtoa_r+0x344>)
 800a634:	48c7      	ldr	r0, [pc, #796]	@ (800a954 <_dtoa_r+0x348>)
 800a636:	f001 fe8f 	bl	800c358 <__assert_func>
 800a63a:	6046      	str	r6, [r0, #4]
 800a63c:	6086      	str	r6, [r0, #8]
 800a63e:	6006      	str	r6, [r0, #0]
 800a640:	60c6      	str	r6, [r0, #12]
 800a642:	9b03      	ldr	r3, [sp, #12]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	6819      	ldr	r1, [r3, #0]
 800a648:	2900      	cmp	r1, #0
 800a64a:	d00b      	beq.n	800a664 <_dtoa_r+0x58>
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	2301      	movs	r3, #1
 800a650:	4093      	lsls	r3, r2
 800a652:	604a      	str	r2, [r1, #4]
 800a654:	608b      	str	r3, [r1, #8]
 800a656:	9803      	ldr	r0, [sp, #12]
 800a658:	f000 ff16 	bl	800b488 <_Bfree>
 800a65c:	2200      	movs	r2, #0
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	2d00      	cmp	r5, #0
 800a666:	da1e      	bge.n	800a6a6 <_dtoa_r+0x9a>
 800a668:	2301      	movs	r3, #1
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	006b      	lsls	r3, r5, #1
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a672:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a674:	4bb8      	ldr	r3, [pc, #736]	@ (800a958 <_dtoa_r+0x34c>)
 800a676:	4ab8      	ldr	r2, [pc, #736]	@ (800a958 <_dtoa_r+0x34c>)
 800a678:	403b      	ands	r3, r7
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d116      	bne.n	800a6ac <_dtoa_r+0xa0>
 800a67e:	4bb7      	ldr	r3, [pc, #732]	@ (800a95c <_dtoa_r+0x350>)
 800a680:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	033b      	lsls	r3, r7, #12
 800a686:	0b1b      	lsrs	r3, r3, #12
 800a688:	4323      	orrs	r3, r4
 800a68a:	d101      	bne.n	800a690 <_dtoa_r+0x84>
 800a68c:	f000 fd83 	bl	800b196 <_dtoa_r+0xb8a>
 800a690:	4bb3      	ldr	r3, [pc, #716]	@ (800a960 <_dtoa_r+0x354>)
 800a692:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a694:	9308      	str	r3, [sp, #32]
 800a696:	2a00      	cmp	r2, #0
 800a698:	d002      	beq.n	800a6a0 <_dtoa_r+0x94>
 800a69a:	4bb2      	ldr	r3, [pc, #712]	@ (800a964 <_dtoa_r+0x358>)
 800a69c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	9808      	ldr	r0, [sp, #32]
 800a6a2:	b01d      	add	sp, #116	@ 0x74
 800a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	603b      	str	r3, [r7, #0]
 800a6aa:	e7e2      	b.n	800a672 <_dtoa_r+0x66>
 800a6ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6b0:	9212      	str	r2, [sp, #72]	@ 0x48
 800a6b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a6b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f7f5 fed0 	bl	8000460 <__aeabi_dcmpeq>
 800a6c0:	1e06      	subs	r6, r0, #0
 800a6c2:	d00b      	beq.n	800a6dc <_dtoa_r+0xd0>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <_dtoa_r+0xca>
 800a6d0:	4ba5      	ldr	r3, [pc, #660]	@ (800a968 <_dtoa_r+0x35c>)
 800a6d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	4ba5      	ldr	r3, [pc, #660]	@ (800a96c <_dtoa_r+0x360>)
 800a6d8:	9308      	str	r3, [sp, #32]
 800a6da:	e7e1      	b.n	800a6a0 <_dtoa_r+0x94>
 800a6dc:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	9803      	ldr	r0, [sp, #12]
 800a6e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a6e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6ea:	f001 f9cd 	bl	800ba88 <__d2b>
 800a6ee:	007a      	lsls	r2, r7, #1
 800a6f0:	9005      	str	r0, [sp, #20]
 800a6f2:	0d52      	lsrs	r2, r2, #21
 800a6f4:	d100      	bne.n	800a6f8 <_dtoa_r+0xec>
 800a6f6:	e07b      	b.n	800a7f0 <_dtoa_r+0x1e4>
 800a6f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6fa:	9618      	str	r6, [sp, #96]	@ 0x60
 800a6fc:	0319      	lsls	r1, r3, #12
 800a6fe:	4b9c      	ldr	r3, [pc, #624]	@ (800a970 <_dtoa_r+0x364>)
 800a700:	0b09      	lsrs	r1, r1, #12
 800a702:	430b      	orrs	r3, r1
 800a704:	499b      	ldr	r1, [pc, #620]	@ (800a974 <_dtoa_r+0x368>)
 800a706:	1857      	adds	r7, r2, r1
 800a708:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a70a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a70c:	0019      	movs	r1, r3
 800a70e:	2200      	movs	r2, #0
 800a710:	4b99      	ldr	r3, [pc, #612]	@ (800a978 <_dtoa_r+0x36c>)
 800a712:	f7f8 f83b 	bl	800278c <__aeabi_dsub>
 800a716:	4a99      	ldr	r2, [pc, #612]	@ (800a97c <_dtoa_r+0x370>)
 800a718:	4b99      	ldr	r3, [pc, #612]	@ (800a980 <_dtoa_r+0x374>)
 800a71a:	f7f7 fd6f 	bl	80021fc <__aeabi_dmul>
 800a71e:	4a99      	ldr	r2, [pc, #612]	@ (800a984 <_dtoa_r+0x378>)
 800a720:	4b99      	ldr	r3, [pc, #612]	@ (800a988 <_dtoa_r+0x37c>)
 800a722:	f7f6 fdc3 	bl	80012ac <__aeabi_dadd>
 800a726:	0004      	movs	r4, r0
 800a728:	0038      	movs	r0, r7
 800a72a:	000d      	movs	r5, r1
 800a72c:	f7f8 fc28 	bl	8002f80 <__aeabi_i2d>
 800a730:	4a96      	ldr	r2, [pc, #600]	@ (800a98c <_dtoa_r+0x380>)
 800a732:	4b97      	ldr	r3, [pc, #604]	@ (800a990 <_dtoa_r+0x384>)
 800a734:	f7f7 fd62 	bl	80021fc <__aeabi_dmul>
 800a738:	0002      	movs	r2, r0
 800a73a:	000b      	movs	r3, r1
 800a73c:	0020      	movs	r0, r4
 800a73e:	0029      	movs	r1, r5
 800a740:	f7f6 fdb4 	bl	80012ac <__aeabi_dadd>
 800a744:	0004      	movs	r4, r0
 800a746:	000d      	movs	r5, r1
 800a748:	f7f8 fbde 	bl	8002f08 <__aeabi_d2iz>
 800a74c:	2200      	movs	r2, #0
 800a74e:	9004      	str	r0, [sp, #16]
 800a750:	2300      	movs	r3, #0
 800a752:	0020      	movs	r0, r4
 800a754:	0029      	movs	r1, r5
 800a756:	f7f5 fe89 	bl	800046c <__aeabi_dcmplt>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d00b      	beq.n	800a776 <_dtoa_r+0x16a>
 800a75e:	9804      	ldr	r0, [sp, #16]
 800a760:	f7f8 fc0e 	bl	8002f80 <__aeabi_i2d>
 800a764:	002b      	movs	r3, r5
 800a766:	0022      	movs	r2, r4
 800a768:	f7f5 fe7a 	bl	8000460 <__aeabi_dcmpeq>
 800a76c:	4243      	negs	r3, r0
 800a76e:	4158      	adcs	r0, r3
 800a770:	9b04      	ldr	r3, [sp, #16]
 800a772:	1a1b      	subs	r3, r3, r0
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	2301      	movs	r3, #1
 800a778:	9315      	str	r3, [sp, #84]	@ 0x54
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	2b16      	cmp	r3, #22
 800a77e:	d810      	bhi.n	800a7a2 <_dtoa_r+0x196>
 800a780:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a782:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	4b83      	ldr	r3, [pc, #524]	@ (800a994 <_dtoa_r+0x388>)
 800a788:	00d2      	lsls	r2, r2, #3
 800a78a:	189b      	adds	r3, r3, r2
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f7f5 fe6c 	bl	800046c <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	d047      	beq.n	800a828 <_dtoa_r+0x21c>
 800a798:	9b04      	ldr	r3, [sp, #16]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	9304      	str	r3, [sp, #16]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a7a6:	9206      	str	r2, [sp, #24]
 800a7a8:	1bdb      	subs	r3, r3, r7
 800a7aa:	1e5a      	subs	r2, r3, #1
 800a7ac:	d53e      	bpl.n	800a82c <_dtoa_r+0x220>
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7b8:	9b04      	ldr	r3, [sp, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	db38      	blt.n	800a830 <_dtoa_r+0x224>
 800a7be:	9a04      	ldr	r2, [sp, #16]
 800a7c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c2:	4694      	mov	ip, r2
 800a7c4:	4463      	add	r3, ip
 800a7c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9214      	str	r2, [sp, #80]	@ 0x50
 800a7cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a7d0:	2401      	movs	r4, #1
 800a7d2:	2b09      	cmp	r3, #9
 800a7d4:	d867      	bhi.n	800a8a6 <_dtoa_r+0x29a>
 800a7d6:	2b05      	cmp	r3, #5
 800a7d8:	dd02      	ble.n	800a7e0 <_dtoa_r+0x1d4>
 800a7da:	2400      	movs	r4, #0
 800a7dc:	3b04      	subs	r3, #4
 800a7de:	9322      	str	r3, [sp, #136]	@ 0x88
 800a7e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a7e2:	1e98      	subs	r0, r3, #2
 800a7e4:	2803      	cmp	r0, #3
 800a7e6:	d867      	bhi.n	800a8b8 <_dtoa_r+0x2ac>
 800a7e8:	f7f5 fca0 	bl	800012c <__gnu_thumb1_case_uqi>
 800a7ec:	5b383a2b 	.word	0x5b383a2b
 800a7f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a7f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a7f4:	18f6      	adds	r6, r6, r3
 800a7f6:	4b68      	ldr	r3, [pc, #416]	@ (800a998 <_dtoa_r+0x38c>)
 800a7f8:	18f2      	adds	r2, r6, r3
 800a7fa:	2a20      	cmp	r2, #32
 800a7fc:	dd0f      	ble.n	800a81e <_dtoa_r+0x212>
 800a7fe:	2340      	movs	r3, #64	@ 0x40
 800a800:	1a9b      	subs	r3, r3, r2
 800a802:	409f      	lsls	r7, r3
 800a804:	4b65      	ldr	r3, [pc, #404]	@ (800a99c <_dtoa_r+0x390>)
 800a806:	0038      	movs	r0, r7
 800a808:	18f3      	adds	r3, r6, r3
 800a80a:	40dc      	lsrs	r4, r3
 800a80c:	4320      	orrs	r0, r4
 800a80e:	f7f8 fbe5 	bl	8002fdc <__aeabi_ui2d>
 800a812:	2201      	movs	r2, #1
 800a814:	4b62      	ldr	r3, [pc, #392]	@ (800a9a0 <_dtoa_r+0x394>)
 800a816:	1e77      	subs	r7, r6, #1
 800a818:	18cb      	adds	r3, r1, r3
 800a81a:	9218      	str	r2, [sp, #96]	@ 0x60
 800a81c:	e776      	b.n	800a70c <_dtoa_r+0x100>
 800a81e:	2320      	movs	r3, #32
 800a820:	0020      	movs	r0, r4
 800a822:	1a9b      	subs	r3, r3, r2
 800a824:	4098      	lsls	r0, r3
 800a826:	e7f2      	b.n	800a80e <_dtoa_r+0x202>
 800a828:	9015      	str	r0, [sp, #84]	@ 0x54
 800a82a:	e7ba      	b.n	800a7a2 <_dtoa_r+0x196>
 800a82c:	920d      	str	r2, [sp, #52]	@ 0x34
 800a82e:	e7c3      	b.n	800a7b8 <_dtoa_r+0x1ac>
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	9a04      	ldr	r2, [sp, #16]
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	9306      	str	r3, [sp, #24]
 800a838:	4253      	negs	r3, r2
 800a83a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a83c:	2300      	movs	r3, #0
 800a83e:	9314      	str	r3, [sp, #80]	@ 0x50
 800a840:	e7c5      	b.n	800a7ce <_dtoa_r+0x1c2>
 800a842:	2300      	movs	r3, #0
 800a844:	9310      	str	r3, [sp, #64]	@ 0x40
 800a846:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a848:	930e      	str	r3, [sp, #56]	@ 0x38
 800a84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dc13      	bgt.n	800a878 <_dtoa_r+0x26c>
 800a850:	2301      	movs	r3, #1
 800a852:	001a      	movs	r2, r3
 800a854:	930e      	str	r3, [sp, #56]	@ 0x38
 800a856:	9309      	str	r3, [sp, #36]	@ 0x24
 800a858:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a85a:	e00d      	b.n	800a878 <_dtoa_r+0x26c>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e7f1      	b.n	800a844 <_dtoa_r+0x238>
 800a860:	2300      	movs	r3, #0
 800a862:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a864:	9310      	str	r3, [sp, #64]	@ 0x40
 800a866:	4694      	mov	ip, r2
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	4463      	add	r3, ip
 800a86c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a86e:	3301      	adds	r3, #1
 800a870:	9309      	str	r3, [sp, #36]	@ 0x24
 800a872:	2b00      	cmp	r3, #0
 800a874:	dc00      	bgt.n	800a878 <_dtoa_r+0x26c>
 800a876:	2301      	movs	r3, #1
 800a878:	9a03      	ldr	r2, [sp, #12]
 800a87a:	2100      	movs	r1, #0
 800a87c:	69d0      	ldr	r0, [r2, #28]
 800a87e:	2204      	movs	r2, #4
 800a880:	0015      	movs	r5, r2
 800a882:	3514      	adds	r5, #20
 800a884:	429d      	cmp	r5, r3
 800a886:	d91b      	bls.n	800a8c0 <_dtoa_r+0x2b4>
 800a888:	6041      	str	r1, [r0, #4]
 800a88a:	9803      	ldr	r0, [sp, #12]
 800a88c:	f000 fdb8 	bl	800b400 <_Balloc>
 800a890:	9008      	str	r0, [sp, #32]
 800a892:	2800      	cmp	r0, #0
 800a894:	d117      	bne.n	800a8c6 <_dtoa_r+0x2ba>
 800a896:	21b0      	movs	r1, #176	@ 0xb0
 800a898:	4b42      	ldr	r3, [pc, #264]	@ (800a9a4 <_dtoa_r+0x398>)
 800a89a:	482e      	ldr	r0, [pc, #184]	@ (800a954 <_dtoa_r+0x348>)
 800a89c:	9a08      	ldr	r2, [sp, #32]
 800a89e:	31ff      	adds	r1, #255	@ 0xff
 800a8a0:	e6c9      	b.n	800a636 <_dtoa_r+0x2a>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e7dd      	b.n	800a862 <_dtoa_r+0x256>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9410      	str	r4, [sp, #64]	@ 0x40
 800a8aa:	9322      	str	r3, [sp, #136]	@ 0x88
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	3313      	adds	r3, #19
 800a8b6:	e7cf      	b.n	800a858 <_dtoa_r+0x24c>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8bc:	3b02      	subs	r3, #2
 800a8be:	e7f6      	b.n	800a8ae <_dtoa_r+0x2a2>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	0052      	lsls	r2, r2, #1
 800a8c4:	e7dc      	b.n	800a880 <_dtoa_r+0x274>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	9a08      	ldr	r2, [sp, #32]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d0:	2b0e      	cmp	r3, #14
 800a8d2:	d900      	bls.n	800a8d6 <_dtoa_r+0x2ca>
 800a8d4:	e0d9      	b.n	800aa8a <_dtoa_r+0x47e>
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	d100      	bne.n	800a8dc <_dtoa_r+0x2d0>
 800a8da:	e0d6      	b.n	800aa8a <_dtoa_r+0x47e>
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd64      	ble.n	800a9ac <_dtoa_r+0x3a0>
 800a8e2:	210f      	movs	r1, #15
 800a8e4:	9a04      	ldr	r2, [sp, #16]
 800a8e6:	4b2b      	ldr	r3, [pc, #172]	@ (800a994 <_dtoa_r+0x388>)
 800a8e8:	400a      	ands	r2, r1
 800a8ea:	00d2      	lsls	r2, r2, #3
 800a8ec:	189b      	adds	r3, r3, r2
 800a8ee:	681e      	ldr	r6, [r3, #0]
 800a8f0:	685f      	ldr	r7, [r3, #4]
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	2402      	movs	r4, #2
 800a8f6:	111d      	asrs	r5, r3, #4
 800a8f8:	05db      	lsls	r3, r3, #23
 800a8fa:	d50a      	bpl.n	800a912 <_dtoa_r+0x306>
 800a8fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a8 <_dtoa_r+0x39c>)
 800a8fe:	400d      	ands	r5, r1
 800a900:	6a1a      	ldr	r2, [r3, #32]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a906:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a908:	f7f7 f834 	bl	8001974 <__aeabi_ddiv>
 800a90c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a90e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a910:	3401      	adds	r4, #1
 800a912:	4b25      	ldr	r3, [pc, #148]	@ (800a9a8 <_dtoa_r+0x39c>)
 800a914:	930c      	str	r3, [sp, #48]	@ 0x30
 800a916:	2d00      	cmp	r5, #0
 800a918:	d108      	bne.n	800a92c <_dtoa_r+0x320>
 800a91a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a91c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a91e:	0032      	movs	r2, r6
 800a920:	003b      	movs	r3, r7
 800a922:	f7f7 f827 	bl	8001974 <__aeabi_ddiv>
 800a926:	900a      	str	r0, [sp, #40]	@ 0x28
 800a928:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a92a:	e05a      	b.n	800a9e2 <_dtoa_r+0x3d6>
 800a92c:	2301      	movs	r3, #1
 800a92e:	421d      	tst	r5, r3
 800a930:	d009      	beq.n	800a946 <_dtoa_r+0x33a>
 800a932:	18e4      	adds	r4, r4, r3
 800a934:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a936:	0030      	movs	r0, r6
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	0039      	movs	r1, r7
 800a93e:	f7f7 fc5d 	bl	80021fc <__aeabi_dmul>
 800a942:	0006      	movs	r6, r0
 800a944:	000f      	movs	r7, r1
 800a946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a948:	106d      	asrs	r5, r5, #1
 800a94a:	3308      	adds	r3, #8
 800a94c:	e7e2      	b.n	800a914 <_dtoa_r+0x308>
 800a94e:	46c0      	nop			@ (mov r8, r8)
 800a950:	0800d801 	.word	0x0800d801
 800a954:	0800d818 	.word	0x0800d818
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	0000270f 	.word	0x0000270f
 800a960:	0800d7fd 	.word	0x0800d7fd
 800a964:	0800d800 	.word	0x0800d800
 800a968:	0800d7d1 	.word	0x0800d7d1
 800a96c:	0800d7d0 	.word	0x0800d7d0
 800a970:	3ff00000 	.word	0x3ff00000
 800a974:	fffffc01 	.word	0xfffffc01
 800a978:	3ff80000 	.word	0x3ff80000
 800a97c:	636f4361 	.word	0x636f4361
 800a980:	3fd287a7 	.word	0x3fd287a7
 800a984:	8b60c8b3 	.word	0x8b60c8b3
 800a988:	3fc68a28 	.word	0x3fc68a28
 800a98c:	509f79fb 	.word	0x509f79fb
 800a990:	3fd34413 	.word	0x3fd34413
 800a994:	0800d910 	.word	0x0800d910
 800a998:	00000432 	.word	0x00000432
 800a99c:	00000412 	.word	0x00000412
 800a9a0:	fe100000 	.word	0xfe100000
 800a9a4:	0800d870 	.word	0x0800d870
 800a9a8:	0800d8e8 	.word	0x0800d8e8
 800a9ac:	9b04      	ldr	r3, [sp, #16]
 800a9ae:	2402      	movs	r4, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d016      	beq.n	800a9e2 <_dtoa_r+0x3d6>
 800a9b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a9b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a9b8:	220f      	movs	r2, #15
 800a9ba:	425d      	negs	r5, r3
 800a9bc:	402a      	ands	r2, r5
 800a9be:	4bd7      	ldr	r3, [pc, #860]	@ (800ad1c <_dtoa_r+0x710>)
 800a9c0:	00d2      	lsls	r2, r2, #3
 800a9c2:	189b      	adds	r3, r3, r2
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f7f7 fc18 	bl	80021fc <__aeabi_dmul>
 800a9cc:	2701      	movs	r7, #1
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9d4:	4ed2      	ldr	r6, [pc, #840]	@ (800ad20 <_dtoa_r+0x714>)
 800a9d6:	112d      	asrs	r5, r5, #4
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	d000      	beq.n	800a9de <_dtoa_r+0x3d2>
 800a9dc:	e0ba      	b.n	800ab54 <_dtoa_r+0x548>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1a1      	bne.n	800a926 <_dtoa_r+0x31a>
 800a9e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a9e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a9e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d100      	bne.n	800a9ee <_dtoa_r+0x3e2>
 800a9ec:	e0bd      	b.n	800ab6a <_dtoa_r+0x55e>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	0030      	movs	r0, r6
 800a9f2:	0039      	movs	r1, r7
 800a9f4:	4bcb      	ldr	r3, [pc, #812]	@ (800ad24 <_dtoa_r+0x718>)
 800a9f6:	f7f5 fd39 	bl	800046c <__aeabi_dcmplt>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d100      	bne.n	800aa00 <_dtoa_r+0x3f4>
 800a9fe:	e0b4      	b.n	800ab6a <_dtoa_r+0x55e>
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d100      	bne.n	800aa08 <_dtoa_r+0x3fc>
 800aa06:	e0b0      	b.n	800ab6a <_dtoa_r+0x55e>
 800aa08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	dd39      	ble.n	800aa82 <_dtoa_r+0x476>
 800aa0e:	9b04      	ldr	r3, [sp, #16]
 800aa10:	2200      	movs	r2, #0
 800aa12:	3b01      	subs	r3, #1
 800aa14:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa16:	0030      	movs	r0, r6
 800aa18:	4bc3      	ldr	r3, [pc, #780]	@ (800ad28 <_dtoa_r+0x71c>)
 800aa1a:	0039      	movs	r1, r7
 800aa1c:	f7f7 fbee 	bl	80021fc <__aeabi_dmul>
 800aa20:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa22:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa26:	3401      	adds	r4, #1
 800aa28:	0020      	movs	r0, r4
 800aa2a:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa2c:	f7f8 faa8 	bl	8002f80 <__aeabi_i2d>
 800aa30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa34:	f7f7 fbe2 	bl	80021fc <__aeabi_dmul>
 800aa38:	4bbc      	ldr	r3, [pc, #752]	@ (800ad2c <_dtoa_r+0x720>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f7f6 fc36 	bl	80012ac <__aeabi_dadd>
 800aa40:	4bbb      	ldr	r3, [pc, #748]	@ (800ad30 <_dtoa_r+0x724>)
 800aa42:	0006      	movs	r6, r0
 800aa44:	18cf      	adds	r7, r1, r3
 800aa46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d000      	beq.n	800aa4e <_dtoa_r+0x442>
 800aa4c:	e091      	b.n	800ab72 <_dtoa_r+0x566>
 800aa4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa52:	2200      	movs	r2, #0
 800aa54:	4bb7      	ldr	r3, [pc, #732]	@ (800ad34 <_dtoa_r+0x728>)
 800aa56:	f7f7 fe99 	bl	800278c <__aeabi_dsub>
 800aa5a:	0032      	movs	r2, r6
 800aa5c:	003b      	movs	r3, r7
 800aa5e:	0004      	movs	r4, r0
 800aa60:	000d      	movs	r5, r1
 800aa62:	f7f5 fd17 	bl	8000494 <__aeabi_dcmpgt>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d000      	beq.n	800aa6c <_dtoa_r+0x460>
 800aa6a:	e29d      	b.n	800afa8 <_dtoa_r+0x99c>
 800aa6c:	2180      	movs	r1, #128	@ 0x80
 800aa6e:	0609      	lsls	r1, r1, #24
 800aa70:	187b      	adds	r3, r7, r1
 800aa72:	0032      	movs	r2, r6
 800aa74:	0020      	movs	r0, r4
 800aa76:	0029      	movs	r1, r5
 800aa78:	f7f5 fcf8 	bl	800046c <__aeabi_dcmplt>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d000      	beq.n	800aa82 <_dtoa_r+0x476>
 800aa80:	e130      	b.n	800ace4 <_dtoa_r+0x6d8>
 800aa82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa84:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800aa86:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa88:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	da00      	bge.n	800aa92 <_dtoa_r+0x486>
 800aa90:	e177      	b.n	800ad82 <_dtoa_r+0x776>
 800aa92:	9a04      	ldr	r2, [sp, #16]
 800aa94:	2a0e      	cmp	r2, #14
 800aa96:	dd00      	ble.n	800aa9a <_dtoa_r+0x48e>
 800aa98:	e173      	b.n	800ad82 <_dtoa_r+0x776>
 800aa9a:	4ba0      	ldr	r3, [pc, #640]	@ (800ad1c <_dtoa_r+0x710>)
 800aa9c:	00d2      	lsls	r2, r2, #3
 800aa9e:	189b      	adds	r3, r3, r2
 800aaa0:	685c      	ldr	r4, [r3, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	9306      	str	r3, [sp, #24]
 800aaa6:	9407      	str	r4, [sp, #28]
 800aaa8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	da03      	bge.n	800aab6 <_dtoa_r+0x4aa>
 800aaae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dc00      	bgt.n	800aab6 <_dtoa_r+0x4aa>
 800aab4:	e106      	b.n	800acc4 <_dtoa_r+0x6b8>
 800aab6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aab8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800aaba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aabc:	9d08      	ldr	r5, [sp, #32]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	195b      	adds	r3, r3, r5
 800aac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac4:	9a06      	ldr	r2, [sp, #24]
 800aac6:	9b07      	ldr	r3, [sp, #28]
 800aac8:	0030      	movs	r0, r6
 800aaca:	0039      	movs	r1, r7
 800aacc:	f7f6 ff52 	bl	8001974 <__aeabi_ddiv>
 800aad0:	f7f8 fa1a 	bl	8002f08 <__aeabi_d2iz>
 800aad4:	9009      	str	r0, [sp, #36]	@ 0x24
 800aad6:	f7f8 fa53 	bl	8002f80 <__aeabi_i2d>
 800aada:	9a06      	ldr	r2, [sp, #24]
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	f7f7 fb8d 	bl	80021fc <__aeabi_dmul>
 800aae2:	0002      	movs	r2, r0
 800aae4:	000b      	movs	r3, r1
 800aae6:	0030      	movs	r0, r6
 800aae8:	0039      	movs	r1, r7
 800aaea:	f7f7 fe4f 	bl	800278c <__aeabi_dsub>
 800aaee:	002b      	movs	r3, r5
 800aaf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf2:	3501      	adds	r5, #1
 800aaf4:	3230      	adds	r2, #48	@ 0x30
 800aaf6:	701a      	strb	r2, [r3, #0]
 800aaf8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aafa:	002c      	movs	r4, r5
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d000      	beq.n	800ab02 <_dtoa_r+0x4f6>
 800ab00:	e131      	b.n	800ad66 <_dtoa_r+0x75a>
 800ab02:	0002      	movs	r2, r0
 800ab04:	000b      	movs	r3, r1
 800ab06:	f7f6 fbd1 	bl	80012ac <__aeabi_dadd>
 800ab0a:	9a06      	ldr	r2, [sp, #24]
 800ab0c:	9b07      	ldr	r3, [sp, #28]
 800ab0e:	0006      	movs	r6, r0
 800ab10:	000f      	movs	r7, r1
 800ab12:	f7f5 fcbf 	bl	8000494 <__aeabi_dcmpgt>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d000      	beq.n	800ab1c <_dtoa_r+0x510>
 800ab1a:	e10f      	b.n	800ad3c <_dtoa_r+0x730>
 800ab1c:	9a06      	ldr	r2, [sp, #24]
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	0030      	movs	r0, r6
 800ab22:	0039      	movs	r1, r7
 800ab24:	f7f5 fc9c 	bl	8000460 <__aeabi_dcmpeq>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d003      	beq.n	800ab34 <_dtoa_r+0x528>
 800ab2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab2e:	07dd      	lsls	r5, r3, #31
 800ab30:	d500      	bpl.n	800ab34 <_dtoa_r+0x528>
 800ab32:	e103      	b.n	800ad3c <_dtoa_r+0x730>
 800ab34:	9905      	ldr	r1, [sp, #20]
 800ab36:	9803      	ldr	r0, [sp, #12]
 800ab38:	f000 fca6 	bl	800b488 <_Bfree>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	7023      	strb	r3, [r4, #0]
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ab44:	3301      	adds	r3, #1
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d100      	bne.n	800ab50 <_dtoa_r+0x544>
 800ab4e:	e5a7      	b.n	800a6a0 <_dtoa_r+0x94>
 800ab50:	601c      	str	r4, [r3, #0]
 800ab52:	e5a5      	b.n	800a6a0 <_dtoa_r+0x94>
 800ab54:	423d      	tst	r5, r7
 800ab56:	d005      	beq.n	800ab64 <_dtoa_r+0x558>
 800ab58:	6832      	ldr	r2, [r6, #0]
 800ab5a:	6873      	ldr	r3, [r6, #4]
 800ab5c:	f7f7 fb4e 	bl	80021fc <__aeabi_dmul>
 800ab60:	003b      	movs	r3, r7
 800ab62:	3401      	adds	r4, #1
 800ab64:	106d      	asrs	r5, r5, #1
 800ab66:	3608      	adds	r6, #8
 800ab68:	e736      	b.n	800a9d8 <_dtoa_r+0x3cc>
 800ab6a:	9b04      	ldr	r3, [sp, #16]
 800ab6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab70:	e75a      	b.n	800aa28 <_dtoa_r+0x41c>
 800ab72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab74:	4b69      	ldr	r3, [pc, #420]	@ (800ad1c <_dtoa_r+0x710>)
 800ab76:	3a01      	subs	r2, #1
 800ab78:	00d2      	lsls	r2, r2, #3
 800ab7a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ab7c:	189b      	adds	r3, r3, r2
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	2900      	cmp	r1, #0
 800ab84:	d04c      	beq.n	800ac20 <_dtoa_r+0x614>
 800ab86:	2000      	movs	r0, #0
 800ab88:	496b      	ldr	r1, [pc, #428]	@ (800ad38 <_dtoa_r+0x72c>)
 800ab8a:	f7f6 fef3 	bl	8001974 <__aeabi_ddiv>
 800ab8e:	0032      	movs	r2, r6
 800ab90:	003b      	movs	r3, r7
 800ab92:	f7f7 fdfb 	bl	800278c <__aeabi_dsub>
 800ab96:	9a08      	ldr	r2, [sp, #32]
 800ab98:	0006      	movs	r6, r0
 800ab9a:	4694      	mov	ip, r2
 800ab9c:	000f      	movs	r7, r1
 800ab9e:	9b08      	ldr	r3, [sp, #32]
 800aba0:	9316      	str	r3, [sp, #88]	@ 0x58
 800aba2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aba4:	4463      	add	r3, ip
 800aba6:	9311      	str	r3, [sp, #68]	@ 0x44
 800aba8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abac:	f7f8 f9ac 	bl	8002f08 <__aeabi_d2iz>
 800abb0:	0005      	movs	r5, r0
 800abb2:	f7f8 f9e5 	bl	8002f80 <__aeabi_i2d>
 800abb6:	0002      	movs	r2, r0
 800abb8:	000b      	movs	r3, r1
 800abba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abbe:	f7f7 fde5 	bl	800278c <__aeabi_dsub>
 800abc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800abc4:	3530      	adds	r5, #48	@ 0x30
 800abc6:	1c5c      	adds	r4, r3, #1
 800abc8:	701d      	strb	r5, [r3, #0]
 800abca:	0032      	movs	r2, r6
 800abcc:	003b      	movs	r3, r7
 800abce:	900a      	str	r0, [sp, #40]	@ 0x28
 800abd0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abd2:	f7f5 fc4b 	bl	800046c <__aeabi_dcmplt>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d16a      	bne.n	800acb0 <_dtoa_r+0x6a4>
 800abda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abde:	2000      	movs	r0, #0
 800abe0:	4950      	ldr	r1, [pc, #320]	@ (800ad24 <_dtoa_r+0x718>)
 800abe2:	f7f7 fdd3 	bl	800278c <__aeabi_dsub>
 800abe6:	0032      	movs	r2, r6
 800abe8:	003b      	movs	r3, r7
 800abea:	f7f5 fc3f 	bl	800046c <__aeabi_dcmplt>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d000      	beq.n	800abf4 <_dtoa_r+0x5e8>
 800abf2:	e0a5      	b.n	800ad40 <_dtoa_r+0x734>
 800abf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abf6:	42a3      	cmp	r3, r4
 800abf8:	d100      	bne.n	800abfc <_dtoa_r+0x5f0>
 800abfa:	e742      	b.n	800aa82 <_dtoa_r+0x476>
 800abfc:	2200      	movs	r2, #0
 800abfe:	0030      	movs	r0, r6
 800ac00:	0039      	movs	r1, r7
 800ac02:	4b49      	ldr	r3, [pc, #292]	@ (800ad28 <_dtoa_r+0x71c>)
 800ac04:	f7f7 fafa 	bl	80021fc <__aeabi_dmul>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	0006      	movs	r6, r0
 800ac0c:	000f      	movs	r7, r1
 800ac0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac12:	4b45      	ldr	r3, [pc, #276]	@ (800ad28 <_dtoa_r+0x71c>)
 800ac14:	f7f7 faf2 	bl	80021fc <__aeabi_dmul>
 800ac18:	9416      	str	r4, [sp, #88]	@ 0x58
 800ac1a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac1e:	e7c3      	b.n	800aba8 <_dtoa_r+0x59c>
 800ac20:	0030      	movs	r0, r6
 800ac22:	0039      	movs	r1, r7
 800ac24:	f7f7 faea 	bl	80021fc <__aeabi_dmul>
 800ac28:	9d08      	ldr	r5, [sp, #32]
 800ac2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac2c:	002b      	movs	r3, r5
 800ac2e:	4694      	mov	ip, r2
 800ac30:	9016      	str	r0, [sp, #88]	@ 0x58
 800ac32:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ac34:	4463      	add	r3, ip
 800ac36:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac3c:	f7f8 f964 	bl	8002f08 <__aeabi_d2iz>
 800ac40:	0004      	movs	r4, r0
 800ac42:	f7f8 f99d 	bl	8002f80 <__aeabi_i2d>
 800ac46:	000b      	movs	r3, r1
 800ac48:	0002      	movs	r2, r0
 800ac4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac4e:	f7f7 fd9d 	bl	800278c <__aeabi_dsub>
 800ac52:	3430      	adds	r4, #48	@ 0x30
 800ac54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac56:	702c      	strb	r4, [r5, #0]
 800ac58:	3501      	adds	r5, #1
 800ac5a:	0006      	movs	r6, r0
 800ac5c:	000f      	movs	r7, r1
 800ac5e:	42ab      	cmp	r3, r5
 800ac60:	d129      	bne.n	800acb6 <_dtoa_r+0x6aa>
 800ac62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ac64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ac66:	9b08      	ldr	r3, [sp, #32]
 800ac68:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800ac6a:	469c      	mov	ip, r3
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4b32      	ldr	r3, [pc, #200]	@ (800ad38 <_dtoa_r+0x72c>)
 800ac70:	4464      	add	r4, ip
 800ac72:	f7f6 fb1b 	bl	80012ac <__aeabi_dadd>
 800ac76:	0002      	movs	r2, r0
 800ac78:	000b      	movs	r3, r1
 800ac7a:	0030      	movs	r0, r6
 800ac7c:	0039      	movs	r1, r7
 800ac7e:	f7f5 fc09 	bl	8000494 <__aeabi_dcmpgt>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d15c      	bne.n	800ad40 <_dtoa_r+0x734>
 800ac86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	492a      	ldr	r1, [pc, #168]	@ (800ad38 <_dtoa_r+0x72c>)
 800ac8e:	f7f7 fd7d 	bl	800278c <__aeabi_dsub>
 800ac92:	0002      	movs	r2, r0
 800ac94:	000b      	movs	r3, r1
 800ac96:	0030      	movs	r0, r6
 800ac98:	0039      	movs	r1, r7
 800ac9a:	f7f5 fbe7 	bl	800046c <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d100      	bne.n	800aca4 <_dtoa_r+0x698>
 800aca2:	e6ee      	b.n	800aa82 <_dtoa_r+0x476>
 800aca4:	0023      	movs	r3, r4
 800aca6:	3c01      	subs	r4, #1
 800aca8:	7822      	ldrb	r2, [r4, #0]
 800acaa:	2a30      	cmp	r2, #48	@ 0x30
 800acac:	d0fa      	beq.n	800aca4 <_dtoa_r+0x698>
 800acae:	001c      	movs	r4, r3
 800acb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	e73e      	b.n	800ab34 <_dtoa_r+0x528>
 800acb6:	2200      	movs	r2, #0
 800acb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad28 <_dtoa_r+0x71c>)
 800acba:	f7f7 fa9f 	bl	80021fc <__aeabi_dmul>
 800acbe:	900a      	str	r0, [sp, #40]	@ 0x28
 800acc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800acc2:	e7b9      	b.n	800ac38 <_dtoa_r+0x62c>
 800acc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10c      	bne.n	800ace4 <_dtoa_r+0x6d8>
 800acca:	9806      	ldr	r0, [sp, #24]
 800accc:	9907      	ldr	r1, [sp, #28]
 800acce:	2200      	movs	r2, #0
 800acd0:	4b18      	ldr	r3, [pc, #96]	@ (800ad34 <_dtoa_r+0x728>)
 800acd2:	f7f7 fa93 	bl	80021fc <__aeabi_dmul>
 800acd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acda:	f7f5 fbe5 	bl	80004a8 <__aeabi_dcmpge>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d100      	bne.n	800ace4 <_dtoa_r+0x6d8>
 800ace2:	e164      	b.n	800afae <_dtoa_r+0x9a2>
 800ace4:	2600      	movs	r6, #0
 800ace6:	0037      	movs	r7, r6
 800ace8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acea:	9c08      	ldr	r4, [sp, #32]
 800acec:	43db      	mvns	r3, r3
 800acee:	930c      	str	r3, [sp, #48]	@ 0x30
 800acf0:	2300      	movs	r3, #0
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	0031      	movs	r1, r6
 800acf6:	9803      	ldr	r0, [sp, #12]
 800acf8:	f000 fbc6 	bl	800b488 <_Bfree>
 800acfc:	2f00      	cmp	r7, #0
 800acfe:	d0d7      	beq.n	800acb0 <_dtoa_r+0x6a4>
 800ad00:	9b04      	ldr	r3, [sp, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d005      	beq.n	800ad12 <_dtoa_r+0x706>
 800ad06:	42bb      	cmp	r3, r7
 800ad08:	d003      	beq.n	800ad12 <_dtoa_r+0x706>
 800ad0a:	0019      	movs	r1, r3
 800ad0c:	9803      	ldr	r0, [sp, #12]
 800ad0e:	f000 fbbb 	bl	800b488 <_Bfree>
 800ad12:	0039      	movs	r1, r7
 800ad14:	9803      	ldr	r0, [sp, #12]
 800ad16:	f000 fbb7 	bl	800b488 <_Bfree>
 800ad1a:	e7c9      	b.n	800acb0 <_dtoa_r+0x6a4>
 800ad1c:	0800d910 	.word	0x0800d910
 800ad20:	0800d8e8 	.word	0x0800d8e8
 800ad24:	3ff00000 	.word	0x3ff00000
 800ad28:	40240000 	.word	0x40240000
 800ad2c:	401c0000 	.word	0x401c0000
 800ad30:	fcc00000 	.word	0xfcc00000
 800ad34:	40140000 	.word	0x40140000
 800ad38:	3fe00000 	.word	0x3fe00000
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad40:	0023      	movs	r3, r4
 800ad42:	001c      	movs	r4, r3
 800ad44:	3b01      	subs	r3, #1
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	2a39      	cmp	r2, #57	@ 0x39
 800ad4a:	d108      	bne.n	800ad5e <_dtoa_r+0x752>
 800ad4c:	9a08      	ldr	r2, [sp, #32]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d1f7      	bne.n	800ad42 <_dtoa_r+0x736>
 800ad52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad54:	9908      	ldr	r1, [sp, #32]
 800ad56:	3201      	adds	r2, #1
 800ad58:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad5a:	2230      	movs	r2, #48	@ 0x30
 800ad5c:	700a      	strb	r2, [r1, #0]
 800ad5e:	781a      	ldrb	r2, [r3, #0]
 800ad60:	3201      	adds	r2, #1
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	e7a4      	b.n	800acb0 <_dtoa_r+0x6a4>
 800ad66:	2200      	movs	r2, #0
 800ad68:	4bc6      	ldr	r3, [pc, #792]	@ (800b084 <_dtoa_r+0xa78>)
 800ad6a:	f7f7 fa47 	bl	80021fc <__aeabi_dmul>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2300      	movs	r3, #0
 800ad72:	0006      	movs	r6, r0
 800ad74:	000f      	movs	r7, r1
 800ad76:	f7f5 fb73 	bl	8000460 <__aeabi_dcmpeq>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d100      	bne.n	800ad80 <_dtoa_r+0x774>
 800ad7e:	e6a1      	b.n	800aac4 <_dtoa_r+0x4b8>
 800ad80:	e6d8      	b.n	800ab34 <_dtoa_r+0x528>
 800ad82:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ad84:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ad86:	9c06      	ldr	r4, [sp, #24]
 800ad88:	2f00      	cmp	r7, #0
 800ad8a:	d014      	beq.n	800adb6 <_dtoa_r+0x7aa>
 800ad8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ad8e:	2a01      	cmp	r2, #1
 800ad90:	dd00      	ble.n	800ad94 <_dtoa_r+0x788>
 800ad92:	e0c8      	b.n	800af26 <_dtoa_r+0x91a>
 800ad94:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d100      	bne.n	800ad9c <_dtoa_r+0x790>
 800ad9a:	e0be      	b.n	800af1a <_dtoa_r+0x90e>
 800ad9c:	4aba      	ldr	r2, [pc, #744]	@ (800b088 <_dtoa_r+0xa7c>)
 800ad9e:	189b      	adds	r3, r3, r2
 800ada0:	9a06      	ldr	r2, [sp, #24]
 800ada2:	2101      	movs	r1, #1
 800ada4:	18d2      	adds	r2, r2, r3
 800ada6:	9206      	str	r2, [sp, #24]
 800ada8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adaa:	9803      	ldr	r0, [sp, #12]
 800adac:	18d3      	adds	r3, r2, r3
 800adae:	930d      	str	r3, [sp, #52]	@ 0x34
 800adb0:	f000 fc22 	bl	800b5f8 <__i2b>
 800adb4:	0007      	movs	r7, r0
 800adb6:	2c00      	cmp	r4, #0
 800adb8:	d00e      	beq.n	800add8 <_dtoa_r+0x7cc>
 800adba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd0b      	ble.n	800add8 <_dtoa_r+0x7cc>
 800adc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adc2:	0023      	movs	r3, r4
 800adc4:	4294      	cmp	r4, r2
 800adc6:	dd00      	ble.n	800adca <_dtoa_r+0x7be>
 800adc8:	0013      	movs	r3, r2
 800adca:	9a06      	ldr	r2, [sp, #24]
 800adcc:	1ae4      	subs	r4, r4, r3
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	9206      	str	r2, [sp, #24]
 800add2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	930d      	str	r3, [sp, #52]	@ 0x34
 800add8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adda:	2b00      	cmp	r3, #0
 800addc:	d01f      	beq.n	800ae1e <_dtoa_r+0x812>
 800adde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d100      	bne.n	800ade6 <_dtoa_r+0x7da>
 800ade4:	e0b5      	b.n	800af52 <_dtoa_r+0x946>
 800ade6:	2d00      	cmp	r5, #0
 800ade8:	d010      	beq.n	800ae0c <_dtoa_r+0x800>
 800adea:	0039      	movs	r1, r7
 800adec:	002a      	movs	r2, r5
 800adee:	9803      	ldr	r0, [sp, #12]
 800adf0:	f000 fccc 	bl	800b78c <__pow5mult>
 800adf4:	9a05      	ldr	r2, [sp, #20]
 800adf6:	0001      	movs	r1, r0
 800adf8:	0007      	movs	r7, r0
 800adfa:	9803      	ldr	r0, [sp, #12]
 800adfc:	f000 fc14 	bl	800b628 <__multiply>
 800ae00:	0006      	movs	r6, r0
 800ae02:	9905      	ldr	r1, [sp, #20]
 800ae04:	9803      	ldr	r0, [sp, #12]
 800ae06:	f000 fb3f 	bl	800b488 <_Bfree>
 800ae0a:	9605      	str	r6, [sp, #20]
 800ae0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae0e:	1b5a      	subs	r2, r3, r5
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	d004      	beq.n	800ae1e <_dtoa_r+0x812>
 800ae14:	9905      	ldr	r1, [sp, #20]
 800ae16:	9803      	ldr	r0, [sp, #12]
 800ae18:	f000 fcb8 	bl	800b78c <__pow5mult>
 800ae1c:	9005      	str	r0, [sp, #20]
 800ae1e:	2101      	movs	r1, #1
 800ae20:	9803      	ldr	r0, [sp, #12]
 800ae22:	f000 fbe9 	bl	800b5f8 <__i2b>
 800ae26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae28:	0006      	movs	r6, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d100      	bne.n	800ae30 <_dtoa_r+0x824>
 800ae2e:	e1bc      	b.n	800b1aa <_dtoa_r+0xb9e>
 800ae30:	001a      	movs	r2, r3
 800ae32:	0001      	movs	r1, r0
 800ae34:	9803      	ldr	r0, [sp, #12]
 800ae36:	f000 fca9 	bl	800b78c <__pow5mult>
 800ae3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ae3c:	0006      	movs	r6, r0
 800ae3e:	2500      	movs	r5, #0
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	dc16      	bgt.n	800ae72 <_dtoa_r+0x866>
 800ae44:	2500      	movs	r5, #0
 800ae46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae48:	42ab      	cmp	r3, r5
 800ae4a:	d10e      	bne.n	800ae6a <_dtoa_r+0x85e>
 800ae4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae4e:	031b      	lsls	r3, r3, #12
 800ae50:	42ab      	cmp	r3, r5
 800ae52:	d10a      	bne.n	800ae6a <_dtoa_r+0x85e>
 800ae54:	4b8d      	ldr	r3, [pc, #564]	@ (800b08c <_dtoa_r+0xa80>)
 800ae56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae58:	4213      	tst	r3, r2
 800ae5a:	d006      	beq.n	800ae6a <_dtoa_r+0x85e>
 800ae5c:	9b06      	ldr	r3, [sp, #24]
 800ae5e:	3501      	adds	r5, #1
 800ae60:	3301      	adds	r3, #1
 800ae62:	9306      	str	r3, [sp, #24]
 800ae64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae66:	3301      	adds	r3, #1
 800ae68:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae6c:	2001      	movs	r0, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d008      	beq.n	800ae84 <_dtoa_r+0x878>
 800ae72:	6933      	ldr	r3, [r6, #16]
 800ae74:	3303      	adds	r3, #3
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	18f3      	adds	r3, r6, r3
 800ae7a:	6858      	ldr	r0, [r3, #4]
 800ae7c:	f000 fb6c 	bl	800b558 <__hi0bits>
 800ae80:	2320      	movs	r3, #32
 800ae82:	1a18      	subs	r0, r3, r0
 800ae84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae86:	1818      	adds	r0, r3, r0
 800ae88:	0002      	movs	r2, r0
 800ae8a:	231f      	movs	r3, #31
 800ae8c:	401a      	ands	r2, r3
 800ae8e:	4218      	tst	r0, r3
 800ae90:	d065      	beq.n	800af5e <_dtoa_r+0x952>
 800ae92:	3301      	adds	r3, #1
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	dd5d      	ble.n	800af56 <_dtoa_r+0x94a>
 800ae9a:	231c      	movs	r3, #28
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	9a06      	ldr	r2, [sp, #24]
 800aea0:	18e4      	adds	r4, r4, r3
 800aea2:	18d2      	adds	r2, r2, r3
 800aea4:	9206      	str	r2, [sp, #24]
 800aea6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aea8:	18d3      	adds	r3, r2, r3
 800aeaa:	930d      	str	r3, [sp, #52]	@ 0x34
 800aeac:	9b06      	ldr	r3, [sp, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dd05      	ble.n	800aebe <_dtoa_r+0x8b2>
 800aeb2:	001a      	movs	r2, r3
 800aeb4:	9905      	ldr	r1, [sp, #20]
 800aeb6:	9803      	ldr	r0, [sp, #12]
 800aeb8:	f000 fcc4 	bl	800b844 <__lshift>
 800aebc:	9005      	str	r0, [sp, #20]
 800aebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	dd05      	ble.n	800aed0 <_dtoa_r+0x8c4>
 800aec4:	0031      	movs	r1, r6
 800aec6:	001a      	movs	r2, r3
 800aec8:	9803      	ldr	r0, [sp, #12]
 800aeca:	f000 fcbb 	bl	800b844 <__lshift>
 800aece:	0006      	movs	r6, r0
 800aed0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d045      	beq.n	800af62 <_dtoa_r+0x956>
 800aed6:	0031      	movs	r1, r6
 800aed8:	9805      	ldr	r0, [sp, #20]
 800aeda:	f000 fd1f 	bl	800b91c <__mcmp>
 800aede:	2800      	cmp	r0, #0
 800aee0:	da3f      	bge.n	800af62 <_dtoa_r+0x956>
 800aee2:	9b04      	ldr	r3, [sp, #16]
 800aee4:	220a      	movs	r2, #10
 800aee6:	3b01      	subs	r3, #1
 800aee8:	930c      	str	r3, [sp, #48]	@ 0x30
 800aeea:	9905      	ldr	r1, [sp, #20]
 800aeec:	2300      	movs	r3, #0
 800aeee:	9803      	ldr	r0, [sp, #12]
 800aef0:	f000 faee 	bl	800b4d0 <__multadd>
 800aef4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aef6:	9005      	str	r0, [sp, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d100      	bne.n	800aefe <_dtoa_r+0x8f2>
 800aefc:	e15c      	b.n	800b1b8 <_dtoa_r+0xbac>
 800aefe:	2300      	movs	r3, #0
 800af00:	0039      	movs	r1, r7
 800af02:	220a      	movs	r2, #10
 800af04:	9803      	ldr	r0, [sp, #12]
 800af06:	f000 fae3 	bl	800b4d0 <__multadd>
 800af0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af0c:	0007      	movs	r7, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dc55      	bgt.n	800afbe <_dtoa_r+0x9b2>
 800af12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af14:	2b02      	cmp	r3, #2
 800af16:	dc2d      	bgt.n	800af74 <_dtoa_r+0x968>
 800af18:	e051      	b.n	800afbe <_dtoa_r+0x9b2>
 800af1a:	2336      	movs	r3, #54	@ 0x36
 800af1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af1e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800af20:	9c06      	ldr	r4, [sp, #24]
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	e73c      	b.n	800ada0 <_dtoa_r+0x794>
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	1e5d      	subs	r5, r3, #1
 800af2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af2c:	42ab      	cmp	r3, r5
 800af2e:	db08      	blt.n	800af42 <_dtoa_r+0x936>
 800af30:	1b5d      	subs	r5, r3, r5
 800af32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af34:	9c06      	ldr	r4, [sp, #24]
 800af36:	2b00      	cmp	r3, #0
 800af38:	db00      	blt.n	800af3c <_dtoa_r+0x930>
 800af3a:	e731      	b.n	800ada0 <_dtoa_r+0x794>
 800af3c:	1ae4      	subs	r4, r4, r3
 800af3e:	2300      	movs	r3, #0
 800af40:	e72e      	b.n	800ada0 <_dtoa_r+0x794>
 800af42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af44:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af46:	1aeb      	subs	r3, r5, r3
 800af48:	18d3      	adds	r3, r2, r3
 800af4a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800af4c:	9314      	str	r3, [sp, #80]	@ 0x50
 800af4e:	2500      	movs	r5, #0
 800af50:	e7ef      	b.n	800af32 <_dtoa_r+0x926>
 800af52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af54:	e75e      	b.n	800ae14 <_dtoa_r+0x808>
 800af56:	2b04      	cmp	r3, #4
 800af58:	d0a8      	beq.n	800aeac <_dtoa_r+0x8a0>
 800af5a:	331c      	adds	r3, #28
 800af5c:	e79f      	b.n	800ae9e <_dtoa_r+0x892>
 800af5e:	0013      	movs	r3, r2
 800af60:	e7fb      	b.n	800af5a <_dtoa_r+0x94e>
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	930c      	str	r3, [sp, #48]	@ 0x30
 800af66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af68:	930e      	str	r3, [sp, #56]	@ 0x38
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	dc23      	bgt.n	800afb6 <_dtoa_r+0x9aa>
 800af6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af70:	2b02      	cmp	r3, #2
 800af72:	dd20      	ble.n	800afb6 <_dtoa_r+0x9aa>
 800af74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af76:	2b00      	cmp	r3, #0
 800af78:	d000      	beq.n	800af7c <_dtoa_r+0x970>
 800af7a:	e6b5      	b.n	800ace8 <_dtoa_r+0x6dc>
 800af7c:	0031      	movs	r1, r6
 800af7e:	2205      	movs	r2, #5
 800af80:	9803      	ldr	r0, [sp, #12]
 800af82:	f000 faa5 	bl	800b4d0 <__multadd>
 800af86:	0006      	movs	r6, r0
 800af88:	0001      	movs	r1, r0
 800af8a:	9805      	ldr	r0, [sp, #20]
 800af8c:	f000 fcc6 	bl	800b91c <__mcmp>
 800af90:	2800      	cmp	r0, #0
 800af92:	dc00      	bgt.n	800af96 <_dtoa_r+0x98a>
 800af94:	e6a8      	b.n	800ace8 <_dtoa_r+0x6dc>
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	9a08      	ldr	r2, [sp, #32]
 800af9a:	1c5c      	adds	r4, r3, #1
 800af9c:	2331      	movs	r3, #49	@ 0x31
 800af9e:	7013      	strb	r3, [r2, #0]
 800afa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afa2:	3301      	adds	r3, #1
 800afa4:	930c      	str	r3, [sp, #48]	@ 0x30
 800afa6:	e6a3      	b.n	800acf0 <_dtoa_r+0x6e4>
 800afa8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800afaa:	0037      	movs	r7, r6
 800afac:	e7f3      	b.n	800af96 <_dtoa_r+0x98a>
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800afb2:	930c      	str	r3, [sp, #48]	@ 0x30
 800afb4:	e7f9      	b.n	800afaa <_dtoa_r+0x99e>
 800afb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d100      	bne.n	800afbe <_dtoa_r+0x9b2>
 800afbc:	e100      	b.n	800b1c0 <_dtoa_r+0xbb4>
 800afbe:	2c00      	cmp	r4, #0
 800afc0:	dd05      	ble.n	800afce <_dtoa_r+0x9c2>
 800afc2:	0039      	movs	r1, r7
 800afc4:	0022      	movs	r2, r4
 800afc6:	9803      	ldr	r0, [sp, #12]
 800afc8:	f000 fc3c 	bl	800b844 <__lshift>
 800afcc:	0007      	movs	r7, r0
 800afce:	0038      	movs	r0, r7
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	d018      	beq.n	800b006 <_dtoa_r+0x9fa>
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	9803      	ldr	r0, [sp, #12]
 800afd8:	f000 fa12 	bl	800b400 <_Balloc>
 800afdc:	1e04      	subs	r4, r0, #0
 800afde:	d105      	bne.n	800afec <_dtoa_r+0x9e0>
 800afe0:	0022      	movs	r2, r4
 800afe2:	4b2b      	ldr	r3, [pc, #172]	@ (800b090 <_dtoa_r+0xa84>)
 800afe4:	482b      	ldr	r0, [pc, #172]	@ (800b094 <_dtoa_r+0xa88>)
 800afe6:	492c      	ldr	r1, [pc, #176]	@ (800b098 <_dtoa_r+0xa8c>)
 800afe8:	f7ff fb25 	bl	800a636 <_dtoa_r+0x2a>
 800afec:	0039      	movs	r1, r7
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	310c      	adds	r1, #12
 800aff2:	3202      	adds	r2, #2
 800aff4:	0092      	lsls	r2, r2, #2
 800aff6:	300c      	adds	r0, #12
 800aff8:	f7ff fa70 	bl	800a4dc <memcpy>
 800affc:	2201      	movs	r2, #1
 800affe:	0021      	movs	r1, r4
 800b000:	9803      	ldr	r0, [sp, #12]
 800b002:	f000 fc1f 	bl	800b844 <__lshift>
 800b006:	9b08      	ldr	r3, [sp, #32]
 800b008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b00a:	9306      	str	r3, [sp, #24]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	189b      	adds	r3, r3, r2
 800b010:	2201      	movs	r2, #1
 800b012:	9704      	str	r7, [sp, #16]
 800b014:	0007      	movs	r7, r0
 800b016:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b01a:	4013      	ands	r3, r2
 800b01c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b01e:	0031      	movs	r1, r6
 800b020:	9805      	ldr	r0, [sp, #20]
 800b022:	f7ff fa64 	bl	800a4ee <quorem>
 800b026:	9904      	ldr	r1, [sp, #16]
 800b028:	0005      	movs	r5, r0
 800b02a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b02c:	9805      	ldr	r0, [sp, #20]
 800b02e:	f000 fc75 	bl	800b91c <__mcmp>
 800b032:	003a      	movs	r2, r7
 800b034:	900d      	str	r0, [sp, #52]	@ 0x34
 800b036:	0031      	movs	r1, r6
 800b038:	9803      	ldr	r0, [sp, #12]
 800b03a:	f000 fc8b 	bl	800b954 <__mdiff>
 800b03e:	2201      	movs	r2, #1
 800b040:	68c3      	ldr	r3, [r0, #12]
 800b042:	0004      	movs	r4, r0
 800b044:	3530      	adds	r5, #48	@ 0x30
 800b046:	9209      	str	r2, [sp, #36]	@ 0x24
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <_dtoa_r+0xa4a>
 800b04c:	0001      	movs	r1, r0
 800b04e:	9805      	ldr	r0, [sp, #20]
 800b050:	f000 fc64 	bl	800b91c <__mcmp>
 800b054:	9009      	str	r0, [sp, #36]	@ 0x24
 800b056:	0021      	movs	r1, r4
 800b058:	9803      	ldr	r0, [sp, #12]
 800b05a:	f000 fa15 	bl	800b488 <_Bfree>
 800b05e:	9b06      	ldr	r3, [sp, #24]
 800b060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b062:	1c5c      	adds	r4, r3, #1
 800b064:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b066:	4313      	orrs	r3, r2
 800b068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b06a:	4313      	orrs	r3, r2
 800b06c:	d116      	bne.n	800b09c <_dtoa_r+0xa90>
 800b06e:	2d39      	cmp	r5, #57	@ 0x39
 800b070:	d02f      	beq.n	800b0d2 <_dtoa_r+0xac6>
 800b072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b074:	2b00      	cmp	r3, #0
 800b076:	dd01      	ble.n	800b07c <_dtoa_r+0xa70>
 800b078:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b07a:	3531      	adds	r5, #49	@ 0x31
 800b07c:	9b06      	ldr	r3, [sp, #24]
 800b07e:	701d      	strb	r5, [r3, #0]
 800b080:	e638      	b.n	800acf4 <_dtoa_r+0x6e8>
 800b082:	46c0      	nop			@ (mov r8, r8)
 800b084:	40240000 	.word	0x40240000
 800b088:	00000433 	.word	0x00000433
 800b08c:	7ff00000 	.word	0x7ff00000
 800b090:	0800d870 	.word	0x0800d870
 800b094:	0800d818 	.word	0x0800d818
 800b098:	000002ef 	.word	0x000002ef
 800b09c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	db04      	blt.n	800b0ac <_dtoa_r+0xaa0>
 800b0a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	d11e      	bne.n	800b0ea <_dtoa_r+0xade>
 800b0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	dde4      	ble.n	800b07c <_dtoa_r+0xa70>
 800b0b2:	9905      	ldr	r1, [sp, #20]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	9803      	ldr	r0, [sp, #12]
 800b0b8:	f000 fbc4 	bl	800b844 <__lshift>
 800b0bc:	0031      	movs	r1, r6
 800b0be:	9005      	str	r0, [sp, #20]
 800b0c0:	f000 fc2c 	bl	800b91c <__mcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dc02      	bgt.n	800b0ce <_dtoa_r+0xac2>
 800b0c8:	d1d8      	bne.n	800b07c <_dtoa_r+0xa70>
 800b0ca:	07eb      	lsls	r3, r5, #31
 800b0cc:	d5d6      	bpl.n	800b07c <_dtoa_r+0xa70>
 800b0ce:	2d39      	cmp	r5, #57	@ 0x39
 800b0d0:	d1d2      	bne.n	800b078 <_dtoa_r+0xa6c>
 800b0d2:	2339      	movs	r3, #57	@ 0x39
 800b0d4:	9a06      	ldr	r2, [sp, #24]
 800b0d6:	7013      	strb	r3, [r2, #0]
 800b0d8:	0023      	movs	r3, r4
 800b0da:	001c      	movs	r4, r3
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	2a39      	cmp	r2, #57	@ 0x39
 800b0e2:	d04f      	beq.n	800b184 <_dtoa_r+0xb78>
 800b0e4:	3201      	adds	r2, #1
 800b0e6:	701a      	strb	r2, [r3, #0]
 800b0e8:	e604      	b.n	800acf4 <_dtoa_r+0x6e8>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd03      	ble.n	800b0f8 <_dtoa_r+0xaec>
 800b0f0:	2d39      	cmp	r5, #57	@ 0x39
 800b0f2:	d0ee      	beq.n	800b0d2 <_dtoa_r+0xac6>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	e7c1      	b.n	800b07c <_dtoa_r+0xa70>
 800b0f8:	9b06      	ldr	r3, [sp, #24]
 800b0fa:	9a06      	ldr	r2, [sp, #24]
 800b0fc:	701d      	strb	r5, [r3, #0]
 800b0fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b100:	4293      	cmp	r3, r2
 800b102:	d02a      	beq.n	800b15a <_dtoa_r+0xb4e>
 800b104:	2300      	movs	r3, #0
 800b106:	220a      	movs	r2, #10
 800b108:	9905      	ldr	r1, [sp, #20]
 800b10a:	9803      	ldr	r0, [sp, #12]
 800b10c:	f000 f9e0 	bl	800b4d0 <__multadd>
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	9005      	str	r0, [sp, #20]
 800b114:	42bb      	cmp	r3, r7
 800b116:	d109      	bne.n	800b12c <_dtoa_r+0xb20>
 800b118:	2300      	movs	r3, #0
 800b11a:	220a      	movs	r2, #10
 800b11c:	9904      	ldr	r1, [sp, #16]
 800b11e:	9803      	ldr	r0, [sp, #12]
 800b120:	f000 f9d6 	bl	800b4d0 <__multadd>
 800b124:	9004      	str	r0, [sp, #16]
 800b126:	0007      	movs	r7, r0
 800b128:	9406      	str	r4, [sp, #24]
 800b12a:	e778      	b.n	800b01e <_dtoa_r+0xa12>
 800b12c:	9904      	ldr	r1, [sp, #16]
 800b12e:	2300      	movs	r3, #0
 800b130:	220a      	movs	r2, #10
 800b132:	9803      	ldr	r0, [sp, #12]
 800b134:	f000 f9cc 	bl	800b4d0 <__multadd>
 800b138:	2300      	movs	r3, #0
 800b13a:	9004      	str	r0, [sp, #16]
 800b13c:	220a      	movs	r2, #10
 800b13e:	0039      	movs	r1, r7
 800b140:	9803      	ldr	r0, [sp, #12]
 800b142:	f000 f9c5 	bl	800b4d0 <__multadd>
 800b146:	e7ee      	b.n	800b126 <_dtoa_r+0xb1a>
 800b148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b14a:	2401      	movs	r4, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dd00      	ble.n	800b152 <_dtoa_r+0xb46>
 800b150:	001c      	movs	r4, r3
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	191c      	adds	r4, r3, r4
 800b156:	2300      	movs	r3, #0
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	9905      	ldr	r1, [sp, #20]
 800b15c:	2201      	movs	r2, #1
 800b15e:	9803      	ldr	r0, [sp, #12]
 800b160:	f000 fb70 	bl	800b844 <__lshift>
 800b164:	0031      	movs	r1, r6
 800b166:	9005      	str	r0, [sp, #20]
 800b168:	f000 fbd8 	bl	800b91c <__mcmp>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	dcb3      	bgt.n	800b0d8 <_dtoa_r+0xacc>
 800b170:	d101      	bne.n	800b176 <_dtoa_r+0xb6a>
 800b172:	07ed      	lsls	r5, r5, #31
 800b174:	d4b0      	bmi.n	800b0d8 <_dtoa_r+0xacc>
 800b176:	0023      	movs	r3, r4
 800b178:	001c      	movs	r4, r3
 800b17a:	3b01      	subs	r3, #1
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	2a30      	cmp	r2, #48	@ 0x30
 800b180:	d0fa      	beq.n	800b178 <_dtoa_r+0xb6c>
 800b182:	e5b7      	b.n	800acf4 <_dtoa_r+0x6e8>
 800b184:	9a08      	ldr	r2, [sp, #32]
 800b186:	429a      	cmp	r2, r3
 800b188:	d1a7      	bne.n	800b0da <_dtoa_r+0xace>
 800b18a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b18c:	3301      	adds	r3, #1
 800b18e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b190:	2331      	movs	r3, #49	@ 0x31
 800b192:	7013      	strb	r3, [r2, #0]
 800b194:	e5ae      	b.n	800acf4 <_dtoa_r+0x6e8>
 800b196:	4b15      	ldr	r3, [pc, #84]	@ (800b1ec <_dtoa_r+0xbe0>)
 800b198:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b19a:	9308      	str	r3, [sp, #32]
 800b19c:	4b14      	ldr	r3, [pc, #80]	@ (800b1f0 <_dtoa_r+0xbe4>)
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	d001      	beq.n	800b1a6 <_dtoa_r+0xb9a>
 800b1a2:	f7ff fa7b 	bl	800a69c <_dtoa_r+0x90>
 800b1a6:	f7ff fa7b 	bl	800a6a0 <_dtoa_r+0x94>
 800b1aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	dc00      	bgt.n	800b1b2 <_dtoa_r+0xba6>
 800b1b0:	e648      	b.n	800ae44 <_dtoa_r+0x838>
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b1b6:	e665      	b.n	800ae84 <_dtoa_r+0x878>
 800b1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dc00      	bgt.n	800b1c0 <_dtoa_r+0xbb4>
 800b1be:	e6d6      	b.n	800af6e <_dtoa_r+0x962>
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	0031      	movs	r1, r6
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	f7ff f992 	bl	800a4ee <quorem>
 800b1ca:	9b08      	ldr	r3, [sp, #32]
 800b1cc:	3030      	adds	r0, #48	@ 0x30
 800b1ce:	5518      	strb	r0, [r3, r4]
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	0005      	movs	r5, r0
 800b1d6:	429c      	cmp	r4, r3
 800b1d8:	dab6      	bge.n	800b148 <_dtoa_r+0xb3c>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	220a      	movs	r2, #10
 800b1de:	9905      	ldr	r1, [sp, #20]
 800b1e0:	9803      	ldr	r0, [sp, #12]
 800b1e2:	f000 f975 	bl	800b4d0 <__multadd>
 800b1e6:	9005      	str	r0, [sp, #20]
 800b1e8:	e7eb      	b.n	800b1c2 <_dtoa_r+0xbb6>
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	0800d7f4 	.word	0x0800d7f4
 800b1f0:	0800d7fc 	.word	0x0800d7fc

0800b1f4 <_free_r>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	0005      	movs	r5, r0
 800b1f8:	1e0c      	subs	r4, r1, #0
 800b1fa:	d010      	beq.n	800b21e <_free_r+0x2a>
 800b1fc:	3c04      	subs	r4, #4
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	da00      	bge.n	800b206 <_free_r+0x12>
 800b204:	18e4      	adds	r4, r4, r3
 800b206:	0028      	movs	r0, r5
 800b208:	f000 f8ea 	bl	800b3e0 <__malloc_lock>
 800b20c:	4a1d      	ldr	r2, [pc, #116]	@ (800b284 <_free_r+0x90>)
 800b20e:	6813      	ldr	r3, [r2, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <_free_r+0x2c>
 800b214:	6063      	str	r3, [r4, #4]
 800b216:	6014      	str	r4, [r2, #0]
 800b218:	0028      	movs	r0, r5
 800b21a:	f000 f8e9 	bl	800b3f0 <__malloc_unlock>
 800b21e:	bd70      	pop	{r4, r5, r6, pc}
 800b220:	42a3      	cmp	r3, r4
 800b222:	d908      	bls.n	800b236 <_free_r+0x42>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	1821      	adds	r1, r4, r0
 800b228:	428b      	cmp	r3, r1
 800b22a:	d1f3      	bne.n	800b214 <_free_r+0x20>
 800b22c:	6819      	ldr	r1, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	1809      	adds	r1, r1, r0
 800b232:	6021      	str	r1, [r4, #0]
 800b234:	e7ee      	b.n	800b214 <_free_r+0x20>
 800b236:	001a      	movs	r2, r3
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <_free_r+0x4e>
 800b23e:	42a3      	cmp	r3, r4
 800b240:	d9f9      	bls.n	800b236 <_free_r+0x42>
 800b242:	6811      	ldr	r1, [r2, #0]
 800b244:	1850      	adds	r0, r2, r1
 800b246:	42a0      	cmp	r0, r4
 800b248:	d10b      	bne.n	800b262 <_free_r+0x6e>
 800b24a:	6820      	ldr	r0, [r4, #0]
 800b24c:	1809      	adds	r1, r1, r0
 800b24e:	1850      	adds	r0, r2, r1
 800b250:	6011      	str	r1, [r2, #0]
 800b252:	4283      	cmp	r3, r0
 800b254:	d1e0      	bne.n	800b218 <_free_r+0x24>
 800b256:	6818      	ldr	r0, [r3, #0]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	1841      	adds	r1, r0, r1
 800b25c:	6011      	str	r1, [r2, #0]
 800b25e:	6053      	str	r3, [r2, #4]
 800b260:	e7da      	b.n	800b218 <_free_r+0x24>
 800b262:	42a0      	cmp	r0, r4
 800b264:	d902      	bls.n	800b26c <_free_r+0x78>
 800b266:	230c      	movs	r3, #12
 800b268:	602b      	str	r3, [r5, #0]
 800b26a:	e7d5      	b.n	800b218 <_free_r+0x24>
 800b26c:	6820      	ldr	r0, [r4, #0]
 800b26e:	1821      	adds	r1, r4, r0
 800b270:	428b      	cmp	r3, r1
 800b272:	d103      	bne.n	800b27c <_free_r+0x88>
 800b274:	6819      	ldr	r1, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	1809      	adds	r1, r1, r0
 800b27a:	6021      	str	r1, [r4, #0]
 800b27c:	6063      	str	r3, [r4, #4]
 800b27e:	6054      	str	r4, [r2, #4]
 800b280:	e7ca      	b.n	800b218 <_free_r+0x24>
 800b282:	46c0      	nop			@ (mov r8, r8)
 800b284:	200007e8 	.word	0x200007e8

0800b288 <malloc>:
 800b288:	b510      	push	{r4, lr}
 800b28a:	4b03      	ldr	r3, [pc, #12]	@ (800b298 <malloc+0x10>)
 800b28c:	0001      	movs	r1, r0
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	f000 f826 	bl	800b2e0 <_malloc_r>
 800b294:	bd10      	pop	{r4, pc}
 800b296:	46c0      	nop			@ (mov r8, r8)
 800b298:	20000018 	.word	0x20000018

0800b29c <sbrk_aligned>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	4e0f      	ldr	r6, [pc, #60]	@ (800b2dc <sbrk_aligned+0x40>)
 800b2a0:	000d      	movs	r5, r1
 800b2a2:	6831      	ldr	r1, [r6, #0]
 800b2a4:	0004      	movs	r4, r0
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	d102      	bne.n	800b2b0 <sbrk_aligned+0x14>
 800b2aa:	f001 f843 	bl	800c334 <_sbrk_r>
 800b2ae:	6030      	str	r0, [r6, #0]
 800b2b0:	0029      	movs	r1, r5
 800b2b2:	0020      	movs	r0, r4
 800b2b4:	f001 f83e 	bl	800c334 <_sbrk_r>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d103      	bne.n	800b2c4 <sbrk_aligned+0x28>
 800b2bc:	2501      	movs	r5, #1
 800b2be:	426d      	negs	r5, r5
 800b2c0:	0028      	movs	r0, r5
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	1cc5      	adds	r5, r0, #3
 800b2c8:	439d      	bics	r5, r3
 800b2ca:	42a8      	cmp	r0, r5
 800b2cc:	d0f8      	beq.n	800b2c0 <sbrk_aligned+0x24>
 800b2ce:	1a29      	subs	r1, r5, r0
 800b2d0:	0020      	movs	r0, r4
 800b2d2:	f001 f82f 	bl	800c334 <_sbrk_r>
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d1f2      	bne.n	800b2c0 <sbrk_aligned+0x24>
 800b2da:	e7ef      	b.n	800b2bc <sbrk_aligned+0x20>
 800b2dc:	200007e4 	.word	0x200007e4

0800b2e0 <_malloc_r>:
 800b2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	1ccb      	adds	r3, r1, #3
 800b2e6:	4393      	bics	r3, r2
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	0005      	movs	r5, r0
 800b2ec:	001f      	movs	r7, r3
 800b2ee:	2b0c      	cmp	r3, #12
 800b2f0:	d234      	bcs.n	800b35c <_malloc_r+0x7c>
 800b2f2:	270c      	movs	r7, #12
 800b2f4:	42b9      	cmp	r1, r7
 800b2f6:	d833      	bhi.n	800b360 <_malloc_r+0x80>
 800b2f8:	0028      	movs	r0, r5
 800b2fa:	f000 f871 	bl	800b3e0 <__malloc_lock>
 800b2fe:	4e37      	ldr	r6, [pc, #220]	@ (800b3dc <_malloc_r+0xfc>)
 800b300:	6833      	ldr	r3, [r6, #0]
 800b302:	001c      	movs	r4, r3
 800b304:	2c00      	cmp	r4, #0
 800b306:	d12f      	bne.n	800b368 <_malloc_r+0x88>
 800b308:	0039      	movs	r1, r7
 800b30a:	0028      	movs	r0, r5
 800b30c:	f7ff ffc6 	bl	800b29c <sbrk_aligned>
 800b310:	0004      	movs	r4, r0
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d15f      	bne.n	800b3d6 <_malloc_r+0xf6>
 800b316:	6834      	ldr	r4, [r6, #0]
 800b318:	9400      	str	r4, [sp, #0]
 800b31a:	9b00      	ldr	r3, [sp, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d14a      	bne.n	800b3b6 <_malloc_r+0xd6>
 800b320:	2c00      	cmp	r4, #0
 800b322:	d052      	beq.n	800b3ca <_malloc_r+0xea>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	0028      	movs	r0, r5
 800b328:	18e3      	adds	r3, r4, r3
 800b32a:	9900      	ldr	r1, [sp, #0]
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f001 f801 	bl	800c334 <_sbrk_r>
 800b332:	9b01      	ldr	r3, [sp, #4]
 800b334:	4283      	cmp	r3, r0
 800b336:	d148      	bne.n	800b3ca <_malloc_r+0xea>
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	0028      	movs	r0, r5
 800b33c:	1aff      	subs	r7, r7, r3
 800b33e:	0039      	movs	r1, r7
 800b340:	f7ff ffac 	bl	800b29c <sbrk_aligned>
 800b344:	3001      	adds	r0, #1
 800b346:	d040      	beq.n	800b3ca <_malloc_r+0xea>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	19db      	adds	r3, r3, r7
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	6833      	ldr	r3, [r6, #0]
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	2a00      	cmp	r2, #0
 800b354:	d133      	bne.n	800b3be <_malloc_r+0xde>
 800b356:	9b00      	ldr	r3, [sp, #0]
 800b358:	6033      	str	r3, [r6, #0]
 800b35a:	e019      	b.n	800b390 <_malloc_r+0xb0>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	dac9      	bge.n	800b2f4 <_malloc_r+0x14>
 800b360:	230c      	movs	r3, #12
 800b362:	602b      	str	r3, [r5, #0]
 800b364:	2000      	movs	r0, #0
 800b366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b368:	6821      	ldr	r1, [r4, #0]
 800b36a:	1bc9      	subs	r1, r1, r7
 800b36c:	d420      	bmi.n	800b3b0 <_malloc_r+0xd0>
 800b36e:	290b      	cmp	r1, #11
 800b370:	d90a      	bls.n	800b388 <_malloc_r+0xa8>
 800b372:	19e2      	adds	r2, r4, r7
 800b374:	6027      	str	r7, [r4, #0]
 800b376:	42a3      	cmp	r3, r4
 800b378:	d104      	bne.n	800b384 <_malloc_r+0xa4>
 800b37a:	6032      	str	r2, [r6, #0]
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	6011      	str	r1, [r2, #0]
 800b380:	6053      	str	r3, [r2, #4]
 800b382:	e005      	b.n	800b390 <_malloc_r+0xb0>
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	e7f9      	b.n	800b37c <_malloc_r+0x9c>
 800b388:	6862      	ldr	r2, [r4, #4]
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	d10e      	bne.n	800b3ac <_malloc_r+0xcc>
 800b38e:	6032      	str	r2, [r6, #0]
 800b390:	0028      	movs	r0, r5
 800b392:	f000 f82d 	bl	800b3f0 <__malloc_unlock>
 800b396:	0020      	movs	r0, r4
 800b398:	2207      	movs	r2, #7
 800b39a:	300b      	adds	r0, #11
 800b39c:	1d23      	adds	r3, r4, #4
 800b39e:	4390      	bics	r0, r2
 800b3a0:	1ac2      	subs	r2, r0, r3
 800b3a2:	4298      	cmp	r0, r3
 800b3a4:	d0df      	beq.n	800b366 <_malloc_r+0x86>
 800b3a6:	1a1b      	subs	r3, r3, r0
 800b3a8:	50a3      	str	r3, [r4, r2]
 800b3aa:	e7dc      	b.n	800b366 <_malloc_r+0x86>
 800b3ac:	605a      	str	r2, [r3, #4]
 800b3ae:	e7ef      	b.n	800b390 <_malloc_r+0xb0>
 800b3b0:	0023      	movs	r3, r4
 800b3b2:	6864      	ldr	r4, [r4, #4]
 800b3b4:	e7a6      	b.n	800b304 <_malloc_r+0x24>
 800b3b6:	9c00      	ldr	r4, [sp, #0]
 800b3b8:	6863      	ldr	r3, [r4, #4]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	e7ad      	b.n	800b31a <_malloc_r+0x3a>
 800b3be:	001a      	movs	r2, r3
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	42a3      	cmp	r3, r4
 800b3c4:	d1fb      	bne.n	800b3be <_malloc_r+0xde>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e7da      	b.n	800b380 <_malloc_r+0xa0>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	0028      	movs	r0, r5
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	f000 f80e 	bl	800b3f0 <__malloc_unlock>
 800b3d4:	e7c6      	b.n	800b364 <_malloc_r+0x84>
 800b3d6:	6007      	str	r7, [r0, #0]
 800b3d8:	e7da      	b.n	800b390 <_malloc_r+0xb0>
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	200007e8 	.word	0x200007e8

0800b3e0 <__malloc_lock>:
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	4802      	ldr	r0, [pc, #8]	@ (800b3ec <__malloc_lock+0xc>)
 800b3e4:	f7ff f865 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	46c0      	nop			@ (mov r8, r8)
 800b3ec:	200007e0 	.word	0x200007e0

0800b3f0 <__malloc_unlock>:
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	4802      	ldr	r0, [pc, #8]	@ (800b3fc <__malloc_unlock+0xc>)
 800b3f4:	f7ff f85e 	bl	800a4b4 <__retarget_lock_release_recursive>
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	46c0      	nop			@ (mov r8, r8)
 800b3fc:	200007e0 	.word	0x200007e0

0800b400 <_Balloc>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	69c5      	ldr	r5, [r0, #28]
 800b404:	0006      	movs	r6, r0
 800b406:	000c      	movs	r4, r1
 800b408:	2d00      	cmp	r5, #0
 800b40a:	d10e      	bne.n	800b42a <_Balloc+0x2a>
 800b40c:	2010      	movs	r0, #16
 800b40e:	f7ff ff3b 	bl	800b288 <malloc>
 800b412:	1e02      	subs	r2, r0, #0
 800b414:	61f0      	str	r0, [r6, #28]
 800b416:	d104      	bne.n	800b422 <_Balloc+0x22>
 800b418:	216b      	movs	r1, #107	@ 0x6b
 800b41a:	4b19      	ldr	r3, [pc, #100]	@ (800b480 <_Balloc+0x80>)
 800b41c:	4819      	ldr	r0, [pc, #100]	@ (800b484 <_Balloc+0x84>)
 800b41e:	f000 ff9b 	bl	800c358 <__assert_func>
 800b422:	6045      	str	r5, [r0, #4]
 800b424:	6085      	str	r5, [r0, #8]
 800b426:	6005      	str	r5, [r0, #0]
 800b428:	60c5      	str	r5, [r0, #12]
 800b42a:	69f5      	ldr	r5, [r6, #28]
 800b42c:	68eb      	ldr	r3, [r5, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d013      	beq.n	800b45a <_Balloc+0x5a>
 800b432:	69f3      	ldr	r3, [r6, #28]
 800b434:	00a2      	lsls	r2, r4, #2
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	189b      	adds	r3, r3, r2
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d118      	bne.n	800b472 <_Balloc+0x72>
 800b440:	2101      	movs	r1, #1
 800b442:	000d      	movs	r5, r1
 800b444:	40a5      	lsls	r5, r4
 800b446:	1d6a      	adds	r2, r5, #5
 800b448:	0030      	movs	r0, r6
 800b44a:	0092      	lsls	r2, r2, #2
 800b44c:	f000 ffa2 	bl	800c394 <_calloc_r>
 800b450:	2800      	cmp	r0, #0
 800b452:	d00c      	beq.n	800b46e <_Balloc+0x6e>
 800b454:	6044      	str	r4, [r0, #4]
 800b456:	6085      	str	r5, [r0, #8]
 800b458:	e00d      	b.n	800b476 <_Balloc+0x76>
 800b45a:	2221      	movs	r2, #33	@ 0x21
 800b45c:	2104      	movs	r1, #4
 800b45e:	0030      	movs	r0, r6
 800b460:	f000 ff98 	bl	800c394 <_calloc_r>
 800b464:	69f3      	ldr	r3, [r6, #28]
 800b466:	60e8      	str	r0, [r5, #12]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e1      	bne.n	800b432 <_Balloc+0x32>
 800b46e:	2000      	movs	r0, #0
 800b470:	bd70      	pop	{r4, r5, r6, pc}
 800b472:	6802      	ldr	r2, [r0, #0]
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	2300      	movs	r3, #0
 800b478:	6103      	str	r3, [r0, #16]
 800b47a:	60c3      	str	r3, [r0, #12]
 800b47c:	e7f8      	b.n	800b470 <_Balloc+0x70>
 800b47e:	46c0      	nop			@ (mov r8, r8)
 800b480:	0800d801 	.word	0x0800d801
 800b484:	0800d881 	.word	0x0800d881

0800b488 <_Bfree>:
 800b488:	b570      	push	{r4, r5, r6, lr}
 800b48a:	69c6      	ldr	r6, [r0, #28]
 800b48c:	0005      	movs	r5, r0
 800b48e:	000c      	movs	r4, r1
 800b490:	2e00      	cmp	r6, #0
 800b492:	d10e      	bne.n	800b4b2 <_Bfree+0x2a>
 800b494:	2010      	movs	r0, #16
 800b496:	f7ff fef7 	bl	800b288 <malloc>
 800b49a:	1e02      	subs	r2, r0, #0
 800b49c:	61e8      	str	r0, [r5, #28]
 800b49e:	d104      	bne.n	800b4aa <_Bfree+0x22>
 800b4a0:	218f      	movs	r1, #143	@ 0x8f
 800b4a2:	4b09      	ldr	r3, [pc, #36]	@ (800b4c8 <_Bfree+0x40>)
 800b4a4:	4809      	ldr	r0, [pc, #36]	@ (800b4cc <_Bfree+0x44>)
 800b4a6:	f000 ff57 	bl	800c358 <__assert_func>
 800b4aa:	6046      	str	r6, [r0, #4]
 800b4ac:	6086      	str	r6, [r0, #8]
 800b4ae:	6006      	str	r6, [r0, #0]
 800b4b0:	60c6      	str	r6, [r0, #12]
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	d007      	beq.n	800b4c6 <_Bfree+0x3e>
 800b4b6:	69eb      	ldr	r3, [r5, #28]
 800b4b8:	6862      	ldr	r2, [r4, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	0092      	lsls	r2, r2, #2
 800b4be:	189b      	adds	r3, r3, r2
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	601c      	str	r4, [r3, #0]
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	0800d801 	.word	0x0800d801
 800b4cc:	0800d881 	.word	0x0800d881

0800b4d0 <__multadd>:
 800b4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4d2:	000f      	movs	r7, r1
 800b4d4:	9001      	str	r0, [sp, #4]
 800b4d6:	000c      	movs	r4, r1
 800b4d8:	001e      	movs	r6, r3
 800b4da:	2000      	movs	r0, #0
 800b4dc:	690d      	ldr	r5, [r1, #16]
 800b4de:	3714      	adds	r7, #20
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	b299      	uxth	r1, r3
 800b4e6:	4351      	muls	r1, r2
 800b4e8:	0c1b      	lsrs	r3, r3, #16
 800b4ea:	4353      	muls	r3, r2
 800b4ec:	1989      	adds	r1, r1, r6
 800b4ee:	0c0e      	lsrs	r6, r1, #16
 800b4f0:	199b      	adds	r3, r3, r6
 800b4f2:	0c1e      	lsrs	r6, r3, #16
 800b4f4:	b289      	uxth	r1, r1
 800b4f6:	041b      	lsls	r3, r3, #16
 800b4f8:	185b      	adds	r3, r3, r1
 800b4fa:	c708      	stmia	r7!, {r3}
 800b4fc:	4285      	cmp	r5, r0
 800b4fe:	dcef      	bgt.n	800b4e0 <__multadd+0x10>
 800b500:	2e00      	cmp	r6, #0
 800b502:	d022      	beq.n	800b54a <__multadd+0x7a>
 800b504:	68a3      	ldr	r3, [r4, #8]
 800b506:	42ab      	cmp	r3, r5
 800b508:	dc19      	bgt.n	800b53e <__multadd+0x6e>
 800b50a:	6861      	ldr	r1, [r4, #4]
 800b50c:	9801      	ldr	r0, [sp, #4]
 800b50e:	3101      	adds	r1, #1
 800b510:	f7ff ff76 	bl	800b400 <_Balloc>
 800b514:	1e07      	subs	r7, r0, #0
 800b516:	d105      	bne.n	800b524 <__multadd+0x54>
 800b518:	003a      	movs	r2, r7
 800b51a:	21ba      	movs	r1, #186	@ 0xba
 800b51c:	4b0c      	ldr	r3, [pc, #48]	@ (800b550 <__multadd+0x80>)
 800b51e:	480d      	ldr	r0, [pc, #52]	@ (800b554 <__multadd+0x84>)
 800b520:	f000 ff1a 	bl	800c358 <__assert_func>
 800b524:	0021      	movs	r1, r4
 800b526:	6922      	ldr	r2, [r4, #16]
 800b528:	310c      	adds	r1, #12
 800b52a:	3202      	adds	r2, #2
 800b52c:	0092      	lsls	r2, r2, #2
 800b52e:	300c      	adds	r0, #12
 800b530:	f7fe ffd4 	bl	800a4dc <memcpy>
 800b534:	0021      	movs	r1, r4
 800b536:	9801      	ldr	r0, [sp, #4]
 800b538:	f7ff ffa6 	bl	800b488 <_Bfree>
 800b53c:	003c      	movs	r4, r7
 800b53e:	1d2b      	adds	r3, r5, #4
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	18e3      	adds	r3, r4, r3
 800b544:	3501      	adds	r5, #1
 800b546:	605e      	str	r6, [r3, #4]
 800b548:	6125      	str	r5, [r4, #16]
 800b54a:	0020      	movs	r0, r4
 800b54c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b54e:	46c0      	nop			@ (mov r8, r8)
 800b550:	0800d870 	.word	0x0800d870
 800b554:	0800d881 	.word	0x0800d881

0800b558 <__hi0bits>:
 800b558:	2280      	movs	r2, #128	@ 0x80
 800b55a:	0003      	movs	r3, r0
 800b55c:	0252      	lsls	r2, r2, #9
 800b55e:	2000      	movs	r0, #0
 800b560:	4293      	cmp	r3, r2
 800b562:	d201      	bcs.n	800b568 <__hi0bits+0x10>
 800b564:	041b      	lsls	r3, r3, #16
 800b566:	3010      	adds	r0, #16
 800b568:	2280      	movs	r2, #128	@ 0x80
 800b56a:	0452      	lsls	r2, r2, #17
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d201      	bcs.n	800b574 <__hi0bits+0x1c>
 800b570:	3008      	adds	r0, #8
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	2280      	movs	r2, #128	@ 0x80
 800b576:	0552      	lsls	r2, r2, #21
 800b578:	4293      	cmp	r3, r2
 800b57a:	d201      	bcs.n	800b580 <__hi0bits+0x28>
 800b57c:	3004      	adds	r0, #4
 800b57e:	011b      	lsls	r3, r3, #4
 800b580:	2280      	movs	r2, #128	@ 0x80
 800b582:	05d2      	lsls	r2, r2, #23
 800b584:	4293      	cmp	r3, r2
 800b586:	d201      	bcs.n	800b58c <__hi0bits+0x34>
 800b588:	3002      	adds	r0, #2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	db03      	blt.n	800b598 <__hi0bits+0x40>
 800b590:	3001      	adds	r0, #1
 800b592:	4213      	tst	r3, r2
 800b594:	d100      	bne.n	800b598 <__hi0bits+0x40>
 800b596:	2020      	movs	r0, #32
 800b598:	4770      	bx	lr

0800b59a <__lo0bits>:
 800b59a:	6803      	ldr	r3, [r0, #0]
 800b59c:	0001      	movs	r1, r0
 800b59e:	2207      	movs	r2, #7
 800b5a0:	0018      	movs	r0, r3
 800b5a2:	4010      	ands	r0, r2
 800b5a4:	4213      	tst	r3, r2
 800b5a6:	d00d      	beq.n	800b5c4 <__lo0bits+0x2a>
 800b5a8:	3a06      	subs	r2, #6
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	4213      	tst	r3, r2
 800b5ae:	d105      	bne.n	800b5bc <__lo0bits+0x22>
 800b5b0:	3002      	adds	r0, #2
 800b5b2:	4203      	tst	r3, r0
 800b5b4:	d003      	beq.n	800b5be <__lo0bits+0x24>
 800b5b6:	40d3      	lsrs	r3, r2
 800b5b8:	0010      	movs	r0, r2
 800b5ba:	600b      	str	r3, [r1, #0]
 800b5bc:	4770      	bx	lr
 800b5be:	089b      	lsrs	r3, r3, #2
 800b5c0:	600b      	str	r3, [r1, #0]
 800b5c2:	e7fb      	b.n	800b5bc <__lo0bits+0x22>
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	d101      	bne.n	800b5ce <__lo0bits+0x34>
 800b5ca:	2010      	movs	r0, #16
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	b2da      	uxtb	r2, r3
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	d101      	bne.n	800b5d8 <__lo0bits+0x3e>
 800b5d4:	3008      	adds	r0, #8
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	071a      	lsls	r2, r3, #28
 800b5da:	d101      	bne.n	800b5e0 <__lo0bits+0x46>
 800b5dc:	3004      	adds	r0, #4
 800b5de:	091b      	lsrs	r3, r3, #4
 800b5e0:	079a      	lsls	r2, r3, #30
 800b5e2:	d101      	bne.n	800b5e8 <__lo0bits+0x4e>
 800b5e4:	3002      	adds	r0, #2
 800b5e6:	089b      	lsrs	r3, r3, #2
 800b5e8:	07da      	lsls	r2, r3, #31
 800b5ea:	d4e9      	bmi.n	800b5c0 <__lo0bits+0x26>
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	085b      	lsrs	r3, r3, #1
 800b5f0:	d1e6      	bne.n	800b5c0 <__lo0bits+0x26>
 800b5f2:	2020      	movs	r0, #32
 800b5f4:	e7e2      	b.n	800b5bc <__lo0bits+0x22>
	...

0800b5f8 <__i2b>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	000c      	movs	r4, r1
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	f7ff feff 	bl	800b400 <_Balloc>
 800b602:	2800      	cmp	r0, #0
 800b604:	d107      	bne.n	800b616 <__i2b+0x1e>
 800b606:	2146      	movs	r1, #70	@ 0x46
 800b608:	4c05      	ldr	r4, [pc, #20]	@ (800b620 <__i2b+0x28>)
 800b60a:	0002      	movs	r2, r0
 800b60c:	4b05      	ldr	r3, [pc, #20]	@ (800b624 <__i2b+0x2c>)
 800b60e:	0020      	movs	r0, r4
 800b610:	31ff      	adds	r1, #255	@ 0xff
 800b612:	f000 fea1 	bl	800c358 <__assert_func>
 800b616:	2301      	movs	r3, #1
 800b618:	6144      	str	r4, [r0, #20]
 800b61a:	6103      	str	r3, [r0, #16]
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	46c0      	nop			@ (mov r8, r8)
 800b620:	0800d881 	.word	0x0800d881
 800b624:	0800d870 	.word	0x0800d870

0800b628 <__multiply>:
 800b628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62a:	0014      	movs	r4, r2
 800b62c:	690a      	ldr	r2, [r1, #16]
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	000d      	movs	r5, r1
 800b632:	b08b      	sub	sp, #44	@ 0x2c
 800b634:	429a      	cmp	r2, r3
 800b636:	db02      	blt.n	800b63e <__multiply+0x16>
 800b638:	0023      	movs	r3, r4
 800b63a:	000c      	movs	r4, r1
 800b63c:	001d      	movs	r5, r3
 800b63e:	6927      	ldr	r7, [r4, #16]
 800b640:	692e      	ldr	r6, [r5, #16]
 800b642:	6861      	ldr	r1, [r4, #4]
 800b644:	19bb      	adds	r3, r7, r6
 800b646:	9303      	str	r3, [sp, #12]
 800b648:	68a3      	ldr	r3, [r4, #8]
 800b64a:	19ba      	adds	r2, r7, r6
 800b64c:	4293      	cmp	r3, r2
 800b64e:	da00      	bge.n	800b652 <__multiply+0x2a>
 800b650:	3101      	adds	r1, #1
 800b652:	f7ff fed5 	bl	800b400 <_Balloc>
 800b656:	9002      	str	r0, [sp, #8]
 800b658:	2800      	cmp	r0, #0
 800b65a:	d106      	bne.n	800b66a <__multiply+0x42>
 800b65c:	21b1      	movs	r1, #177	@ 0xb1
 800b65e:	4b49      	ldr	r3, [pc, #292]	@ (800b784 <__multiply+0x15c>)
 800b660:	4849      	ldr	r0, [pc, #292]	@ (800b788 <__multiply+0x160>)
 800b662:	9a02      	ldr	r2, [sp, #8]
 800b664:	0049      	lsls	r1, r1, #1
 800b666:	f000 fe77 	bl	800c358 <__assert_func>
 800b66a:	9b02      	ldr	r3, [sp, #8]
 800b66c:	2200      	movs	r2, #0
 800b66e:	3314      	adds	r3, #20
 800b670:	469c      	mov	ip, r3
 800b672:	19bb      	adds	r3, r7, r6
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4463      	add	r3, ip
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	4663      	mov	r3, ip
 800b67c:	9904      	ldr	r1, [sp, #16]
 800b67e:	428b      	cmp	r3, r1
 800b680:	d32a      	bcc.n	800b6d8 <__multiply+0xb0>
 800b682:	0023      	movs	r3, r4
 800b684:	00bf      	lsls	r7, r7, #2
 800b686:	3314      	adds	r3, #20
 800b688:	3514      	adds	r5, #20
 800b68a:	9308      	str	r3, [sp, #32]
 800b68c:	00b6      	lsls	r6, r6, #2
 800b68e:	19db      	adds	r3, r3, r7
 800b690:	9305      	str	r3, [sp, #20]
 800b692:	19ab      	adds	r3, r5, r6
 800b694:	9309      	str	r3, [sp, #36]	@ 0x24
 800b696:	2304      	movs	r3, #4
 800b698:	9306      	str	r3, [sp, #24]
 800b69a:	0023      	movs	r3, r4
 800b69c:	9a05      	ldr	r2, [sp, #20]
 800b69e:	3315      	adds	r3, #21
 800b6a0:	9501      	str	r5, [sp, #4]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d305      	bcc.n	800b6b2 <__multiply+0x8a>
 800b6a6:	1b13      	subs	r3, r2, r4
 800b6a8:	3b15      	subs	r3, #21
 800b6aa:	089b      	lsrs	r3, r3, #2
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	9306      	str	r3, [sp, #24]
 800b6b2:	9b01      	ldr	r3, [sp, #4]
 800b6b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d310      	bcc.n	800b6dc <__multiply+0xb4>
 800b6ba:	9b03      	ldr	r3, [sp, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	dd05      	ble.n	800b6cc <__multiply+0xa4>
 800b6c0:	9b04      	ldr	r3, [sp, #16]
 800b6c2:	3b04      	subs	r3, #4
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d056      	beq.n	800b77a <__multiply+0x152>
 800b6cc:	9b02      	ldr	r3, [sp, #8]
 800b6ce:	9a03      	ldr	r2, [sp, #12]
 800b6d0:	0018      	movs	r0, r3
 800b6d2:	611a      	str	r2, [r3, #16]
 800b6d4:	b00b      	add	sp, #44	@ 0x2c
 800b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d8:	c304      	stmia	r3!, {r2}
 800b6da:	e7cf      	b.n	800b67c <__multiply+0x54>
 800b6dc:	9b01      	ldr	r3, [sp, #4]
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	b280      	uxth	r0, r0
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d01e      	beq.n	800b724 <__multiply+0xfc>
 800b6e6:	4667      	mov	r7, ip
 800b6e8:	2500      	movs	r5, #0
 800b6ea:	9e08      	ldr	r6, [sp, #32]
 800b6ec:	ce02      	ldmia	r6!, {r1}
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	9307      	str	r3, [sp, #28]
 800b6f2:	b28b      	uxth	r3, r1
 800b6f4:	4343      	muls	r3, r0
 800b6f6:	001a      	movs	r2, r3
 800b6f8:	466b      	mov	r3, sp
 800b6fa:	0c09      	lsrs	r1, r1, #16
 800b6fc:	8b9b      	ldrh	r3, [r3, #28]
 800b6fe:	4341      	muls	r1, r0
 800b700:	18d3      	adds	r3, r2, r3
 800b702:	9a07      	ldr	r2, [sp, #28]
 800b704:	195b      	adds	r3, r3, r5
 800b706:	0c12      	lsrs	r2, r2, #16
 800b708:	1889      	adds	r1, r1, r2
 800b70a:	0c1a      	lsrs	r2, r3, #16
 800b70c:	188a      	adds	r2, r1, r2
 800b70e:	b29b      	uxth	r3, r3
 800b710:	0c15      	lsrs	r5, r2, #16
 800b712:	0412      	lsls	r2, r2, #16
 800b714:	431a      	orrs	r2, r3
 800b716:	9b05      	ldr	r3, [sp, #20]
 800b718:	c704      	stmia	r7!, {r2}
 800b71a:	42b3      	cmp	r3, r6
 800b71c:	d8e6      	bhi.n	800b6ec <__multiply+0xc4>
 800b71e:	4663      	mov	r3, ip
 800b720:	9a06      	ldr	r2, [sp, #24]
 800b722:	509d      	str	r5, [r3, r2]
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	0c00      	lsrs	r0, r0, #16
 800b72a:	d020      	beq.n	800b76e <__multiply+0x146>
 800b72c:	4663      	mov	r3, ip
 800b72e:	0025      	movs	r5, r4
 800b730:	4661      	mov	r1, ip
 800b732:	2700      	movs	r7, #0
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3514      	adds	r5, #20
 800b738:	682a      	ldr	r2, [r5, #0]
 800b73a:	680e      	ldr	r6, [r1, #0]
 800b73c:	b292      	uxth	r2, r2
 800b73e:	4342      	muls	r2, r0
 800b740:	0c36      	lsrs	r6, r6, #16
 800b742:	1992      	adds	r2, r2, r6
 800b744:	19d2      	adds	r2, r2, r7
 800b746:	0416      	lsls	r6, r2, #16
 800b748:	b29b      	uxth	r3, r3
 800b74a:	431e      	orrs	r6, r3
 800b74c:	600e      	str	r6, [r1, #0]
 800b74e:	cd40      	ldmia	r5!, {r6}
 800b750:	684b      	ldr	r3, [r1, #4]
 800b752:	0c36      	lsrs	r6, r6, #16
 800b754:	4346      	muls	r6, r0
 800b756:	b29b      	uxth	r3, r3
 800b758:	0c12      	lsrs	r2, r2, #16
 800b75a:	18f3      	adds	r3, r6, r3
 800b75c:	189b      	adds	r3, r3, r2
 800b75e:	9a05      	ldr	r2, [sp, #20]
 800b760:	0c1f      	lsrs	r7, r3, #16
 800b762:	3104      	adds	r1, #4
 800b764:	42aa      	cmp	r2, r5
 800b766:	d8e7      	bhi.n	800b738 <__multiply+0x110>
 800b768:	4662      	mov	r2, ip
 800b76a:	9906      	ldr	r1, [sp, #24]
 800b76c:	5053      	str	r3, [r2, r1]
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	3304      	adds	r3, #4
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	2304      	movs	r3, #4
 800b776:	449c      	add	ip, r3
 800b778:	e79b      	b.n	800b6b2 <__multiply+0x8a>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	e79b      	b.n	800b6ba <__multiply+0x92>
 800b782:	46c0      	nop			@ (mov r8, r8)
 800b784:	0800d870 	.word	0x0800d870
 800b788:	0800d881 	.word	0x0800d881

0800b78c <__pow5mult>:
 800b78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b78e:	2303      	movs	r3, #3
 800b790:	0015      	movs	r5, r2
 800b792:	0007      	movs	r7, r0
 800b794:	000e      	movs	r6, r1
 800b796:	401a      	ands	r2, r3
 800b798:	421d      	tst	r5, r3
 800b79a:	d008      	beq.n	800b7ae <__pow5mult+0x22>
 800b79c:	4925      	ldr	r1, [pc, #148]	@ (800b834 <__pow5mult+0xa8>)
 800b79e:	3a01      	subs	r2, #1
 800b7a0:	0092      	lsls	r2, r2, #2
 800b7a2:	5852      	ldr	r2, [r2, r1]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	0031      	movs	r1, r6
 800b7a8:	f7ff fe92 	bl	800b4d0 <__multadd>
 800b7ac:	0006      	movs	r6, r0
 800b7ae:	10ad      	asrs	r5, r5, #2
 800b7b0:	d03d      	beq.n	800b82e <__pow5mult+0xa2>
 800b7b2:	69fc      	ldr	r4, [r7, #28]
 800b7b4:	2c00      	cmp	r4, #0
 800b7b6:	d10f      	bne.n	800b7d8 <__pow5mult+0x4c>
 800b7b8:	2010      	movs	r0, #16
 800b7ba:	f7ff fd65 	bl	800b288 <malloc>
 800b7be:	1e02      	subs	r2, r0, #0
 800b7c0:	61f8      	str	r0, [r7, #28]
 800b7c2:	d105      	bne.n	800b7d0 <__pow5mult+0x44>
 800b7c4:	21b4      	movs	r1, #180	@ 0xb4
 800b7c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b838 <__pow5mult+0xac>)
 800b7c8:	481c      	ldr	r0, [pc, #112]	@ (800b83c <__pow5mult+0xb0>)
 800b7ca:	31ff      	adds	r1, #255	@ 0xff
 800b7cc:	f000 fdc4 	bl	800c358 <__assert_func>
 800b7d0:	6044      	str	r4, [r0, #4]
 800b7d2:	6084      	str	r4, [r0, #8]
 800b7d4:	6004      	str	r4, [r0, #0]
 800b7d6:	60c4      	str	r4, [r0, #12]
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	689c      	ldr	r4, [r3, #8]
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d108      	bne.n	800b7f4 <__pow5mult+0x68>
 800b7e2:	0038      	movs	r0, r7
 800b7e4:	4916      	ldr	r1, [pc, #88]	@ (800b840 <__pow5mult+0xb4>)
 800b7e6:	f7ff ff07 	bl	800b5f8 <__i2b>
 800b7ea:	9b01      	ldr	r3, [sp, #4]
 800b7ec:	0004      	movs	r4, r0
 800b7ee:	6098      	str	r0, [r3, #8]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	6003      	str	r3, [r0, #0]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	421d      	tst	r5, r3
 800b7f8:	d00a      	beq.n	800b810 <__pow5mult+0x84>
 800b7fa:	0031      	movs	r1, r6
 800b7fc:	0022      	movs	r2, r4
 800b7fe:	0038      	movs	r0, r7
 800b800:	f7ff ff12 	bl	800b628 <__multiply>
 800b804:	0031      	movs	r1, r6
 800b806:	9001      	str	r0, [sp, #4]
 800b808:	0038      	movs	r0, r7
 800b80a:	f7ff fe3d 	bl	800b488 <_Bfree>
 800b80e:	9e01      	ldr	r6, [sp, #4]
 800b810:	106d      	asrs	r5, r5, #1
 800b812:	d00c      	beq.n	800b82e <__pow5mult+0xa2>
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	2800      	cmp	r0, #0
 800b818:	d107      	bne.n	800b82a <__pow5mult+0x9e>
 800b81a:	0022      	movs	r2, r4
 800b81c:	0021      	movs	r1, r4
 800b81e:	0038      	movs	r0, r7
 800b820:	f7ff ff02 	bl	800b628 <__multiply>
 800b824:	2300      	movs	r3, #0
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	0004      	movs	r4, r0
 800b82c:	e7e2      	b.n	800b7f4 <__pow5mult+0x68>
 800b82e:	0030      	movs	r0, r6
 800b830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	0800d8dc 	.word	0x0800d8dc
 800b838:	0800d801 	.word	0x0800d801
 800b83c:	0800d881 	.word	0x0800d881
 800b840:	00000271 	.word	0x00000271

0800b844 <__lshift>:
 800b844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b846:	000c      	movs	r4, r1
 800b848:	0016      	movs	r6, r2
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	1157      	asrs	r7, r2, #5
 800b84e:	b085      	sub	sp, #20
 800b850:	18fb      	adds	r3, r7, r3
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	3301      	adds	r3, #1
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	6849      	ldr	r1, [r1, #4]
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	9002      	str	r0, [sp, #8]
 800b85e:	9a00      	ldr	r2, [sp, #0]
 800b860:	4293      	cmp	r3, r2
 800b862:	db10      	blt.n	800b886 <__lshift+0x42>
 800b864:	9802      	ldr	r0, [sp, #8]
 800b866:	f7ff fdcb 	bl	800b400 <_Balloc>
 800b86a:	2300      	movs	r3, #0
 800b86c:	0001      	movs	r1, r0
 800b86e:	0005      	movs	r5, r0
 800b870:	001a      	movs	r2, r3
 800b872:	3114      	adds	r1, #20
 800b874:	4298      	cmp	r0, r3
 800b876:	d10c      	bne.n	800b892 <__lshift+0x4e>
 800b878:	21ef      	movs	r1, #239	@ 0xef
 800b87a:	002a      	movs	r2, r5
 800b87c:	4b25      	ldr	r3, [pc, #148]	@ (800b914 <__lshift+0xd0>)
 800b87e:	4826      	ldr	r0, [pc, #152]	@ (800b918 <__lshift+0xd4>)
 800b880:	0049      	lsls	r1, r1, #1
 800b882:	f000 fd69 	bl	800c358 <__assert_func>
 800b886:	3101      	adds	r1, #1
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	e7e8      	b.n	800b85e <__lshift+0x1a>
 800b88c:	0098      	lsls	r0, r3, #2
 800b88e:	500a      	str	r2, [r1, r0]
 800b890:	3301      	adds	r3, #1
 800b892:	42bb      	cmp	r3, r7
 800b894:	dbfa      	blt.n	800b88c <__lshift+0x48>
 800b896:	43fb      	mvns	r3, r7
 800b898:	17db      	asrs	r3, r3, #31
 800b89a:	401f      	ands	r7, r3
 800b89c:	00bf      	lsls	r7, r7, #2
 800b89e:	0023      	movs	r3, r4
 800b8a0:	201f      	movs	r0, #31
 800b8a2:	19c9      	adds	r1, r1, r7
 800b8a4:	0037      	movs	r7, r6
 800b8a6:	6922      	ldr	r2, [r4, #16]
 800b8a8:	3314      	adds	r3, #20
 800b8aa:	0092      	lsls	r2, r2, #2
 800b8ac:	189a      	adds	r2, r3, r2
 800b8ae:	4007      	ands	r7, r0
 800b8b0:	4206      	tst	r6, r0
 800b8b2:	d029      	beq.n	800b908 <__lshift+0xc4>
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	1bc0      	subs	r0, r0, r7
 800b8b8:	9003      	str	r0, [sp, #12]
 800b8ba:	468c      	mov	ip, r1
 800b8bc:	2000      	movs	r0, #0
 800b8be:	681e      	ldr	r6, [r3, #0]
 800b8c0:	40be      	lsls	r6, r7
 800b8c2:	4306      	orrs	r6, r0
 800b8c4:	4660      	mov	r0, ip
 800b8c6:	c040      	stmia	r0!, {r6}
 800b8c8:	4684      	mov	ip, r0
 800b8ca:	9e03      	ldr	r6, [sp, #12]
 800b8cc:	cb01      	ldmia	r3!, {r0}
 800b8ce:	40f0      	lsrs	r0, r6
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d8f4      	bhi.n	800b8be <__lshift+0x7a>
 800b8d4:	0026      	movs	r6, r4
 800b8d6:	3615      	adds	r6, #21
 800b8d8:	2304      	movs	r3, #4
 800b8da:	42b2      	cmp	r2, r6
 800b8dc:	d304      	bcc.n	800b8e8 <__lshift+0xa4>
 800b8de:	1b13      	subs	r3, r2, r4
 800b8e0:	3b15      	subs	r3, #21
 800b8e2:	089b      	lsrs	r3, r3, #2
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	50c8      	str	r0, [r1, r3]
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d002      	beq.n	800b8f4 <__lshift+0xb0>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	9b00      	ldr	r3, [sp, #0]
 800b8f6:	9802      	ldr	r0, [sp, #8]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	0021      	movs	r1, r4
 800b8fc:	612b      	str	r3, [r5, #16]
 800b8fe:	f7ff fdc3 	bl	800b488 <_Bfree>
 800b902:	0028      	movs	r0, r5
 800b904:	b005      	add	sp, #20
 800b906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b908:	cb01      	ldmia	r3!, {r0}
 800b90a:	c101      	stmia	r1!, {r0}
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d8fb      	bhi.n	800b908 <__lshift+0xc4>
 800b910:	e7f0      	b.n	800b8f4 <__lshift+0xb0>
 800b912:	46c0      	nop			@ (mov r8, r8)
 800b914:	0800d870 	.word	0x0800d870
 800b918:	0800d881 	.word	0x0800d881

0800b91c <__mcmp>:
 800b91c:	b530      	push	{r4, r5, lr}
 800b91e:	690b      	ldr	r3, [r1, #16]
 800b920:	6904      	ldr	r4, [r0, #16]
 800b922:	0002      	movs	r2, r0
 800b924:	1ae0      	subs	r0, r4, r3
 800b926:	429c      	cmp	r4, r3
 800b928:	d10f      	bne.n	800b94a <__mcmp+0x2e>
 800b92a:	3214      	adds	r2, #20
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	3114      	adds	r1, #20
 800b930:	0014      	movs	r4, r2
 800b932:	18c9      	adds	r1, r1, r3
 800b934:	18d2      	adds	r2, r2, r3
 800b936:	3a04      	subs	r2, #4
 800b938:	3904      	subs	r1, #4
 800b93a:	6815      	ldr	r5, [r2, #0]
 800b93c:	680b      	ldr	r3, [r1, #0]
 800b93e:	429d      	cmp	r5, r3
 800b940:	d004      	beq.n	800b94c <__mcmp+0x30>
 800b942:	2001      	movs	r0, #1
 800b944:	429d      	cmp	r5, r3
 800b946:	d200      	bcs.n	800b94a <__mcmp+0x2e>
 800b948:	3802      	subs	r0, #2
 800b94a:	bd30      	pop	{r4, r5, pc}
 800b94c:	4294      	cmp	r4, r2
 800b94e:	d3f2      	bcc.n	800b936 <__mcmp+0x1a>
 800b950:	e7fb      	b.n	800b94a <__mcmp+0x2e>
	...

0800b954 <__mdiff>:
 800b954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b956:	000c      	movs	r4, r1
 800b958:	b087      	sub	sp, #28
 800b95a:	9000      	str	r0, [sp, #0]
 800b95c:	0011      	movs	r1, r2
 800b95e:	0020      	movs	r0, r4
 800b960:	0017      	movs	r7, r2
 800b962:	f7ff ffdb 	bl	800b91c <__mcmp>
 800b966:	1e05      	subs	r5, r0, #0
 800b968:	d110      	bne.n	800b98c <__mdiff+0x38>
 800b96a:	0001      	movs	r1, r0
 800b96c:	9800      	ldr	r0, [sp, #0]
 800b96e:	f7ff fd47 	bl	800b400 <_Balloc>
 800b972:	1e02      	subs	r2, r0, #0
 800b974:	d104      	bne.n	800b980 <__mdiff+0x2c>
 800b976:	4b40      	ldr	r3, [pc, #256]	@ (800ba78 <__mdiff+0x124>)
 800b978:	4840      	ldr	r0, [pc, #256]	@ (800ba7c <__mdiff+0x128>)
 800b97a:	4941      	ldr	r1, [pc, #260]	@ (800ba80 <__mdiff+0x12c>)
 800b97c:	f000 fcec 	bl	800c358 <__assert_func>
 800b980:	2301      	movs	r3, #1
 800b982:	6145      	str	r5, [r0, #20]
 800b984:	6103      	str	r3, [r0, #16]
 800b986:	0010      	movs	r0, r2
 800b988:	b007      	add	sp, #28
 800b98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b98c:	2600      	movs	r6, #0
 800b98e:	42b0      	cmp	r0, r6
 800b990:	da03      	bge.n	800b99a <__mdiff+0x46>
 800b992:	0023      	movs	r3, r4
 800b994:	003c      	movs	r4, r7
 800b996:	001f      	movs	r7, r3
 800b998:	3601      	adds	r6, #1
 800b99a:	6861      	ldr	r1, [r4, #4]
 800b99c:	9800      	ldr	r0, [sp, #0]
 800b99e:	f7ff fd2f 	bl	800b400 <_Balloc>
 800b9a2:	1e02      	subs	r2, r0, #0
 800b9a4:	d103      	bne.n	800b9ae <__mdiff+0x5a>
 800b9a6:	4b34      	ldr	r3, [pc, #208]	@ (800ba78 <__mdiff+0x124>)
 800b9a8:	4834      	ldr	r0, [pc, #208]	@ (800ba7c <__mdiff+0x128>)
 800b9aa:	4936      	ldr	r1, [pc, #216]	@ (800ba84 <__mdiff+0x130>)
 800b9ac:	e7e6      	b.n	800b97c <__mdiff+0x28>
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	3414      	adds	r4, #20
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	18e3      	adds	r3, r4, r3
 800b9b8:	0021      	movs	r1, r4
 800b9ba:	9401      	str	r4, [sp, #4]
 800b9bc:	003c      	movs	r4, r7
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	3414      	adds	r4, #20
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	18e3      	adds	r3, r4, r3
 800b9c8:	9303      	str	r3, [sp, #12]
 800b9ca:	0003      	movs	r3, r0
 800b9cc:	60c6      	str	r6, [r0, #12]
 800b9ce:	468c      	mov	ip, r1
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	3314      	adds	r3, #20
 800b9d4:	9304      	str	r3, [sp, #16]
 800b9d6:	9305      	str	r3, [sp, #20]
 800b9d8:	4663      	mov	r3, ip
 800b9da:	cb20      	ldmia	r3!, {r5}
 800b9dc:	b2a9      	uxth	r1, r5
 800b9de:	000e      	movs	r6, r1
 800b9e0:	469c      	mov	ip, r3
 800b9e2:	cc08      	ldmia	r4!, {r3}
 800b9e4:	0c2d      	lsrs	r5, r5, #16
 800b9e6:	b299      	uxth	r1, r3
 800b9e8:	1a71      	subs	r1, r6, r1
 800b9ea:	1809      	adds	r1, r1, r0
 800b9ec:	0c1b      	lsrs	r3, r3, #16
 800b9ee:	1408      	asrs	r0, r1, #16
 800b9f0:	1aeb      	subs	r3, r5, r3
 800b9f2:	181b      	adds	r3, r3, r0
 800b9f4:	1418      	asrs	r0, r3, #16
 800b9f6:	b289      	uxth	r1, r1
 800b9f8:	041b      	lsls	r3, r3, #16
 800b9fa:	4319      	orrs	r1, r3
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	c302      	stmia	r3!, {r1}
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	d8e7      	bhi.n	800b9d8 <__mdiff+0x84>
 800ba08:	0039      	movs	r1, r7
 800ba0a:	9c03      	ldr	r4, [sp, #12]
 800ba0c:	3115      	adds	r1, #21
 800ba0e:	2304      	movs	r3, #4
 800ba10:	428c      	cmp	r4, r1
 800ba12:	d304      	bcc.n	800ba1e <__mdiff+0xca>
 800ba14:	1be3      	subs	r3, r4, r7
 800ba16:	3b15      	subs	r3, #21
 800ba18:	089b      	lsrs	r3, r3, #2
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	9901      	ldr	r1, [sp, #4]
 800ba20:	18cd      	adds	r5, r1, r3
 800ba22:	9904      	ldr	r1, [sp, #16]
 800ba24:	002e      	movs	r6, r5
 800ba26:	18cb      	adds	r3, r1, r3
 800ba28:	001f      	movs	r7, r3
 800ba2a:	9902      	ldr	r1, [sp, #8]
 800ba2c:	428e      	cmp	r6, r1
 800ba2e:	d311      	bcc.n	800ba54 <__mdiff+0x100>
 800ba30:	9c02      	ldr	r4, [sp, #8]
 800ba32:	1ee9      	subs	r1, r5, #3
 800ba34:	2000      	movs	r0, #0
 800ba36:	428c      	cmp	r4, r1
 800ba38:	d304      	bcc.n	800ba44 <__mdiff+0xf0>
 800ba3a:	0021      	movs	r1, r4
 800ba3c:	3103      	adds	r1, #3
 800ba3e:	1b49      	subs	r1, r1, r5
 800ba40:	0889      	lsrs	r1, r1, #2
 800ba42:	0088      	lsls	r0, r1, #2
 800ba44:	181b      	adds	r3, r3, r0
 800ba46:	3b04      	subs	r3, #4
 800ba48:	6819      	ldr	r1, [r3, #0]
 800ba4a:	2900      	cmp	r1, #0
 800ba4c:	d010      	beq.n	800ba70 <__mdiff+0x11c>
 800ba4e:	9b00      	ldr	r3, [sp, #0]
 800ba50:	6113      	str	r3, [r2, #16]
 800ba52:	e798      	b.n	800b986 <__mdiff+0x32>
 800ba54:	4684      	mov	ip, r0
 800ba56:	ce02      	ldmia	r6!, {r1}
 800ba58:	b288      	uxth	r0, r1
 800ba5a:	4460      	add	r0, ip
 800ba5c:	1400      	asrs	r0, r0, #16
 800ba5e:	0c0c      	lsrs	r4, r1, #16
 800ba60:	1904      	adds	r4, r0, r4
 800ba62:	4461      	add	r1, ip
 800ba64:	1420      	asrs	r0, r4, #16
 800ba66:	b289      	uxth	r1, r1
 800ba68:	0424      	lsls	r4, r4, #16
 800ba6a:	4321      	orrs	r1, r4
 800ba6c:	c702      	stmia	r7!, {r1}
 800ba6e:	e7dc      	b.n	800ba2a <__mdiff+0xd6>
 800ba70:	9900      	ldr	r1, [sp, #0]
 800ba72:	3901      	subs	r1, #1
 800ba74:	9100      	str	r1, [sp, #0]
 800ba76:	e7e6      	b.n	800ba46 <__mdiff+0xf2>
 800ba78:	0800d870 	.word	0x0800d870
 800ba7c:	0800d881 	.word	0x0800d881
 800ba80:	00000237 	.word	0x00000237
 800ba84:	00000245 	.word	0x00000245

0800ba88 <__d2b>:
 800ba88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	0016      	movs	r6, r2
 800ba8e:	001f      	movs	r7, r3
 800ba90:	f7ff fcb6 	bl	800b400 <_Balloc>
 800ba94:	1e04      	subs	r4, r0, #0
 800ba96:	d105      	bne.n	800baa4 <__d2b+0x1c>
 800ba98:	0022      	movs	r2, r4
 800ba9a:	4b25      	ldr	r3, [pc, #148]	@ (800bb30 <__d2b+0xa8>)
 800ba9c:	4825      	ldr	r0, [pc, #148]	@ (800bb34 <__d2b+0xac>)
 800ba9e:	4926      	ldr	r1, [pc, #152]	@ (800bb38 <__d2b+0xb0>)
 800baa0:	f000 fc5a 	bl	800c358 <__assert_func>
 800baa4:	033b      	lsls	r3, r7, #12
 800baa6:	007d      	lsls	r5, r7, #1
 800baa8:	0b1b      	lsrs	r3, r3, #12
 800baaa:	0d6d      	lsrs	r5, r5, #21
 800baac:	d002      	beq.n	800bab4 <__d2b+0x2c>
 800baae:	2280      	movs	r2, #128	@ 0x80
 800bab0:	0352      	lsls	r2, r2, #13
 800bab2:	4313      	orrs	r3, r2
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	d025      	beq.n	800bb06 <__d2b+0x7e>
 800baba:	4668      	mov	r0, sp
 800babc:	9600      	str	r6, [sp, #0]
 800babe:	f7ff fd6c 	bl	800b59a <__lo0bits>
 800bac2:	9b01      	ldr	r3, [sp, #4]
 800bac4:	9900      	ldr	r1, [sp, #0]
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d01b      	beq.n	800bb02 <__d2b+0x7a>
 800baca:	2220      	movs	r2, #32
 800bacc:	001e      	movs	r6, r3
 800bace:	1a12      	subs	r2, r2, r0
 800bad0:	4096      	lsls	r6, r2
 800bad2:	0032      	movs	r2, r6
 800bad4:	40c3      	lsrs	r3, r0
 800bad6:	430a      	orrs	r2, r1
 800bad8:	6162      	str	r2, [r4, #20]
 800bada:	9301      	str	r3, [sp, #4]
 800badc:	9e01      	ldr	r6, [sp, #4]
 800bade:	61a6      	str	r6, [r4, #24]
 800bae0:	1e73      	subs	r3, r6, #1
 800bae2:	419e      	sbcs	r6, r3
 800bae4:	3601      	adds	r6, #1
 800bae6:	6126      	str	r6, [r4, #16]
 800bae8:	2d00      	cmp	r5, #0
 800baea:	d014      	beq.n	800bb16 <__d2b+0x8e>
 800baec:	2635      	movs	r6, #53	@ 0x35
 800baee:	4b13      	ldr	r3, [pc, #76]	@ (800bb3c <__d2b+0xb4>)
 800baf0:	18ed      	adds	r5, r5, r3
 800baf2:	9b08      	ldr	r3, [sp, #32]
 800baf4:	182d      	adds	r5, r5, r0
 800baf6:	601d      	str	r5, [r3, #0]
 800baf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafa:	1a36      	subs	r6, r6, r0
 800bafc:	601e      	str	r6, [r3, #0]
 800bafe:	0020      	movs	r0, r4
 800bb00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb02:	6161      	str	r1, [r4, #20]
 800bb04:	e7ea      	b.n	800badc <__d2b+0x54>
 800bb06:	a801      	add	r0, sp, #4
 800bb08:	f7ff fd47 	bl	800b59a <__lo0bits>
 800bb0c:	9b01      	ldr	r3, [sp, #4]
 800bb0e:	2601      	movs	r6, #1
 800bb10:	6163      	str	r3, [r4, #20]
 800bb12:	3020      	adds	r0, #32
 800bb14:	e7e7      	b.n	800bae6 <__d2b+0x5e>
 800bb16:	4b0a      	ldr	r3, [pc, #40]	@ (800bb40 <__d2b+0xb8>)
 800bb18:	18c0      	adds	r0, r0, r3
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	6018      	str	r0, [r3, #0]
 800bb1e:	4b09      	ldr	r3, [pc, #36]	@ (800bb44 <__d2b+0xbc>)
 800bb20:	18f3      	adds	r3, r6, r3
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	18e3      	adds	r3, r4, r3
 800bb26:	6958      	ldr	r0, [r3, #20]
 800bb28:	f7ff fd16 	bl	800b558 <__hi0bits>
 800bb2c:	0176      	lsls	r6, r6, #5
 800bb2e:	e7e3      	b.n	800baf8 <__d2b+0x70>
 800bb30:	0800d870 	.word	0x0800d870
 800bb34:	0800d881 	.word	0x0800d881
 800bb38:	0000030f 	.word	0x0000030f
 800bb3c:	fffffbcd 	.word	0xfffffbcd
 800bb40:	fffffbce 	.word	0xfffffbce
 800bb44:	3fffffff 	.word	0x3fffffff

0800bb48 <__ssputs_r>:
 800bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4a:	688e      	ldr	r6, [r1, #8]
 800bb4c:	b085      	sub	sp, #20
 800bb4e:	001f      	movs	r7, r3
 800bb50:	000c      	movs	r4, r1
 800bb52:	680b      	ldr	r3, [r1, #0]
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	9203      	str	r2, [sp, #12]
 800bb58:	42be      	cmp	r6, r7
 800bb5a:	d830      	bhi.n	800bbbe <__ssputs_r+0x76>
 800bb5c:	210c      	movs	r1, #12
 800bb5e:	5e62      	ldrsh	r2, [r4, r1]
 800bb60:	2190      	movs	r1, #144	@ 0x90
 800bb62:	00c9      	lsls	r1, r1, #3
 800bb64:	420a      	tst	r2, r1
 800bb66:	d028      	beq.n	800bbba <__ssputs_r+0x72>
 800bb68:	2003      	movs	r0, #3
 800bb6a:	6921      	ldr	r1, [r4, #16]
 800bb6c:	1a5b      	subs	r3, r3, r1
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	6963      	ldr	r3, [r4, #20]
 800bb72:	4343      	muls	r3, r0
 800bb74:	9801      	ldr	r0, [sp, #4]
 800bb76:	0fdd      	lsrs	r5, r3, #31
 800bb78:	18ed      	adds	r5, r5, r3
 800bb7a:	1c7b      	adds	r3, r7, #1
 800bb7c:	181b      	adds	r3, r3, r0
 800bb7e:	106d      	asrs	r5, r5, #1
 800bb80:	42ab      	cmp	r3, r5
 800bb82:	d900      	bls.n	800bb86 <__ssputs_r+0x3e>
 800bb84:	001d      	movs	r5, r3
 800bb86:	0552      	lsls	r2, r2, #21
 800bb88:	d528      	bpl.n	800bbdc <__ssputs_r+0x94>
 800bb8a:	0029      	movs	r1, r5
 800bb8c:	9802      	ldr	r0, [sp, #8]
 800bb8e:	f7ff fba7 	bl	800b2e0 <_malloc_r>
 800bb92:	1e06      	subs	r6, r0, #0
 800bb94:	d02c      	beq.n	800bbf0 <__ssputs_r+0xa8>
 800bb96:	9a01      	ldr	r2, [sp, #4]
 800bb98:	6921      	ldr	r1, [r4, #16]
 800bb9a:	f7fe fc9f 	bl	800a4dc <memcpy>
 800bb9e:	89a2      	ldrh	r2, [r4, #12]
 800bba0:	4b18      	ldr	r3, [pc, #96]	@ (800bc04 <__ssputs_r+0xbc>)
 800bba2:	401a      	ands	r2, r3
 800bba4:	2380      	movs	r3, #128	@ 0x80
 800bba6:	4313      	orrs	r3, r2
 800bba8:	81a3      	strh	r3, [r4, #12]
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	6126      	str	r6, [r4, #16]
 800bbae:	18f6      	adds	r6, r6, r3
 800bbb0:	6026      	str	r6, [r4, #0]
 800bbb2:	003e      	movs	r6, r7
 800bbb4:	6165      	str	r5, [r4, #20]
 800bbb6:	1aed      	subs	r5, r5, r3
 800bbb8:	60a5      	str	r5, [r4, #8]
 800bbba:	42be      	cmp	r6, r7
 800bbbc:	d900      	bls.n	800bbc0 <__ssputs_r+0x78>
 800bbbe:	003e      	movs	r6, r7
 800bbc0:	0032      	movs	r2, r6
 800bbc2:	9903      	ldr	r1, [sp, #12]
 800bbc4:	6820      	ldr	r0, [r4, #0]
 800bbc6:	f000 fb7e 	bl	800c2c6 <memmove>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	68a3      	ldr	r3, [r4, #8]
 800bbce:	1b9b      	subs	r3, r3, r6
 800bbd0:	60a3      	str	r3, [r4, #8]
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	199b      	adds	r3, r3, r6
 800bbd6:	6023      	str	r3, [r4, #0]
 800bbd8:	b005      	add	sp, #20
 800bbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbdc:	002a      	movs	r2, r5
 800bbde:	9802      	ldr	r0, [sp, #8]
 800bbe0:	f000 fc17 	bl	800c412 <_realloc_r>
 800bbe4:	1e06      	subs	r6, r0, #0
 800bbe6:	d1e0      	bne.n	800bbaa <__ssputs_r+0x62>
 800bbe8:	6921      	ldr	r1, [r4, #16]
 800bbea:	9802      	ldr	r0, [sp, #8]
 800bbec:	f7ff fb02 	bl	800b1f4 <_free_r>
 800bbf0:	230c      	movs	r3, #12
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	9a02      	ldr	r2, [sp, #8]
 800bbf6:	4240      	negs	r0, r0
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	89a2      	ldrh	r2, [r4, #12]
 800bbfc:	3334      	adds	r3, #52	@ 0x34
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	e7e9      	b.n	800bbd8 <__ssputs_r+0x90>
 800bc04:	fffffb7f 	.word	0xfffffb7f

0800bc08 <_svfiprintf_r>:
 800bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc0a:	b0a1      	sub	sp, #132	@ 0x84
 800bc0c:	9003      	str	r0, [sp, #12]
 800bc0e:	001d      	movs	r5, r3
 800bc10:	898b      	ldrh	r3, [r1, #12]
 800bc12:	000f      	movs	r7, r1
 800bc14:	0016      	movs	r6, r2
 800bc16:	061b      	lsls	r3, r3, #24
 800bc18:	d511      	bpl.n	800bc3e <_svfiprintf_r+0x36>
 800bc1a:	690b      	ldr	r3, [r1, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10e      	bne.n	800bc3e <_svfiprintf_r+0x36>
 800bc20:	2140      	movs	r1, #64	@ 0x40
 800bc22:	f7ff fb5d 	bl	800b2e0 <_malloc_r>
 800bc26:	6038      	str	r0, [r7, #0]
 800bc28:	6138      	str	r0, [r7, #16]
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d105      	bne.n	800bc3a <_svfiprintf_r+0x32>
 800bc2e:	230c      	movs	r3, #12
 800bc30:	9a03      	ldr	r2, [sp, #12]
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	2001      	movs	r0, #1
 800bc36:	4240      	negs	r0, r0
 800bc38:	e0cf      	b.n	800bdda <_svfiprintf_r+0x1d2>
 800bc3a:	2340      	movs	r3, #64	@ 0x40
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	ac08      	add	r4, sp, #32
 800bc42:	6163      	str	r3, [r4, #20]
 800bc44:	3320      	adds	r3, #32
 800bc46:	7663      	strb	r3, [r4, #25]
 800bc48:	3310      	adds	r3, #16
 800bc4a:	76a3      	strb	r3, [r4, #26]
 800bc4c:	9507      	str	r5, [sp, #28]
 800bc4e:	0035      	movs	r5, r6
 800bc50:	782b      	ldrb	r3, [r5, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <_svfiprintf_r+0x52>
 800bc56:	2b25      	cmp	r3, #37	@ 0x25
 800bc58:	d148      	bne.n	800bcec <_svfiprintf_r+0xe4>
 800bc5a:	1bab      	subs	r3, r5, r6
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	42b5      	cmp	r5, r6
 800bc60:	d00b      	beq.n	800bc7a <_svfiprintf_r+0x72>
 800bc62:	0032      	movs	r2, r6
 800bc64:	0039      	movs	r1, r7
 800bc66:	9803      	ldr	r0, [sp, #12]
 800bc68:	f7ff ff6e 	bl	800bb48 <__ssputs_r>
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d100      	bne.n	800bc72 <_svfiprintf_r+0x6a>
 800bc70:	e0ae      	b.n	800bdd0 <_svfiprintf_r+0x1c8>
 800bc72:	6963      	ldr	r3, [r4, #20]
 800bc74:	9a05      	ldr	r2, [sp, #20]
 800bc76:	189b      	adds	r3, r3, r2
 800bc78:	6163      	str	r3, [r4, #20]
 800bc7a:	782b      	ldrb	r3, [r5, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d100      	bne.n	800bc82 <_svfiprintf_r+0x7a>
 800bc80:	e0a6      	b.n	800bdd0 <_svfiprintf_r+0x1c8>
 800bc82:	2201      	movs	r2, #1
 800bc84:	2300      	movs	r3, #0
 800bc86:	4252      	negs	r2, r2
 800bc88:	6062      	str	r2, [r4, #4]
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	3254      	adds	r2, #84	@ 0x54
 800bc8e:	1852      	adds	r2, r2, r1
 800bc90:	1c6e      	adds	r6, r5, #1
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	60e3      	str	r3, [r4, #12]
 800bc96:	60a3      	str	r3, [r4, #8]
 800bc98:	7013      	strb	r3, [r2, #0]
 800bc9a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bc9c:	4b54      	ldr	r3, [pc, #336]	@ (800bdf0 <_svfiprintf_r+0x1e8>)
 800bc9e:	2205      	movs	r2, #5
 800bca0:	0018      	movs	r0, r3
 800bca2:	7831      	ldrb	r1, [r6, #0]
 800bca4:	9305      	str	r3, [sp, #20]
 800bca6:	f7fe fc0e 	bl	800a4c6 <memchr>
 800bcaa:	1c75      	adds	r5, r6, #1
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d11f      	bne.n	800bcf0 <_svfiprintf_r+0xe8>
 800bcb0:	6822      	ldr	r2, [r4, #0]
 800bcb2:	06d3      	lsls	r3, r2, #27
 800bcb4:	d504      	bpl.n	800bcc0 <_svfiprintf_r+0xb8>
 800bcb6:	2353      	movs	r3, #83	@ 0x53
 800bcb8:	a904      	add	r1, sp, #16
 800bcba:	185b      	adds	r3, r3, r1
 800bcbc:	2120      	movs	r1, #32
 800bcbe:	7019      	strb	r1, [r3, #0]
 800bcc0:	0713      	lsls	r3, r2, #28
 800bcc2:	d504      	bpl.n	800bcce <_svfiprintf_r+0xc6>
 800bcc4:	2353      	movs	r3, #83	@ 0x53
 800bcc6:	a904      	add	r1, sp, #16
 800bcc8:	185b      	adds	r3, r3, r1
 800bcca:	212b      	movs	r1, #43	@ 0x2b
 800bccc:	7019      	strb	r1, [r3, #0]
 800bcce:	7833      	ldrb	r3, [r6, #0]
 800bcd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcd2:	d016      	beq.n	800bd02 <_svfiprintf_r+0xfa>
 800bcd4:	0035      	movs	r5, r6
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	200a      	movs	r0, #10
 800bcda:	68e3      	ldr	r3, [r4, #12]
 800bcdc:	782a      	ldrb	r2, [r5, #0]
 800bcde:	1c6e      	adds	r6, r5, #1
 800bce0:	3a30      	subs	r2, #48	@ 0x30
 800bce2:	2a09      	cmp	r2, #9
 800bce4:	d950      	bls.n	800bd88 <_svfiprintf_r+0x180>
 800bce6:	2900      	cmp	r1, #0
 800bce8:	d111      	bne.n	800bd0e <_svfiprintf_r+0x106>
 800bcea:	e017      	b.n	800bd1c <_svfiprintf_r+0x114>
 800bcec:	3501      	adds	r5, #1
 800bcee:	e7af      	b.n	800bc50 <_svfiprintf_r+0x48>
 800bcf0:	9b05      	ldr	r3, [sp, #20]
 800bcf2:	6822      	ldr	r2, [r4, #0]
 800bcf4:	1ac0      	subs	r0, r0, r3
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4083      	lsls	r3, r0
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	002e      	movs	r6, r5
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	e7cc      	b.n	800bc9c <_svfiprintf_r+0x94>
 800bd02:	9b07      	ldr	r3, [sp, #28]
 800bd04:	1d19      	adds	r1, r3, #4
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	9107      	str	r1, [sp, #28]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	db01      	blt.n	800bd12 <_svfiprintf_r+0x10a>
 800bd0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd10:	e004      	b.n	800bd1c <_svfiprintf_r+0x114>
 800bd12:	425b      	negs	r3, r3
 800bd14:	60e3      	str	r3, [r4, #12]
 800bd16:	2302      	movs	r3, #2
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	6023      	str	r3, [r4, #0]
 800bd1c:	782b      	ldrb	r3, [r5, #0]
 800bd1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd20:	d10c      	bne.n	800bd3c <_svfiprintf_r+0x134>
 800bd22:	786b      	ldrb	r3, [r5, #1]
 800bd24:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd26:	d134      	bne.n	800bd92 <_svfiprintf_r+0x18a>
 800bd28:	9b07      	ldr	r3, [sp, #28]
 800bd2a:	3502      	adds	r5, #2
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	9207      	str	r2, [sp, #28]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da01      	bge.n	800bd3a <_svfiprintf_r+0x132>
 800bd36:	2301      	movs	r3, #1
 800bd38:	425b      	negs	r3, r3
 800bd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd3c:	4e2d      	ldr	r6, [pc, #180]	@ (800bdf4 <_svfiprintf_r+0x1ec>)
 800bd3e:	2203      	movs	r2, #3
 800bd40:	0030      	movs	r0, r6
 800bd42:	7829      	ldrb	r1, [r5, #0]
 800bd44:	f7fe fbbf 	bl	800a4c6 <memchr>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d006      	beq.n	800bd5a <_svfiprintf_r+0x152>
 800bd4c:	2340      	movs	r3, #64	@ 0x40
 800bd4e:	1b80      	subs	r0, r0, r6
 800bd50:	4083      	lsls	r3, r0
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	3501      	adds	r5, #1
 800bd56:	4313      	orrs	r3, r2
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	7829      	ldrb	r1, [r5, #0]
 800bd5c:	2206      	movs	r2, #6
 800bd5e:	4826      	ldr	r0, [pc, #152]	@ (800bdf8 <_svfiprintf_r+0x1f0>)
 800bd60:	1c6e      	adds	r6, r5, #1
 800bd62:	7621      	strb	r1, [r4, #24]
 800bd64:	f7fe fbaf 	bl	800a4c6 <memchr>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d038      	beq.n	800bdde <_svfiprintf_r+0x1d6>
 800bd6c:	4b23      	ldr	r3, [pc, #140]	@ (800bdfc <_svfiprintf_r+0x1f4>)
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d122      	bne.n	800bdb8 <_svfiprintf_r+0x1b0>
 800bd72:	2207      	movs	r2, #7
 800bd74:	9b07      	ldr	r3, [sp, #28]
 800bd76:	3307      	adds	r3, #7
 800bd78:	4393      	bics	r3, r2
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	9307      	str	r3, [sp, #28]
 800bd7e:	6963      	ldr	r3, [r4, #20]
 800bd80:	9a04      	ldr	r2, [sp, #16]
 800bd82:	189b      	adds	r3, r3, r2
 800bd84:	6163      	str	r3, [r4, #20]
 800bd86:	e762      	b.n	800bc4e <_svfiprintf_r+0x46>
 800bd88:	4343      	muls	r3, r0
 800bd8a:	0035      	movs	r5, r6
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	189b      	adds	r3, r3, r2
 800bd90:	e7a4      	b.n	800bcdc <_svfiprintf_r+0xd4>
 800bd92:	2300      	movs	r3, #0
 800bd94:	200a      	movs	r0, #10
 800bd96:	0019      	movs	r1, r3
 800bd98:	3501      	adds	r5, #1
 800bd9a:	6063      	str	r3, [r4, #4]
 800bd9c:	782a      	ldrb	r2, [r5, #0]
 800bd9e:	1c6e      	adds	r6, r5, #1
 800bda0:	3a30      	subs	r2, #48	@ 0x30
 800bda2:	2a09      	cmp	r2, #9
 800bda4:	d903      	bls.n	800bdae <_svfiprintf_r+0x1a6>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0c8      	beq.n	800bd3c <_svfiprintf_r+0x134>
 800bdaa:	9109      	str	r1, [sp, #36]	@ 0x24
 800bdac:	e7c6      	b.n	800bd3c <_svfiprintf_r+0x134>
 800bdae:	4341      	muls	r1, r0
 800bdb0:	0035      	movs	r5, r6
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	1889      	adds	r1, r1, r2
 800bdb6:	e7f1      	b.n	800bd9c <_svfiprintf_r+0x194>
 800bdb8:	aa07      	add	r2, sp, #28
 800bdba:	9200      	str	r2, [sp, #0]
 800bdbc:	0021      	movs	r1, r4
 800bdbe:	003a      	movs	r2, r7
 800bdc0:	4b0f      	ldr	r3, [pc, #60]	@ (800be00 <_svfiprintf_r+0x1f8>)
 800bdc2:	9803      	ldr	r0, [sp, #12]
 800bdc4:	f7fd fce0 	bl	8009788 <_printf_float>
 800bdc8:	9004      	str	r0, [sp, #16]
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	d1d6      	bne.n	800bd7e <_svfiprintf_r+0x176>
 800bdd0:	89bb      	ldrh	r3, [r7, #12]
 800bdd2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bdd4:	065b      	lsls	r3, r3, #25
 800bdd6:	d500      	bpl.n	800bdda <_svfiprintf_r+0x1d2>
 800bdd8:	e72c      	b.n	800bc34 <_svfiprintf_r+0x2c>
 800bdda:	b021      	add	sp, #132	@ 0x84
 800bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdde:	aa07      	add	r2, sp, #28
 800bde0:	9200      	str	r2, [sp, #0]
 800bde2:	0021      	movs	r1, r4
 800bde4:	003a      	movs	r2, r7
 800bde6:	4b06      	ldr	r3, [pc, #24]	@ (800be00 <_svfiprintf_r+0x1f8>)
 800bde8:	9803      	ldr	r0, [sp, #12]
 800bdea:	f7fd ff7b 	bl	8009ce4 <_printf_i>
 800bdee:	e7eb      	b.n	800bdc8 <_svfiprintf_r+0x1c0>
 800bdf0:	0800d9d8 	.word	0x0800d9d8
 800bdf4:	0800d9de 	.word	0x0800d9de
 800bdf8:	0800d9e2 	.word	0x0800d9e2
 800bdfc:	08009789 	.word	0x08009789
 800be00:	0800bb49 	.word	0x0800bb49

0800be04 <__sfputc_r>:
 800be04:	6893      	ldr	r3, [r2, #8]
 800be06:	b510      	push	{r4, lr}
 800be08:	3b01      	subs	r3, #1
 800be0a:	6093      	str	r3, [r2, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	da04      	bge.n	800be1a <__sfputc_r+0x16>
 800be10:	6994      	ldr	r4, [r2, #24]
 800be12:	42a3      	cmp	r3, r4
 800be14:	db07      	blt.n	800be26 <__sfputc_r+0x22>
 800be16:	290a      	cmp	r1, #10
 800be18:	d005      	beq.n	800be26 <__sfputc_r+0x22>
 800be1a:	6813      	ldr	r3, [r2, #0]
 800be1c:	1c58      	adds	r0, r3, #1
 800be1e:	6010      	str	r0, [r2, #0]
 800be20:	7019      	strb	r1, [r3, #0]
 800be22:	0008      	movs	r0, r1
 800be24:	bd10      	pop	{r4, pc}
 800be26:	f7fe fa0b 	bl	800a240 <__swbuf_r>
 800be2a:	0001      	movs	r1, r0
 800be2c:	e7f9      	b.n	800be22 <__sfputc_r+0x1e>

0800be2e <__sfputs_r>:
 800be2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be30:	0006      	movs	r6, r0
 800be32:	000f      	movs	r7, r1
 800be34:	0014      	movs	r4, r2
 800be36:	18d5      	adds	r5, r2, r3
 800be38:	42ac      	cmp	r4, r5
 800be3a:	d101      	bne.n	800be40 <__sfputs_r+0x12>
 800be3c:	2000      	movs	r0, #0
 800be3e:	e007      	b.n	800be50 <__sfputs_r+0x22>
 800be40:	7821      	ldrb	r1, [r4, #0]
 800be42:	003a      	movs	r2, r7
 800be44:	0030      	movs	r0, r6
 800be46:	f7ff ffdd 	bl	800be04 <__sfputc_r>
 800be4a:	3401      	adds	r4, #1
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d1f3      	bne.n	800be38 <__sfputs_r+0xa>
 800be50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be54 <_vfiprintf_r>:
 800be54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be56:	b0a1      	sub	sp, #132	@ 0x84
 800be58:	000f      	movs	r7, r1
 800be5a:	0015      	movs	r5, r2
 800be5c:	001e      	movs	r6, r3
 800be5e:	9003      	str	r0, [sp, #12]
 800be60:	2800      	cmp	r0, #0
 800be62:	d004      	beq.n	800be6e <_vfiprintf_r+0x1a>
 800be64:	6a03      	ldr	r3, [r0, #32]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <_vfiprintf_r+0x1a>
 800be6a:	f7fe f8d9 	bl	800a020 <__sinit>
 800be6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be70:	07db      	lsls	r3, r3, #31
 800be72:	d405      	bmi.n	800be80 <_vfiprintf_r+0x2c>
 800be74:	89bb      	ldrh	r3, [r7, #12]
 800be76:	059b      	lsls	r3, r3, #22
 800be78:	d402      	bmi.n	800be80 <_vfiprintf_r+0x2c>
 800be7a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800be7c:	f7fe fb19 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800be80:	89bb      	ldrh	r3, [r7, #12]
 800be82:	071b      	lsls	r3, r3, #28
 800be84:	d502      	bpl.n	800be8c <_vfiprintf_r+0x38>
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d113      	bne.n	800beb4 <_vfiprintf_r+0x60>
 800be8c:	0039      	movs	r1, r7
 800be8e:	9803      	ldr	r0, [sp, #12]
 800be90:	f7fe fa18 	bl	800a2c4 <__swsetup_r>
 800be94:	2800      	cmp	r0, #0
 800be96:	d00d      	beq.n	800beb4 <_vfiprintf_r+0x60>
 800be98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be9a:	07db      	lsls	r3, r3, #31
 800be9c:	d503      	bpl.n	800bea6 <_vfiprintf_r+0x52>
 800be9e:	2001      	movs	r0, #1
 800bea0:	4240      	negs	r0, r0
 800bea2:	b021      	add	sp, #132	@ 0x84
 800bea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea6:	89bb      	ldrh	r3, [r7, #12]
 800bea8:	059b      	lsls	r3, r3, #22
 800beaa:	d4f8      	bmi.n	800be9e <_vfiprintf_r+0x4a>
 800beac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800beae:	f7fe fb01 	bl	800a4b4 <__retarget_lock_release_recursive>
 800beb2:	e7f4      	b.n	800be9e <_vfiprintf_r+0x4a>
 800beb4:	2300      	movs	r3, #0
 800beb6:	ac08      	add	r4, sp, #32
 800beb8:	6163      	str	r3, [r4, #20]
 800beba:	3320      	adds	r3, #32
 800bebc:	7663      	strb	r3, [r4, #25]
 800bebe:	3310      	adds	r3, #16
 800bec0:	76a3      	strb	r3, [r4, #26]
 800bec2:	9607      	str	r6, [sp, #28]
 800bec4:	002e      	movs	r6, r5
 800bec6:	7833      	ldrb	r3, [r6, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <_vfiprintf_r+0x7c>
 800becc:	2b25      	cmp	r3, #37	@ 0x25
 800bece:	d148      	bne.n	800bf62 <_vfiprintf_r+0x10e>
 800bed0:	1b73      	subs	r3, r6, r5
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	42ae      	cmp	r6, r5
 800bed6:	d00b      	beq.n	800bef0 <_vfiprintf_r+0x9c>
 800bed8:	002a      	movs	r2, r5
 800beda:	0039      	movs	r1, r7
 800bedc:	9803      	ldr	r0, [sp, #12]
 800bede:	f7ff ffa6 	bl	800be2e <__sfputs_r>
 800bee2:	3001      	adds	r0, #1
 800bee4:	d100      	bne.n	800bee8 <_vfiprintf_r+0x94>
 800bee6:	e0ae      	b.n	800c046 <_vfiprintf_r+0x1f2>
 800bee8:	6963      	ldr	r3, [r4, #20]
 800beea:	9a05      	ldr	r2, [sp, #20]
 800beec:	189b      	adds	r3, r3, r2
 800beee:	6163      	str	r3, [r4, #20]
 800bef0:	7833      	ldrb	r3, [r6, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d100      	bne.n	800bef8 <_vfiprintf_r+0xa4>
 800bef6:	e0a6      	b.n	800c046 <_vfiprintf_r+0x1f2>
 800bef8:	2201      	movs	r2, #1
 800befa:	2300      	movs	r3, #0
 800befc:	4252      	negs	r2, r2
 800befe:	6062      	str	r2, [r4, #4]
 800bf00:	a904      	add	r1, sp, #16
 800bf02:	3254      	adds	r2, #84	@ 0x54
 800bf04:	1852      	adds	r2, r2, r1
 800bf06:	1c75      	adds	r5, r6, #1
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	60e3      	str	r3, [r4, #12]
 800bf0c:	60a3      	str	r3, [r4, #8]
 800bf0e:	7013      	strb	r3, [r2, #0]
 800bf10:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bf12:	4b59      	ldr	r3, [pc, #356]	@ (800c078 <_vfiprintf_r+0x224>)
 800bf14:	2205      	movs	r2, #5
 800bf16:	0018      	movs	r0, r3
 800bf18:	7829      	ldrb	r1, [r5, #0]
 800bf1a:	9305      	str	r3, [sp, #20]
 800bf1c:	f7fe fad3 	bl	800a4c6 <memchr>
 800bf20:	1c6e      	adds	r6, r5, #1
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d11f      	bne.n	800bf66 <_vfiprintf_r+0x112>
 800bf26:	6822      	ldr	r2, [r4, #0]
 800bf28:	06d3      	lsls	r3, r2, #27
 800bf2a:	d504      	bpl.n	800bf36 <_vfiprintf_r+0xe2>
 800bf2c:	2353      	movs	r3, #83	@ 0x53
 800bf2e:	a904      	add	r1, sp, #16
 800bf30:	185b      	adds	r3, r3, r1
 800bf32:	2120      	movs	r1, #32
 800bf34:	7019      	strb	r1, [r3, #0]
 800bf36:	0713      	lsls	r3, r2, #28
 800bf38:	d504      	bpl.n	800bf44 <_vfiprintf_r+0xf0>
 800bf3a:	2353      	movs	r3, #83	@ 0x53
 800bf3c:	a904      	add	r1, sp, #16
 800bf3e:	185b      	adds	r3, r3, r1
 800bf40:	212b      	movs	r1, #43	@ 0x2b
 800bf42:	7019      	strb	r1, [r3, #0]
 800bf44:	782b      	ldrb	r3, [r5, #0]
 800bf46:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf48:	d016      	beq.n	800bf78 <_vfiprintf_r+0x124>
 800bf4a:	002e      	movs	r6, r5
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	200a      	movs	r0, #10
 800bf50:	68e3      	ldr	r3, [r4, #12]
 800bf52:	7832      	ldrb	r2, [r6, #0]
 800bf54:	1c75      	adds	r5, r6, #1
 800bf56:	3a30      	subs	r2, #48	@ 0x30
 800bf58:	2a09      	cmp	r2, #9
 800bf5a:	d950      	bls.n	800bffe <_vfiprintf_r+0x1aa>
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	d111      	bne.n	800bf84 <_vfiprintf_r+0x130>
 800bf60:	e017      	b.n	800bf92 <_vfiprintf_r+0x13e>
 800bf62:	3601      	adds	r6, #1
 800bf64:	e7af      	b.n	800bec6 <_vfiprintf_r+0x72>
 800bf66:	9b05      	ldr	r3, [sp, #20]
 800bf68:	6822      	ldr	r2, [r4, #0]
 800bf6a:	1ac0      	subs	r0, r0, r3
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4083      	lsls	r3, r0
 800bf70:	4313      	orrs	r3, r2
 800bf72:	0035      	movs	r5, r6
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	e7cc      	b.n	800bf12 <_vfiprintf_r+0xbe>
 800bf78:	9b07      	ldr	r3, [sp, #28]
 800bf7a:	1d19      	adds	r1, r3, #4
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	9107      	str	r1, [sp, #28]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	db01      	blt.n	800bf88 <_vfiprintf_r+0x134>
 800bf84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf86:	e004      	b.n	800bf92 <_vfiprintf_r+0x13e>
 800bf88:	425b      	negs	r3, r3
 800bf8a:	60e3      	str	r3, [r4, #12]
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	7833      	ldrb	r3, [r6, #0]
 800bf94:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf96:	d10c      	bne.n	800bfb2 <_vfiprintf_r+0x15e>
 800bf98:	7873      	ldrb	r3, [r6, #1]
 800bf9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9c:	d134      	bne.n	800c008 <_vfiprintf_r+0x1b4>
 800bf9e:	9b07      	ldr	r3, [sp, #28]
 800bfa0:	3602      	adds	r6, #2
 800bfa2:	1d1a      	adds	r2, r3, #4
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	9207      	str	r2, [sp, #28]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	da01      	bge.n	800bfb0 <_vfiprintf_r+0x15c>
 800bfac:	2301      	movs	r3, #1
 800bfae:	425b      	negs	r3, r3
 800bfb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfb2:	4d32      	ldr	r5, [pc, #200]	@ (800c07c <_vfiprintf_r+0x228>)
 800bfb4:	2203      	movs	r2, #3
 800bfb6:	0028      	movs	r0, r5
 800bfb8:	7831      	ldrb	r1, [r6, #0]
 800bfba:	f7fe fa84 	bl	800a4c6 <memchr>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d006      	beq.n	800bfd0 <_vfiprintf_r+0x17c>
 800bfc2:	2340      	movs	r3, #64	@ 0x40
 800bfc4:	1b40      	subs	r0, r0, r5
 800bfc6:	4083      	lsls	r3, r0
 800bfc8:	6822      	ldr	r2, [r4, #0]
 800bfca:	3601      	adds	r6, #1
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	7831      	ldrb	r1, [r6, #0]
 800bfd2:	2206      	movs	r2, #6
 800bfd4:	482a      	ldr	r0, [pc, #168]	@ (800c080 <_vfiprintf_r+0x22c>)
 800bfd6:	1c75      	adds	r5, r6, #1
 800bfd8:	7621      	strb	r1, [r4, #24]
 800bfda:	f7fe fa74 	bl	800a4c6 <memchr>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d040      	beq.n	800c064 <_vfiprintf_r+0x210>
 800bfe2:	4b28      	ldr	r3, [pc, #160]	@ (800c084 <_vfiprintf_r+0x230>)
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d122      	bne.n	800c02e <_vfiprintf_r+0x1da>
 800bfe8:	2207      	movs	r2, #7
 800bfea:	9b07      	ldr	r3, [sp, #28]
 800bfec:	3307      	adds	r3, #7
 800bfee:	4393      	bics	r3, r2
 800bff0:	3308      	adds	r3, #8
 800bff2:	9307      	str	r3, [sp, #28]
 800bff4:	6963      	ldr	r3, [r4, #20]
 800bff6:	9a04      	ldr	r2, [sp, #16]
 800bff8:	189b      	adds	r3, r3, r2
 800bffa:	6163      	str	r3, [r4, #20]
 800bffc:	e762      	b.n	800bec4 <_vfiprintf_r+0x70>
 800bffe:	4343      	muls	r3, r0
 800c000:	002e      	movs	r6, r5
 800c002:	2101      	movs	r1, #1
 800c004:	189b      	adds	r3, r3, r2
 800c006:	e7a4      	b.n	800bf52 <_vfiprintf_r+0xfe>
 800c008:	2300      	movs	r3, #0
 800c00a:	200a      	movs	r0, #10
 800c00c:	0019      	movs	r1, r3
 800c00e:	3601      	adds	r6, #1
 800c010:	6063      	str	r3, [r4, #4]
 800c012:	7832      	ldrb	r2, [r6, #0]
 800c014:	1c75      	adds	r5, r6, #1
 800c016:	3a30      	subs	r2, #48	@ 0x30
 800c018:	2a09      	cmp	r2, #9
 800c01a:	d903      	bls.n	800c024 <_vfiprintf_r+0x1d0>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d0c8      	beq.n	800bfb2 <_vfiprintf_r+0x15e>
 800c020:	9109      	str	r1, [sp, #36]	@ 0x24
 800c022:	e7c6      	b.n	800bfb2 <_vfiprintf_r+0x15e>
 800c024:	4341      	muls	r1, r0
 800c026:	002e      	movs	r6, r5
 800c028:	2301      	movs	r3, #1
 800c02a:	1889      	adds	r1, r1, r2
 800c02c:	e7f1      	b.n	800c012 <_vfiprintf_r+0x1be>
 800c02e:	aa07      	add	r2, sp, #28
 800c030:	9200      	str	r2, [sp, #0]
 800c032:	0021      	movs	r1, r4
 800c034:	003a      	movs	r2, r7
 800c036:	4b14      	ldr	r3, [pc, #80]	@ (800c088 <_vfiprintf_r+0x234>)
 800c038:	9803      	ldr	r0, [sp, #12]
 800c03a:	f7fd fba5 	bl	8009788 <_printf_float>
 800c03e:	9004      	str	r0, [sp, #16]
 800c040:	9b04      	ldr	r3, [sp, #16]
 800c042:	3301      	adds	r3, #1
 800c044:	d1d6      	bne.n	800bff4 <_vfiprintf_r+0x1a0>
 800c046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c048:	07db      	lsls	r3, r3, #31
 800c04a:	d405      	bmi.n	800c058 <_vfiprintf_r+0x204>
 800c04c:	89bb      	ldrh	r3, [r7, #12]
 800c04e:	059b      	lsls	r3, r3, #22
 800c050:	d402      	bmi.n	800c058 <_vfiprintf_r+0x204>
 800c052:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c054:	f7fe fa2e 	bl	800a4b4 <__retarget_lock_release_recursive>
 800c058:	89bb      	ldrh	r3, [r7, #12]
 800c05a:	065b      	lsls	r3, r3, #25
 800c05c:	d500      	bpl.n	800c060 <_vfiprintf_r+0x20c>
 800c05e:	e71e      	b.n	800be9e <_vfiprintf_r+0x4a>
 800c060:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c062:	e71e      	b.n	800bea2 <_vfiprintf_r+0x4e>
 800c064:	aa07      	add	r2, sp, #28
 800c066:	9200      	str	r2, [sp, #0]
 800c068:	0021      	movs	r1, r4
 800c06a:	003a      	movs	r2, r7
 800c06c:	4b06      	ldr	r3, [pc, #24]	@ (800c088 <_vfiprintf_r+0x234>)
 800c06e:	9803      	ldr	r0, [sp, #12]
 800c070:	f7fd fe38 	bl	8009ce4 <_printf_i>
 800c074:	e7e3      	b.n	800c03e <_vfiprintf_r+0x1ea>
 800c076:	46c0      	nop			@ (mov r8, r8)
 800c078:	0800d9d8 	.word	0x0800d9d8
 800c07c:	0800d9de 	.word	0x0800d9de
 800c080:	0800d9e2 	.word	0x0800d9e2
 800c084:	08009789 	.word	0x08009789
 800c088:	0800be2f 	.word	0x0800be2f

0800c08c <__sflush_r>:
 800c08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c08e:	220c      	movs	r2, #12
 800c090:	5e8b      	ldrsh	r3, [r1, r2]
 800c092:	0005      	movs	r5, r0
 800c094:	000c      	movs	r4, r1
 800c096:	071a      	lsls	r2, r3, #28
 800c098:	d456      	bmi.n	800c148 <__sflush_r+0xbc>
 800c09a:	684a      	ldr	r2, [r1, #4]
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	dc02      	bgt.n	800c0a6 <__sflush_r+0x1a>
 800c0a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c0a2:	2a00      	cmp	r2, #0
 800c0a4:	dd4e      	ble.n	800c144 <__sflush_r+0xb8>
 800c0a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c0a8:	2f00      	cmp	r7, #0
 800c0aa:	d04b      	beq.n	800c144 <__sflush_r+0xb8>
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2080      	movs	r0, #128	@ 0x80
 800c0b0:	682e      	ldr	r6, [r5, #0]
 800c0b2:	602a      	str	r2, [r5, #0]
 800c0b4:	001a      	movs	r2, r3
 800c0b6:	0140      	lsls	r0, r0, #5
 800c0b8:	6a21      	ldr	r1, [r4, #32]
 800c0ba:	4002      	ands	r2, r0
 800c0bc:	4203      	tst	r3, r0
 800c0be:	d033      	beq.n	800c128 <__sflush_r+0x9c>
 800c0c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	075b      	lsls	r3, r3, #29
 800c0c6:	d506      	bpl.n	800c0d6 <__sflush_r+0x4a>
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	1ad2      	subs	r2, r2, r3
 800c0cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <__sflush_r+0x4a>
 800c0d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0d4:	1ad2      	subs	r2, r2, r3
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	0028      	movs	r0, r5
 800c0da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c0dc:	6a21      	ldr	r1, [r4, #32]
 800c0de:	47b8      	blx	r7
 800c0e0:	89a2      	ldrh	r2, [r4, #12]
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d106      	bne.n	800c0f4 <__sflush_r+0x68>
 800c0e6:	6829      	ldr	r1, [r5, #0]
 800c0e8:	291d      	cmp	r1, #29
 800c0ea:	d846      	bhi.n	800c17a <__sflush_r+0xee>
 800c0ec:	4b29      	ldr	r3, [pc, #164]	@ (800c194 <__sflush_r+0x108>)
 800c0ee:	410b      	asrs	r3, r1
 800c0f0:	07db      	lsls	r3, r3, #31
 800c0f2:	d442      	bmi.n	800c17a <__sflush_r+0xee>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	6063      	str	r3, [r4, #4]
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	04d2      	lsls	r2, r2, #19
 800c0fe:	d505      	bpl.n	800c10c <__sflush_r+0x80>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <__sflush_r+0x7e>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d100      	bne.n	800c10c <__sflush_r+0x80>
 800c10a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c10e:	602e      	str	r6, [r5, #0]
 800c110:	2900      	cmp	r1, #0
 800c112:	d017      	beq.n	800c144 <__sflush_r+0xb8>
 800c114:	0023      	movs	r3, r4
 800c116:	3344      	adds	r3, #68	@ 0x44
 800c118:	4299      	cmp	r1, r3
 800c11a:	d002      	beq.n	800c122 <__sflush_r+0x96>
 800c11c:	0028      	movs	r0, r5
 800c11e:	f7ff f869 	bl	800b1f4 <_free_r>
 800c122:	2300      	movs	r3, #0
 800c124:	6363      	str	r3, [r4, #52]	@ 0x34
 800c126:	e00d      	b.n	800c144 <__sflush_r+0xb8>
 800c128:	2301      	movs	r3, #1
 800c12a:	0028      	movs	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	0002      	movs	r2, r0
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d1c6      	bne.n	800c0c2 <__sflush_r+0x36>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0c3      	beq.n	800c0c2 <__sflush_r+0x36>
 800c13a:	2b1d      	cmp	r3, #29
 800c13c:	d001      	beq.n	800c142 <__sflush_r+0xb6>
 800c13e:	2b16      	cmp	r3, #22
 800c140:	d11a      	bne.n	800c178 <__sflush_r+0xec>
 800c142:	602e      	str	r6, [r5, #0]
 800c144:	2000      	movs	r0, #0
 800c146:	e01e      	b.n	800c186 <__sflush_r+0xfa>
 800c148:	690e      	ldr	r6, [r1, #16]
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	d0fa      	beq.n	800c144 <__sflush_r+0xb8>
 800c14e:	680f      	ldr	r7, [r1, #0]
 800c150:	600e      	str	r6, [r1, #0]
 800c152:	1bba      	subs	r2, r7, r6
 800c154:	9201      	str	r2, [sp, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	079b      	lsls	r3, r3, #30
 800c15a:	d100      	bne.n	800c15e <__sflush_r+0xd2>
 800c15c:	694a      	ldr	r2, [r1, #20]
 800c15e:	60a2      	str	r2, [r4, #8]
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	ddee      	ble.n	800c144 <__sflush_r+0xb8>
 800c166:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c168:	0032      	movs	r2, r6
 800c16a:	001f      	movs	r7, r3
 800c16c:	0028      	movs	r0, r5
 800c16e:	9b01      	ldr	r3, [sp, #4]
 800c170:	6a21      	ldr	r1, [r4, #32]
 800c172:	47b8      	blx	r7
 800c174:	2800      	cmp	r0, #0
 800c176:	dc07      	bgt.n	800c188 <__sflush_r+0xfc>
 800c178:	89a2      	ldrh	r2, [r4, #12]
 800c17a:	2340      	movs	r3, #64	@ 0x40
 800c17c:	2001      	movs	r0, #1
 800c17e:	4313      	orrs	r3, r2
 800c180:	b21b      	sxth	r3, r3
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	4240      	negs	r0, r0
 800c186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c188:	9b01      	ldr	r3, [sp, #4]
 800c18a:	1836      	adds	r6, r6, r0
 800c18c:	1a1b      	subs	r3, r3, r0
 800c18e:	9301      	str	r3, [sp, #4]
 800c190:	e7e6      	b.n	800c160 <__sflush_r+0xd4>
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	dfbffffe 	.word	0xdfbffffe

0800c198 <_fflush_r>:
 800c198:	690b      	ldr	r3, [r1, #16]
 800c19a:	b570      	push	{r4, r5, r6, lr}
 800c19c:	0005      	movs	r5, r0
 800c19e:	000c      	movs	r4, r1
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <_fflush_r+0x12>
 800c1a4:	2500      	movs	r5, #0
 800c1a6:	0028      	movs	r0, r5
 800c1a8:	bd70      	pop	{r4, r5, r6, pc}
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d004      	beq.n	800c1b8 <_fflush_r+0x20>
 800c1ae:	6a03      	ldr	r3, [r0, #32]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <_fflush_r+0x20>
 800c1b4:	f7fd ff34 	bl	800a020 <__sinit>
 800c1b8:	220c      	movs	r2, #12
 800c1ba:	5ea3      	ldrsh	r3, [r4, r2]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d0f1      	beq.n	800c1a4 <_fflush_r+0xc>
 800c1c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1c2:	07d2      	lsls	r2, r2, #31
 800c1c4:	d404      	bmi.n	800c1d0 <_fflush_r+0x38>
 800c1c6:	059b      	lsls	r3, r3, #22
 800c1c8:	d402      	bmi.n	800c1d0 <_fflush_r+0x38>
 800c1ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1cc:	f7fe f971 	bl	800a4b2 <__retarget_lock_acquire_recursive>
 800c1d0:	0028      	movs	r0, r5
 800c1d2:	0021      	movs	r1, r4
 800c1d4:	f7ff ff5a 	bl	800c08c <__sflush_r>
 800c1d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1da:	0005      	movs	r5, r0
 800c1dc:	07db      	lsls	r3, r3, #31
 800c1de:	d4e2      	bmi.n	800c1a6 <_fflush_r+0xe>
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	059b      	lsls	r3, r3, #22
 800c1e4:	d4df      	bmi.n	800c1a6 <_fflush_r+0xe>
 800c1e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1e8:	f7fe f964 	bl	800a4b4 <__retarget_lock_release_recursive>
 800c1ec:	e7db      	b.n	800c1a6 <_fflush_r+0xe>
	...

0800c1f0 <__swhatbuf_r>:
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	000e      	movs	r6, r1
 800c1f4:	001d      	movs	r5, r3
 800c1f6:	230e      	movs	r3, #14
 800c1f8:	5ec9      	ldrsh	r1, [r1, r3]
 800c1fa:	0014      	movs	r4, r2
 800c1fc:	b096      	sub	sp, #88	@ 0x58
 800c1fe:	2900      	cmp	r1, #0
 800c200:	da0c      	bge.n	800c21c <__swhatbuf_r+0x2c>
 800c202:	89b2      	ldrh	r2, [r6, #12]
 800c204:	2380      	movs	r3, #128	@ 0x80
 800c206:	0011      	movs	r1, r2
 800c208:	4019      	ands	r1, r3
 800c20a:	421a      	tst	r2, r3
 800c20c:	d114      	bne.n	800c238 <__swhatbuf_r+0x48>
 800c20e:	2380      	movs	r3, #128	@ 0x80
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	2000      	movs	r0, #0
 800c214:	6029      	str	r1, [r5, #0]
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	b016      	add	sp, #88	@ 0x58
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	466a      	mov	r2, sp
 800c21e:	f000 f865 	bl	800c2ec <_fstat_r>
 800c222:	2800      	cmp	r0, #0
 800c224:	dbed      	blt.n	800c202 <__swhatbuf_r+0x12>
 800c226:	23f0      	movs	r3, #240	@ 0xf0
 800c228:	9901      	ldr	r1, [sp, #4]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	4019      	ands	r1, r3
 800c22e:	4b04      	ldr	r3, [pc, #16]	@ (800c240 <__swhatbuf_r+0x50>)
 800c230:	18c9      	adds	r1, r1, r3
 800c232:	424b      	negs	r3, r1
 800c234:	4159      	adcs	r1, r3
 800c236:	e7ea      	b.n	800c20e <__swhatbuf_r+0x1e>
 800c238:	2100      	movs	r1, #0
 800c23a:	2340      	movs	r3, #64	@ 0x40
 800c23c:	e7e9      	b.n	800c212 <__swhatbuf_r+0x22>
 800c23e:	46c0      	nop			@ (mov r8, r8)
 800c240:	ffffe000 	.word	0xffffe000

0800c244 <__smakebuf_r>:
 800c244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c246:	2602      	movs	r6, #2
 800c248:	898b      	ldrh	r3, [r1, #12]
 800c24a:	0005      	movs	r5, r0
 800c24c:	000c      	movs	r4, r1
 800c24e:	b085      	sub	sp, #20
 800c250:	4233      	tst	r3, r6
 800c252:	d007      	beq.n	800c264 <__smakebuf_r+0x20>
 800c254:	0023      	movs	r3, r4
 800c256:	3347      	adds	r3, #71	@ 0x47
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	6123      	str	r3, [r4, #16]
 800c25c:	2301      	movs	r3, #1
 800c25e:	6163      	str	r3, [r4, #20]
 800c260:	b005      	add	sp, #20
 800c262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c264:	ab03      	add	r3, sp, #12
 800c266:	aa02      	add	r2, sp, #8
 800c268:	f7ff ffc2 	bl	800c1f0 <__swhatbuf_r>
 800c26c:	9f02      	ldr	r7, [sp, #8]
 800c26e:	9001      	str	r0, [sp, #4]
 800c270:	0039      	movs	r1, r7
 800c272:	0028      	movs	r0, r5
 800c274:	f7ff f834 	bl	800b2e0 <_malloc_r>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d108      	bne.n	800c28e <__smakebuf_r+0x4a>
 800c27c:	220c      	movs	r2, #12
 800c27e:	5ea3      	ldrsh	r3, [r4, r2]
 800c280:	059a      	lsls	r2, r3, #22
 800c282:	d4ed      	bmi.n	800c260 <__smakebuf_r+0x1c>
 800c284:	2203      	movs	r2, #3
 800c286:	4393      	bics	r3, r2
 800c288:	431e      	orrs	r6, r3
 800c28a:	81a6      	strh	r6, [r4, #12]
 800c28c:	e7e2      	b.n	800c254 <__smakebuf_r+0x10>
 800c28e:	2380      	movs	r3, #128	@ 0x80
 800c290:	89a2      	ldrh	r2, [r4, #12]
 800c292:	6020      	str	r0, [r4, #0]
 800c294:	4313      	orrs	r3, r2
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	6120      	str	r0, [r4, #16]
 800c29c:	6167      	str	r7, [r4, #20]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00c      	beq.n	800c2bc <__smakebuf_r+0x78>
 800c2a2:	0028      	movs	r0, r5
 800c2a4:	230e      	movs	r3, #14
 800c2a6:	5ee1      	ldrsh	r1, [r4, r3]
 800c2a8:	f000 f832 	bl	800c310 <_isatty_r>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d005      	beq.n	800c2bc <__smakebuf_r+0x78>
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	89a2      	ldrh	r2, [r4, #12]
 800c2b4:	439a      	bics	r2, r3
 800c2b6:	3b02      	subs	r3, #2
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	9a01      	ldr	r2, [sp, #4]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	e7cc      	b.n	800c260 <__smakebuf_r+0x1c>

0800c2c6 <memmove>:
 800c2c6:	b510      	push	{r4, lr}
 800c2c8:	4288      	cmp	r0, r1
 800c2ca:	d806      	bhi.n	800c2da <memmove+0x14>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d008      	beq.n	800c2e4 <memmove+0x1e>
 800c2d2:	5ccc      	ldrb	r4, [r1, r3]
 800c2d4:	54c4      	strb	r4, [r0, r3]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	e7f9      	b.n	800c2ce <memmove+0x8>
 800c2da:	188b      	adds	r3, r1, r2
 800c2dc:	4298      	cmp	r0, r3
 800c2de:	d2f5      	bcs.n	800c2cc <memmove+0x6>
 800c2e0:	3a01      	subs	r2, #1
 800c2e2:	d200      	bcs.n	800c2e6 <memmove+0x20>
 800c2e4:	bd10      	pop	{r4, pc}
 800c2e6:	5c8b      	ldrb	r3, [r1, r2]
 800c2e8:	5483      	strb	r3, [r0, r2]
 800c2ea:	e7f9      	b.n	800c2e0 <memmove+0x1a>

0800c2ec <_fstat_r>:
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	b570      	push	{r4, r5, r6, lr}
 800c2f0:	4d06      	ldr	r5, [pc, #24]	@ (800c30c <_fstat_r+0x20>)
 800c2f2:	0004      	movs	r4, r0
 800c2f4:	0008      	movs	r0, r1
 800c2f6:	0011      	movs	r1, r2
 800c2f8:	602b      	str	r3, [r5, #0]
 800c2fa:	f7f9 f99b 	bl	8005634 <_fstat>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	d103      	bne.n	800c30a <_fstat_r+0x1e>
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d000      	beq.n	800c30a <_fstat_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	200007dc 	.word	0x200007dc

0800c310 <_isatty_r>:
 800c310:	2300      	movs	r3, #0
 800c312:	b570      	push	{r4, r5, r6, lr}
 800c314:	4d06      	ldr	r5, [pc, #24]	@ (800c330 <_isatty_r+0x20>)
 800c316:	0004      	movs	r4, r0
 800c318:	0008      	movs	r0, r1
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	f7f9 f998 	bl	8005650 <_isatty>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d103      	bne.n	800c32c <_isatty_r+0x1c>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d000      	beq.n	800c32c <_isatty_r+0x1c>
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	bd70      	pop	{r4, r5, r6, pc}
 800c32e:	46c0      	nop			@ (mov r8, r8)
 800c330:	200007dc 	.word	0x200007dc

0800c334 <_sbrk_r>:
 800c334:	2300      	movs	r3, #0
 800c336:	b570      	push	{r4, r5, r6, lr}
 800c338:	4d06      	ldr	r5, [pc, #24]	@ (800c354 <_sbrk_r+0x20>)
 800c33a:	0004      	movs	r4, r0
 800c33c:	0008      	movs	r0, r1
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	f7f9 f99a 	bl	8005678 <_sbrk>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d103      	bne.n	800c350 <_sbrk_r+0x1c>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d000      	beq.n	800c350 <_sbrk_r+0x1c>
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	bd70      	pop	{r4, r5, r6, pc}
 800c352:	46c0      	nop			@ (mov r8, r8)
 800c354:	200007dc 	.word	0x200007dc

0800c358 <__assert_func>:
 800c358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c35a:	0014      	movs	r4, r2
 800c35c:	001a      	movs	r2, r3
 800c35e:	4b09      	ldr	r3, [pc, #36]	@ (800c384 <__assert_func+0x2c>)
 800c360:	0005      	movs	r5, r0
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	000e      	movs	r6, r1
 800c366:	68d8      	ldr	r0, [r3, #12]
 800c368:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <__assert_func+0x30>)
 800c36a:	2c00      	cmp	r4, #0
 800c36c:	d101      	bne.n	800c372 <__assert_func+0x1a>
 800c36e:	4b07      	ldr	r3, [pc, #28]	@ (800c38c <__assert_func+0x34>)
 800c370:	001c      	movs	r4, r3
 800c372:	4907      	ldr	r1, [pc, #28]	@ (800c390 <__assert_func+0x38>)
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	9402      	str	r4, [sp, #8]
 800c378:	002b      	movs	r3, r5
 800c37a:	9600      	str	r6, [sp, #0]
 800c37c:	f000 f886 	bl	800c48c <fiprintf>
 800c380:	f000 f894 	bl	800c4ac <abort>
 800c384:	20000018 	.word	0x20000018
 800c388:	0800d9f3 	.word	0x0800d9f3
 800c38c:	0800da2e 	.word	0x0800da2e
 800c390:	0800da00 	.word	0x0800da00

0800c394 <_calloc_r>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	0c0b      	lsrs	r3, r1, #16
 800c398:	0c15      	lsrs	r5, r2, #16
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d11e      	bne.n	800c3dc <_calloc_r+0x48>
 800c39e:	2d00      	cmp	r5, #0
 800c3a0:	d10c      	bne.n	800c3bc <_calloc_r+0x28>
 800c3a2:	b289      	uxth	r1, r1
 800c3a4:	b294      	uxth	r4, r2
 800c3a6:	434c      	muls	r4, r1
 800c3a8:	0021      	movs	r1, r4
 800c3aa:	f7fe ff99 	bl	800b2e0 <_malloc_r>
 800c3ae:	1e05      	subs	r5, r0, #0
 800c3b0:	d01a      	beq.n	800c3e8 <_calloc_r+0x54>
 800c3b2:	0022      	movs	r2, r4
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	f7fd ffe3 	bl	800a380 <memset>
 800c3ba:	e016      	b.n	800c3ea <_calloc_r+0x56>
 800c3bc:	1c2b      	adds	r3, r5, #0
 800c3be:	1c0c      	adds	r4, r1, #0
 800c3c0:	b289      	uxth	r1, r1
 800c3c2:	b292      	uxth	r2, r2
 800c3c4:	434a      	muls	r2, r1
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	b2a1      	uxth	r1, r4
 800c3ca:	4359      	muls	r1, r3
 800c3cc:	0c14      	lsrs	r4, r2, #16
 800c3ce:	190c      	adds	r4, r1, r4
 800c3d0:	0c23      	lsrs	r3, r4, #16
 800c3d2:	d107      	bne.n	800c3e4 <_calloc_r+0x50>
 800c3d4:	0424      	lsls	r4, r4, #16
 800c3d6:	b292      	uxth	r2, r2
 800c3d8:	4314      	orrs	r4, r2
 800c3da:	e7e5      	b.n	800c3a8 <_calloc_r+0x14>
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	d101      	bne.n	800c3e4 <_calloc_r+0x50>
 800c3e0:	1c14      	adds	r4, r2, #0
 800c3e2:	e7ed      	b.n	800c3c0 <_calloc_r+0x2c>
 800c3e4:	230c      	movs	r3, #12
 800c3e6:	6003      	str	r3, [r0, #0]
 800c3e8:	2500      	movs	r5, #0
 800c3ea:	0028      	movs	r0, r5
 800c3ec:	bd70      	pop	{r4, r5, r6, pc}

0800c3ee <__ascii_mbtowc>:
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	2900      	cmp	r1, #0
 800c3f2:	d100      	bne.n	800c3f6 <__ascii_mbtowc+0x8>
 800c3f4:	a901      	add	r1, sp, #4
 800c3f6:	1e10      	subs	r0, r2, #0
 800c3f8:	d006      	beq.n	800c408 <__ascii_mbtowc+0x1a>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d006      	beq.n	800c40c <__ascii_mbtowc+0x1e>
 800c3fe:	7813      	ldrb	r3, [r2, #0]
 800c400:	600b      	str	r3, [r1, #0]
 800c402:	7810      	ldrb	r0, [r2, #0]
 800c404:	1e43      	subs	r3, r0, #1
 800c406:	4198      	sbcs	r0, r3
 800c408:	b002      	add	sp, #8
 800c40a:	4770      	bx	lr
 800c40c:	2002      	movs	r0, #2
 800c40e:	4240      	negs	r0, r0
 800c410:	e7fa      	b.n	800c408 <__ascii_mbtowc+0x1a>

0800c412 <_realloc_r>:
 800c412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c414:	0006      	movs	r6, r0
 800c416:	000c      	movs	r4, r1
 800c418:	0015      	movs	r5, r2
 800c41a:	2900      	cmp	r1, #0
 800c41c:	d105      	bne.n	800c42a <_realloc_r+0x18>
 800c41e:	0011      	movs	r1, r2
 800c420:	f7fe ff5e 	bl	800b2e0 <_malloc_r>
 800c424:	0004      	movs	r4, r0
 800c426:	0020      	movs	r0, r4
 800c428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	d103      	bne.n	800c436 <_realloc_r+0x24>
 800c42e:	f7fe fee1 	bl	800b1f4 <_free_r>
 800c432:	2400      	movs	r4, #0
 800c434:	e7f7      	b.n	800c426 <_realloc_r+0x14>
 800c436:	f000 f840 	bl	800c4ba <_malloc_usable_size_r>
 800c43a:	0007      	movs	r7, r0
 800c43c:	4285      	cmp	r5, r0
 800c43e:	d802      	bhi.n	800c446 <_realloc_r+0x34>
 800c440:	0843      	lsrs	r3, r0, #1
 800c442:	42ab      	cmp	r3, r5
 800c444:	d3ef      	bcc.n	800c426 <_realloc_r+0x14>
 800c446:	0029      	movs	r1, r5
 800c448:	0030      	movs	r0, r6
 800c44a:	f7fe ff49 	bl	800b2e0 <_malloc_r>
 800c44e:	9001      	str	r0, [sp, #4]
 800c450:	2800      	cmp	r0, #0
 800c452:	d0ee      	beq.n	800c432 <_realloc_r+0x20>
 800c454:	002a      	movs	r2, r5
 800c456:	42bd      	cmp	r5, r7
 800c458:	d900      	bls.n	800c45c <_realloc_r+0x4a>
 800c45a:	003a      	movs	r2, r7
 800c45c:	0021      	movs	r1, r4
 800c45e:	9801      	ldr	r0, [sp, #4]
 800c460:	f7fe f83c 	bl	800a4dc <memcpy>
 800c464:	0021      	movs	r1, r4
 800c466:	0030      	movs	r0, r6
 800c468:	f7fe fec4 	bl	800b1f4 <_free_r>
 800c46c:	9c01      	ldr	r4, [sp, #4]
 800c46e:	e7da      	b.n	800c426 <_realloc_r+0x14>

0800c470 <__ascii_wctomb>:
 800c470:	0003      	movs	r3, r0
 800c472:	1e08      	subs	r0, r1, #0
 800c474:	d005      	beq.n	800c482 <__ascii_wctomb+0x12>
 800c476:	2aff      	cmp	r2, #255	@ 0xff
 800c478:	d904      	bls.n	800c484 <__ascii_wctomb+0x14>
 800c47a:	228a      	movs	r2, #138	@ 0x8a
 800c47c:	2001      	movs	r0, #1
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	4240      	negs	r0, r0
 800c482:	4770      	bx	lr
 800c484:	2001      	movs	r0, #1
 800c486:	700a      	strb	r2, [r1, #0]
 800c488:	e7fb      	b.n	800c482 <__ascii_wctomb+0x12>
	...

0800c48c <fiprintf>:
 800c48c:	b40e      	push	{r1, r2, r3}
 800c48e:	b517      	push	{r0, r1, r2, r4, lr}
 800c490:	4c05      	ldr	r4, [pc, #20]	@ (800c4a8 <fiprintf+0x1c>)
 800c492:	ab05      	add	r3, sp, #20
 800c494:	cb04      	ldmia	r3!, {r2}
 800c496:	0001      	movs	r1, r0
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	f7ff fcda 	bl	800be54 <_vfiprintf_r>
 800c4a0:	bc1e      	pop	{r1, r2, r3, r4}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	b003      	add	sp, #12
 800c4a6:	4718      	bx	r3
 800c4a8:	20000018 	.word	0x20000018

0800c4ac <abort>:
 800c4ac:	2006      	movs	r0, #6
 800c4ae:	b510      	push	{r4, lr}
 800c4b0:	f000 f834 	bl	800c51c <raise>
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	f7f9 f889 	bl	80055cc <_exit>

0800c4ba <_malloc_usable_size_r>:
 800c4ba:	1f0b      	subs	r3, r1, #4
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	1f18      	subs	r0, r3, #4
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	da01      	bge.n	800c4c8 <_malloc_usable_size_r+0xe>
 800c4c4:	580b      	ldr	r3, [r1, r0]
 800c4c6:	18c0      	adds	r0, r0, r3
 800c4c8:	4770      	bx	lr

0800c4ca <_raise_r>:
 800c4ca:	b570      	push	{r4, r5, r6, lr}
 800c4cc:	0004      	movs	r4, r0
 800c4ce:	000d      	movs	r5, r1
 800c4d0:	291f      	cmp	r1, #31
 800c4d2:	d904      	bls.n	800c4de <_raise_r+0x14>
 800c4d4:	2316      	movs	r3, #22
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	2001      	movs	r0, #1
 800c4da:	4240      	negs	r0, r0
 800c4dc:	bd70      	pop	{r4, r5, r6, pc}
 800c4de:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d004      	beq.n	800c4ee <_raise_r+0x24>
 800c4e4:	008a      	lsls	r2, r1, #2
 800c4e6:	189b      	adds	r3, r3, r2
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	d108      	bne.n	800c500 <_raise_r+0x36>
 800c4ee:	0020      	movs	r0, r4
 800c4f0:	f000 f830 	bl	800c554 <_getpid_r>
 800c4f4:	002a      	movs	r2, r5
 800c4f6:	0001      	movs	r1, r0
 800c4f8:	0020      	movs	r0, r4
 800c4fa:	f000 f819 	bl	800c530 <_kill_r>
 800c4fe:	e7ed      	b.n	800c4dc <_raise_r+0x12>
 800c500:	2a01      	cmp	r2, #1
 800c502:	d009      	beq.n	800c518 <_raise_r+0x4e>
 800c504:	1c51      	adds	r1, r2, #1
 800c506:	d103      	bne.n	800c510 <_raise_r+0x46>
 800c508:	2316      	movs	r3, #22
 800c50a:	6003      	str	r3, [r0, #0]
 800c50c:	2001      	movs	r0, #1
 800c50e:	e7e5      	b.n	800c4dc <_raise_r+0x12>
 800c510:	2100      	movs	r1, #0
 800c512:	0028      	movs	r0, r5
 800c514:	6019      	str	r1, [r3, #0]
 800c516:	4790      	blx	r2
 800c518:	2000      	movs	r0, #0
 800c51a:	e7df      	b.n	800c4dc <_raise_r+0x12>

0800c51c <raise>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	4b03      	ldr	r3, [pc, #12]	@ (800c52c <raise+0x10>)
 800c520:	0001      	movs	r1, r0
 800c522:	6818      	ldr	r0, [r3, #0]
 800c524:	f7ff ffd1 	bl	800c4ca <_raise_r>
 800c528:	bd10      	pop	{r4, pc}
 800c52a:	46c0      	nop			@ (mov r8, r8)
 800c52c:	20000018 	.word	0x20000018

0800c530 <_kill_r>:
 800c530:	2300      	movs	r3, #0
 800c532:	b570      	push	{r4, r5, r6, lr}
 800c534:	4d06      	ldr	r5, [pc, #24]	@ (800c550 <_kill_r+0x20>)
 800c536:	0004      	movs	r4, r0
 800c538:	0008      	movs	r0, r1
 800c53a:	0011      	movs	r1, r2
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f7f9 f835 	bl	80055ac <_kill>
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	d103      	bne.n	800c54e <_kill_r+0x1e>
 800c546:	682b      	ldr	r3, [r5, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d000      	beq.n	800c54e <_kill_r+0x1e>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	bd70      	pop	{r4, r5, r6, pc}
 800c550:	200007dc 	.word	0x200007dc

0800c554 <_getpid_r>:
 800c554:	b510      	push	{r4, lr}
 800c556:	f7f9 f823 	bl	80055a0 <_getpid>
 800c55a:	bd10      	pop	{r4, pc}

0800c55c <pow>:
 800c55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c55e:	0014      	movs	r4, r2
 800c560:	001d      	movs	r5, r3
 800c562:	9000      	str	r0, [sp, #0]
 800c564:	9101      	str	r1, [sp, #4]
 800c566:	f000 f86f 	bl	800c648 <__ieee754_pow>
 800c56a:	0022      	movs	r2, r4
 800c56c:	0006      	movs	r6, r0
 800c56e:	000f      	movs	r7, r1
 800c570:	002b      	movs	r3, r5
 800c572:	0020      	movs	r0, r4
 800c574:	0029      	movs	r1, r5
 800c576:	f7f6 fca5 	bl	8002ec4 <__aeabi_dcmpun>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d13f      	bne.n	800c5fe <pow+0xa2>
 800c57e:	9800      	ldr	r0, [sp, #0]
 800c580:	9901      	ldr	r1, [sp, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	2300      	movs	r3, #0
 800c586:	f7f3 ff6b 	bl	8000460 <__aeabi_dcmpeq>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d019      	beq.n	800c5c2 <pow+0x66>
 800c58e:	2200      	movs	r2, #0
 800c590:	2300      	movs	r3, #0
 800c592:	0020      	movs	r0, r4
 800c594:	0029      	movs	r1, r5
 800c596:	f7f3 ff63 	bl	8000460 <__aeabi_dcmpeq>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d146      	bne.n	800c62c <pow+0xd0>
 800c59e:	0020      	movs	r0, r4
 800c5a0:	0029      	movs	r1, r5
 800c5a2:	f000 f849 	bl	800c638 <finite>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d029      	beq.n	800c5fe <pow+0xa2>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	0020      	movs	r0, r4
 800c5b0:	0029      	movs	r1, r5
 800c5b2:	f7f3 ff5b 	bl	800046c <__aeabi_dcmplt>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d021      	beq.n	800c5fe <pow+0xa2>
 800c5ba:	f7fd ff4f 	bl	800a45c <__errno>
 800c5be:	2322      	movs	r3, #34	@ 0x22
 800c5c0:	e01c      	b.n	800c5fc <pow+0xa0>
 800c5c2:	0030      	movs	r0, r6
 800c5c4:	0039      	movs	r1, r7
 800c5c6:	f000 f837 	bl	800c638 <finite>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d11b      	bne.n	800c606 <pow+0xaa>
 800c5ce:	9800      	ldr	r0, [sp, #0]
 800c5d0:	9901      	ldr	r1, [sp, #4]
 800c5d2:	f000 f831 	bl	800c638 <finite>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d015      	beq.n	800c606 <pow+0xaa>
 800c5da:	0020      	movs	r0, r4
 800c5dc:	0029      	movs	r1, r5
 800c5de:	f000 f82b 	bl	800c638 <finite>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d00f      	beq.n	800c606 <pow+0xaa>
 800c5e6:	0032      	movs	r2, r6
 800c5e8:	003b      	movs	r3, r7
 800c5ea:	0030      	movs	r0, r6
 800c5ec:	0039      	movs	r1, r7
 800c5ee:	f7f6 fc69 	bl	8002ec4 <__aeabi_dcmpun>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d0e1      	beq.n	800c5ba <pow+0x5e>
 800c5f6:	f7fd ff31 	bl	800a45c <__errno>
 800c5fa:	2321      	movs	r3, #33	@ 0x21
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	0030      	movs	r0, r6
 800c600:	0039      	movs	r1, r7
 800c602:	b003      	add	sp, #12
 800c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c606:	2200      	movs	r2, #0
 800c608:	2300      	movs	r3, #0
 800c60a:	0030      	movs	r0, r6
 800c60c:	0039      	movs	r1, r7
 800c60e:	f7f3 ff27 	bl	8000460 <__aeabi_dcmpeq>
 800c612:	2800      	cmp	r0, #0
 800c614:	d0f3      	beq.n	800c5fe <pow+0xa2>
 800c616:	9800      	ldr	r0, [sp, #0]
 800c618:	9901      	ldr	r1, [sp, #4]
 800c61a:	f000 f80d 	bl	800c638 <finite>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d0ed      	beq.n	800c5fe <pow+0xa2>
 800c622:	0020      	movs	r0, r4
 800c624:	0029      	movs	r1, r5
 800c626:	f000 f807 	bl	800c638 <finite>
 800c62a:	e7c4      	b.n	800c5b6 <pow+0x5a>
 800c62c:	2600      	movs	r6, #0
 800c62e:	4f01      	ldr	r7, [pc, #4]	@ (800c634 <pow+0xd8>)
 800c630:	e7e5      	b.n	800c5fe <pow+0xa2>
 800c632:	46c0      	nop			@ (mov r8, r8)
 800c634:	3ff00000 	.word	0x3ff00000

0800c638 <finite>:
 800c638:	4b02      	ldr	r3, [pc, #8]	@ (800c644 <finite+0xc>)
 800c63a:	0048      	lsls	r0, r1, #1
 800c63c:	0840      	lsrs	r0, r0, #1
 800c63e:	18c0      	adds	r0, r0, r3
 800c640:	0fc0      	lsrs	r0, r0, #31
 800c642:	4770      	bx	lr
 800c644:	80100000 	.word	0x80100000

0800c648 <__ieee754_pow>:
 800c648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64a:	b095      	sub	sp, #84	@ 0x54
 800c64c:	9202      	str	r2, [sp, #8]
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	9b03      	ldr	r3, [sp, #12]
 800c652:	9a03      	ldr	r2, [sp, #12]
 800c654:	9306      	str	r3, [sp, #24]
 800c656:	0052      	lsls	r2, r2, #1
 800c658:	9b02      	ldr	r3, [sp, #8]
 800c65a:	0852      	lsrs	r2, r2, #1
 800c65c:	9204      	str	r2, [sp, #16]
 800c65e:	001a      	movs	r2, r3
 800c660:	000f      	movs	r7, r1
 800c662:	9904      	ldr	r1, [sp, #16]
 800c664:	0006      	movs	r6, r0
 800c666:	430a      	orrs	r2, r1
 800c668:	d119      	bne.n	800c69e <__ieee754_pow+0x56>
 800c66a:	2180      	movs	r1, #128	@ 0x80
 800c66c:	0309      	lsls	r1, r1, #12
 800c66e:	4079      	eors	r1, r7
 800c670:	0002      	movs	r2, r0
 800c672:	000b      	movs	r3, r1
 800c674:	1892      	adds	r2, r2, r2
 800c676:	415b      	adcs	r3, r3
 800c678:	499b      	ldr	r1, [pc, #620]	@ (800c8e8 <__ieee754_pow+0x2a0>)
 800c67a:	428b      	cmp	r3, r1
 800c67c:	d806      	bhi.n	800c68c <__ieee754_pow+0x44>
 800c67e:	d001      	beq.n	800c684 <__ieee754_pow+0x3c>
 800c680:	f000 fcde 	bl	800d040 <__ieee754_pow+0x9f8>
 800c684:	2a00      	cmp	r2, #0
 800c686:	d101      	bne.n	800c68c <__ieee754_pow+0x44>
 800c688:	f000 fcda 	bl	800d040 <__ieee754_pow+0x9f8>
 800c68c:	9a02      	ldr	r2, [sp, #8]
 800c68e:	9b03      	ldr	r3, [sp, #12]
 800c690:	0030      	movs	r0, r6
 800c692:	0039      	movs	r1, r7
 800c694:	f7f4 fe0a 	bl	80012ac <__aeabi_dadd>
 800c698:	9000      	str	r0, [sp, #0]
 800c69a:	9101      	str	r1, [sp, #4]
 800c69c:	e0af      	b.n	800c7fe <__ieee754_pow+0x1b6>
 800c69e:	4a93      	ldr	r2, [pc, #588]	@ (800c8ec <__ieee754_pow+0x2a4>)
 800c6a0:	007c      	lsls	r4, r7, #1
 800c6a2:	9708      	str	r7, [sp, #32]
 800c6a4:	900e      	str	r0, [sp, #56]	@ 0x38
 800c6a6:	0864      	lsrs	r4, r4, #1
 800c6a8:	4294      	cmp	r4, r2
 800c6aa:	d809      	bhi.n	800c6c0 <__ieee754_pow+0x78>
 800c6ac:	d101      	bne.n	800c6b2 <__ieee754_pow+0x6a>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d1ec      	bne.n	800c68c <__ieee754_pow+0x44>
 800c6b2:	9904      	ldr	r1, [sp, #16]
 800c6b4:	4a8d      	ldr	r2, [pc, #564]	@ (800c8ec <__ieee754_pow+0x2a4>)
 800c6b6:	4291      	cmp	r1, r2
 800c6b8:	d802      	bhi.n	800c6c0 <__ieee754_pow+0x78>
 800c6ba:	d10c      	bne.n	800c6d6 <__ieee754_pow+0x8e>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00a      	beq.n	800c6d6 <__ieee754_pow+0x8e>
 800c6c0:	4b8b      	ldr	r3, [pc, #556]	@ (800c8f0 <__ieee754_pow+0x2a8>)
 800c6c2:	18fb      	adds	r3, r7, r3
 800c6c4:	4333      	orrs	r3, r6
 800c6c6:	d1e1      	bne.n	800c68c <__ieee754_pow+0x44>
 800c6c8:	2180      	movs	r1, #128	@ 0x80
 800c6ca:	9803      	ldr	r0, [sp, #12]
 800c6cc:	0309      	lsls	r1, r1, #12
 800c6ce:	4048      	eors	r0, r1
 800c6d0:	0003      	movs	r3, r0
 800c6d2:	9a02      	ldr	r2, [sp, #8]
 800c6d4:	e7ce      	b.n	800c674 <__ieee754_pow+0x2c>
 800c6d6:	2500      	movs	r5, #0
 800c6d8:	9a08      	ldr	r2, [sp, #32]
 800c6da:	940a      	str	r4, [sp, #40]	@ 0x28
 800c6dc:	42aa      	cmp	r2, r5
 800c6de:	da68      	bge.n	800c7b2 <__ieee754_pow+0x16a>
 800c6e0:	4a84      	ldr	r2, [pc, #528]	@ (800c8f4 <__ieee754_pow+0x2ac>)
 800c6e2:	9904      	ldr	r1, [sp, #16]
 800c6e4:	4291      	cmp	r1, r2
 800c6e6:	d863      	bhi.n	800c7b0 <__ieee754_pow+0x168>
 800c6e8:	4a83      	ldr	r2, [pc, #524]	@ (800c8f8 <__ieee754_pow+0x2b0>)
 800c6ea:	4291      	cmp	r1, r2
 800c6ec:	d910      	bls.n	800c710 <__ieee754_pow+0xc8>
 800c6ee:	150a      	asrs	r2, r1, #20
 800c6f0:	4982      	ldr	r1, [pc, #520]	@ (800c8fc <__ieee754_pow+0x2b4>)
 800c6f2:	1852      	adds	r2, r2, r1
 800c6f4:	2a14      	cmp	r2, #20
 800c6f6:	dd3b      	ble.n	800c770 <__ieee754_pow+0x128>
 800c6f8:	2134      	movs	r1, #52	@ 0x34
 800c6fa:	1a89      	subs	r1, r1, r2
 800c6fc:	9a02      	ldr	r2, [sp, #8]
 800c6fe:	40ca      	lsrs	r2, r1
 800c700:	0010      	movs	r0, r2
 800c702:	4088      	lsls	r0, r1
 800c704:	4298      	cmp	r0, r3
 800c706:	d103      	bne.n	800c710 <__ieee754_pow+0xc8>
 800c708:	2101      	movs	r1, #1
 800c70a:	3502      	adds	r5, #2
 800c70c:	400a      	ands	r2, r1
 800c70e:	1aad      	subs	r5, r5, r2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d03d      	beq.n	800c790 <__ieee754_pow+0x148>
 800c714:	0030      	movs	r0, r6
 800c716:	0039      	movs	r1, r7
 800c718:	f000 fcc2 	bl	800d0a0 <fabs>
 800c71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c71e:	9000      	str	r0, [sp, #0]
 800c720:	9101      	str	r1, [sp, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d000      	beq.n	800c728 <__ieee754_pow+0xe0>
 800c726:	e093      	b.n	800c850 <__ieee754_pow+0x208>
 800c728:	4a75      	ldr	r2, [pc, #468]	@ (800c900 <__ieee754_pow+0x2b8>)
 800c72a:	00bb      	lsls	r3, r7, #2
 800c72c:	089b      	lsrs	r3, r3, #2
 800c72e:	4293      	cmp	r3, r2
 800c730:	d002      	beq.n	800c738 <__ieee754_pow+0xf0>
 800c732:	2c00      	cmp	r4, #0
 800c734:	d000      	beq.n	800c738 <__ieee754_pow+0xf0>
 800c736:	e08b      	b.n	800c850 <__ieee754_pow+0x208>
 800c738:	9b06      	ldr	r3, [sp, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	da07      	bge.n	800c74e <__ieee754_pow+0x106>
 800c73e:	9a00      	ldr	r2, [sp, #0]
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	2000      	movs	r0, #0
 800c744:	496e      	ldr	r1, [pc, #440]	@ (800c900 <__ieee754_pow+0x2b8>)
 800c746:	f7f5 f915 	bl	8001974 <__aeabi_ddiv>
 800c74a:	9000      	str	r0, [sp, #0]
 800c74c:	9101      	str	r1, [sp, #4]
 800c74e:	9b08      	ldr	r3, [sp, #32]
 800c750:	2b00      	cmp	r3, #0
 800c752:	da54      	bge.n	800c7fe <__ieee754_pow+0x1b6>
 800c754:	4b66      	ldr	r3, [pc, #408]	@ (800c8f0 <__ieee754_pow+0x2a8>)
 800c756:	18e4      	adds	r4, r4, r3
 800c758:	432c      	orrs	r4, r5
 800c75a:	d000      	beq.n	800c75e <__ieee754_pow+0x116>
 800c75c:	e06d      	b.n	800c83a <__ieee754_pow+0x1f2>
 800c75e:	9a00      	ldr	r2, [sp, #0]
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	0010      	movs	r0, r2
 800c764:	0019      	movs	r1, r3
 800c766:	f7f6 f811 	bl	800278c <__aeabi_dsub>
 800c76a:	0002      	movs	r2, r0
 800c76c:	000b      	movs	r3, r1
 800c76e:	e01c      	b.n	800c7aa <__ieee754_pow+0x162>
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1cf      	bne.n	800c714 <__ieee754_pow+0xcc>
 800c774:	3314      	adds	r3, #20
 800c776:	1a9a      	subs	r2, r3, r2
 800c778:	9b04      	ldr	r3, [sp, #16]
 800c77a:	4113      	asrs	r3, r2
 800c77c:	0019      	movs	r1, r3
 800c77e:	4091      	lsls	r1, r2
 800c780:	000a      	movs	r2, r1
 800c782:	9904      	ldr	r1, [sp, #16]
 800c784:	428a      	cmp	r2, r1
 800c786:	d103      	bne.n	800c790 <__ieee754_pow+0x148>
 800c788:	2201      	movs	r2, #1
 800c78a:	2502      	movs	r5, #2
 800c78c:	4013      	ands	r3, r2
 800c78e:	1aed      	subs	r5, r5, r3
 800c790:	4b5b      	ldr	r3, [pc, #364]	@ (800c900 <__ieee754_pow+0x2b8>)
 800c792:	9a04      	ldr	r2, [sp, #16]
 800c794:	429a      	cmp	r2, r3
 800c796:	d136      	bne.n	800c806 <__ieee754_pow+0x1be>
 800c798:	9b06      	ldr	r3, [sp, #24]
 800c79a:	9600      	str	r6, [sp, #0]
 800c79c:	9701      	str	r7, [sp, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	da2d      	bge.n	800c7fe <__ieee754_pow+0x1b6>
 800c7a2:	0032      	movs	r2, r6
 800c7a4:	003b      	movs	r3, r7
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	4955      	ldr	r1, [pc, #340]	@ (800c900 <__ieee754_pow+0x2b8>)
 800c7aa:	f7f5 f8e3 	bl	8001974 <__aeabi_ddiv>
 800c7ae:	e773      	b.n	800c698 <__ieee754_pow+0x50>
 800c7b0:	2502      	movs	r5, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1ae      	bne.n	800c714 <__ieee754_pow+0xcc>
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	4a4c      	ldr	r2, [pc, #304]	@ (800c8ec <__ieee754_pow+0x2a4>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d1e8      	bne.n	800c790 <__ieee754_pow+0x148>
 800c7be:	4b4c      	ldr	r3, [pc, #304]	@ (800c8f0 <__ieee754_pow+0x2a8>)
 800c7c0:	18e3      	adds	r3, r4, r3
 800c7c2:	4333      	orrs	r3, r6
 800c7c4:	d101      	bne.n	800c7ca <__ieee754_pow+0x182>
 800c7c6:	f000 fc3b 	bl	800d040 <__ieee754_pow+0x9f8>
 800c7ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c8f8 <__ieee754_pow+0x2b0>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	d909      	bls.n	800c7e4 <__ieee754_pow+0x19c>
 800c7d0:	9b06      	ldr	r3, [sp, #24]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	da01      	bge.n	800c7da <__ieee754_pow+0x192>
 800c7d6:	f000 fc37 	bl	800d048 <__ieee754_pow+0xa00>
 800c7da:	9b02      	ldr	r3, [sp, #8]
 800c7dc:	9c03      	ldr	r4, [sp, #12]
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	9401      	str	r4, [sp, #4]
 800c7e2:	e00c      	b.n	800c7fe <__ieee754_pow+0x1b6>
 800c7e4:	9b06      	ldr	r3, [sp, #24]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	db01      	blt.n	800c7ee <__ieee754_pow+0x1a6>
 800c7ea:	f000 fc2d 	bl	800d048 <__ieee754_pow+0xa00>
 800c7ee:	2280      	movs	r2, #128	@ 0x80
 800c7f0:	0612      	lsls	r2, r2, #24
 800c7f2:	4694      	mov	ip, r2
 800c7f4:	9b02      	ldr	r3, [sp, #8]
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	4463      	add	r3, ip
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	9800      	ldr	r0, [sp, #0]
 800c800:	9901      	ldr	r1, [sp, #4]
 800c802:	b015      	add	sp, #84	@ 0x54
 800c804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c806:	2380      	movs	r3, #128	@ 0x80
 800c808:	9a06      	ldr	r2, [sp, #24]
 800c80a:	05db      	lsls	r3, r3, #23
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d106      	bne.n	800c81e <__ieee754_pow+0x1d6>
 800c810:	0032      	movs	r2, r6
 800c812:	003b      	movs	r3, r7
 800c814:	0030      	movs	r0, r6
 800c816:	0039      	movs	r1, r7
 800c818:	f7f5 fcf0 	bl	80021fc <__aeabi_dmul>
 800c81c:	e73c      	b.n	800c698 <__ieee754_pow+0x50>
 800c81e:	4b39      	ldr	r3, [pc, #228]	@ (800c904 <__ieee754_pow+0x2bc>)
 800c820:	9a06      	ldr	r2, [sp, #24]
 800c822:	429a      	cmp	r2, r3
 800c824:	d000      	beq.n	800c828 <__ieee754_pow+0x1e0>
 800c826:	e775      	b.n	800c714 <__ieee754_pow+0xcc>
 800c828:	9b08      	ldr	r3, [sp, #32]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	da00      	bge.n	800c830 <__ieee754_pow+0x1e8>
 800c82e:	e771      	b.n	800c714 <__ieee754_pow+0xcc>
 800c830:	0030      	movs	r0, r6
 800c832:	0039      	movs	r1, r7
 800c834:	f000 fcd2 	bl	800d1dc <__ieee754_sqrt>
 800c838:	e72e      	b.n	800c698 <__ieee754_pow+0x50>
 800c83a:	2d01      	cmp	r5, #1
 800c83c:	d1df      	bne.n	800c7fe <__ieee754_pow+0x1b6>
 800c83e:	9800      	ldr	r0, [sp, #0]
 800c840:	2180      	movs	r1, #128	@ 0x80
 800c842:	0002      	movs	r2, r0
 800c844:	9801      	ldr	r0, [sp, #4]
 800c846:	0609      	lsls	r1, r1, #24
 800c848:	1843      	adds	r3, r0, r1
 800c84a:	9200      	str	r2, [sp, #0]
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	e7d6      	b.n	800c7fe <__ieee754_pow+0x1b6>
 800c850:	0ffb      	lsrs	r3, r7, #31
 800c852:	3b01      	subs	r3, #1
 800c854:	001a      	movs	r2, r3
 800c856:	432a      	orrs	r2, r5
 800c858:	d104      	bne.n	800c864 <__ieee754_pow+0x21c>
 800c85a:	0032      	movs	r2, r6
 800c85c:	003b      	movs	r3, r7
 800c85e:	0030      	movs	r0, r6
 800c860:	0039      	movs	r1, r7
 800c862:	e780      	b.n	800c766 <__ieee754_pow+0x11e>
 800c864:	3d01      	subs	r5, #1
 800c866:	2200      	movs	r2, #0
 800c868:	431d      	orrs	r5, r3
 800c86a:	d015      	beq.n	800c898 <__ieee754_pow+0x250>
 800c86c:	4b24      	ldr	r3, [pc, #144]	@ (800c900 <__ieee754_pow+0x2b8>)
 800c86e:	9208      	str	r2, [sp, #32]
 800c870:	9309      	str	r3, [sp, #36]	@ 0x24
 800c872:	2384      	movs	r3, #132	@ 0x84
 800c874:	9a04      	ldr	r2, [sp, #16]
 800c876:	05db      	lsls	r3, r3, #23
 800c878:	429a      	cmp	r2, r3
 800c87a:	d800      	bhi.n	800c87e <__ieee754_pow+0x236>
 800c87c:	e102      	b.n	800ca84 <__ieee754_pow+0x43c>
 800c87e:	4b22      	ldr	r3, [pc, #136]	@ (800c908 <__ieee754_pow+0x2c0>)
 800c880:	429a      	cmp	r2, r3
 800c882:	d912      	bls.n	800c8aa <__ieee754_pow+0x262>
 800c884:	4b1c      	ldr	r3, [pc, #112]	@ (800c8f8 <__ieee754_pow+0x2b0>)
 800c886:	429c      	cmp	r4, r3
 800c888:	d808      	bhi.n	800c89c <__ieee754_pow+0x254>
 800c88a:	9b06      	ldr	r3, [sp, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	da08      	bge.n	800c8a2 <__ieee754_pow+0x25a>
 800c890:	2000      	movs	r0, #0
 800c892:	f000 fc9b 	bl	800d1cc <__math_oflow>
 800c896:	e6ff      	b.n	800c698 <__ieee754_pow+0x50>
 800c898:	4b1c      	ldr	r3, [pc, #112]	@ (800c90c <__ieee754_pow+0x2c4>)
 800c89a:	e7e8      	b.n	800c86e <__ieee754_pow+0x226>
 800c89c:	9b06      	ldr	r3, [sp, #24]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	dcf6      	bgt.n	800c890 <__ieee754_pow+0x248>
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	f000 fc8b 	bl	800d1be <__math_uflow>
 800c8a8:	e6f6      	b.n	800c698 <__ieee754_pow+0x50>
 800c8aa:	4b19      	ldr	r3, [pc, #100]	@ (800c910 <__ieee754_pow+0x2c8>)
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	d80b      	bhi.n	800c8c8 <__ieee754_pow+0x280>
 800c8b0:	9808      	ldr	r0, [sp, #32]
 800c8b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f7f3 fdd8 	bl	800046c <__aeabi_dcmplt>
 800c8bc:	1e43      	subs	r3, r0, #1
 800c8be:	4198      	sbcs	r0, r3
 800c8c0:	9b06      	ldr	r3, [sp, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	daee      	bge.n	800c8a4 <__ieee754_pow+0x25c>
 800c8c6:	e7e4      	b.n	800c892 <__ieee754_pow+0x24a>
 800c8c8:	4b0d      	ldr	r3, [pc, #52]	@ (800c900 <__ieee754_pow+0x2b8>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	429c      	cmp	r4, r3
 800c8ce:	d921      	bls.n	800c914 <__ieee754_pow+0x2cc>
 800c8d0:	9808      	ldr	r0, [sp, #32]
 800c8d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f7f3 fdc9 	bl	800046c <__aeabi_dcmplt>
 800c8da:	1e43      	subs	r3, r0, #1
 800c8dc:	4198      	sbcs	r0, r3
 800c8de:	9b06      	ldr	r3, [sp, #24]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	dcd6      	bgt.n	800c892 <__ieee754_pow+0x24a>
 800c8e4:	e7de      	b.n	800c8a4 <__ieee754_pow+0x25c>
 800c8e6:	46c0      	nop			@ (mov r8, r8)
 800c8e8:	fff00000 	.word	0xfff00000
 800c8ec:	7ff00000 	.word	0x7ff00000
 800c8f0:	c0100000 	.word	0xc0100000
 800c8f4:	433fffff 	.word	0x433fffff
 800c8f8:	3fefffff 	.word	0x3fefffff
 800c8fc:	fffffc01 	.word	0xfffffc01
 800c900:	3ff00000 	.word	0x3ff00000
 800c904:	3fe00000 	.word	0x3fe00000
 800c908:	43f00000 	.word	0x43f00000
 800c90c:	bff00000 	.word	0xbff00000
 800c910:	3feffffe 	.word	0x3feffffe
 800c914:	9800      	ldr	r0, [sp, #0]
 800c916:	9901      	ldr	r1, [sp, #4]
 800c918:	4b4f      	ldr	r3, [pc, #316]	@ (800ca58 <__ieee754_pow+0x410>)
 800c91a:	f7f5 ff37 	bl	800278c <__aeabi_dsub>
 800c91e:	22c0      	movs	r2, #192	@ 0xc0
 800c920:	4b4e      	ldr	r3, [pc, #312]	@ (800ca5c <__ieee754_pow+0x414>)
 800c922:	05d2      	lsls	r2, r2, #23
 800c924:	0006      	movs	r6, r0
 800c926:	000f      	movs	r7, r1
 800c928:	f7f5 fc68 	bl	80021fc <__aeabi_dmul>
 800c92c:	4a4c      	ldr	r2, [pc, #304]	@ (800ca60 <__ieee754_pow+0x418>)
 800c92e:	9004      	str	r0, [sp, #16]
 800c930:	9105      	str	r1, [sp, #20]
 800c932:	4b4c      	ldr	r3, [pc, #304]	@ (800ca64 <__ieee754_pow+0x41c>)
 800c934:	0030      	movs	r0, r6
 800c936:	0039      	movs	r1, r7
 800c938:	f7f5 fc60 	bl	80021fc <__aeabi_dmul>
 800c93c:	2200      	movs	r2, #0
 800c93e:	9000      	str	r0, [sp, #0]
 800c940:	9101      	str	r1, [sp, #4]
 800c942:	4b49      	ldr	r3, [pc, #292]	@ (800ca68 <__ieee754_pow+0x420>)
 800c944:	0030      	movs	r0, r6
 800c946:	0039      	movs	r1, r7
 800c948:	f7f5 fc58 	bl	80021fc <__aeabi_dmul>
 800c94c:	0002      	movs	r2, r0
 800c94e:	000b      	movs	r3, r1
 800c950:	4846      	ldr	r0, [pc, #280]	@ (800ca6c <__ieee754_pow+0x424>)
 800c952:	4947      	ldr	r1, [pc, #284]	@ (800ca70 <__ieee754_pow+0x428>)
 800c954:	f7f5 ff1a 	bl	800278c <__aeabi_dsub>
 800c958:	0032      	movs	r2, r6
 800c95a:	003b      	movs	r3, r7
 800c95c:	f7f5 fc4e 	bl	80021fc <__aeabi_dmul>
 800c960:	0002      	movs	r2, r0
 800c962:	000b      	movs	r3, r1
 800c964:	2000      	movs	r0, #0
 800c966:	4943      	ldr	r1, [pc, #268]	@ (800ca74 <__ieee754_pow+0x42c>)
 800c968:	f7f5 ff10 	bl	800278c <__aeabi_dsub>
 800c96c:	0032      	movs	r2, r6
 800c96e:	0004      	movs	r4, r0
 800c970:	000d      	movs	r5, r1
 800c972:	003b      	movs	r3, r7
 800c974:	0030      	movs	r0, r6
 800c976:	0039      	movs	r1, r7
 800c978:	f7f5 fc40 	bl	80021fc <__aeabi_dmul>
 800c97c:	0002      	movs	r2, r0
 800c97e:	000b      	movs	r3, r1
 800c980:	0020      	movs	r0, r4
 800c982:	0029      	movs	r1, r5
 800c984:	f7f5 fc3a 	bl	80021fc <__aeabi_dmul>
 800c988:	4a3b      	ldr	r2, [pc, #236]	@ (800ca78 <__ieee754_pow+0x430>)
 800c98a:	4b34      	ldr	r3, [pc, #208]	@ (800ca5c <__ieee754_pow+0x414>)
 800c98c:	f7f5 fc36 	bl	80021fc <__aeabi_dmul>
 800c990:	0002      	movs	r2, r0
 800c992:	000b      	movs	r3, r1
 800c994:	9800      	ldr	r0, [sp, #0]
 800c996:	9901      	ldr	r1, [sp, #4]
 800c998:	f7f5 fef8 	bl	800278c <__aeabi_dsub>
 800c99c:	0002      	movs	r2, r0
 800c99e:	000b      	movs	r3, r1
 800c9a0:	0004      	movs	r4, r0
 800c9a2:	000d      	movs	r5, r1
 800c9a4:	9804      	ldr	r0, [sp, #16]
 800c9a6:	9905      	ldr	r1, [sp, #20]
 800c9a8:	f7f4 fc80 	bl	80012ac <__aeabi_dadd>
 800c9ac:	9a04      	ldr	r2, [sp, #16]
 800c9ae:	9b05      	ldr	r3, [sp, #20]
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	9000      	str	r0, [sp, #0]
 800c9b4:	9101      	str	r1, [sp, #4]
 800c9b6:	f7f5 fee9 	bl	800278c <__aeabi_dsub>
 800c9ba:	0002      	movs	r2, r0
 800c9bc:	000b      	movs	r3, r1
 800c9be:	0020      	movs	r0, r4
 800c9c0:	0029      	movs	r1, r5
 800c9c2:	f7f5 fee3 	bl	800278c <__aeabi_dsub>
 800c9c6:	9b02      	ldr	r3, [sp, #8]
 800c9c8:	9c03      	ldr	r4, [sp, #12]
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	9405      	str	r4, [sp, #20]
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	9304      	str	r3, [sp, #16]
 800c9d2:	9c04      	ldr	r4, [sp, #16]
 800c9d4:	9d05      	ldr	r5, [sp, #20]
 800c9d6:	0006      	movs	r6, r0
 800c9d8:	000f      	movs	r7, r1
 800c9da:	9802      	ldr	r0, [sp, #8]
 800c9dc:	9903      	ldr	r1, [sp, #12]
 800c9de:	0022      	movs	r2, r4
 800c9e0:	002b      	movs	r3, r5
 800c9e2:	f7f5 fed3 	bl	800278c <__aeabi_dsub>
 800c9e6:	9a00      	ldr	r2, [sp, #0]
 800c9e8:	9b01      	ldr	r3, [sp, #4]
 800c9ea:	f7f5 fc07 	bl	80021fc <__aeabi_dmul>
 800c9ee:	9a02      	ldr	r2, [sp, #8]
 800c9f0:	9b03      	ldr	r3, [sp, #12]
 800c9f2:	9006      	str	r0, [sp, #24]
 800c9f4:	9107      	str	r1, [sp, #28]
 800c9f6:	0030      	movs	r0, r6
 800c9f8:	0039      	movs	r1, r7
 800c9fa:	f7f5 fbff 	bl	80021fc <__aeabi_dmul>
 800c9fe:	0002      	movs	r2, r0
 800ca00:	000b      	movs	r3, r1
 800ca02:	9806      	ldr	r0, [sp, #24]
 800ca04:	9907      	ldr	r1, [sp, #28]
 800ca06:	f7f4 fc51 	bl	80012ac <__aeabi_dadd>
 800ca0a:	0022      	movs	r2, r4
 800ca0c:	002b      	movs	r3, r5
 800ca0e:	9002      	str	r0, [sp, #8]
 800ca10:	9103      	str	r1, [sp, #12]
 800ca12:	9800      	ldr	r0, [sp, #0]
 800ca14:	9901      	ldr	r1, [sp, #4]
 800ca16:	f7f5 fbf1 	bl	80021fc <__aeabi_dmul>
 800ca1a:	000b      	movs	r3, r1
 800ca1c:	0002      	movs	r2, r0
 800ca1e:	0006      	movs	r6, r0
 800ca20:	000f      	movs	r7, r1
 800ca22:	9802      	ldr	r0, [sp, #8]
 800ca24:	9903      	ldr	r1, [sp, #12]
 800ca26:	f7f4 fc41 	bl	80012ac <__aeabi_dadd>
 800ca2a:	9000      	str	r0, [sp, #0]
 800ca2c:	9101      	str	r1, [sp, #4]
 800ca2e:	9c01      	ldr	r4, [sp, #4]
 800ca30:	4b12      	ldr	r3, [pc, #72]	@ (800ca7c <__ieee754_pow+0x434>)
 800ca32:	9406      	str	r4, [sp, #24]
 800ca34:	429c      	cmp	r4, r3
 800ca36:	dc00      	bgt.n	800ca3a <__ieee754_pow+0x3f2>
 800ca38:	e222      	b.n	800ce80 <__ieee754_pow+0x838>
 800ca3a:	4a11      	ldr	r2, [pc, #68]	@ (800ca80 <__ieee754_pow+0x438>)
 800ca3c:	18a3      	adds	r3, r4, r2
 800ca3e:	9a00      	ldr	r2, [sp, #0]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	d100      	bne.n	800ca46 <__ieee754_pow+0x3fe>
 800ca44:	e1a0      	b.n	800cd88 <__ieee754_pow+0x740>
 800ca46:	9808      	ldr	r0, [sp, #32]
 800ca48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f7f3 fd0d 	bl	800046c <__aeabi_dcmplt>
 800ca52:	1e43      	subs	r3, r0, #1
 800ca54:	4198      	sbcs	r0, r3
 800ca56:	e71c      	b.n	800c892 <__ieee754_pow+0x24a>
 800ca58:	3ff00000 	.word	0x3ff00000
 800ca5c:	3ff71547 	.word	0x3ff71547
 800ca60:	f85ddf44 	.word	0xf85ddf44
 800ca64:	3e54ae0b 	.word	0x3e54ae0b
 800ca68:	3fd00000 	.word	0x3fd00000
 800ca6c:	55555555 	.word	0x55555555
 800ca70:	3fd55555 	.word	0x3fd55555
 800ca74:	3fe00000 	.word	0x3fe00000
 800ca78:	652b82fe 	.word	0x652b82fe
 800ca7c:	408fffff 	.word	0x408fffff
 800ca80:	bf700000 	.word	0xbf700000
 800ca84:	4be0      	ldr	r3, [pc, #896]	@ (800ce08 <__ieee754_pow+0x7c0>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	423b      	tst	r3, r7
 800ca8a:	d10b      	bne.n	800caa4 <__ieee754_pow+0x45c>
 800ca8c:	9800      	ldr	r0, [sp, #0]
 800ca8e:	9901      	ldr	r1, [sp, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	4bde      	ldr	r3, [pc, #888]	@ (800ce0c <__ieee754_pow+0x7c4>)
 800ca94:	f7f5 fbb2 	bl	80021fc <__aeabi_dmul>
 800ca98:	2235      	movs	r2, #53	@ 0x35
 800ca9a:	9000      	str	r0, [sp, #0]
 800ca9c:	9101      	str	r1, [sp, #4]
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	4252      	negs	r2, r2
 800caa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800caa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caa6:	49da      	ldr	r1, [pc, #872]	@ (800ce10 <__ieee754_pow+0x7c8>)
 800caa8:	151b      	asrs	r3, r3, #20
 800caaa:	185b      	adds	r3, r3, r1
 800caac:	189b      	adds	r3, r3, r2
 800caae:	930e      	str	r3, [sp, #56]	@ 0x38
 800cab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cab2:	4dd8      	ldr	r5, [pc, #864]	@ (800ce14 <__ieee754_pow+0x7cc>)
 800cab4:	031b      	lsls	r3, r3, #12
 800cab6:	4ad8      	ldr	r2, [pc, #864]	@ (800ce18 <__ieee754_pow+0x7d0>)
 800cab8:	0b1b      	lsrs	r3, r3, #12
 800caba:	2600      	movs	r6, #0
 800cabc:	431d      	orrs	r5, r3
 800cabe:	4293      	cmp	r3, r2
 800cac0:	dd09      	ble.n	800cad6 <__ieee754_pow+0x48e>
 800cac2:	4ad6      	ldr	r2, [pc, #856]	@ (800ce1c <__ieee754_pow+0x7d4>)
 800cac4:	3601      	adds	r6, #1
 800cac6:	4293      	cmp	r3, r2
 800cac8:	dd05      	ble.n	800cad6 <__ieee754_pow+0x48e>
 800caca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cacc:	199b      	adds	r3, r3, r6
 800cace:	2600      	movs	r6, #0
 800cad0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cad2:	4bd3      	ldr	r3, [pc, #844]	@ (800ce20 <__ieee754_pow+0x7d8>)
 800cad4:	18ed      	adds	r5, r5, r3
 800cad6:	9800      	ldr	r0, [sp, #0]
 800cad8:	9901      	ldr	r1, [sp, #4]
 800cada:	0029      	movs	r1, r5
 800cadc:	4bd1      	ldr	r3, [pc, #836]	@ (800ce24 <__ieee754_pow+0x7dc>)
 800cade:	00f2      	lsls	r2, r6, #3
 800cae0:	189b      	adds	r3, r3, r2
 800cae2:	685c      	ldr	r4, [r3, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cae8:	930a      	str	r3, [sp, #40]	@ 0x28
 800caea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800caec:	001a      	movs	r2, r3
 800caee:	0023      	movs	r3, r4
 800caf0:	900c      	str	r0, [sp, #48]	@ 0x30
 800caf2:	910d      	str	r1, [sp, #52]	@ 0x34
 800caf4:	f7f5 fe4a 	bl	800278c <__aeabi_dsub>
 800caf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cafa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cafc:	9010      	str	r0, [sp, #64]	@ 0x40
 800cafe:	9111      	str	r1, [sp, #68]	@ 0x44
 800cb00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb04:	f7f4 fbd2 	bl	80012ac <__aeabi_dadd>
 800cb08:	0002      	movs	r2, r0
 800cb0a:	000b      	movs	r3, r1
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	49c1      	ldr	r1, [pc, #772]	@ (800ce14 <__ieee754_pow+0x7cc>)
 800cb10:	f7f4 ff30 	bl	8001974 <__aeabi_ddiv>
 800cb14:	0002      	movs	r2, r0
 800cb16:	000b      	movs	r3, r1
 800cb18:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cb1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cb1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cb20:	f7f5 fb6c 	bl	80021fc <__aeabi_dmul>
 800cb24:	9006      	str	r0, [sp, #24]
 800cb26:	9107      	str	r1, [sp, #28]
 800cb28:	9b06      	ldr	r3, [sp, #24]
 800cb2a:	9c07      	ldr	r4, [sp, #28]
 800cb2c:	2180      	movs	r1, #128	@ 0x80
 800cb2e:	9304      	str	r3, [sp, #16]
 800cb30:	9405      	str	r4, [sp, #20]
 800cb32:	2080      	movs	r0, #128	@ 0x80
 800cb34:	2300      	movs	r3, #0
 800cb36:	2200      	movs	r2, #0
 800cb38:	106d      	asrs	r5, r5, #1
 800cb3a:	0589      	lsls	r1, r1, #22
 800cb3c:	9304      	str	r3, [sp, #16]
 800cb3e:	4329      	orrs	r1, r5
 800cb40:	0300      	lsls	r0, r0, #12
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	9c05      	ldr	r4, [sp, #20]
 800cb46:	1809      	adds	r1, r1, r0
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	9401      	str	r4, [sp, #4]
 800cb4c:	04b6      	lsls	r6, r6, #18
 800cb4e:	198b      	adds	r3, r1, r6
 800cb50:	9800      	ldr	r0, [sp, #0]
 800cb52:	9901      	ldr	r1, [sp, #4]
 800cb54:	0014      	movs	r4, r2
 800cb56:	001d      	movs	r5, r3
 800cb58:	f7f5 fb50 	bl	80021fc <__aeabi_dmul>
 800cb5c:	0002      	movs	r2, r0
 800cb5e:	000b      	movs	r3, r1
 800cb60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cb62:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cb64:	f7f5 fe12 	bl	800278c <__aeabi_dsub>
 800cb68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb6c:	0006      	movs	r6, r0
 800cb6e:	000f      	movs	r7, r1
 800cb70:	0020      	movs	r0, r4
 800cb72:	0029      	movs	r1, r5
 800cb74:	f7f5 fe0a 	bl	800278c <__aeabi_dsub>
 800cb78:	0002      	movs	r2, r0
 800cb7a:	000b      	movs	r3, r1
 800cb7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cb7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cb80:	f7f5 fe04 	bl	800278c <__aeabi_dsub>
 800cb84:	9a00      	ldr	r2, [sp, #0]
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	f7f5 fb38 	bl	80021fc <__aeabi_dmul>
 800cb8c:	0002      	movs	r2, r0
 800cb8e:	000b      	movs	r3, r1
 800cb90:	0030      	movs	r0, r6
 800cb92:	0039      	movs	r1, r7
 800cb94:	f7f5 fdfa 	bl	800278c <__aeabi_dsub>
 800cb98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cb9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb9c:	f7f5 fb2e 	bl	80021fc <__aeabi_dmul>
 800cba0:	9a06      	ldr	r2, [sp, #24]
 800cba2:	9b07      	ldr	r3, [sp, #28]
 800cba4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cba6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cba8:	0010      	movs	r0, r2
 800cbaa:	0019      	movs	r1, r3
 800cbac:	f7f5 fb26 	bl	80021fc <__aeabi_dmul>
 800cbb0:	0006      	movs	r6, r0
 800cbb2:	000f      	movs	r7, r1
 800cbb4:	4a9c      	ldr	r2, [pc, #624]	@ (800ce28 <__ieee754_pow+0x7e0>)
 800cbb6:	4b9d      	ldr	r3, [pc, #628]	@ (800ce2c <__ieee754_pow+0x7e4>)
 800cbb8:	f7f5 fb20 	bl	80021fc <__aeabi_dmul>
 800cbbc:	4a9c      	ldr	r2, [pc, #624]	@ (800ce30 <__ieee754_pow+0x7e8>)
 800cbbe:	4b9d      	ldr	r3, [pc, #628]	@ (800ce34 <__ieee754_pow+0x7ec>)
 800cbc0:	f7f4 fb74 	bl	80012ac <__aeabi_dadd>
 800cbc4:	0032      	movs	r2, r6
 800cbc6:	003b      	movs	r3, r7
 800cbc8:	f7f5 fb18 	bl	80021fc <__aeabi_dmul>
 800cbcc:	4a9a      	ldr	r2, [pc, #616]	@ (800ce38 <__ieee754_pow+0x7f0>)
 800cbce:	4b9b      	ldr	r3, [pc, #620]	@ (800ce3c <__ieee754_pow+0x7f4>)
 800cbd0:	f7f4 fb6c 	bl	80012ac <__aeabi_dadd>
 800cbd4:	0032      	movs	r2, r6
 800cbd6:	003b      	movs	r3, r7
 800cbd8:	f7f5 fb10 	bl	80021fc <__aeabi_dmul>
 800cbdc:	4a98      	ldr	r2, [pc, #608]	@ (800ce40 <__ieee754_pow+0x7f8>)
 800cbde:	4b99      	ldr	r3, [pc, #612]	@ (800ce44 <__ieee754_pow+0x7fc>)
 800cbe0:	f7f4 fb64 	bl	80012ac <__aeabi_dadd>
 800cbe4:	0032      	movs	r2, r6
 800cbe6:	003b      	movs	r3, r7
 800cbe8:	f7f5 fb08 	bl	80021fc <__aeabi_dmul>
 800cbec:	4a96      	ldr	r2, [pc, #600]	@ (800ce48 <__ieee754_pow+0x800>)
 800cbee:	4b97      	ldr	r3, [pc, #604]	@ (800ce4c <__ieee754_pow+0x804>)
 800cbf0:	f7f4 fb5c 	bl	80012ac <__aeabi_dadd>
 800cbf4:	0032      	movs	r2, r6
 800cbf6:	003b      	movs	r3, r7
 800cbf8:	f7f5 fb00 	bl	80021fc <__aeabi_dmul>
 800cbfc:	4a94      	ldr	r2, [pc, #592]	@ (800ce50 <__ieee754_pow+0x808>)
 800cbfe:	4b95      	ldr	r3, [pc, #596]	@ (800ce54 <__ieee754_pow+0x80c>)
 800cc00:	f7f4 fb54 	bl	80012ac <__aeabi_dadd>
 800cc04:	0032      	movs	r2, r6
 800cc06:	0004      	movs	r4, r0
 800cc08:	000d      	movs	r5, r1
 800cc0a:	003b      	movs	r3, r7
 800cc0c:	0030      	movs	r0, r6
 800cc0e:	0039      	movs	r1, r7
 800cc10:	f7f5 faf4 	bl	80021fc <__aeabi_dmul>
 800cc14:	0002      	movs	r2, r0
 800cc16:	000b      	movs	r3, r1
 800cc18:	0020      	movs	r0, r4
 800cc1a:	0029      	movs	r1, r5
 800cc1c:	f7f5 faee 	bl	80021fc <__aeabi_dmul>
 800cc20:	9a00      	ldr	r2, [sp, #0]
 800cc22:	9b01      	ldr	r3, [sp, #4]
 800cc24:	0004      	movs	r4, r0
 800cc26:	000d      	movs	r5, r1
 800cc28:	9806      	ldr	r0, [sp, #24]
 800cc2a:	9907      	ldr	r1, [sp, #28]
 800cc2c:	f7f4 fb3e 	bl	80012ac <__aeabi_dadd>
 800cc30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc34:	f7f5 fae2 	bl	80021fc <__aeabi_dmul>
 800cc38:	0022      	movs	r2, r4
 800cc3a:	002b      	movs	r3, r5
 800cc3c:	f7f4 fb36 	bl	80012ac <__aeabi_dadd>
 800cc40:	9a00      	ldr	r2, [sp, #0]
 800cc42:	9b01      	ldr	r3, [sp, #4]
 800cc44:	900c      	str	r0, [sp, #48]	@ 0x30
 800cc46:	910d      	str	r1, [sp, #52]	@ 0x34
 800cc48:	0010      	movs	r0, r2
 800cc4a:	0019      	movs	r1, r3
 800cc4c:	f7f5 fad6 	bl	80021fc <__aeabi_dmul>
 800cc50:	2200      	movs	r2, #0
 800cc52:	4b81      	ldr	r3, [pc, #516]	@ (800ce58 <__ieee754_pow+0x810>)
 800cc54:	0004      	movs	r4, r0
 800cc56:	000d      	movs	r5, r1
 800cc58:	f7f4 fb28 	bl	80012ac <__aeabi_dadd>
 800cc5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cc5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc60:	f7f4 fb24 	bl	80012ac <__aeabi_dadd>
 800cc64:	2000      	movs	r0, #0
 800cc66:	000f      	movs	r7, r1
 800cc68:	0006      	movs	r6, r0
 800cc6a:	0002      	movs	r2, r0
 800cc6c:	000b      	movs	r3, r1
 800cc6e:	9800      	ldr	r0, [sp, #0]
 800cc70:	9901      	ldr	r1, [sp, #4]
 800cc72:	f7f5 fac3 	bl	80021fc <__aeabi_dmul>
 800cc76:	2200      	movs	r2, #0
 800cc78:	9000      	str	r0, [sp, #0]
 800cc7a:	9101      	str	r1, [sp, #4]
 800cc7c:	4b76      	ldr	r3, [pc, #472]	@ (800ce58 <__ieee754_pow+0x810>)
 800cc7e:	0030      	movs	r0, r6
 800cc80:	0039      	movs	r1, r7
 800cc82:	f7f5 fd83 	bl	800278c <__aeabi_dsub>
 800cc86:	0022      	movs	r2, r4
 800cc88:	002b      	movs	r3, r5
 800cc8a:	f7f5 fd7f 	bl	800278c <__aeabi_dsub>
 800cc8e:	0002      	movs	r2, r0
 800cc90:	000b      	movs	r3, r1
 800cc92:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800cc94:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cc96:	f7f5 fd79 	bl	800278c <__aeabi_dsub>
 800cc9a:	9a06      	ldr	r2, [sp, #24]
 800cc9c:	9b07      	ldr	r3, [sp, #28]
 800cc9e:	f7f5 faad 	bl	80021fc <__aeabi_dmul>
 800cca2:	0032      	movs	r2, r6
 800cca4:	0004      	movs	r4, r0
 800cca6:	000d      	movs	r5, r1
 800cca8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ccac:	003b      	movs	r3, r7
 800ccae:	f7f5 faa5 	bl	80021fc <__aeabi_dmul>
 800ccb2:	0002      	movs	r2, r0
 800ccb4:	000b      	movs	r3, r1
 800ccb6:	0020      	movs	r0, r4
 800ccb8:	0029      	movs	r1, r5
 800ccba:	f7f4 faf7 	bl	80012ac <__aeabi_dadd>
 800ccbe:	0004      	movs	r4, r0
 800ccc0:	000d      	movs	r5, r1
 800ccc2:	0002      	movs	r2, r0
 800ccc4:	000b      	movs	r3, r1
 800ccc6:	9800      	ldr	r0, [sp, #0]
 800ccc8:	9901      	ldr	r1, [sp, #4]
 800ccca:	f7f4 faef 	bl	80012ac <__aeabi_dadd>
 800ccce:	22e0      	movs	r2, #224	@ 0xe0
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	4b62      	ldr	r3, [pc, #392]	@ (800ce5c <__ieee754_pow+0x814>)
 800ccd4:	0612      	lsls	r2, r2, #24
 800ccd6:	0006      	movs	r6, r0
 800ccd8:	000f      	movs	r7, r1
 800ccda:	f7f5 fa8f 	bl	80021fc <__aeabi_dmul>
 800ccde:	9006      	str	r0, [sp, #24]
 800cce0:	9107      	str	r1, [sp, #28]
 800cce2:	9a00      	ldr	r2, [sp, #0]
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	0030      	movs	r0, r6
 800cce8:	0039      	movs	r1, r7
 800ccea:	f7f5 fd4f 	bl	800278c <__aeabi_dsub>
 800ccee:	0002      	movs	r2, r0
 800ccf0:	000b      	movs	r3, r1
 800ccf2:	0020      	movs	r0, r4
 800ccf4:	0029      	movs	r1, r5
 800ccf6:	f7f5 fd49 	bl	800278c <__aeabi_dsub>
 800ccfa:	4a59      	ldr	r2, [pc, #356]	@ (800ce60 <__ieee754_pow+0x818>)
 800ccfc:	4b57      	ldr	r3, [pc, #348]	@ (800ce5c <__ieee754_pow+0x814>)
 800ccfe:	f7f5 fa7d 	bl	80021fc <__aeabi_dmul>
 800cd02:	4a58      	ldr	r2, [pc, #352]	@ (800ce64 <__ieee754_pow+0x81c>)
 800cd04:	0004      	movs	r4, r0
 800cd06:	000d      	movs	r5, r1
 800cd08:	0030      	movs	r0, r6
 800cd0a:	0039      	movs	r1, r7
 800cd0c:	4b56      	ldr	r3, [pc, #344]	@ (800ce68 <__ieee754_pow+0x820>)
 800cd0e:	f7f5 fa75 	bl	80021fc <__aeabi_dmul>
 800cd12:	0002      	movs	r2, r0
 800cd14:	000b      	movs	r3, r1
 800cd16:	0020      	movs	r0, r4
 800cd18:	0029      	movs	r1, r5
 800cd1a:	f7f4 fac7 	bl	80012ac <__aeabi_dadd>
 800cd1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd20:	4b52      	ldr	r3, [pc, #328]	@ (800ce6c <__ieee754_pow+0x824>)
 800cd22:	189b      	adds	r3, r3, r2
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f7f4 fac0 	bl	80012ac <__aeabi_dadd>
 800cd2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd2e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cd30:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800cd32:	f7f6 f925 	bl	8002f80 <__aeabi_i2d>
 800cd36:	0004      	movs	r4, r0
 800cd38:	000d      	movs	r5, r1
 800cd3a:	9806      	ldr	r0, [sp, #24]
 800cd3c:	9907      	ldr	r1, [sp, #28]
 800cd3e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd40:	4b4b      	ldr	r3, [pc, #300]	@ (800ce70 <__ieee754_pow+0x828>)
 800cd42:	189b      	adds	r3, r3, r2
 800cd44:	681e      	ldr	r6, [r3, #0]
 800cd46:	685f      	ldr	r7, [r3, #4]
 800cd48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd4c:	f7f4 faae 	bl	80012ac <__aeabi_dadd>
 800cd50:	0032      	movs	r2, r6
 800cd52:	003b      	movs	r3, r7
 800cd54:	f7f4 faaa 	bl	80012ac <__aeabi_dadd>
 800cd58:	0022      	movs	r2, r4
 800cd5a:	002b      	movs	r3, r5
 800cd5c:	f7f4 faa6 	bl	80012ac <__aeabi_dadd>
 800cd60:	2000      	movs	r0, #0
 800cd62:	0022      	movs	r2, r4
 800cd64:	002b      	movs	r3, r5
 800cd66:	9000      	str	r0, [sp, #0]
 800cd68:	9101      	str	r1, [sp, #4]
 800cd6a:	f7f5 fd0f 	bl	800278c <__aeabi_dsub>
 800cd6e:	0032      	movs	r2, r6
 800cd70:	003b      	movs	r3, r7
 800cd72:	f7f5 fd0b 	bl	800278c <__aeabi_dsub>
 800cd76:	9a06      	ldr	r2, [sp, #24]
 800cd78:	9b07      	ldr	r3, [sp, #28]
 800cd7a:	f7f5 fd07 	bl	800278c <__aeabi_dsub>
 800cd7e:	0002      	movs	r2, r0
 800cd80:	000b      	movs	r3, r1
 800cd82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd86:	e61c      	b.n	800c9c2 <__ieee754_pow+0x37a>
 800cd88:	4a3a      	ldr	r2, [pc, #232]	@ (800ce74 <__ieee754_pow+0x82c>)
 800cd8a:	4b3b      	ldr	r3, [pc, #236]	@ (800ce78 <__ieee754_pow+0x830>)
 800cd8c:	9802      	ldr	r0, [sp, #8]
 800cd8e:	9903      	ldr	r1, [sp, #12]
 800cd90:	f7f4 fa8c 	bl	80012ac <__aeabi_dadd>
 800cd94:	0032      	movs	r2, r6
 800cd96:	003b      	movs	r3, r7
 800cd98:	9004      	str	r0, [sp, #16]
 800cd9a:	9105      	str	r1, [sp, #20]
 800cd9c:	9800      	ldr	r0, [sp, #0]
 800cd9e:	9901      	ldr	r1, [sp, #4]
 800cda0:	f7f5 fcf4 	bl	800278c <__aeabi_dsub>
 800cda4:	0002      	movs	r2, r0
 800cda6:	000b      	movs	r3, r1
 800cda8:	9804      	ldr	r0, [sp, #16]
 800cdaa:	9905      	ldr	r1, [sp, #20]
 800cdac:	f7f3 fb72 	bl	8000494 <__aeabi_dcmpgt>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d000      	beq.n	800cdb6 <__ieee754_pow+0x76e>
 800cdb4:	e647      	b.n	800ca46 <__ieee754_pow+0x3fe>
 800cdb6:	2580      	movs	r5, #128	@ 0x80
 800cdb8:	4b30      	ldr	r3, [pc, #192]	@ (800ce7c <__ieee754_pow+0x834>)
 800cdba:	036d      	lsls	r5, r5, #13
 800cdbc:	1524      	asrs	r4, r4, #20
 800cdbe:	18e4      	adds	r4, r4, r3
 800cdc0:	002b      	movs	r3, r5
 800cdc2:	4123      	asrs	r3, r4
 800cdc4:	9a06      	ldr	r2, [sp, #24]
 800cdc6:	4912      	ldr	r1, [pc, #72]	@ (800ce10 <__ieee754_pow+0x7c8>)
 800cdc8:	189b      	adds	r3, r3, r2
 800cdca:	005a      	lsls	r2, r3, #1
 800cdcc:	4c14      	ldr	r4, [pc, #80]	@ (800ce20 <__ieee754_pow+0x7d8>)
 800cdce:	0d52      	lsrs	r2, r2, #21
 800cdd0:	1852      	adds	r2, r2, r1
 800cdd2:	4114      	asrs	r4, r2
 800cdd4:	401c      	ands	r4, r3
 800cdd6:	0021      	movs	r1, r4
 800cdd8:	2414      	movs	r4, #20
 800cdda:	031b      	lsls	r3, r3, #12
 800cddc:	0b1b      	lsrs	r3, r3, #12
 800cdde:	432b      	orrs	r3, r5
 800cde0:	1aa2      	subs	r2, r4, r2
 800cde2:	4113      	asrs	r3, r2
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	9b06      	ldr	r3, [sp, #24]
 800cde8:	2000      	movs	r0, #0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	da02      	bge.n	800cdf4 <__ieee754_pow+0x7ac>
 800cdee:	9b00      	ldr	r3, [sp, #0]
 800cdf0:	425b      	negs	r3, r3
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	0002      	movs	r2, r0
 800cdf6:	000b      	movs	r3, r1
 800cdf8:	0030      	movs	r0, r6
 800cdfa:	0039      	movs	r1, r7
 800cdfc:	f7f5 fcc6 	bl	800278c <__aeabi_dsub>
 800ce00:	0006      	movs	r6, r0
 800ce02:	000f      	movs	r7, r1
 800ce04:	e065      	b.n	800ced2 <__ieee754_pow+0x88a>
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	7ff00000 	.word	0x7ff00000
 800ce0c:	43400000 	.word	0x43400000
 800ce10:	fffffc01 	.word	0xfffffc01
 800ce14:	3ff00000 	.word	0x3ff00000
 800ce18:	0003988e 	.word	0x0003988e
 800ce1c:	000bb679 	.word	0x000bb679
 800ce20:	fff00000 	.word	0xfff00000
 800ce24:	0800db50 	.word	0x0800db50
 800ce28:	4a454eef 	.word	0x4a454eef
 800ce2c:	3fca7e28 	.word	0x3fca7e28
 800ce30:	93c9db65 	.word	0x93c9db65
 800ce34:	3fcd864a 	.word	0x3fcd864a
 800ce38:	a91d4101 	.word	0xa91d4101
 800ce3c:	3fd17460 	.word	0x3fd17460
 800ce40:	518f264d 	.word	0x518f264d
 800ce44:	3fd55555 	.word	0x3fd55555
 800ce48:	db6fabff 	.word	0xdb6fabff
 800ce4c:	3fdb6db6 	.word	0x3fdb6db6
 800ce50:	33333303 	.word	0x33333303
 800ce54:	3fe33333 	.word	0x3fe33333
 800ce58:	40080000 	.word	0x40080000
 800ce5c:	3feec709 	.word	0x3feec709
 800ce60:	dc3a03fd 	.word	0xdc3a03fd
 800ce64:	145b01f5 	.word	0x145b01f5
 800ce68:	be3e2fe0 	.word	0xbe3e2fe0
 800ce6c:	0800db30 	.word	0x0800db30
 800ce70:	0800db40 	.word	0x0800db40
 800ce74:	652b82fe 	.word	0x652b82fe
 800ce78:	3c971547 	.word	0x3c971547
 800ce7c:	fffffc02 	.word	0xfffffc02
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	005c      	lsls	r4, r3, #1
 800ce84:	4b72      	ldr	r3, [pc, #456]	@ (800d050 <__ieee754_pow+0xa08>)
 800ce86:	0864      	lsrs	r4, r4, #1
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	d91c      	bls.n	800cec6 <__ieee754_pow+0x87e>
 800ce8c:	4a71      	ldr	r2, [pc, #452]	@ (800d054 <__ieee754_pow+0xa0c>)
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	189b      	adds	r3, r3, r2
 800ce92:	9a00      	ldr	r2, [sp, #0]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	d008      	beq.n	800ceaa <__ieee754_pow+0x862>
 800ce98:	9808      	ldr	r0, [sp, #32]
 800ce9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f7f3 fae4 	bl	800046c <__aeabi_dcmplt>
 800cea4:	1e43      	subs	r3, r0, #1
 800cea6:	4198      	sbcs	r0, r3
 800cea8:	e4fc      	b.n	800c8a4 <__ieee754_pow+0x25c>
 800ceaa:	0032      	movs	r2, r6
 800ceac:	9800      	ldr	r0, [sp, #0]
 800ceae:	9901      	ldr	r1, [sp, #4]
 800ceb0:	003b      	movs	r3, r7
 800ceb2:	f7f5 fc6b 	bl	800278c <__aeabi_dsub>
 800ceb6:	9a02      	ldr	r2, [sp, #8]
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	f7f3 faf5 	bl	80004a8 <__aeabi_dcmpge>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d1ea      	bne.n	800ce98 <__ieee754_pow+0x850>
 800cec2:	4c65      	ldr	r4, [pc, #404]	@ (800d058 <__ieee754_pow+0xa10>)
 800cec4:	e777      	b.n	800cdb6 <__ieee754_pow+0x76e>
 800cec6:	9a04      	ldr	r2, [sp, #16]
 800cec8:	4b64      	ldr	r3, [pc, #400]	@ (800d05c <__ieee754_pow+0xa14>)
 800ceca:	9200      	str	r2, [sp, #0]
 800cecc:	429c      	cmp	r4, r3
 800cece:	d900      	bls.n	800ced2 <__ieee754_pow+0x88a>
 800ced0:	e771      	b.n	800cdb6 <__ieee754_pow+0x76e>
 800ced2:	9a02      	ldr	r2, [sp, #8]
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	0030      	movs	r0, r6
 800ced8:	0039      	movs	r1, r7
 800ceda:	f7f4 f9e7 	bl	80012ac <__aeabi_dadd>
 800cede:	2000      	movs	r0, #0
 800cee0:	2200      	movs	r2, #0
 800cee2:	4b5f      	ldr	r3, [pc, #380]	@ (800d060 <__ieee754_pow+0xa18>)
 800cee4:	9004      	str	r0, [sp, #16]
 800cee6:	9105      	str	r1, [sp, #20]
 800cee8:	f7f5 f988 	bl	80021fc <__aeabi_dmul>
 800ceec:	0032      	movs	r2, r6
 800ceee:	003b      	movs	r3, r7
 800cef0:	9006      	str	r0, [sp, #24]
 800cef2:	9107      	str	r1, [sp, #28]
 800cef4:	9804      	ldr	r0, [sp, #16]
 800cef6:	9905      	ldr	r1, [sp, #20]
 800cef8:	f7f5 fc48 	bl	800278c <__aeabi_dsub>
 800cefc:	0002      	movs	r2, r0
 800cefe:	000b      	movs	r3, r1
 800cf00:	9802      	ldr	r0, [sp, #8]
 800cf02:	9903      	ldr	r1, [sp, #12]
 800cf04:	f7f5 fc42 	bl	800278c <__aeabi_dsub>
 800cf08:	4a56      	ldr	r2, [pc, #344]	@ (800d064 <__ieee754_pow+0xa1c>)
 800cf0a:	4b57      	ldr	r3, [pc, #348]	@ (800d068 <__ieee754_pow+0xa20>)
 800cf0c:	f7f5 f976 	bl	80021fc <__aeabi_dmul>
 800cf10:	4a56      	ldr	r2, [pc, #344]	@ (800d06c <__ieee754_pow+0xa24>)
 800cf12:	0004      	movs	r4, r0
 800cf14:	000d      	movs	r5, r1
 800cf16:	9804      	ldr	r0, [sp, #16]
 800cf18:	9905      	ldr	r1, [sp, #20]
 800cf1a:	4b55      	ldr	r3, [pc, #340]	@ (800d070 <__ieee754_pow+0xa28>)
 800cf1c:	f7f5 f96e 	bl	80021fc <__aeabi_dmul>
 800cf20:	0002      	movs	r2, r0
 800cf22:	000b      	movs	r3, r1
 800cf24:	0020      	movs	r0, r4
 800cf26:	0029      	movs	r1, r5
 800cf28:	f7f4 f9c0 	bl	80012ac <__aeabi_dadd>
 800cf2c:	0004      	movs	r4, r0
 800cf2e:	000d      	movs	r5, r1
 800cf30:	0002      	movs	r2, r0
 800cf32:	000b      	movs	r3, r1
 800cf34:	9806      	ldr	r0, [sp, #24]
 800cf36:	9907      	ldr	r1, [sp, #28]
 800cf38:	f7f4 f9b8 	bl	80012ac <__aeabi_dadd>
 800cf3c:	9a06      	ldr	r2, [sp, #24]
 800cf3e:	9b07      	ldr	r3, [sp, #28]
 800cf40:	0006      	movs	r6, r0
 800cf42:	000f      	movs	r7, r1
 800cf44:	f7f5 fc22 	bl	800278c <__aeabi_dsub>
 800cf48:	0002      	movs	r2, r0
 800cf4a:	000b      	movs	r3, r1
 800cf4c:	0020      	movs	r0, r4
 800cf4e:	0029      	movs	r1, r5
 800cf50:	f7f5 fc1c 	bl	800278c <__aeabi_dsub>
 800cf54:	0032      	movs	r2, r6
 800cf56:	9002      	str	r0, [sp, #8]
 800cf58:	9103      	str	r1, [sp, #12]
 800cf5a:	003b      	movs	r3, r7
 800cf5c:	0030      	movs	r0, r6
 800cf5e:	0039      	movs	r1, r7
 800cf60:	f7f5 f94c 	bl	80021fc <__aeabi_dmul>
 800cf64:	0004      	movs	r4, r0
 800cf66:	000d      	movs	r5, r1
 800cf68:	4a42      	ldr	r2, [pc, #264]	@ (800d074 <__ieee754_pow+0xa2c>)
 800cf6a:	4b43      	ldr	r3, [pc, #268]	@ (800d078 <__ieee754_pow+0xa30>)
 800cf6c:	f7f5 f946 	bl	80021fc <__aeabi_dmul>
 800cf70:	4a42      	ldr	r2, [pc, #264]	@ (800d07c <__ieee754_pow+0xa34>)
 800cf72:	4b43      	ldr	r3, [pc, #268]	@ (800d080 <__ieee754_pow+0xa38>)
 800cf74:	f7f5 fc0a 	bl	800278c <__aeabi_dsub>
 800cf78:	0022      	movs	r2, r4
 800cf7a:	002b      	movs	r3, r5
 800cf7c:	f7f5 f93e 	bl	80021fc <__aeabi_dmul>
 800cf80:	4a40      	ldr	r2, [pc, #256]	@ (800d084 <__ieee754_pow+0xa3c>)
 800cf82:	4b41      	ldr	r3, [pc, #260]	@ (800d088 <__ieee754_pow+0xa40>)
 800cf84:	f7f4 f992 	bl	80012ac <__aeabi_dadd>
 800cf88:	0022      	movs	r2, r4
 800cf8a:	002b      	movs	r3, r5
 800cf8c:	f7f5 f936 	bl	80021fc <__aeabi_dmul>
 800cf90:	4a3e      	ldr	r2, [pc, #248]	@ (800d08c <__ieee754_pow+0xa44>)
 800cf92:	4b3f      	ldr	r3, [pc, #252]	@ (800d090 <__ieee754_pow+0xa48>)
 800cf94:	f7f5 fbfa 	bl	800278c <__aeabi_dsub>
 800cf98:	0022      	movs	r2, r4
 800cf9a:	002b      	movs	r3, r5
 800cf9c:	f7f5 f92e 	bl	80021fc <__aeabi_dmul>
 800cfa0:	4a3c      	ldr	r2, [pc, #240]	@ (800d094 <__ieee754_pow+0xa4c>)
 800cfa2:	4b3d      	ldr	r3, [pc, #244]	@ (800d098 <__ieee754_pow+0xa50>)
 800cfa4:	f7f4 f982 	bl	80012ac <__aeabi_dadd>
 800cfa8:	0022      	movs	r2, r4
 800cfaa:	002b      	movs	r3, r5
 800cfac:	f7f5 f926 	bl	80021fc <__aeabi_dmul>
 800cfb0:	0002      	movs	r2, r0
 800cfb2:	000b      	movs	r3, r1
 800cfb4:	0030      	movs	r0, r6
 800cfb6:	0039      	movs	r1, r7
 800cfb8:	f7f5 fbe8 	bl	800278c <__aeabi_dsub>
 800cfbc:	0004      	movs	r4, r0
 800cfbe:	000d      	movs	r5, r1
 800cfc0:	0002      	movs	r2, r0
 800cfc2:	000b      	movs	r3, r1
 800cfc4:	0030      	movs	r0, r6
 800cfc6:	0039      	movs	r1, r7
 800cfc8:	f7f5 f918 	bl	80021fc <__aeabi_dmul>
 800cfcc:	2380      	movs	r3, #128	@ 0x80
 800cfce:	9004      	str	r0, [sp, #16]
 800cfd0:	9105      	str	r1, [sp, #20]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	0020      	movs	r0, r4
 800cfd6:	0029      	movs	r1, r5
 800cfd8:	05db      	lsls	r3, r3, #23
 800cfda:	f7f5 fbd7 	bl	800278c <__aeabi_dsub>
 800cfde:	0002      	movs	r2, r0
 800cfe0:	000b      	movs	r3, r1
 800cfe2:	9804      	ldr	r0, [sp, #16]
 800cfe4:	9905      	ldr	r1, [sp, #20]
 800cfe6:	f7f4 fcc5 	bl	8001974 <__aeabi_ddiv>
 800cfea:	9a02      	ldr	r2, [sp, #8]
 800cfec:	9b03      	ldr	r3, [sp, #12]
 800cfee:	0004      	movs	r4, r0
 800cff0:	000d      	movs	r5, r1
 800cff2:	0030      	movs	r0, r6
 800cff4:	0039      	movs	r1, r7
 800cff6:	f7f5 f901 	bl	80021fc <__aeabi_dmul>
 800cffa:	9a02      	ldr	r2, [sp, #8]
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	f7f4 f955 	bl	80012ac <__aeabi_dadd>
 800d002:	0002      	movs	r2, r0
 800d004:	000b      	movs	r3, r1
 800d006:	0020      	movs	r0, r4
 800d008:	0029      	movs	r1, r5
 800d00a:	f7f5 fbbf 	bl	800278c <__aeabi_dsub>
 800d00e:	0032      	movs	r2, r6
 800d010:	003b      	movs	r3, r7
 800d012:	f7f5 fbbb 	bl	800278c <__aeabi_dsub>
 800d016:	0002      	movs	r2, r0
 800d018:	000b      	movs	r3, r1
 800d01a:	2000      	movs	r0, #0
 800d01c:	491f      	ldr	r1, [pc, #124]	@ (800d09c <__ieee754_pow+0xa54>)
 800d01e:	f7f5 fbb5 	bl	800278c <__aeabi_dsub>
 800d022:	9b00      	ldr	r3, [sp, #0]
 800d024:	051b      	lsls	r3, r3, #20
 800d026:	185b      	adds	r3, r3, r1
 800d028:	151a      	asrs	r2, r3, #20
 800d02a:	2a00      	cmp	r2, #0
 800d02c:	dc06      	bgt.n	800d03c <__ieee754_pow+0x9f4>
 800d02e:	9a00      	ldr	r2, [sp, #0]
 800d030:	f000 f83a 	bl	800d0a8 <scalbn>
 800d034:	9a08      	ldr	r2, [sp, #32]
 800d036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d038:	f7ff fbee 	bl	800c818 <__ieee754_pow+0x1d0>
 800d03c:	0019      	movs	r1, r3
 800d03e:	e7f9      	b.n	800d034 <__ieee754_pow+0x9ec>
 800d040:	2300      	movs	r3, #0
 800d042:	4c16      	ldr	r4, [pc, #88]	@ (800d09c <__ieee754_pow+0xa54>)
 800d044:	f7ff fbcb 	bl	800c7de <__ieee754_pow+0x196>
 800d048:	2300      	movs	r3, #0
 800d04a:	2400      	movs	r4, #0
 800d04c:	f7ff fbc7 	bl	800c7de <__ieee754_pow+0x196>
 800d050:	4090cbff 	.word	0x4090cbff
 800d054:	3f6f3400 	.word	0x3f6f3400
 800d058:	4090cc00 	.word	0x4090cc00
 800d05c:	3fe00000 	.word	0x3fe00000
 800d060:	3fe62e43 	.word	0x3fe62e43
 800d064:	fefa39ef 	.word	0xfefa39ef
 800d068:	3fe62e42 	.word	0x3fe62e42
 800d06c:	0ca86c39 	.word	0x0ca86c39
 800d070:	be205c61 	.word	0xbe205c61
 800d074:	72bea4d0 	.word	0x72bea4d0
 800d078:	3e663769 	.word	0x3e663769
 800d07c:	c5d26bf1 	.word	0xc5d26bf1
 800d080:	3ebbbd41 	.word	0x3ebbbd41
 800d084:	af25de2c 	.word	0xaf25de2c
 800d088:	3f11566a 	.word	0x3f11566a
 800d08c:	16bebd93 	.word	0x16bebd93
 800d090:	3f66c16c 	.word	0x3f66c16c
 800d094:	5555553e 	.word	0x5555553e
 800d098:	3fc55555 	.word	0x3fc55555
 800d09c:	3ff00000 	.word	0x3ff00000

0800d0a0 <fabs>:
 800d0a0:	0049      	lsls	r1, r1, #1
 800d0a2:	084b      	lsrs	r3, r1, #1
 800d0a4:	0019      	movs	r1, r3
 800d0a6:	4770      	bx	lr

0800d0a8 <scalbn>:
 800d0a8:	004b      	lsls	r3, r1, #1
 800d0aa:	b570      	push	{r4, r5, r6, lr}
 800d0ac:	0d5b      	lsrs	r3, r3, #21
 800d0ae:	0014      	movs	r4, r2
 800d0b0:	000d      	movs	r5, r1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10f      	bne.n	800d0d6 <scalbn+0x2e>
 800d0b6:	004b      	lsls	r3, r1, #1
 800d0b8:	085b      	lsrs	r3, r3, #1
 800d0ba:	4303      	orrs	r3, r0
 800d0bc:	d012      	beq.n	800d0e4 <scalbn+0x3c>
 800d0be:	4b23      	ldr	r3, [pc, #140]	@ (800d14c <scalbn+0xa4>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f7f5 f89b 	bl	80021fc <__aeabi_dmul>
 800d0c6:	4b22      	ldr	r3, [pc, #136]	@ (800d150 <scalbn+0xa8>)
 800d0c8:	429c      	cmp	r4, r3
 800d0ca:	da0c      	bge.n	800d0e6 <scalbn+0x3e>
 800d0cc:	4a21      	ldr	r2, [pc, #132]	@ (800d154 <scalbn+0xac>)
 800d0ce:	4b22      	ldr	r3, [pc, #136]	@ (800d158 <scalbn+0xb0>)
 800d0d0:	f7f5 f894 	bl	80021fc <__aeabi_dmul>
 800d0d4:	e006      	b.n	800d0e4 <scalbn+0x3c>
 800d0d6:	4a21      	ldr	r2, [pc, #132]	@ (800d15c <scalbn+0xb4>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d108      	bne.n	800d0ee <scalbn+0x46>
 800d0dc:	0002      	movs	r2, r0
 800d0de:	000b      	movs	r3, r1
 800d0e0:	f7f4 f8e4 	bl	80012ac <__aeabi_dadd>
 800d0e4:	bd70      	pop	{r4, r5, r6, pc}
 800d0e6:	000d      	movs	r5, r1
 800d0e8:	004b      	lsls	r3, r1, #1
 800d0ea:	0d5b      	lsrs	r3, r3, #21
 800d0ec:	3b36      	subs	r3, #54	@ 0x36
 800d0ee:	4a1c      	ldr	r2, [pc, #112]	@ (800d160 <scalbn+0xb8>)
 800d0f0:	4294      	cmp	r4, r2
 800d0f2:	dd0a      	ble.n	800d10a <scalbn+0x62>
 800d0f4:	4c1b      	ldr	r4, [pc, #108]	@ (800d164 <scalbn+0xbc>)
 800d0f6:	4d1c      	ldr	r5, [pc, #112]	@ (800d168 <scalbn+0xc0>)
 800d0f8:	2900      	cmp	r1, #0
 800d0fa:	da01      	bge.n	800d100 <scalbn+0x58>
 800d0fc:	4c19      	ldr	r4, [pc, #100]	@ (800d164 <scalbn+0xbc>)
 800d0fe:	4d1b      	ldr	r5, [pc, #108]	@ (800d16c <scalbn+0xc4>)
 800d100:	4a18      	ldr	r2, [pc, #96]	@ (800d164 <scalbn+0xbc>)
 800d102:	4b19      	ldr	r3, [pc, #100]	@ (800d168 <scalbn+0xc0>)
 800d104:	0020      	movs	r0, r4
 800d106:	0029      	movs	r1, r5
 800d108:	e7e2      	b.n	800d0d0 <scalbn+0x28>
 800d10a:	18e2      	adds	r2, r4, r3
 800d10c:	4b18      	ldr	r3, [pc, #96]	@ (800d170 <scalbn+0xc8>)
 800d10e:	429a      	cmp	r2, r3
 800d110:	dcf0      	bgt.n	800d0f4 <scalbn+0x4c>
 800d112:	2a00      	cmp	r2, #0
 800d114:	dd05      	ble.n	800d122 <scalbn+0x7a>
 800d116:	4b17      	ldr	r3, [pc, #92]	@ (800d174 <scalbn+0xcc>)
 800d118:	0512      	lsls	r2, r2, #20
 800d11a:	402b      	ands	r3, r5
 800d11c:	431a      	orrs	r2, r3
 800d11e:	0011      	movs	r1, r2
 800d120:	e7e0      	b.n	800d0e4 <scalbn+0x3c>
 800d122:	0013      	movs	r3, r2
 800d124:	3335      	adds	r3, #53	@ 0x35
 800d126:	da08      	bge.n	800d13a <scalbn+0x92>
 800d128:	4c0a      	ldr	r4, [pc, #40]	@ (800d154 <scalbn+0xac>)
 800d12a:	4d0b      	ldr	r5, [pc, #44]	@ (800d158 <scalbn+0xb0>)
 800d12c:	2900      	cmp	r1, #0
 800d12e:	da01      	bge.n	800d134 <scalbn+0x8c>
 800d130:	4c08      	ldr	r4, [pc, #32]	@ (800d154 <scalbn+0xac>)
 800d132:	4d11      	ldr	r5, [pc, #68]	@ (800d178 <scalbn+0xd0>)
 800d134:	4a07      	ldr	r2, [pc, #28]	@ (800d154 <scalbn+0xac>)
 800d136:	4b08      	ldr	r3, [pc, #32]	@ (800d158 <scalbn+0xb0>)
 800d138:	e7e4      	b.n	800d104 <scalbn+0x5c>
 800d13a:	4b0e      	ldr	r3, [pc, #56]	@ (800d174 <scalbn+0xcc>)
 800d13c:	3236      	adds	r2, #54	@ 0x36
 800d13e:	401d      	ands	r5, r3
 800d140:	0512      	lsls	r2, r2, #20
 800d142:	432a      	orrs	r2, r5
 800d144:	0011      	movs	r1, r2
 800d146:	4b0d      	ldr	r3, [pc, #52]	@ (800d17c <scalbn+0xd4>)
 800d148:	2200      	movs	r2, #0
 800d14a:	e7c1      	b.n	800d0d0 <scalbn+0x28>
 800d14c:	43500000 	.word	0x43500000
 800d150:	ffff3cb0 	.word	0xffff3cb0
 800d154:	c2f8f359 	.word	0xc2f8f359
 800d158:	01a56e1f 	.word	0x01a56e1f
 800d15c:	000007ff 	.word	0x000007ff
 800d160:	0000c350 	.word	0x0000c350
 800d164:	8800759c 	.word	0x8800759c
 800d168:	7e37e43c 	.word	0x7e37e43c
 800d16c:	fe37e43c 	.word	0xfe37e43c
 800d170:	000007fe 	.word	0x000007fe
 800d174:	800fffff 	.word	0x800fffff
 800d178:	81a56e1f 	.word	0x81a56e1f
 800d17c:	3c900000 	.word	0x3c900000

0800d180 <with_errno>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	000d      	movs	r5, r1
 800d184:	0016      	movs	r6, r2
 800d186:	0004      	movs	r4, r0
 800d188:	f7fd f968 	bl	800a45c <__errno>
 800d18c:	0029      	movs	r1, r5
 800d18e:	6006      	str	r6, [r0, #0]
 800d190:	0020      	movs	r0, r4
 800d192:	bd70      	pop	{r4, r5, r6, pc}

0800d194 <xflow>:
 800d194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d196:	0014      	movs	r4, r2
 800d198:	001d      	movs	r5, r3
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d002      	beq.n	800d1a4 <xflow+0x10>
 800d19e:	2180      	movs	r1, #128	@ 0x80
 800d1a0:	0609      	lsls	r1, r1, #24
 800d1a2:	185b      	adds	r3, r3, r1
 800d1a4:	9200      	str	r2, [sp, #0]
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	9a00      	ldr	r2, [sp, #0]
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	0020      	movs	r0, r4
 800d1ae:	0029      	movs	r1, r5
 800d1b0:	f7f5 f824 	bl	80021fc <__aeabi_dmul>
 800d1b4:	2222      	movs	r2, #34	@ 0x22
 800d1b6:	f7ff ffe3 	bl	800d180 <with_errno>
 800d1ba:	b003      	add	sp, #12
 800d1bc:	bd30      	pop	{r4, r5, pc}

0800d1be <__math_uflow>:
 800d1be:	2380      	movs	r3, #128	@ 0x80
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	055b      	lsls	r3, r3, #21
 800d1c6:	f7ff ffe5 	bl	800d194 <xflow>
 800d1ca:	bd10      	pop	{r4, pc}

0800d1cc <__math_oflow>:
 800d1cc:	23e0      	movs	r3, #224	@ 0xe0
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	05db      	lsls	r3, r3, #23
 800d1d4:	f7ff ffde 	bl	800d194 <xflow>
 800d1d8:	bd10      	pop	{r4, pc}
	...

0800d1dc <__ieee754_sqrt>:
 800d1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1de:	000a      	movs	r2, r1
 800d1e0:	000d      	movs	r5, r1
 800d1e2:	496d      	ldr	r1, [pc, #436]	@ (800d398 <__ieee754_sqrt+0x1bc>)
 800d1e4:	0004      	movs	r4, r0
 800d1e6:	0003      	movs	r3, r0
 800d1e8:	0008      	movs	r0, r1
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	4028      	ands	r0, r5
 800d1ee:	4288      	cmp	r0, r1
 800d1f0:	d111      	bne.n	800d216 <__ieee754_sqrt+0x3a>
 800d1f2:	0022      	movs	r2, r4
 800d1f4:	002b      	movs	r3, r5
 800d1f6:	0020      	movs	r0, r4
 800d1f8:	0029      	movs	r1, r5
 800d1fa:	f7f4 ffff 	bl	80021fc <__aeabi_dmul>
 800d1fe:	0002      	movs	r2, r0
 800d200:	000b      	movs	r3, r1
 800d202:	0020      	movs	r0, r4
 800d204:	0029      	movs	r1, r5
 800d206:	f7f4 f851 	bl	80012ac <__aeabi_dadd>
 800d20a:	0004      	movs	r4, r0
 800d20c:	000d      	movs	r5, r1
 800d20e:	0020      	movs	r0, r4
 800d210:	0029      	movs	r1, r5
 800d212:	b007      	add	sp, #28
 800d214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d216:	2d00      	cmp	r5, #0
 800d218:	dc11      	bgt.n	800d23e <__ieee754_sqrt+0x62>
 800d21a:	0069      	lsls	r1, r5, #1
 800d21c:	0849      	lsrs	r1, r1, #1
 800d21e:	4321      	orrs	r1, r4
 800d220:	d0f5      	beq.n	800d20e <__ieee754_sqrt+0x32>
 800d222:	2000      	movs	r0, #0
 800d224:	4285      	cmp	r5, r0
 800d226:	d010      	beq.n	800d24a <__ieee754_sqrt+0x6e>
 800d228:	0022      	movs	r2, r4
 800d22a:	002b      	movs	r3, r5
 800d22c:	0020      	movs	r0, r4
 800d22e:	0029      	movs	r1, r5
 800d230:	f7f5 faac 	bl	800278c <__aeabi_dsub>
 800d234:	0002      	movs	r2, r0
 800d236:	000b      	movs	r3, r1
 800d238:	f7f4 fb9c 	bl	8001974 <__aeabi_ddiv>
 800d23c:	e7e5      	b.n	800d20a <__ieee754_sqrt+0x2e>
 800d23e:	1528      	asrs	r0, r5, #20
 800d240:	d115      	bne.n	800d26e <__ieee754_sqrt+0x92>
 800d242:	2480      	movs	r4, #128	@ 0x80
 800d244:	2100      	movs	r1, #0
 800d246:	0364      	lsls	r4, r4, #13
 800d248:	e007      	b.n	800d25a <__ieee754_sqrt+0x7e>
 800d24a:	0ada      	lsrs	r2, r3, #11
 800d24c:	3815      	subs	r0, #21
 800d24e:	055b      	lsls	r3, r3, #21
 800d250:	2a00      	cmp	r2, #0
 800d252:	d0fa      	beq.n	800d24a <__ieee754_sqrt+0x6e>
 800d254:	e7f5      	b.n	800d242 <__ieee754_sqrt+0x66>
 800d256:	0052      	lsls	r2, r2, #1
 800d258:	3101      	adds	r1, #1
 800d25a:	4222      	tst	r2, r4
 800d25c:	d0fb      	beq.n	800d256 <__ieee754_sqrt+0x7a>
 800d25e:	1e4c      	subs	r4, r1, #1
 800d260:	1b00      	subs	r0, r0, r4
 800d262:	2420      	movs	r4, #32
 800d264:	001d      	movs	r5, r3
 800d266:	1a64      	subs	r4, r4, r1
 800d268:	40e5      	lsrs	r5, r4
 800d26a:	408b      	lsls	r3, r1
 800d26c:	432a      	orrs	r2, r5
 800d26e:	494b      	ldr	r1, [pc, #300]	@ (800d39c <__ieee754_sqrt+0x1c0>)
 800d270:	0312      	lsls	r2, r2, #12
 800d272:	1844      	adds	r4, r0, r1
 800d274:	2180      	movs	r1, #128	@ 0x80
 800d276:	0b12      	lsrs	r2, r2, #12
 800d278:	0349      	lsls	r1, r1, #13
 800d27a:	4311      	orrs	r1, r2
 800d27c:	07c0      	lsls	r0, r0, #31
 800d27e:	d403      	bmi.n	800d288 <__ieee754_sqrt+0xac>
 800d280:	0fda      	lsrs	r2, r3, #31
 800d282:	0049      	lsls	r1, r1, #1
 800d284:	1851      	adds	r1, r2, r1
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	2500      	movs	r5, #0
 800d28a:	1062      	asrs	r2, r4, #1
 800d28c:	0049      	lsls	r1, r1, #1
 800d28e:	2480      	movs	r4, #128	@ 0x80
 800d290:	9205      	str	r2, [sp, #20]
 800d292:	0fda      	lsrs	r2, r3, #31
 800d294:	1852      	adds	r2, r2, r1
 800d296:	2016      	movs	r0, #22
 800d298:	0029      	movs	r1, r5
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	03a4      	lsls	r4, r4, #14
 800d29e:	190e      	adds	r6, r1, r4
 800d2a0:	4296      	cmp	r6, r2
 800d2a2:	dc02      	bgt.n	800d2aa <__ieee754_sqrt+0xce>
 800d2a4:	1931      	adds	r1, r6, r4
 800d2a6:	1b92      	subs	r2, r2, r6
 800d2a8:	192d      	adds	r5, r5, r4
 800d2aa:	0fde      	lsrs	r6, r3, #31
 800d2ac:	0052      	lsls	r2, r2, #1
 800d2ae:	3801      	subs	r0, #1
 800d2b0:	1992      	adds	r2, r2, r6
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	0864      	lsrs	r4, r4, #1
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d1f1      	bne.n	800d29e <__ieee754_sqrt+0xc2>
 800d2ba:	2620      	movs	r6, #32
 800d2bc:	2780      	movs	r7, #128	@ 0x80
 800d2be:	0004      	movs	r4, r0
 800d2c0:	9604      	str	r6, [sp, #16]
 800d2c2:	063f      	lsls	r7, r7, #24
 800d2c4:	19c6      	adds	r6, r0, r7
 800d2c6:	46b4      	mov	ip, r6
 800d2c8:	4291      	cmp	r1, r2
 800d2ca:	db02      	blt.n	800d2d2 <__ieee754_sqrt+0xf6>
 800d2cc:	d114      	bne.n	800d2f8 <__ieee754_sqrt+0x11c>
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	d812      	bhi.n	800d2f8 <__ieee754_sqrt+0x11c>
 800d2d2:	4660      	mov	r0, ip
 800d2d4:	4666      	mov	r6, ip
 800d2d6:	19c0      	adds	r0, r0, r7
 800d2d8:	9100      	str	r1, [sp, #0]
 800d2da:	2e00      	cmp	r6, #0
 800d2dc:	da03      	bge.n	800d2e6 <__ieee754_sqrt+0x10a>
 800d2de:	43c6      	mvns	r6, r0
 800d2e0:	0ff6      	lsrs	r6, r6, #31
 800d2e2:	198e      	adds	r6, r1, r6
 800d2e4:	9600      	str	r6, [sp, #0]
 800d2e6:	1a52      	subs	r2, r2, r1
 800d2e8:	4563      	cmp	r3, ip
 800d2ea:	4189      	sbcs	r1, r1
 800d2ec:	4249      	negs	r1, r1
 800d2ee:	1a52      	subs	r2, r2, r1
 800d2f0:	4661      	mov	r1, ip
 800d2f2:	1a5b      	subs	r3, r3, r1
 800d2f4:	9900      	ldr	r1, [sp, #0]
 800d2f6:	19e4      	adds	r4, r4, r7
 800d2f8:	0fde      	lsrs	r6, r3, #31
 800d2fa:	0052      	lsls	r2, r2, #1
 800d2fc:	1992      	adds	r2, r2, r6
 800d2fe:	9e04      	ldr	r6, [sp, #16]
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	3e01      	subs	r6, #1
 800d304:	087f      	lsrs	r7, r7, #1
 800d306:	9604      	str	r6, [sp, #16]
 800d308:	2e00      	cmp	r6, #0
 800d30a:	d1db      	bne.n	800d2c4 <__ieee754_sqrt+0xe8>
 800d30c:	431a      	orrs	r2, r3
 800d30e:	d01f      	beq.n	800d350 <__ieee754_sqrt+0x174>
 800d310:	4e23      	ldr	r6, [pc, #140]	@ (800d3a0 <__ieee754_sqrt+0x1c4>)
 800d312:	4f24      	ldr	r7, [pc, #144]	@ (800d3a4 <__ieee754_sqrt+0x1c8>)
 800d314:	6830      	ldr	r0, [r6, #0]
 800d316:	6871      	ldr	r1, [r6, #4]
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	9200      	str	r2, [sp, #0]
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	6832      	ldr	r2, [r6, #0]
 800d322:	6873      	ldr	r3, [r6, #4]
 800d324:	9202      	str	r2, [sp, #8]
 800d326:	9303      	str	r3, [sp, #12]
 800d328:	9a00      	ldr	r2, [sp, #0]
 800d32a:	9b01      	ldr	r3, [sp, #4]
 800d32c:	f7f5 fa2e 	bl	800278c <__aeabi_dsub>
 800d330:	0002      	movs	r2, r0
 800d332:	000b      	movs	r3, r1
 800d334:	9802      	ldr	r0, [sp, #8]
 800d336:	9903      	ldr	r1, [sp, #12]
 800d338:	f7f3 f8a2 	bl	8000480 <__aeabi_dcmple>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d007      	beq.n	800d350 <__ieee754_sqrt+0x174>
 800d340:	6830      	ldr	r0, [r6, #0]
 800d342:	6871      	ldr	r1, [r6, #4]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	1c67      	adds	r7, r4, #1
 800d34a:	d10f      	bne.n	800d36c <__ieee754_sqrt+0x190>
 800d34c:	9c04      	ldr	r4, [sp, #16]
 800d34e:	3501      	adds	r5, #1
 800d350:	4b15      	ldr	r3, [pc, #84]	@ (800d3a8 <__ieee754_sqrt+0x1cc>)
 800d352:	106a      	asrs	r2, r5, #1
 800d354:	18d2      	adds	r2, r2, r3
 800d356:	0863      	lsrs	r3, r4, #1
 800d358:	07ed      	lsls	r5, r5, #31
 800d35a:	d502      	bpl.n	800d362 <__ieee754_sqrt+0x186>
 800d35c:	2180      	movs	r1, #128	@ 0x80
 800d35e:	0609      	lsls	r1, r1, #24
 800d360:	430b      	orrs	r3, r1
 800d362:	9905      	ldr	r1, [sp, #20]
 800d364:	001c      	movs	r4, r3
 800d366:	0509      	lsls	r1, r1, #20
 800d368:	188d      	adds	r5, r1, r2
 800d36a:	e750      	b.n	800d20e <__ieee754_sqrt+0x32>
 800d36c:	f7f3 ff9e 	bl	80012ac <__aeabi_dadd>
 800d370:	6877      	ldr	r7, [r6, #4]
 800d372:	6836      	ldr	r6, [r6, #0]
 800d374:	0002      	movs	r2, r0
 800d376:	000b      	movs	r3, r1
 800d378:	0030      	movs	r0, r6
 800d37a:	0039      	movs	r1, r7
 800d37c:	f7f3 f876 	bl	800046c <__aeabi_dcmplt>
 800d380:	2800      	cmp	r0, #0
 800d382:	d004      	beq.n	800d38e <__ieee754_sqrt+0x1b2>
 800d384:	3402      	adds	r4, #2
 800d386:	4263      	negs	r3, r4
 800d388:	4163      	adcs	r3, r4
 800d38a:	18ed      	adds	r5, r5, r3
 800d38c:	e7e0      	b.n	800d350 <__ieee754_sqrt+0x174>
 800d38e:	2301      	movs	r3, #1
 800d390:	3401      	adds	r4, #1
 800d392:	439c      	bics	r4, r3
 800d394:	e7dc      	b.n	800d350 <__ieee754_sqrt+0x174>
 800d396:	46c0      	nop			@ (mov r8, r8)
 800d398:	7ff00000 	.word	0x7ff00000
 800d39c:	fffffc01 	.word	0xfffffc01
 800d3a0:	200001e0 	.word	0x200001e0
 800d3a4:	200001d8 	.word	0x200001d8
 800d3a8:	3fe00000 	.word	0x3fe00000

0800d3ac <_init>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	46c0      	nop			@ (mov r8, r8)
 800d3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b2:	bc08      	pop	{r3}
 800d3b4:	469e      	mov	lr, r3
 800d3b6:	4770      	bx	lr

0800d3b8 <_fini>:
 800d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ba:	46c0      	nop			@ (mov r8, r8)
 800d3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3be:	bc08      	pop	{r3}
 800d3c0:	469e      	mov	lr, r3
 800d3c2:	4770      	bx	lr
