
Bicycle_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800b488  0800b488  0000c488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba60  0800ba60  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba60  0800ba60  0000d1e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba60  0800ba60  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba60  0800ba60  0000ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba64  0800ba64  0000ca64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ba68  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  200001e8  0800bc50  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800bc50  0000d6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110f6  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002846  00000000  00000000  0001e306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00020b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  00021bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bcd  00000000  00000000  000228b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014875  00000000  00000000  0003547f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d422  00000000  00000000  00049cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000b715c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000bc16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b470 	.word	0x0800b470

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800b470 	.word	0x0800b470

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fb5f 	bl	8001b14 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fa9f 	bl	80019a4 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb51 	bl	8001b14 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb47 	bl	8001b14 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fac9 	bl	8001a2c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fabf 	bl	8001a2c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fb55 	bl	8000b74 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fad5 	bl	8000a84 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb47 	bl	8000b74 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb3d 	bl	8000b74 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae3 	bl	8000ad4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fad9 	bl	8000ad4 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fadd>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	46ce      	mov	lr, r9
 8000534:	4647      	mov	r7, r8
 8000536:	0243      	lsls	r3, r0, #9
 8000538:	0a5a      	lsrs	r2, r3, #9
 800053a:	024e      	lsls	r6, r1, #9
 800053c:	0045      	lsls	r5, r0, #1
 800053e:	0fc4      	lsrs	r4, r0, #31
 8000540:	0048      	lsls	r0, r1, #1
 8000542:	4691      	mov	r9, r2
 8000544:	0e2d      	lsrs	r5, r5, #24
 8000546:	0a72      	lsrs	r2, r6, #9
 8000548:	0e00      	lsrs	r0, r0, #24
 800054a:	4694      	mov	ip, r2
 800054c:	b580      	push	{r7, lr}
 800054e:	099b      	lsrs	r3, r3, #6
 8000550:	0fc9      	lsrs	r1, r1, #31
 8000552:	09b6      	lsrs	r6, r6, #6
 8000554:	1a2a      	subs	r2, r5, r0
 8000556:	428c      	cmp	r4, r1
 8000558:	d021      	beq.n	800059e <__aeabi_fadd+0x6e>
 800055a:	2a00      	cmp	r2, #0
 800055c:	dd0d      	ble.n	800057a <__aeabi_fadd+0x4a>
 800055e:	2800      	cmp	r0, #0
 8000560:	d12d      	bne.n	80005be <__aeabi_fadd+0x8e>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x38>
 8000566:	e08d      	b.n	8000684 <__aeabi_fadd+0x154>
 8000568:	1e51      	subs	r1, r2, #1
 800056a:	2a01      	cmp	r2, #1
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x40>
 800056e:	e11d      	b.n	80007ac <__aeabi_fadd+0x27c>
 8000570:	2aff      	cmp	r2, #255	@ 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x46>
 8000574:	e0ab      	b.n	80006ce <__aeabi_fadd+0x19e>
 8000576:	000a      	movs	r2, r1
 8000578:	e027      	b.n	80005ca <__aeabi_fadd+0x9a>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d04d      	beq.n	800061a <__aeabi_fadd+0xea>
 800057e:	1b42      	subs	r2, r0, r5
 8000580:	2d00      	cmp	r5, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_fadd+0x56>
 8000584:	e0cc      	b.n	8000720 <__aeabi_fadd+0x1f0>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x5c>
 800058a:	e079      	b.n	8000680 <__aeabi_fadd+0x150>
 800058c:	1e54      	subs	r4, r2, #1
 800058e:	2a01      	cmp	r2, #1
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x64>
 8000592:	e128      	b.n	80007e6 <__aeabi_fadd+0x2b6>
 8000594:	2aff      	cmp	r2, #255	@ 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x6a>
 8000598:	e097      	b.n	80006ca <__aeabi_fadd+0x19a>
 800059a:	0022      	movs	r2, r4
 800059c:	e0c5      	b.n	800072a <__aeabi_fadd+0x1fa>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_fadd+0x74>
 80005a2:	e096      	b.n	80006d2 <__aeabi_fadd+0x1a2>
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d04f      	beq.n	8000648 <__aeabi_fadd+0x118>
 80005a8:	2dff      	cmp	r5, #255	@ 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x7e>
 80005ac:	e08f      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	04c9      	lsls	r1, r1, #19
 80005b2:	430e      	orrs	r6, r1
 80005b4:	2a1b      	cmp	r2, #27
 80005b6:	dd51      	ble.n	800065c <__aeabi_fadd+0x12c>
 80005b8:	002a      	movs	r2, r5
 80005ba:	3301      	adds	r3, #1
 80005bc:	e018      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80005be:	2dff      	cmp	r5, #255	@ 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x94>
 80005c2:	e084      	b.n	80006ce <__aeabi_fadd+0x19e>
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	04c9      	lsls	r1, r1, #19
 80005c8:	430e      	orrs	r6, r1
 80005ca:	2101      	movs	r1, #1
 80005cc:	2a1b      	cmp	r2, #27
 80005ce:	dc08      	bgt.n	80005e2 <__aeabi_fadd+0xb2>
 80005d0:	0031      	movs	r1, r6
 80005d2:	2020      	movs	r0, #32
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	1a82      	subs	r2, r0, r2
 80005d8:	4096      	lsls	r6, r2
 80005da:	0032      	movs	r2, r6
 80005dc:	1e50      	subs	r0, r2, #1
 80005de:	4182      	sbcs	r2, r0
 80005e0:	4311      	orrs	r1, r2
 80005e2:	1a5b      	subs	r3, r3, r1
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d459      	bmi.n	800069c <__aeabi_fadd+0x16c>
 80005e8:	2107      	movs	r1, #7
 80005ea:	002a      	movs	r2, r5
 80005ec:	4019      	ands	r1, r3
 80005ee:	d049      	beq.n	8000684 <__aeabi_fadd+0x154>
 80005f0:	210f      	movs	r1, #15
 80005f2:	4019      	ands	r1, r3
 80005f4:	2904      	cmp	r1, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0xca>
 80005f8:	3304      	adds	r3, #4
 80005fa:	0159      	lsls	r1, r3, #5
 80005fc:	d542      	bpl.n	8000684 <__aeabi_fadd+0x154>
 80005fe:	1c50      	adds	r0, r2, #1
 8000600:	2afe      	cmp	r2, #254	@ 0xfe
 8000602:	d03a      	beq.n	800067a <__aeabi_fadd+0x14a>
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	b2c0      	uxtb	r0, r0
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	05c0      	lsls	r0, r0, #23
 800060c:	4318      	orrs	r0, r3
 800060e:	07e4      	lsls	r4, r4, #31
 8000610:	4320      	orrs	r0, r4
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	20fe      	movs	r0, #254	@ 0xfe
 800061c:	4680      	mov	r8, r0
 800061e:	1c6f      	adds	r7, r5, #1
 8000620:	0038      	movs	r0, r7
 8000622:	4647      	mov	r7, r8
 8000624:	4207      	tst	r7, r0
 8000626:	d000      	beq.n	800062a <__aeabi_fadd+0xfa>
 8000628:	e08e      	b.n	8000748 <__aeabi_fadd+0x218>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x100>
 800062e:	e0b4      	b.n	800079a <__aeabi_fadd+0x26a>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x106>
 8000634:	e0db      	b.n	80007ee <__aeabi_fadd+0x2be>
 8000636:	2e00      	cmp	r6, #0
 8000638:	d06c      	beq.n	8000714 <__aeabi_fadd+0x1e4>
 800063a:	1b98      	subs	r0, r3, r6
 800063c:	0145      	lsls	r5, r0, #5
 800063e:	d400      	bmi.n	8000642 <__aeabi_fadd+0x112>
 8000640:	e0f7      	b.n	8000832 <__aeabi_fadd+0x302>
 8000642:	000c      	movs	r4, r1
 8000644:	1af3      	subs	r3, r6, r3
 8000646:	e03d      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d01b      	beq.n	8000684 <__aeabi_fadd+0x154>
 800064c:	1e51      	subs	r1, r2, #1
 800064e:	2a01      	cmp	r2, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x124>
 8000652:	e082      	b.n	800075a <__aeabi_fadd+0x22a>
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d03a      	beq.n	80006ce <__aeabi_fadd+0x19e>
 8000658:	000a      	movs	r2, r1
 800065a:	e7ab      	b.n	80005b4 <__aeabi_fadd+0x84>
 800065c:	0031      	movs	r1, r6
 800065e:	2020      	movs	r0, #32
 8000660:	40d1      	lsrs	r1, r2
 8000662:	1a82      	subs	r2, r0, r2
 8000664:	4096      	lsls	r6, r2
 8000666:	0032      	movs	r2, r6
 8000668:	1e50      	subs	r0, r2, #1
 800066a:	4182      	sbcs	r2, r0
 800066c:	430a      	orrs	r2, r1
 800066e:	189b      	adds	r3, r3, r2
 8000670:	015a      	lsls	r2, r3, #5
 8000672:	d5b9      	bpl.n	80005e8 <__aeabi_fadd+0xb8>
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	2dfe      	cmp	r5, #254	@ 0xfe
 8000678:	d175      	bne.n	8000766 <__aeabi_fadd+0x236>
 800067a:	20ff      	movs	r0, #255	@ 0xff
 800067c:	2300      	movs	r3, #0
 800067e:	e7c4      	b.n	800060a <__aeabi_fadd+0xda>
 8000680:	000c      	movs	r4, r1
 8000682:	0033      	movs	r3, r6
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	2aff      	cmp	r2, #255	@ 0xff
 8000688:	d146      	bne.n	8000718 <__aeabi_fadd+0x1e8>
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f5      	beq.n	800067a <__aeabi_fadd+0x14a>
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	03d2      	lsls	r2, r2, #15
 8000692:	4313      	orrs	r3, r2
 8000694:	025b      	lsls	r3, r3, #9
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	0a5b      	lsrs	r3, r3, #9
 800069a:	e7b6      	b.n	800060a <__aeabi_fadd+0xda>
 800069c:	019f      	lsls	r7, r3, #6
 800069e:	09bf      	lsrs	r7, r7, #6
 80006a0:	0038      	movs	r0, r7
 80006a2:	f002 fa89 	bl	8002bb8 <__clzsi2>
 80006a6:	3805      	subs	r0, #5
 80006a8:	4087      	lsls	r7, r0
 80006aa:	4285      	cmp	r5, r0
 80006ac:	dc24      	bgt.n	80006f8 <__aeabi_fadd+0x1c8>
 80006ae:	003b      	movs	r3, r7
 80006b0:	2120      	movs	r1, #32
 80006b2:	1b42      	subs	r2, r0, r5
 80006b4:	3201      	adds	r2, #1
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	1a8a      	subs	r2, r1, r2
 80006ba:	4097      	lsls	r7, r2
 80006bc:	1e7a      	subs	r2, r7, #1
 80006be:	4197      	sbcs	r7, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	433b      	orrs	r3, r7
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	d193      	bne.n	80005f0 <__aeabi_fadd+0xc0>
 80006c8:	e797      	b.n	80005fa <__aeabi_fadd+0xca>
 80006ca:	000c      	movs	r4, r1
 80006cc:	0033      	movs	r3, r6
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	e7db      	b.n	800068a <__aeabi_fadd+0x15a>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d014      	beq.n	8000700 <__aeabi_fadd+0x1d0>
 80006d6:	1b42      	subs	r2, r0, r5
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d14b      	bne.n	8000774 <__aeabi_fadd+0x244>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0d0      	beq.n	8000682 <__aeabi_fadd+0x152>
 80006e0:	1e51      	subs	r1, r2, #1
 80006e2:	2a01      	cmp	r2, #1
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1b8>
 80006e6:	e09e      	b.n	8000826 <__aeabi_fadd+0x2f6>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d0ef      	beq.n	80006cc <__aeabi_fadd+0x19c>
 80006ec:	000a      	movs	r2, r1
 80006ee:	2a1b      	cmp	r2, #27
 80006f0:	dd5f      	ble.n	80007b2 <__aeabi_fadd+0x282>
 80006f2:	0002      	movs	r2, r0
 80006f4:	1c73      	adds	r3, r6, #1
 80006f6:	e77b      	b.n	80005f0 <__aeabi_fadd+0xc0>
 80006f8:	4b50      	ldr	r3, [pc, #320]	@ (800083c <__aeabi_fadd+0x30c>)
 80006fa:	1a2a      	subs	r2, r5, r0
 80006fc:	403b      	ands	r3, r7
 80006fe:	e7e1      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000700:	21fe      	movs	r1, #254	@ 0xfe
 8000702:	1c6a      	adds	r2, r5, #1
 8000704:	4211      	tst	r1, r2
 8000706:	d13b      	bne.n	8000780 <__aeabi_fadd+0x250>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d15d      	bne.n	80007c8 <__aeabi_fadd+0x298>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d07f      	beq.n	8000810 <__aeabi_fadd+0x2e0>
 8000710:	2e00      	cmp	r6, #0
 8000712:	d17f      	bne.n	8000814 <__aeabi_fadd+0x2e4>
 8000714:	2200      	movs	r2, #0
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	b2d0      	uxtb	r0, r2
 800071e:	e774      	b.n	800060a <__aeabi_fadd+0xda>
 8000720:	28ff      	cmp	r0, #255	@ 0xff
 8000722:	d0d2      	beq.n	80006ca <__aeabi_fadd+0x19a>
 8000724:	2480      	movs	r4, #128	@ 0x80
 8000726:	04e4      	lsls	r4, r4, #19
 8000728:	4323      	orrs	r3, r4
 800072a:	2401      	movs	r4, #1
 800072c:	2a1b      	cmp	r2, #27
 800072e:	dc07      	bgt.n	8000740 <__aeabi_fadd+0x210>
 8000730:	001c      	movs	r4, r3
 8000732:	2520      	movs	r5, #32
 8000734:	40d4      	lsrs	r4, r2
 8000736:	1aaa      	subs	r2, r5, r2
 8000738:	4093      	lsls	r3, r2
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	4193      	sbcs	r3, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	1b33      	subs	r3, r6, r4
 8000742:	0005      	movs	r5, r0
 8000744:	000c      	movs	r4, r1
 8000746:	e74d      	b.n	80005e4 <__aeabi_fadd+0xb4>
 8000748:	1b9f      	subs	r7, r3, r6
 800074a:	017a      	lsls	r2, r7, #5
 800074c:	d422      	bmi.n	8000794 <__aeabi_fadd+0x264>
 800074e:	2f00      	cmp	r7, #0
 8000750:	d1a6      	bne.n	80006a0 <__aeabi_fadd+0x170>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2300      	movs	r3, #0
 8000758:	e757      	b.n	800060a <__aeabi_fadd+0xda>
 800075a:	199b      	adds	r3, r3, r6
 800075c:	2501      	movs	r5, #1
 800075e:	3201      	adds	r2, #1
 8000760:	0159      	lsls	r1, r3, #5
 8000762:	d400      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000764:	e740      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000766:	2101      	movs	r1, #1
 8000768:	4835      	ldr	r0, [pc, #212]	@ (8000840 <__aeabi_fadd+0x310>)
 800076a:	4019      	ands	r1, r3
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	4003      	ands	r3, r0
 8000770:	430b      	orrs	r3, r1
 8000772:	e7a7      	b.n	80006c4 <__aeabi_fadd+0x194>
 8000774:	28ff      	cmp	r0, #255	@ 0xff
 8000776:	d0a9      	beq.n	80006cc <__aeabi_fadd+0x19c>
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	04c9      	lsls	r1, r1, #19
 800077c:	430b      	orrs	r3, r1
 800077e:	e7b6      	b.n	80006ee <__aeabi_fadd+0x1be>
 8000780:	2aff      	cmp	r2, #255	@ 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x256>
 8000784:	e779      	b.n	800067a <__aeabi_fadd+0x14a>
 8000786:	199b      	adds	r3, r3, r6
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	0759      	lsls	r1, r3, #29
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x260>
 800078e:	e72f      	b.n	80005f0 <__aeabi_fadd+0xc0>
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	e7c1      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000794:	000c      	movs	r4, r1
 8000796:	1af7      	subs	r7, r6, r3
 8000798:	e782      	b.n	80006a0 <__aeabi_fadd+0x170>
 800079a:	2b00      	cmp	r3, #0
 800079c:	d12c      	bne.n	80007f8 <__aeabi_fadd+0x2c8>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d193      	bne.n	80006ca <__aeabi_fadd+0x19a>
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	2400      	movs	r4, #0
 80007a6:	20ff      	movs	r0, #255	@ 0xff
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	e72e      	b.n	800060a <__aeabi_fadd+0xda>
 80007ac:	2501      	movs	r5, #1
 80007ae:	1b9b      	subs	r3, r3, r6
 80007b0:	e718      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007b2:	0019      	movs	r1, r3
 80007b4:	2520      	movs	r5, #32
 80007b6:	40d1      	lsrs	r1, r2
 80007b8:	1aaa      	subs	r2, r5, r2
 80007ba:	4093      	lsls	r3, r2
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	430b      	orrs	r3, r1
 80007c2:	0005      	movs	r5, r0
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	e753      	b.n	8000670 <__aeabi_fadd+0x140>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x29e>
 80007cc:	e77e      	b.n	80006cc <__aeabi_fadd+0x19c>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x2a4>
 80007d2:	e77c      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	03d2      	lsls	r2, r2, #15
 80007d8:	4591      	cmp	r9, r2
 80007da:	d302      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 80007dc:	4594      	cmp	ip, r2
 80007de:	d200      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 80007e0:	0033      	movs	r3, r6
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	e753      	b.n	800068e <__aeabi_fadd+0x15e>
 80007e6:	000c      	movs	r4, r1
 80007e8:	1af3      	subs	r3, r6, r3
 80007ea:	3501      	adds	r5, #1
 80007ec:	e6fa      	b.n	80005e4 <__aeabi_fadd+0xb4>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d0af      	beq.n	8000752 <__aeabi_fadd+0x222>
 80007f2:	000c      	movs	r4, r1
 80007f4:	0033      	movs	r3, r6
 80007f6:	e78d      	b.n	8000714 <__aeabi_fadd+0x1e4>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2ce>
 80007fc:	e767      	b.n	80006ce <__aeabi_fadd+0x19e>
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4591      	cmp	r9, r2
 8000804:	d3ed      	bcc.n	80007e2 <__aeabi_fadd+0x2b2>
 8000806:	4594      	cmp	ip, r2
 8000808:	d2eb      	bcs.n	80007e2 <__aeabi_fadd+0x2b2>
 800080a:	000c      	movs	r4, r1
 800080c:	0033      	movs	r3, r6
 800080e:	e7e8      	b.n	80007e2 <__aeabi_fadd+0x2b2>
 8000810:	0033      	movs	r3, r6
 8000812:	e77f      	b.n	8000714 <__aeabi_fadd+0x1e4>
 8000814:	199b      	adds	r3, r3, r6
 8000816:	2200      	movs	r2, #0
 8000818:	0159      	lsls	r1, r3, #5
 800081a:	d5b9      	bpl.n	8000790 <__aeabi_fadd+0x260>
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <__aeabi_fadd+0x30c>)
 800081e:	4013      	ands	r3, r2
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	2201      	movs	r2, #1
 8000824:	e778      	b.n	8000718 <__aeabi_fadd+0x1e8>
 8000826:	199b      	adds	r3, r3, r6
 8000828:	3201      	adds	r2, #1
 800082a:	3501      	adds	r5, #1
 800082c:	0159      	lsls	r1, r3, #5
 800082e:	d49a      	bmi.n	8000766 <__aeabi_fadd+0x236>
 8000830:	e6da      	b.n	80005e8 <__aeabi_fadd+0xb8>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d08d      	beq.n	8000752 <__aeabi_fadd+0x222>
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	e76e      	b.n	8000718 <__aeabi_fadd+0x1e8>
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	464f      	mov	r7, r9
 8000848:	4646      	mov	r6, r8
 800084a:	46d6      	mov	lr, sl
 800084c:	0244      	lsls	r4, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0047      	lsls	r7, r0, #1
 8000852:	1c0e      	adds	r6, r1, #0
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0e3f      	lsrs	r7, r7, #24
 8000858:	0fc5      	lsrs	r5, r0, #31
 800085a:	2f00      	cmp	r7, #0
 800085c:	d03c      	beq.n	80008d8 <__aeabi_fdiv+0x94>
 800085e:	2fff      	cmp	r7, #255	@ 0xff
 8000860:	d042      	beq.n	80008e8 <__aeabi_fdiv+0xa4>
 8000862:	2300      	movs	r3, #0
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	4699      	mov	r9, r3
 8000868:	469a      	mov	sl, r3
 800086a:	00e4      	lsls	r4, r4, #3
 800086c:	04d2      	lsls	r2, r2, #19
 800086e:	4314      	orrs	r4, r2
 8000870:	3f7f      	subs	r7, #127	@ 0x7f
 8000872:	0273      	lsls	r3, r6, #9
 8000874:	0a5b      	lsrs	r3, r3, #9
 8000876:	4698      	mov	r8, r3
 8000878:	0073      	lsls	r3, r6, #1
 800087a:	0e1b      	lsrs	r3, r3, #24
 800087c:	0ff6      	lsrs	r6, r6, #31
 800087e:	2b00      	cmp	r3, #0
 8000880:	d01b      	beq.n	80008ba <__aeabi_fdiv+0x76>
 8000882:	2bff      	cmp	r3, #255	@ 0xff
 8000884:	d013      	beq.n	80008ae <__aeabi_fdiv+0x6a>
 8000886:	4642      	mov	r2, r8
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	04c9      	lsls	r1, r1, #19
 800088e:	4311      	orrs	r1, r2
 8000890:	4688      	mov	r8, r1
 8000892:	2000      	movs	r0, #0
 8000894:	3b7f      	subs	r3, #127	@ 0x7f
 8000896:	0029      	movs	r1, r5
 8000898:	1aff      	subs	r7, r7, r3
 800089a:	464b      	mov	r3, r9
 800089c:	4071      	eors	r1, r6
 800089e:	b2c9      	uxtb	r1, r1
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d900      	bls.n	80008a6 <__aeabi_fdiv+0x62>
 80008a4:	e0b5      	b.n	8000a12 <__aeabi_fdiv+0x1ce>
 80008a6:	4a74      	ldr	r2, [pc, #464]	@ (8000a78 <__aeabi_fdiv+0x234>)
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	58d3      	ldr	r3, [r2, r3]
 80008ac:	469f      	mov	pc, r3
 80008ae:	4643      	mov	r3, r8
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d13f      	bne.n	8000934 <__aeabi_fdiv+0xf0>
 80008b4:	3fff      	subs	r7, #255	@ 0xff
 80008b6:	3302      	adds	r3, #2
 80008b8:	e003      	b.n	80008c2 <__aeabi_fdiv+0x7e>
 80008ba:	4643      	mov	r3, r8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d12d      	bne.n	800091c <__aeabi_fdiv+0xd8>
 80008c0:	2301      	movs	r3, #1
 80008c2:	0029      	movs	r1, r5
 80008c4:	464a      	mov	r2, r9
 80008c6:	4071      	eors	r1, r6
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	431a      	orrs	r2, r3
 80008cc:	2a0e      	cmp	r2, #14
 80008ce:	d838      	bhi.n	8000942 <__aeabi_fdiv+0xfe>
 80008d0:	486a      	ldr	r0, [pc, #424]	@ (8000a7c <__aeabi_fdiv+0x238>)
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	5882      	ldr	r2, [r0, r2]
 80008d6:	4697      	mov	pc, r2
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d113      	bne.n	8000904 <__aeabi_fdiv+0xc0>
 80008dc:	2304      	movs	r3, #4
 80008de:	4699      	mov	r9, r3
 80008e0:	3b03      	subs	r3, #3
 80008e2:	2700      	movs	r7, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	e7c4      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d105      	bne.n	80008f8 <__aeabi_fdiv+0xb4>
 80008ec:	2308      	movs	r3, #8
 80008ee:	4699      	mov	r9, r3
 80008f0:	3b06      	subs	r3, #6
 80008f2:	27ff      	movs	r7, #255	@ 0xff
 80008f4:	469a      	mov	sl, r3
 80008f6:	e7bc      	b.n	8000872 <__aeabi_fdiv+0x2e>
 80008f8:	230c      	movs	r3, #12
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	27ff      	movs	r7, #255	@ 0xff
 8000900:	469a      	mov	sl, r3
 8000902:	e7b6      	b.n	8000872 <__aeabi_fdiv+0x2e>
 8000904:	0020      	movs	r0, r4
 8000906:	f002 f957 	bl	8002bb8 <__clzsi2>
 800090a:	2776      	movs	r7, #118	@ 0x76
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409c      	lsls	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	427f      	negs	r7, r7
 8000914:	4699      	mov	r9, r3
 8000916:	469a      	mov	sl, r3
 8000918:	1a3f      	subs	r7, r7, r0
 800091a:	e7aa      	b.n	8000872 <__aeabi_fdiv+0x2e>
 800091c:	4640      	mov	r0, r8
 800091e:	f002 f94b 	bl	8002bb8 <__clzsi2>
 8000922:	4642      	mov	r2, r8
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409a      	lsls	r2, r3
 8000928:	2376      	movs	r3, #118	@ 0x76
 800092a:	425b      	negs	r3, r3
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	4690      	mov	r8, r2
 8000930:	2000      	movs	r0, #0
 8000932:	e7b0      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	2003      	movs	r0, #3
 800093e:	33fc      	adds	r3, #252	@ 0xfc
 8000940:	e7a9      	b.n	8000896 <__aeabi_fdiv+0x52>
 8000942:	000d      	movs	r5, r1
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	2200      	movs	r2, #0
 8000948:	05c0      	lsls	r0, r0, #23
 800094a:	07ed      	lsls	r5, r5, #31
 800094c:	4310      	orrs	r0, r2
 800094e:	4328      	orrs	r0, r5
 8000950:	bce0      	pop	{r5, r6, r7}
 8000952:	46ba      	mov	sl, r7
 8000954:	46b1      	mov	r9, r6
 8000956:	46a8      	mov	r8, r5
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	000d      	movs	r5, r1
 800095c:	2000      	movs	r0, #0
 800095e:	2200      	movs	r2, #0
 8000960:	e7f2      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000962:	4653      	mov	r3, sl
 8000964:	2b02      	cmp	r3, #2
 8000966:	d0ed      	beq.n	8000944 <__aeabi_fdiv+0x100>
 8000968:	2b03      	cmp	r3, #3
 800096a:	d033      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 800096c:	46a0      	mov	r8, r4
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <__aeabi_fdiv+0x13a>
 8000972:	2000      	movs	r0, #0
 8000974:	2200      	movs	r2, #0
 8000976:	e7e7      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000978:	0035      	movs	r5, r6
 800097a:	2803      	cmp	r0, #3
 800097c:	d07a      	beq.n	8000a74 <__aeabi_fdiv+0x230>
 800097e:	003b      	movs	r3, r7
 8000980:	337f      	adds	r3, #127	@ 0x7f
 8000982:	2b00      	cmp	r3, #0
 8000984:	dd2d      	ble.n	80009e2 <__aeabi_fdiv+0x19e>
 8000986:	4642      	mov	r2, r8
 8000988:	0752      	lsls	r2, r2, #29
 800098a:	d007      	beq.n	800099c <__aeabi_fdiv+0x158>
 800098c:	220f      	movs	r2, #15
 800098e:	4641      	mov	r1, r8
 8000990:	400a      	ands	r2, r1
 8000992:	2a04      	cmp	r2, #4
 8000994:	d002      	beq.n	800099c <__aeabi_fdiv+0x158>
 8000996:	2204      	movs	r2, #4
 8000998:	4694      	mov	ip, r2
 800099a:	44e0      	add	r8, ip
 800099c:	4642      	mov	r2, r8
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	d505      	bpl.n	80009ae <__aeabi_fdiv+0x16a>
 80009a2:	4642      	mov	r2, r8
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <__aeabi_fdiv+0x23c>)
 80009a6:	401a      	ands	r2, r3
 80009a8:	003b      	movs	r3, r7
 80009aa:	4690      	mov	r8, r2
 80009ac:	3380      	adds	r3, #128	@ 0x80
 80009ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80009b0:	dcc8      	bgt.n	8000944 <__aeabi_fdiv+0x100>
 80009b2:	4642      	mov	r2, r8
 80009b4:	0192      	lsls	r2, r2, #6
 80009b6:	0a52      	lsrs	r2, r2, #9
 80009b8:	b2d8      	uxtb	r0, r3
 80009ba:	e7c5      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	2500      	movs	r5, #0
 80009c0:	20ff      	movs	r0, #255	@ 0xff
 80009c2:	03d2      	lsls	r2, r2, #15
 80009c4:	e7c0      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	03d2      	lsls	r2, r2, #15
 80009ca:	4214      	tst	r4, r2
 80009cc:	d002      	beq.n	80009d4 <__aeabi_fdiv+0x190>
 80009ce:	4643      	mov	r3, r8
 80009d0:	4213      	tst	r3, r2
 80009d2:	d049      	beq.n	8000a68 <__aeabi_fdiv+0x224>
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	4322      	orrs	r2, r4
 80009da:	0252      	lsls	r2, r2, #9
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	0a52      	lsrs	r2, r2, #9
 80009e0:	e7b2      	b.n	8000948 <__aeabi_fdiv+0x104>
 80009e2:	2201      	movs	r2, #1
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b1b      	cmp	r3, #27
 80009e8:	dcc3      	bgt.n	8000972 <__aeabi_fdiv+0x12e>
 80009ea:	4642      	mov	r2, r8
 80009ec:	40da      	lsrs	r2, r3
 80009ee:	4643      	mov	r3, r8
 80009f0:	379e      	adds	r7, #158	@ 0x9e
 80009f2:	40bb      	lsls	r3, r7
 80009f4:	1e59      	subs	r1, r3, #1
 80009f6:	418b      	sbcs	r3, r1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	0753      	lsls	r3, r2, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 80009fe:	230f      	movs	r3, #15
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0x1c4>
 8000a06:	3204      	adds	r2, #4
 8000a08:	0153      	lsls	r3, r2, #5
 8000a0a:	d529      	bpl.n	8000a60 <__aeabi_fdiv+0x21c>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	e79a      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a12:	4642      	mov	r2, r8
 8000a14:	0163      	lsls	r3, r4, #5
 8000a16:	0155      	lsls	r5, r2, #5
 8000a18:	42ab      	cmp	r3, r5
 8000a1a:	d215      	bcs.n	8000a48 <__aeabi_fdiv+0x204>
 8000a1c:	201b      	movs	r0, #27
 8000a1e:	2200      	movs	r2, #0
 8000a20:	3f01      	subs	r7, #1
 8000a22:	2601      	movs	r6, #1
 8000a24:	001c      	movs	r4, r3
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	db01      	blt.n	8000a32 <__aeabi_fdiv+0x1ee>
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d801      	bhi.n	8000a36 <__aeabi_fdiv+0x1f2>
 8000a32:	1b5b      	subs	r3, r3, r5
 8000a34:	4332      	orrs	r2, r6
 8000a36:	3801      	subs	r0, #1
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d1f3      	bne.n	8000a24 <__aeabi_fdiv+0x1e0>
 8000a3c:	1e58      	subs	r0, r3, #1
 8000a3e:	4183      	sbcs	r3, r0
 8000a40:	4313      	orrs	r3, r2
 8000a42:	4698      	mov	r8, r3
 8000a44:	000d      	movs	r5, r1
 8000a46:	e79a      	b.n	800097e <__aeabi_fdiv+0x13a>
 8000a48:	201a      	movs	r0, #26
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	e7e8      	b.n	8000a22 <__aeabi_fdiv+0x1de>
 8000a50:	3b02      	subs	r3, #2
 8000a52:	425a      	negs	r2, r3
 8000a54:	4153      	adcs	r3, r2
 8000a56:	425b      	negs	r3, r3
 8000a58:	0035      	movs	r5, r6
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	e773      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a60:	0192      	lsls	r2, r2, #6
 8000a62:	2000      	movs	r0, #0
 8000a64:	0a52      	lsrs	r2, r2, #9
 8000a66:	e76f      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	0252      	lsls	r2, r2, #9
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	20ff      	movs	r0, #255	@ 0xff
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	e769      	b.n	8000948 <__aeabi_fdiv+0x104>
 8000a74:	4644      	mov	r4, r8
 8000a76:	e7ad      	b.n	80009d4 <__aeabi_fdiv+0x190>
 8000a78:	0800b5cc 	.word	0x0800b5cc
 8000a7c:	0800b60c 	.word	0x0800b60c
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__eqsf2>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	0042      	lsls	r2, r0, #1
 8000a88:	024e      	lsls	r6, r1, #9
 8000a8a:	004c      	lsls	r4, r1, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	0a6d      	lsrs	r5, r5, #9
 8000a90:	0e12      	lsrs	r2, r2, #24
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a76      	lsrs	r6, r6, #9
 8000a96:	0e24      	lsrs	r4, r4, #24
 8000a98:	0fc9      	lsrs	r1, r1, #31
 8000a9a:	2aff      	cmp	r2, #255	@ 0xff
 8000a9c:	d010      	beq.n	8000ac0 <__eqsf2+0x3c>
 8000a9e:	2cff      	cmp	r4, #255	@ 0xff
 8000aa0:	d00c      	beq.n	8000abc <__eqsf2+0x38>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	42a2      	cmp	r2, r4
 8000aa6:	d10a      	bne.n	8000abe <__eqsf2+0x3a>
 8000aa8:	42b5      	cmp	r5, r6
 8000aaa:	d108      	bne.n	8000abe <__eqsf2+0x3a>
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d00f      	beq.n	8000ad0 <__eqsf2+0x4c>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d104      	bne.n	8000abe <__eqsf2+0x3a>
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	1e43      	subs	r3, r0, #1
 8000ab8:	4198      	sbcs	r0, r3
 8000aba:	e000      	b.n	8000abe <__eqsf2+0x3a>
 8000abc:	2001      	movs	r0, #1
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	2cff      	cmp	r4, #255	@ 0xff
 8000ac4:	d1fb      	bne.n	8000abe <__eqsf2+0x3a>
 8000ac6:	4335      	orrs	r5, r6
 8000ac8:	d1f9      	bne.n	8000abe <__eqsf2+0x3a>
 8000aca:	404b      	eors	r3, r1
 8000acc:	0018      	movs	r0, r3
 8000ace:	e7f6      	b.n	8000abe <__eqsf2+0x3a>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7f4      	b.n	8000abe <__eqsf2+0x3a>

08000ad4 <__gesf2>:
 8000ad4:	b530      	push	{r4, r5, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	024d      	lsls	r5, r1, #9
 8000adc:	0fc3      	lsrs	r3, r0, #31
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e00      	lsrs	r0, r0, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	2aff      	cmp	r2, #255	@ 0xff
 8000aec:	d019      	beq.n	8000b22 <__gesf2+0x4e>
 8000aee:	28ff      	cmp	r0, #255	@ 0xff
 8000af0:	d00b      	beq.n	8000b0a <__gesf2+0x36>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11e      	bne.n	8000b34 <__gesf2+0x60>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10b      	bne.n	8000b12 <__gesf2+0x3e>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d027      	beq.n	8000b4e <__gesf2+0x7a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d134      	bne.n	8000b6c <__gesf2+0x98>
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d02f      	beq.n	8000b66 <__gesf2+0x92>
 8000b06:	0008      	movs	r0, r1
 8000b08:	bd30      	pop	{r4, r5, pc}
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d128      	bne.n	8000b60 <__gesf2+0x8c>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d101      	bne.n	8000b16 <__gesf2+0x42>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d0f5      	beq.n	8000b02 <__gesf2+0x2e>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d107      	bne.n	8000b2a <__gesf2+0x56>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d023      	beq.n	8000b66 <__gesf2+0x92>
 8000b1e:	0018      	movs	r0, r3
 8000b20:	e7f2      	b.n	8000b08 <__gesf2+0x34>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d11c      	bne.n	8000b60 <__gesf2+0x8c>
 8000b26:	28ff      	cmp	r0, #255	@ 0xff
 8000b28:	d014      	beq.n	8000b54 <__gesf2+0x80>
 8000b2a:	1e58      	subs	r0, r3, #1
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	4018      	ands	r0, r3
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7e9      	b.n	8000b08 <__gesf2+0x34>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0f8      	beq.n	8000b2a <__gesf2+0x56>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d1f6      	bne.n	8000b2a <__gesf2+0x56>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	dcf4      	bgt.n	8000b2a <__gesf2+0x56>
 8000b40:	dbeb      	blt.n	8000b1a <__gesf2+0x46>
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d8f1      	bhi.n	8000b2a <__gesf2+0x56>
 8000b46:	2000      	movs	r0, #0
 8000b48:	42ac      	cmp	r4, r5
 8000b4a:	d2dd      	bcs.n	8000b08 <__gesf2+0x34>
 8000b4c:	e7e5      	b.n	8000b1a <__gesf2+0x46>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d0da      	beq.n	8000b08 <__gesf2+0x34>
 8000b52:	e7ea      	b.n	8000b2a <__gesf2+0x56>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d103      	bne.n	8000b60 <__gesf2+0x8c>
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d1e6      	bne.n	8000b2a <__gesf2+0x56>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7d3      	b.n	8000b08 <__gesf2+0x34>
 8000b60:	2002      	movs	r0, #2
 8000b62:	4240      	negs	r0, r0
 8000b64:	e7d0      	b.n	8000b08 <__gesf2+0x34>
 8000b66:	2001      	movs	r0, #1
 8000b68:	4240      	negs	r0, r0
 8000b6a:	e7cd      	b.n	8000b08 <__gesf2+0x34>
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d0e8      	beq.n	8000b42 <__gesf2+0x6e>
 8000b70:	e7db      	b.n	8000b2a <__gesf2+0x56>
 8000b72:	46c0      	nop			@ (mov r8, r8)

08000b74 <__lesf2>:
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	0042      	lsls	r2, r0, #1
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	024d      	lsls	r5, r1, #9
 8000b7c:	0fc3      	lsrs	r3, r0, #31
 8000b7e:	0048      	lsls	r0, r1, #1
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	0a6d      	lsrs	r5, r5, #9
 8000b86:	0e00      	lsrs	r0, r0, #24
 8000b88:	0fc9      	lsrs	r1, r1, #31
 8000b8a:	2aff      	cmp	r2, #255	@ 0xff
 8000b8c:	d01a      	beq.n	8000bc4 <__lesf2+0x50>
 8000b8e:	28ff      	cmp	r0, #255	@ 0xff
 8000b90:	d00e      	beq.n	8000bb0 <__lesf2+0x3c>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d11e      	bne.n	8000bd4 <__lesf2+0x60>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d10e      	bne.n	8000bb8 <__lesf2+0x44>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d02a      	beq.n	8000bf4 <__lesf2+0x80>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d00c      	beq.n	8000bbc <__lesf2+0x48>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d01d      	beq.n	8000be2 <__lesf2+0x6e>
 8000ba6:	1e58      	subs	r0, r3, #1
 8000ba8:	2302      	movs	r3, #2
 8000baa:	4018      	ands	r0, r3
 8000bac:	3801      	subs	r0, #1
 8000bae:	e010      	b.n	8000bd2 <__lesf2+0x5e>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d10d      	bne.n	8000bd0 <__lesf2+0x5c>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d120      	bne.n	8000bfa <__lesf2+0x86>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d11e      	bne.n	8000bfa <__lesf2+0x86>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d023      	beq.n	8000c08 <__lesf2+0x94>
 8000bc0:	0008      	movs	r0, r1
 8000bc2:	e006      	b.n	8000bd2 <__lesf2+0x5e>
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d103      	bne.n	8000bd0 <__lesf2+0x5c>
 8000bc8:	28ff      	cmp	r0, #255	@ 0xff
 8000bca:	d1ec      	bne.n	8000ba6 <__lesf2+0x32>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d017      	beq.n	8000c00 <__lesf2+0x8c>
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0e6      	beq.n	8000ba6 <__lesf2+0x32>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d1e4      	bne.n	8000ba6 <__lesf2+0x32>
 8000bdc:	4282      	cmp	r2, r0
 8000bde:	dce2      	bgt.n	8000ba6 <__lesf2+0x32>
 8000be0:	db04      	blt.n	8000bec <__lesf2+0x78>
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	d8df      	bhi.n	8000ba6 <__lesf2+0x32>
 8000be6:	2000      	movs	r0, #0
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d2f2      	bcs.n	8000bd2 <__lesf2+0x5e>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00b      	beq.n	8000c08 <__lesf2+0x94>
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	e7ee      	b.n	8000bd2 <__lesf2+0x5e>
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d0ec      	beq.n	8000bd2 <__lesf2+0x5e>
 8000bf8:	e7d5      	b.n	8000ba6 <__lesf2+0x32>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d1d3      	bne.n	8000ba6 <__lesf2+0x32>
 8000bfe:	e7f5      	b.n	8000bec <__lesf2+0x78>
 8000c00:	2000      	movs	r0, #0
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d0e5      	beq.n	8000bd2 <__lesf2+0x5e>
 8000c06:	e7ce      	b.n	8000ba6 <__lesf2+0x32>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7e1      	b.n	8000bd2 <__lesf2+0x5e>
 8000c0e:	46c0      	nop			@ (mov r8, r8)

08000c10 <__aeabi_i2f>:
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d013      	beq.n	8000c3e <__aeabi_i2f+0x2e>
 8000c16:	17c3      	asrs	r3, r0, #31
 8000c18:	18c5      	adds	r5, r0, r3
 8000c1a:	405d      	eors	r5, r3
 8000c1c:	0fc4      	lsrs	r4, r0, #31
 8000c1e:	0028      	movs	r0, r5
 8000c20:	f001 ffca 	bl	8002bb8 <__clzsi2>
 8000c24:	239e      	movs	r3, #158	@ 0x9e
 8000c26:	0001      	movs	r1, r0
 8000c28:	1a1b      	subs	r3, r3, r0
 8000c2a:	2b96      	cmp	r3, #150	@ 0x96
 8000c2c:	dc0f      	bgt.n	8000c4e <__aeabi_i2f+0x3e>
 8000c2e:	2808      	cmp	r0, #8
 8000c30:	d034      	beq.n	8000c9c <__aeabi_i2f+0x8c>
 8000c32:	3908      	subs	r1, #8
 8000c34:	408d      	lsls	r5, r1
 8000c36:	026d      	lsls	r5, r5, #9
 8000c38:	0a6d      	lsrs	r5, r5, #9
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	e002      	b.n	8000c44 <__aeabi_i2f+0x34>
 8000c3e:	2400      	movs	r4, #0
 8000c40:	2000      	movs	r0, #0
 8000c42:	2500      	movs	r5, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	4328      	orrs	r0, r5
 8000c48:	07e4      	lsls	r4, r4, #31
 8000c4a:	4320      	orrs	r0, r4
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}
 8000c4e:	2b99      	cmp	r3, #153	@ 0x99
 8000c50:	dc16      	bgt.n	8000c80 <__aeabi_i2f+0x70>
 8000c52:	1f42      	subs	r2, r0, #5
 8000c54:	2805      	cmp	r0, #5
 8000c56:	d000      	beq.n	8000c5a <__aeabi_i2f+0x4a>
 8000c58:	4095      	lsls	r5, r2
 8000c5a:	002a      	movs	r2, r5
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <__aeabi_i2f+0x94>)
 8000c5e:	4002      	ands	r2, r0
 8000c60:	076e      	lsls	r6, r5, #29
 8000c62:	d009      	beq.n	8000c78 <__aeabi_i2f+0x68>
 8000c64:	260f      	movs	r6, #15
 8000c66:	4035      	ands	r5, r6
 8000c68:	2d04      	cmp	r5, #4
 8000c6a:	d005      	beq.n	8000c78 <__aeabi_i2f+0x68>
 8000c6c:	3204      	adds	r2, #4
 8000c6e:	0155      	lsls	r5, r2, #5
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_i2f+0x68>
 8000c72:	239f      	movs	r3, #159	@ 0x9f
 8000c74:	4002      	ands	r2, r0
 8000c76:	1a5b      	subs	r3, r3, r1
 8000c78:	0192      	lsls	r2, r2, #6
 8000c7a:	0a55      	lsrs	r5, r2, #9
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e7e1      	b.n	8000c44 <__aeabi_i2f+0x34>
 8000c80:	2205      	movs	r2, #5
 8000c82:	1a12      	subs	r2, r2, r0
 8000c84:	0028      	movs	r0, r5
 8000c86:	40d0      	lsrs	r0, r2
 8000c88:	0002      	movs	r2, r0
 8000c8a:	0008      	movs	r0, r1
 8000c8c:	301b      	adds	r0, #27
 8000c8e:	4085      	lsls	r5, r0
 8000c90:	0028      	movs	r0, r5
 8000c92:	1e45      	subs	r5, r0, #1
 8000c94:	41a8      	sbcs	r0, r5
 8000c96:	4302      	orrs	r2, r0
 8000c98:	0015      	movs	r5, r2
 8000c9a:	e7de      	b.n	8000c5a <__aeabi_i2f+0x4a>
 8000c9c:	026d      	lsls	r5, r5, #9
 8000c9e:	2096      	movs	r0, #150	@ 0x96
 8000ca0:	0a6d      	lsrs	r5, r5, #9
 8000ca2:	e7cf      	b.n	8000c44 <__aeabi_i2f+0x34>
 8000ca4:	fbffffff 	.word	0xfbffffff

08000ca8 <__aeabi_dadd>:
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	4657      	mov	r7, sl
 8000cac:	464e      	mov	r6, r9
 8000cae:	4645      	mov	r5, r8
 8000cb0:	46de      	mov	lr, fp
 8000cb2:	b5e0      	push	{r5, r6, r7, lr}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	9000      	str	r0, [sp, #0]
 8000cb8:	9101      	str	r1, [sp, #4]
 8000cba:	030c      	lsls	r4, r1, #12
 8000cbc:	004f      	lsls	r7, r1, #1
 8000cbe:	0fce      	lsrs	r6, r1, #31
 8000cc0:	0a61      	lsrs	r1, r4, #9
 8000cc2:	9c00      	ldr	r4, [sp, #0]
 8000cc4:	031d      	lsls	r5, r3, #12
 8000cc6:	0f64      	lsrs	r4, r4, #29
 8000cc8:	430c      	orrs	r4, r1
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	9200      	str	r2, [sp, #0]
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	00c8      	lsls	r0, r1, #3
 8000cd2:	0059      	lsls	r1, r3, #1
 8000cd4:	0d4b      	lsrs	r3, r1, #21
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	9a00      	ldr	r2, [sp, #0]
 8000cda:	9b01      	ldr	r3, [sp, #4]
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	0fd9      	lsrs	r1, r3, #31
 8000ce0:	0f53      	lsrs	r3, r2, #29
 8000ce2:	432b      	orrs	r3, r5
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	9b00      	ldr	r3, [sp, #0]
 8000ce8:	0d7f      	lsrs	r7, r7, #21
 8000cea:	00da      	lsls	r2, r3, #3
 8000cec:	4694      	mov	ip, r2
 8000cee:	464a      	mov	r2, r9
 8000cf0:	46b0      	mov	r8, r6
 8000cf2:	1aba      	subs	r2, r7, r2
 8000cf4:	428e      	cmp	r6, r1
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x52>
 8000cf8:	e0b0      	b.n	8000e5c <__aeabi_dadd+0x1b4>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	dc00      	bgt.n	8000d00 <__aeabi_dadd+0x58>
 8000cfe:	e078      	b.n	8000df2 <__aeabi_dadd+0x14a>
 8000d00:	4649      	mov	r1, r9
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x60>
 8000d06:	e0e9      	b.n	8000edc <__aeabi_dadd+0x234>
 8000d08:	49c9      	ldr	r1, [pc, #804]	@ (8001030 <__aeabi_dadd+0x388>)
 8000d0a:	428f      	cmp	r7, r1
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dadd+0x68>
 8000d0e:	e195      	b.n	800103c <__aeabi_dadd+0x394>
 8000d10:	2501      	movs	r5, #1
 8000d12:	2a38      	cmp	r2, #56	@ 0x38
 8000d14:	dc16      	bgt.n	8000d44 <__aeabi_dadd+0x9c>
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	4653      	mov	r3, sl
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	469a      	mov	sl, r3
 8000d20:	2a1f      	cmp	r2, #31
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_dadd+0x7e>
 8000d24:	e1e7      	b.n	80010f6 <__aeabi_dadd+0x44e>
 8000d26:	2120      	movs	r1, #32
 8000d28:	4655      	mov	r5, sl
 8000d2a:	1a8b      	subs	r3, r1, r2
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	409d      	lsls	r5, r3
 8000d30:	40d1      	lsrs	r1, r2
 8000d32:	430d      	orrs	r5, r1
 8000d34:	4661      	mov	r1, ip
 8000d36:	4099      	lsls	r1, r3
 8000d38:	1e4b      	subs	r3, r1, #1
 8000d3a:	4199      	sbcs	r1, r3
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	40d3      	lsrs	r3, r2
 8000d40:	430d      	orrs	r5, r1
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	1b45      	subs	r5, r0, r5
 8000d46:	42a8      	cmp	r0, r5
 8000d48:	4180      	sbcs	r0, r0
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	1a24      	subs	r4, r4, r0
 8000d4e:	0223      	lsls	r3, r4, #8
 8000d50:	d400      	bmi.n	8000d54 <__aeabi_dadd+0xac>
 8000d52:	e10f      	b.n	8000f74 <__aeabi_dadd+0x2cc>
 8000d54:	0264      	lsls	r4, r4, #9
 8000d56:	0a64      	lsrs	r4, r4, #9
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0xb6>
 8000d5c:	e139      	b.n	8000fd2 <__aeabi_dadd+0x32a>
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f001 ff2a 	bl	8002bb8 <__clzsi2>
 8000d64:	0003      	movs	r3, r0
 8000d66:	3b08      	subs	r3, #8
 8000d68:	2120      	movs	r1, #32
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	1aca      	subs	r2, r1, r3
 8000d6e:	40d0      	lsrs	r0, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	0002      	movs	r2, r0
 8000d74:	409d      	lsls	r5, r3
 8000d76:	4322      	orrs	r2, r4
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	dd00      	ble.n	8000d7e <__aeabi_dadd+0xd6>
 8000d7c:	e173      	b.n	8001066 <__aeabi_dadd+0x3be>
 8000d7e:	1bd8      	subs	r0, r3, r7
 8000d80:	3001      	adds	r0, #1
 8000d82:	1a09      	subs	r1, r1, r0
 8000d84:	002c      	movs	r4, r5
 8000d86:	408d      	lsls	r5, r1
 8000d88:	40c4      	lsrs	r4, r0
 8000d8a:	1e6b      	subs	r3, r5, #1
 8000d8c:	419d      	sbcs	r5, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	40c2      	lsrs	r2, r0
 8000d92:	408b      	lsls	r3, r1
 8000d94:	4325      	orrs	r5, r4
 8000d96:	2700      	movs	r7, #0
 8000d98:	0014      	movs	r4, r2
 8000d9a:	431d      	orrs	r5, r3
 8000d9c:	076b      	lsls	r3, r5, #29
 8000d9e:	d009      	beq.n	8000db4 <__aeabi_dadd+0x10c>
 8000da0:	230f      	movs	r3, #15
 8000da2:	402b      	ands	r3, r5
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d005      	beq.n	8000db4 <__aeabi_dadd+0x10c>
 8000da8:	1d2b      	adds	r3, r5, #4
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	41ad      	sbcs	r5, r5
 8000dae:	426d      	negs	r5, r5
 8000db0:	1964      	adds	r4, r4, r5
 8000db2:	001d      	movs	r5, r3
 8000db4:	0223      	lsls	r3, r4, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x112>
 8000db8:	e12d      	b.n	8001016 <__aeabi_dadd+0x36e>
 8000dba:	4a9d      	ldr	r2, [pc, #628]	@ (8001030 <__aeabi_dadd+0x388>)
 8000dbc:	3701      	adds	r7, #1
 8000dbe:	4297      	cmp	r7, r2
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x11c>
 8000dc2:	e0d3      	b.n	8000f6c <__aeabi_dadd+0x2c4>
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	499b      	ldr	r1, [pc, #620]	@ (8001034 <__aeabi_dadd+0x38c>)
 8000dc8:	08ed      	lsrs	r5, r5, #3
 8000dca:	4021      	ands	r1, r4
 8000dcc:	074a      	lsls	r2, r1, #29
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	057c      	lsls	r4, r7, #21
 8000dd2:	024d      	lsls	r5, r1, #9
 8000dd4:	0b2d      	lsrs	r5, r5, #12
 8000dd6:	0d64      	lsrs	r4, r4, #21
 8000dd8:	0524      	lsls	r4, r4, #20
 8000dda:	432c      	orrs	r4, r5
 8000ddc:	07f6      	lsls	r6, r6, #31
 8000dde:	4334      	orrs	r4, r6
 8000de0:	0010      	movs	r0, r2
 8000de2:	0021      	movs	r1, r4
 8000de4:	b003      	add	sp, #12
 8000de6:	bcf0      	pop	{r4, r5, r6, r7}
 8000de8:	46bb      	mov	fp, r7
 8000dea:	46b2      	mov	sl, r6
 8000dec:	46a9      	mov	r9, r5
 8000dee:	46a0      	mov	r8, r4
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x150>
 8000df6:	e084      	b.n	8000f02 <__aeabi_dadd+0x25a>
 8000df8:	464a      	mov	r2, r9
 8000dfa:	1bd2      	subs	r2, r2, r7
 8000dfc:	2f00      	cmp	r7, #0
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x15a>
 8000e00:	e16d      	b.n	80010de <__aeabi_dadd+0x436>
 8000e02:	0025      	movs	r5, r4
 8000e04:	4305      	orrs	r5, r0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x162>
 8000e08:	e127      	b.n	800105a <__aeabi_dadd+0x3b2>
 8000e0a:	1e56      	subs	r6, r2, #1
 8000e0c:	2a01      	cmp	r2, #1
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x16a>
 8000e10:	e23b      	b.n	800128a <__aeabi_dadd+0x5e2>
 8000e12:	4d87      	ldr	r5, [pc, #540]	@ (8001030 <__aeabi_dadd+0x388>)
 8000e14:	42aa      	cmp	r2, r5
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dadd+0x172>
 8000e18:	e26a      	b.n	80012f0 <__aeabi_dadd+0x648>
 8000e1a:	2501      	movs	r5, #1
 8000e1c:	2e38      	cmp	r6, #56	@ 0x38
 8000e1e:	dc12      	bgt.n	8000e46 <__aeabi_dadd+0x19e>
 8000e20:	0032      	movs	r2, r6
 8000e22:	2a1f      	cmp	r2, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x180>
 8000e26:	e1f8      	b.n	800121a <__aeabi_dadd+0x572>
 8000e28:	2620      	movs	r6, #32
 8000e2a:	0025      	movs	r5, r4
 8000e2c:	1ab6      	subs	r6, r6, r2
 8000e2e:	0007      	movs	r7, r0
 8000e30:	4653      	mov	r3, sl
 8000e32:	40b0      	lsls	r0, r6
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	40b5      	lsls	r5, r6
 8000e38:	40d7      	lsrs	r7, r2
 8000e3a:	1e46      	subs	r6, r0, #1
 8000e3c:	41b0      	sbcs	r0, r6
 8000e3e:	1b1b      	subs	r3, r3, r4
 8000e40:	469a      	mov	sl, r3
 8000e42:	433d      	orrs	r5, r7
 8000e44:	4305      	orrs	r5, r0
 8000e46:	4662      	mov	r2, ip
 8000e48:	1b55      	subs	r5, r2, r5
 8000e4a:	45ac      	cmp	ip, r5
 8000e4c:	4192      	sbcs	r2, r2
 8000e4e:	4653      	mov	r3, sl
 8000e50:	4252      	negs	r2, r2
 8000e52:	000e      	movs	r6, r1
 8000e54:	464f      	mov	r7, r9
 8000e56:	4688      	mov	r8, r1
 8000e58:	1a9c      	subs	r4, r3, r2
 8000e5a:	e778      	b.n	8000d4e <__aeabi_dadd+0xa6>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	dc00      	bgt.n	8000e62 <__aeabi_dadd+0x1ba>
 8000e60:	e08e      	b.n	8000f80 <__aeabi_dadd+0x2d8>
 8000e62:	4649      	mov	r1, r9
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d175      	bne.n	8000f54 <__aeabi_dadd+0x2ac>
 8000e68:	4661      	mov	r1, ip
 8000e6a:	4653      	mov	r3, sl
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x1ca>
 8000e70:	e0f6      	b.n	8001060 <__aeabi_dadd+0x3b8>
 8000e72:	1e51      	subs	r1, r2, #1
 8000e74:	2a01      	cmp	r2, #1
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x1d2>
 8000e78:	e191      	b.n	800119e <__aeabi_dadd+0x4f6>
 8000e7a:	4d6d      	ldr	r5, [pc, #436]	@ (8001030 <__aeabi_dadd+0x388>)
 8000e7c:	42aa      	cmp	r2, r5
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x1da>
 8000e80:	e0dc      	b.n	800103c <__aeabi_dadd+0x394>
 8000e82:	2501      	movs	r5, #1
 8000e84:	2938      	cmp	r1, #56	@ 0x38
 8000e86:	dc14      	bgt.n	8000eb2 <__aeabi_dadd+0x20a>
 8000e88:	000a      	movs	r2, r1
 8000e8a:	2a1f      	cmp	r2, #31
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_dadd+0x1e8>
 8000e8e:	e1a2      	b.n	80011d6 <__aeabi_dadd+0x52e>
 8000e90:	2120      	movs	r1, #32
 8000e92:	4653      	mov	r3, sl
 8000e94:	1a89      	subs	r1, r1, r2
 8000e96:	408b      	lsls	r3, r1
 8000e98:	001d      	movs	r5, r3
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	40d3      	lsrs	r3, r2
 8000e9e:	431d      	orrs	r5, r3
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	408b      	lsls	r3, r1
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	1e4b      	subs	r3, r1, #1
 8000ea8:	4199      	sbcs	r1, r3
 8000eaa:	4653      	mov	r3, sl
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	430d      	orrs	r5, r1
 8000eb0:	18e4      	adds	r4, r4, r3
 8000eb2:	182d      	adds	r5, r5, r0
 8000eb4:	4285      	cmp	r5, r0
 8000eb6:	4180      	sbcs	r0, r0
 8000eb8:	4240      	negs	r0, r0
 8000eba:	1824      	adds	r4, r4, r0
 8000ebc:	0223      	lsls	r3, r4, #8
 8000ebe:	d559      	bpl.n	8000f74 <__aeabi_dadd+0x2cc>
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8001030 <__aeabi_dadd+0x388>)
 8000ec2:	3701      	adds	r7, #1
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	d051      	beq.n	8000f6c <__aeabi_dadd+0x2c4>
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4b5a      	ldr	r3, [pc, #360]	@ (8001034 <__aeabi_dadd+0x38c>)
 8000ecc:	086a      	lsrs	r2, r5, #1
 8000ece:	401c      	ands	r4, r3
 8000ed0:	4029      	ands	r1, r5
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	07e5      	lsls	r5, r4, #31
 8000ed6:	4315      	orrs	r5, r2
 8000ed8:	0864      	lsrs	r4, r4, #1
 8000eda:	e75f      	b.n	8000d9c <__aeabi_dadd+0xf4>
 8000edc:	4661      	mov	r1, ip
 8000ede:	4653      	mov	r3, sl
 8000ee0:	4319      	orrs	r1, r3
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x23e>
 8000ee4:	e0bc      	b.n	8001060 <__aeabi_dadd+0x3b8>
 8000ee6:	1e51      	subs	r1, r2, #1
 8000ee8:	2a01      	cmp	r2, #1
 8000eea:	d100      	bne.n	8000eee <__aeabi_dadd+0x246>
 8000eec:	e164      	b.n	80011b8 <__aeabi_dadd+0x510>
 8000eee:	4d50      	ldr	r5, [pc, #320]	@ (8001030 <__aeabi_dadd+0x388>)
 8000ef0:	42aa      	cmp	r2, r5
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x24e>
 8000ef4:	e16a      	b.n	80011cc <__aeabi_dadd+0x524>
 8000ef6:	2501      	movs	r5, #1
 8000ef8:	2938      	cmp	r1, #56	@ 0x38
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dadd+0x256>
 8000efc:	e722      	b.n	8000d44 <__aeabi_dadd+0x9c>
 8000efe:	000a      	movs	r2, r1
 8000f00:	e70e      	b.n	8000d20 <__aeabi_dadd+0x78>
 8000f02:	4a4d      	ldr	r2, [pc, #308]	@ (8001038 <__aeabi_dadd+0x390>)
 8000f04:	1c7d      	adds	r5, r7, #1
 8000f06:	4215      	tst	r5, r2
 8000f08:	d000      	beq.n	8000f0c <__aeabi_dadd+0x264>
 8000f0a:	e0d0      	b.n	80010ae <__aeabi_dadd+0x406>
 8000f0c:	0025      	movs	r5, r4
 8000f0e:	4662      	mov	r2, ip
 8000f10:	4653      	mov	r3, sl
 8000f12:	4305      	orrs	r5, r0
 8000f14:	431a      	orrs	r2, r3
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_dadd+0x274>
 8000f1a:	e137      	b.n	800118c <__aeabi_dadd+0x4e4>
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x27a>
 8000f20:	e1a8      	b.n	8001274 <__aeabi_dadd+0x5cc>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_dadd+0x280>
 8000f26:	e16a      	b.n	80011fe <__aeabi_dadd+0x556>
 8000f28:	4663      	mov	r3, ip
 8000f2a:	1ac5      	subs	r5, r0, r3
 8000f2c:	4653      	mov	r3, sl
 8000f2e:	1ae2      	subs	r2, r4, r3
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	419b      	sbcs	r3, r3
 8000f34:	425b      	negs	r3, r3
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	021a      	lsls	r2, r3, #8
 8000f3a:	d400      	bmi.n	8000f3e <__aeabi_dadd+0x296>
 8000f3c:	e203      	b.n	8001346 <__aeabi_dadd+0x69e>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	1a1d      	subs	r5, r3, r0
 8000f42:	45ac      	cmp	ip, r5
 8000f44:	4192      	sbcs	r2, r2
 8000f46:	4653      	mov	r3, sl
 8000f48:	4252      	negs	r2, r2
 8000f4a:	1b1c      	subs	r4, r3, r4
 8000f4c:	000e      	movs	r6, r1
 8000f4e:	4688      	mov	r8, r1
 8000f50:	1aa4      	subs	r4, r4, r2
 8000f52:	e723      	b.n	8000d9c <__aeabi_dadd+0xf4>
 8000f54:	4936      	ldr	r1, [pc, #216]	@ (8001030 <__aeabi_dadd+0x388>)
 8000f56:	428f      	cmp	r7, r1
 8000f58:	d070      	beq.n	800103c <__aeabi_dadd+0x394>
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	2a38      	cmp	r2, #56	@ 0x38
 8000f5e:	dca8      	bgt.n	8000eb2 <__aeabi_dadd+0x20a>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	4653      	mov	r3, sl
 8000f64:	0409      	lsls	r1, r1, #16
 8000f66:	430b      	orrs	r3, r1
 8000f68:	469a      	mov	sl, r3
 8000f6a:	e78e      	b.n	8000e8a <__aeabi_dadd+0x1e2>
 8000f6c:	003c      	movs	r4, r7
 8000f6e:	2500      	movs	r5, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	e731      	b.n	8000dd8 <__aeabi_dadd+0x130>
 8000f74:	2307      	movs	r3, #7
 8000f76:	402b      	ands	r3, r5
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_dadd+0x2d6>
 8000f7c:	e710      	b.n	8000da0 <__aeabi_dadd+0xf8>
 8000f7e:	e093      	b.n	80010a8 <__aeabi_dadd+0x400>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d074      	beq.n	800106e <__aeabi_dadd+0x3c6>
 8000f84:	464a      	mov	r2, r9
 8000f86:	1bd2      	subs	r2, r2, r7
 8000f88:	2f00      	cmp	r7, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x2e6>
 8000f8c:	e0c7      	b.n	800111e <__aeabi_dadd+0x476>
 8000f8e:	4928      	ldr	r1, [pc, #160]	@ (8001030 <__aeabi_dadd+0x388>)
 8000f90:	4589      	cmp	r9, r1
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x2ee>
 8000f94:	e185      	b.n	80012a2 <__aeabi_dadd+0x5fa>
 8000f96:	2501      	movs	r5, #1
 8000f98:	2a38      	cmp	r2, #56	@ 0x38
 8000f9a:	dc12      	bgt.n	8000fc2 <__aeabi_dadd+0x31a>
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0409      	lsls	r1, r1, #16
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2a1f      	cmp	r2, #31
 8000fa4:	dd00      	ble.n	8000fa8 <__aeabi_dadd+0x300>
 8000fa6:	e1ab      	b.n	8001300 <__aeabi_dadd+0x658>
 8000fa8:	2120      	movs	r1, #32
 8000faa:	0025      	movs	r5, r4
 8000fac:	1a89      	subs	r1, r1, r2
 8000fae:	0007      	movs	r7, r0
 8000fb0:	4088      	lsls	r0, r1
 8000fb2:	408d      	lsls	r5, r1
 8000fb4:	40d7      	lsrs	r7, r2
 8000fb6:	1e41      	subs	r1, r0, #1
 8000fb8:	4188      	sbcs	r0, r1
 8000fba:	40d4      	lsrs	r4, r2
 8000fbc:	433d      	orrs	r5, r7
 8000fbe:	4305      	orrs	r5, r0
 8000fc0:	44a2      	add	sl, r4
 8000fc2:	4465      	add	r5, ip
 8000fc4:	4565      	cmp	r5, ip
 8000fc6:	4192      	sbcs	r2, r2
 8000fc8:	4252      	negs	r2, r2
 8000fca:	4452      	add	r2, sl
 8000fcc:	0014      	movs	r4, r2
 8000fce:	464f      	mov	r7, r9
 8000fd0:	e774      	b.n	8000ebc <__aeabi_dadd+0x214>
 8000fd2:	0028      	movs	r0, r5
 8000fd4:	f001 fdf0 	bl	8002bb8 <__clzsi2>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	3318      	adds	r3, #24
 8000fdc:	2b1f      	cmp	r3, #31
 8000fde:	dc00      	bgt.n	8000fe2 <__aeabi_dadd+0x33a>
 8000fe0:	e6c2      	b.n	8000d68 <__aeabi_dadd+0xc0>
 8000fe2:	002a      	movs	r2, r5
 8000fe4:	3808      	subs	r0, #8
 8000fe6:	4082      	lsls	r2, r0
 8000fe8:	429f      	cmp	r7, r3
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dadd+0x346>
 8000fec:	e0a9      	b.n	8001142 <__aeabi_dadd+0x49a>
 8000fee:	1bdb      	subs	r3, r3, r7
 8000ff0:	1c58      	adds	r0, r3, #1
 8000ff2:	281f      	cmp	r0, #31
 8000ff4:	dc00      	bgt.n	8000ff8 <__aeabi_dadd+0x350>
 8000ff6:	e1ac      	b.n	8001352 <__aeabi_dadd+0x6aa>
 8000ff8:	0015      	movs	r5, r2
 8000ffa:	3b1f      	subs	r3, #31
 8000ffc:	40dd      	lsrs	r5, r3
 8000ffe:	2820      	cmp	r0, #32
 8001000:	d005      	beq.n	800100e <__aeabi_dadd+0x366>
 8001002:	2340      	movs	r3, #64	@ 0x40
 8001004:	1a1b      	subs	r3, r3, r0
 8001006:	409a      	lsls	r2, r3
 8001008:	1e53      	subs	r3, r2, #1
 800100a:	419a      	sbcs	r2, r3
 800100c:	4315      	orrs	r5, r2
 800100e:	2307      	movs	r3, #7
 8001010:	2700      	movs	r7, #0
 8001012:	402b      	ands	r3, r5
 8001014:	e7b0      	b.n	8000f78 <__aeabi_dadd+0x2d0>
 8001016:	08ed      	lsrs	r5, r5, #3
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <__aeabi_dadd+0x388>)
 800101a:	0762      	lsls	r2, r4, #29
 800101c:	432a      	orrs	r2, r5
 800101e:	08e4      	lsrs	r4, r4, #3
 8001020:	429f      	cmp	r7, r3
 8001022:	d00f      	beq.n	8001044 <__aeabi_dadd+0x39c>
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	0b25      	lsrs	r5, r4, #12
 8001028:	057c      	lsls	r4, r7, #21
 800102a:	0d64      	lsrs	r4, r4, #21
 800102c:	e6d4      	b.n	8000dd8 <__aeabi_dadd+0x130>
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	000007ff 	.word	0x000007ff
 8001034:	ff7fffff 	.word	0xff7fffff
 8001038:	000007fe 	.word	0x000007fe
 800103c:	08c0      	lsrs	r0, r0, #3
 800103e:	0762      	lsls	r2, r4, #29
 8001040:	4302      	orrs	r2, r0
 8001042:	08e4      	lsrs	r4, r4, #3
 8001044:	0013      	movs	r3, r2
 8001046:	4323      	orrs	r3, r4
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x3a4>
 800104a:	e186      	b.n	800135a <__aeabi_dadd+0x6b2>
 800104c:	2580      	movs	r5, #128	@ 0x80
 800104e:	032d      	lsls	r5, r5, #12
 8001050:	4325      	orrs	r5, r4
 8001052:	032d      	lsls	r5, r5, #12
 8001054:	4cc3      	ldr	r4, [pc, #780]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001056:	0b2d      	lsrs	r5, r5, #12
 8001058:	e6be      	b.n	8000dd8 <__aeabi_dadd+0x130>
 800105a:	4660      	mov	r0, ip
 800105c:	4654      	mov	r4, sl
 800105e:	000e      	movs	r6, r1
 8001060:	0017      	movs	r7, r2
 8001062:	08c5      	lsrs	r5, r0, #3
 8001064:	e7d8      	b.n	8001018 <__aeabi_dadd+0x370>
 8001066:	4cc0      	ldr	r4, [pc, #768]	@ (8001368 <__aeabi_dadd+0x6c0>)
 8001068:	1aff      	subs	r7, r7, r3
 800106a:	4014      	ands	r4, r2
 800106c:	e696      	b.n	8000d9c <__aeabi_dadd+0xf4>
 800106e:	4abf      	ldr	r2, [pc, #764]	@ (800136c <__aeabi_dadd+0x6c4>)
 8001070:	1c79      	adds	r1, r7, #1
 8001072:	4211      	tst	r1, r2
 8001074:	d16b      	bne.n	800114e <__aeabi_dadd+0x4a6>
 8001076:	0022      	movs	r2, r4
 8001078:	4302      	orrs	r2, r0
 800107a:	2f00      	cmp	r7, #0
 800107c:	d000      	beq.n	8001080 <__aeabi_dadd+0x3d8>
 800107e:	e0db      	b.n	8001238 <__aeabi_dadd+0x590>
 8001080:	2a00      	cmp	r2, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x3de>
 8001084:	e12d      	b.n	80012e2 <__aeabi_dadd+0x63a>
 8001086:	4662      	mov	r2, ip
 8001088:	4653      	mov	r3, sl
 800108a:	431a      	orrs	r2, r3
 800108c:	d100      	bne.n	8001090 <__aeabi_dadd+0x3e8>
 800108e:	e0b6      	b.n	80011fe <__aeabi_dadd+0x556>
 8001090:	4663      	mov	r3, ip
 8001092:	18c5      	adds	r5, r0, r3
 8001094:	4285      	cmp	r5, r0
 8001096:	4180      	sbcs	r0, r0
 8001098:	4454      	add	r4, sl
 800109a:	4240      	negs	r0, r0
 800109c:	1824      	adds	r4, r4, r0
 800109e:	0223      	lsls	r3, r4, #8
 80010a0:	d502      	bpl.n	80010a8 <__aeabi_dadd+0x400>
 80010a2:	000f      	movs	r7, r1
 80010a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001368 <__aeabi_dadd+0x6c0>)
 80010a6:	401c      	ands	r4, r3
 80010a8:	003a      	movs	r2, r7
 80010aa:	0028      	movs	r0, r5
 80010ac:	e7d8      	b.n	8001060 <__aeabi_dadd+0x3b8>
 80010ae:	4662      	mov	r2, ip
 80010b0:	1a85      	subs	r5, r0, r2
 80010b2:	42a8      	cmp	r0, r5
 80010b4:	4192      	sbcs	r2, r2
 80010b6:	4653      	mov	r3, sl
 80010b8:	4252      	negs	r2, r2
 80010ba:	4691      	mov	r9, r2
 80010bc:	1ae3      	subs	r3, r4, r3
 80010be:	001a      	movs	r2, r3
 80010c0:	464b      	mov	r3, r9
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	4691      	mov	r9, r2
 80010c8:	021a      	lsls	r2, r3, #8
 80010ca:	d454      	bmi.n	8001176 <__aeabi_dadd+0x4ce>
 80010cc:	464a      	mov	r2, r9
 80010ce:	464c      	mov	r4, r9
 80010d0:	432a      	orrs	r2, r5
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x42e>
 80010d4:	e640      	b.n	8000d58 <__aeabi_dadd+0xb0>
 80010d6:	2600      	movs	r6, #0
 80010d8:	2400      	movs	r4, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	e67c      	b.n	8000dd8 <__aeabi_dadd+0x130>
 80010de:	4da1      	ldr	r5, [pc, #644]	@ (8001364 <__aeabi_dadd+0x6bc>)
 80010e0:	45a9      	cmp	r9, r5
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x43e>
 80010e4:	e090      	b.n	8001208 <__aeabi_dadd+0x560>
 80010e6:	2501      	movs	r5, #1
 80010e8:	2a38      	cmp	r2, #56	@ 0x38
 80010ea:	dd00      	ble.n	80010ee <__aeabi_dadd+0x446>
 80010ec:	e6ab      	b.n	8000e46 <__aeabi_dadd+0x19e>
 80010ee:	2580      	movs	r5, #128	@ 0x80
 80010f0:	042d      	lsls	r5, r5, #16
 80010f2:	432c      	orrs	r4, r5
 80010f4:	e695      	b.n	8000e22 <__aeabi_dadd+0x17a>
 80010f6:	0011      	movs	r1, r2
 80010f8:	4655      	mov	r5, sl
 80010fa:	3920      	subs	r1, #32
 80010fc:	40cd      	lsrs	r5, r1
 80010fe:	46a9      	mov	r9, r5
 8001100:	2a20      	cmp	r2, #32
 8001102:	d006      	beq.n	8001112 <__aeabi_dadd+0x46a>
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	4653      	mov	r3, sl
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	4093      	lsls	r3, r2
 800110c:	4662      	mov	r2, ip
 800110e:	431a      	orrs	r2, r3
 8001110:	4694      	mov	ip, r2
 8001112:	4665      	mov	r5, ip
 8001114:	1e6b      	subs	r3, r5, #1
 8001116:	419d      	sbcs	r5, r3
 8001118:	464b      	mov	r3, r9
 800111a:	431d      	orrs	r5, r3
 800111c:	e612      	b.n	8000d44 <__aeabi_dadd+0x9c>
 800111e:	0021      	movs	r1, r4
 8001120:	4301      	orrs	r1, r0
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x47e>
 8001124:	e0c4      	b.n	80012b0 <__aeabi_dadd+0x608>
 8001126:	1e51      	subs	r1, r2, #1
 8001128:	2a01      	cmp	r2, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x486>
 800112c:	e0fb      	b.n	8001326 <__aeabi_dadd+0x67e>
 800112e:	4d8d      	ldr	r5, [pc, #564]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001130:	42aa      	cmp	r2, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x48e>
 8001134:	e0b5      	b.n	80012a2 <__aeabi_dadd+0x5fa>
 8001136:	2501      	movs	r5, #1
 8001138:	2938      	cmp	r1, #56	@ 0x38
 800113a:	dd00      	ble.n	800113e <__aeabi_dadd+0x496>
 800113c:	e741      	b.n	8000fc2 <__aeabi_dadd+0x31a>
 800113e:	000a      	movs	r2, r1
 8001140:	e72f      	b.n	8000fa2 <__aeabi_dadd+0x2fa>
 8001142:	4c89      	ldr	r4, [pc, #548]	@ (8001368 <__aeabi_dadd+0x6c0>)
 8001144:	1aff      	subs	r7, r7, r3
 8001146:	4014      	ands	r4, r2
 8001148:	0762      	lsls	r2, r4, #29
 800114a:	08e4      	lsrs	r4, r4, #3
 800114c:	e76a      	b.n	8001024 <__aeabi_dadd+0x37c>
 800114e:	4a85      	ldr	r2, [pc, #532]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001150:	4291      	cmp	r1, r2
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x4ae>
 8001154:	e0e3      	b.n	800131e <__aeabi_dadd+0x676>
 8001156:	4663      	mov	r3, ip
 8001158:	18c2      	adds	r2, r0, r3
 800115a:	4282      	cmp	r2, r0
 800115c:	4180      	sbcs	r0, r0
 800115e:	0023      	movs	r3, r4
 8001160:	4240      	negs	r0, r0
 8001162:	4453      	add	r3, sl
 8001164:	181b      	adds	r3, r3, r0
 8001166:	07dd      	lsls	r5, r3, #31
 8001168:	085c      	lsrs	r4, r3, #1
 800116a:	2307      	movs	r3, #7
 800116c:	0852      	lsrs	r2, r2, #1
 800116e:	4315      	orrs	r5, r2
 8001170:	000f      	movs	r7, r1
 8001172:	402b      	ands	r3, r5
 8001174:	e700      	b.n	8000f78 <__aeabi_dadd+0x2d0>
 8001176:	4663      	mov	r3, ip
 8001178:	1a1d      	subs	r5, r3, r0
 800117a:	45ac      	cmp	ip, r5
 800117c:	4192      	sbcs	r2, r2
 800117e:	4653      	mov	r3, sl
 8001180:	4252      	negs	r2, r2
 8001182:	1b1c      	subs	r4, r3, r4
 8001184:	000e      	movs	r6, r1
 8001186:	4688      	mov	r8, r1
 8001188:	1aa4      	subs	r4, r4, r2
 800118a:	e5e5      	b.n	8000d58 <__aeabi_dadd+0xb0>
 800118c:	2d00      	cmp	r5, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x4ea>
 8001190:	e091      	b.n	80012b6 <__aeabi_dadd+0x60e>
 8001192:	2a00      	cmp	r2, #0
 8001194:	d138      	bne.n	8001208 <__aeabi_dadd+0x560>
 8001196:	2480      	movs	r4, #128	@ 0x80
 8001198:	2600      	movs	r6, #0
 800119a:	0324      	lsls	r4, r4, #12
 800119c:	e756      	b.n	800104c <__aeabi_dadd+0x3a4>
 800119e:	4663      	mov	r3, ip
 80011a0:	18c5      	adds	r5, r0, r3
 80011a2:	4285      	cmp	r5, r0
 80011a4:	4180      	sbcs	r0, r0
 80011a6:	4454      	add	r4, sl
 80011a8:	4240      	negs	r0, r0
 80011aa:	1824      	adds	r4, r4, r0
 80011ac:	2701      	movs	r7, #1
 80011ae:	0223      	lsls	r3, r4, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_dadd+0x50c>
 80011b2:	e6df      	b.n	8000f74 <__aeabi_dadd+0x2cc>
 80011b4:	2702      	movs	r7, #2
 80011b6:	e687      	b.n	8000ec8 <__aeabi_dadd+0x220>
 80011b8:	4663      	mov	r3, ip
 80011ba:	1ac5      	subs	r5, r0, r3
 80011bc:	42a8      	cmp	r0, r5
 80011be:	4180      	sbcs	r0, r0
 80011c0:	4653      	mov	r3, sl
 80011c2:	4240      	negs	r0, r0
 80011c4:	1ae4      	subs	r4, r4, r3
 80011c6:	2701      	movs	r7, #1
 80011c8:	1a24      	subs	r4, r4, r0
 80011ca:	e5c0      	b.n	8000d4e <__aeabi_dadd+0xa6>
 80011cc:	0762      	lsls	r2, r4, #29
 80011ce:	08c0      	lsrs	r0, r0, #3
 80011d0:	4302      	orrs	r2, r0
 80011d2:	08e4      	lsrs	r4, r4, #3
 80011d4:	e736      	b.n	8001044 <__aeabi_dadd+0x39c>
 80011d6:	0011      	movs	r1, r2
 80011d8:	4653      	mov	r3, sl
 80011da:	3920      	subs	r1, #32
 80011dc:	40cb      	lsrs	r3, r1
 80011de:	4699      	mov	r9, r3
 80011e0:	2a20      	cmp	r2, #32
 80011e2:	d006      	beq.n	80011f2 <__aeabi_dadd+0x54a>
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	4653      	mov	r3, sl
 80011e8:	1a8a      	subs	r2, r1, r2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	4662      	mov	r2, ip
 80011ee:	431a      	orrs	r2, r3
 80011f0:	4694      	mov	ip, r2
 80011f2:	4665      	mov	r5, ip
 80011f4:	1e6b      	subs	r3, r5, #1
 80011f6:	419d      	sbcs	r5, r3
 80011f8:	464b      	mov	r3, r9
 80011fa:	431d      	orrs	r5, r3
 80011fc:	e659      	b.n	8000eb2 <__aeabi_dadd+0x20a>
 80011fe:	0762      	lsls	r2, r4, #29
 8001200:	08c0      	lsrs	r0, r0, #3
 8001202:	4302      	orrs	r2, r0
 8001204:	08e4      	lsrs	r4, r4, #3
 8001206:	e70d      	b.n	8001024 <__aeabi_dadd+0x37c>
 8001208:	4653      	mov	r3, sl
 800120a:	075a      	lsls	r2, r3, #29
 800120c:	4663      	mov	r3, ip
 800120e:	08d8      	lsrs	r0, r3, #3
 8001210:	4653      	mov	r3, sl
 8001212:	000e      	movs	r6, r1
 8001214:	4302      	orrs	r2, r0
 8001216:	08dc      	lsrs	r4, r3, #3
 8001218:	e714      	b.n	8001044 <__aeabi_dadd+0x39c>
 800121a:	0015      	movs	r5, r2
 800121c:	0026      	movs	r6, r4
 800121e:	3d20      	subs	r5, #32
 8001220:	40ee      	lsrs	r6, r5
 8001222:	2a20      	cmp	r2, #32
 8001224:	d003      	beq.n	800122e <__aeabi_dadd+0x586>
 8001226:	2540      	movs	r5, #64	@ 0x40
 8001228:	1aaa      	subs	r2, r5, r2
 800122a:	4094      	lsls	r4, r2
 800122c:	4320      	orrs	r0, r4
 800122e:	1e42      	subs	r2, r0, #1
 8001230:	4190      	sbcs	r0, r2
 8001232:	0005      	movs	r5, r0
 8001234:	4335      	orrs	r5, r6
 8001236:	e606      	b.n	8000e46 <__aeabi_dadd+0x19e>
 8001238:	2a00      	cmp	r2, #0
 800123a:	d07c      	beq.n	8001336 <__aeabi_dadd+0x68e>
 800123c:	4662      	mov	r2, ip
 800123e:	4653      	mov	r3, sl
 8001240:	08c0      	lsrs	r0, r0, #3
 8001242:	431a      	orrs	r2, r3
 8001244:	d100      	bne.n	8001248 <__aeabi_dadd+0x5a0>
 8001246:	e6fa      	b.n	800103e <__aeabi_dadd+0x396>
 8001248:	0762      	lsls	r2, r4, #29
 800124a:	4310      	orrs	r0, r2
 800124c:	2280      	movs	r2, #128	@ 0x80
 800124e:	08e4      	lsrs	r4, r4, #3
 8001250:	0312      	lsls	r2, r2, #12
 8001252:	4214      	tst	r4, r2
 8001254:	d008      	beq.n	8001268 <__aeabi_dadd+0x5c0>
 8001256:	08d9      	lsrs	r1, r3, #3
 8001258:	4211      	tst	r1, r2
 800125a:	d105      	bne.n	8001268 <__aeabi_dadd+0x5c0>
 800125c:	4663      	mov	r3, ip
 800125e:	08d8      	lsrs	r0, r3, #3
 8001260:	4653      	mov	r3, sl
 8001262:	000c      	movs	r4, r1
 8001264:	075b      	lsls	r3, r3, #29
 8001266:	4318      	orrs	r0, r3
 8001268:	0f42      	lsrs	r2, r0, #29
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	08c0      	lsrs	r0, r0, #3
 800126e:	0752      	lsls	r2, r2, #29
 8001270:	4302      	orrs	r2, r0
 8001272:	e6e7      	b.n	8001044 <__aeabi_dadd+0x39c>
 8001274:	2a00      	cmp	r2, #0
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x5d2>
 8001278:	e72d      	b.n	80010d6 <__aeabi_dadd+0x42e>
 800127a:	4663      	mov	r3, ip
 800127c:	08d8      	lsrs	r0, r3, #3
 800127e:	4653      	mov	r3, sl
 8001280:	075a      	lsls	r2, r3, #29
 8001282:	000e      	movs	r6, r1
 8001284:	4302      	orrs	r2, r0
 8001286:	08dc      	lsrs	r4, r3, #3
 8001288:	e6cc      	b.n	8001024 <__aeabi_dadd+0x37c>
 800128a:	4663      	mov	r3, ip
 800128c:	1a1d      	subs	r5, r3, r0
 800128e:	45ac      	cmp	ip, r5
 8001290:	4192      	sbcs	r2, r2
 8001292:	4653      	mov	r3, sl
 8001294:	4252      	negs	r2, r2
 8001296:	1b1c      	subs	r4, r3, r4
 8001298:	000e      	movs	r6, r1
 800129a:	4688      	mov	r8, r1
 800129c:	1aa4      	subs	r4, r4, r2
 800129e:	3701      	adds	r7, #1
 80012a0:	e555      	b.n	8000d4e <__aeabi_dadd+0xa6>
 80012a2:	4663      	mov	r3, ip
 80012a4:	08d9      	lsrs	r1, r3, #3
 80012a6:	4653      	mov	r3, sl
 80012a8:	075a      	lsls	r2, r3, #29
 80012aa:	430a      	orrs	r2, r1
 80012ac:	08dc      	lsrs	r4, r3, #3
 80012ae:	e6c9      	b.n	8001044 <__aeabi_dadd+0x39c>
 80012b0:	4660      	mov	r0, ip
 80012b2:	4654      	mov	r4, sl
 80012b4:	e6d4      	b.n	8001060 <__aeabi_dadd+0x3b8>
 80012b6:	08c0      	lsrs	r0, r0, #3
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_dadd+0x616>
 80012bc:	e6bf      	b.n	800103e <__aeabi_dadd+0x396>
 80012be:	0762      	lsls	r2, r4, #29
 80012c0:	4310      	orrs	r0, r2
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	08e4      	lsrs	r4, r4, #3
 80012c6:	0312      	lsls	r2, r2, #12
 80012c8:	4214      	tst	r4, r2
 80012ca:	d0cd      	beq.n	8001268 <__aeabi_dadd+0x5c0>
 80012cc:	08dd      	lsrs	r5, r3, #3
 80012ce:	4215      	tst	r5, r2
 80012d0:	d1ca      	bne.n	8001268 <__aeabi_dadd+0x5c0>
 80012d2:	4663      	mov	r3, ip
 80012d4:	08d8      	lsrs	r0, r3, #3
 80012d6:	4653      	mov	r3, sl
 80012d8:	075b      	lsls	r3, r3, #29
 80012da:	000e      	movs	r6, r1
 80012dc:	002c      	movs	r4, r5
 80012de:	4318      	orrs	r0, r3
 80012e0:	e7c2      	b.n	8001268 <__aeabi_dadd+0x5c0>
 80012e2:	4663      	mov	r3, ip
 80012e4:	08d9      	lsrs	r1, r3, #3
 80012e6:	4653      	mov	r3, sl
 80012e8:	075a      	lsls	r2, r3, #29
 80012ea:	430a      	orrs	r2, r1
 80012ec:	08dc      	lsrs	r4, r3, #3
 80012ee:	e699      	b.n	8001024 <__aeabi_dadd+0x37c>
 80012f0:	4663      	mov	r3, ip
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	4653      	mov	r3, sl
 80012f6:	075a      	lsls	r2, r3, #29
 80012f8:	000e      	movs	r6, r1
 80012fa:	4302      	orrs	r2, r0
 80012fc:	08dc      	lsrs	r4, r3, #3
 80012fe:	e6a1      	b.n	8001044 <__aeabi_dadd+0x39c>
 8001300:	0011      	movs	r1, r2
 8001302:	0027      	movs	r7, r4
 8001304:	3920      	subs	r1, #32
 8001306:	40cf      	lsrs	r7, r1
 8001308:	2a20      	cmp	r2, #32
 800130a:	d003      	beq.n	8001314 <__aeabi_dadd+0x66c>
 800130c:	2140      	movs	r1, #64	@ 0x40
 800130e:	1a8a      	subs	r2, r1, r2
 8001310:	4094      	lsls	r4, r2
 8001312:	4320      	orrs	r0, r4
 8001314:	1e42      	subs	r2, r0, #1
 8001316:	4190      	sbcs	r0, r2
 8001318:	0005      	movs	r5, r0
 800131a:	433d      	orrs	r5, r7
 800131c:	e651      	b.n	8000fc2 <__aeabi_dadd+0x31a>
 800131e:	000c      	movs	r4, r1
 8001320:	2500      	movs	r5, #0
 8001322:	2200      	movs	r2, #0
 8001324:	e558      	b.n	8000dd8 <__aeabi_dadd+0x130>
 8001326:	4460      	add	r0, ip
 8001328:	4560      	cmp	r0, ip
 800132a:	4192      	sbcs	r2, r2
 800132c:	4454      	add	r4, sl
 800132e:	4252      	negs	r2, r2
 8001330:	0005      	movs	r5, r0
 8001332:	18a4      	adds	r4, r4, r2
 8001334:	e73a      	b.n	80011ac <__aeabi_dadd+0x504>
 8001336:	4653      	mov	r3, sl
 8001338:	075a      	lsls	r2, r3, #29
 800133a:	4663      	mov	r3, ip
 800133c:	08d9      	lsrs	r1, r3, #3
 800133e:	4653      	mov	r3, sl
 8001340:	430a      	orrs	r2, r1
 8001342:	08dc      	lsrs	r4, r3, #3
 8001344:	e67e      	b.n	8001044 <__aeabi_dadd+0x39c>
 8001346:	001a      	movs	r2, r3
 8001348:	001c      	movs	r4, r3
 800134a:	432a      	orrs	r2, r5
 800134c:	d000      	beq.n	8001350 <__aeabi_dadd+0x6a8>
 800134e:	e6ab      	b.n	80010a8 <__aeabi_dadd+0x400>
 8001350:	e6c1      	b.n	80010d6 <__aeabi_dadd+0x42e>
 8001352:	2120      	movs	r1, #32
 8001354:	2500      	movs	r5, #0
 8001356:	1a09      	subs	r1, r1, r0
 8001358:	e519      	b.n	8000d8e <__aeabi_dadd+0xe6>
 800135a:	2200      	movs	r2, #0
 800135c:	2500      	movs	r5, #0
 800135e:	4c01      	ldr	r4, [pc, #4]	@ (8001364 <__aeabi_dadd+0x6bc>)
 8001360:	e53a      	b.n	8000dd8 <__aeabi_dadd+0x130>
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	000007ff 	.word	0x000007ff
 8001368:	ff7fffff 	.word	0xff7fffff
 800136c:	000007fe 	.word	0x000007fe

08001370 <__aeabi_ddiv>:
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	46de      	mov	lr, fp
 8001374:	4645      	mov	r5, r8
 8001376:	4657      	mov	r7, sl
 8001378:	464e      	mov	r6, r9
 800137a:	b5e0      	push	{r5, r6, r7, lr}
 800137c:	b087      	sub	sp, #28
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	030b      	lsls	r3, r1, #12
 8001384:	0b1b      	lsrs	r3, r3, #12
 8001386:	469b      	mov	fp, r3
 8001388:	0fca      	lsrs	r2, r1, #31
 800138a:	004b      	lsls	r3, r1, #1
 800138c:	0004      	movs	r4, r0
 800138e:	4680      	mov	r8, r0
 8001390:	0d5b      	lsrs	r3, r3, #21
 8001392:	9202      	str	r2, [sp, #8]
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x28>
 8001396:	e16a      	b.n	800166e <__aeabi_ddiv+0x2fe>
 8001398:	4ad4      	ldr	r2, [pc, #848]	@ (80016ec <__aeabi_ddiv+0x37c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d100      	bne.n	80013a0 <__aeabi_ddiv+0x30>
 800139e:	e18c      	b.n	80016ba <__aeabi_ddiv+0x34a>
 80013a0:	4659      	mov	r1, fp
 80013a2:	0f42      	lsrs	r2, r0, #29
 80013a4:	00c9      	lsls	r1, r1, #3
 80013a6:	430a      	orrs	r2, r1
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0409      	lsls	r1, r1, #16
 80013ac:	4311      	orrs	r1, r2
 80013ae:	00c2      	lsls	r2, r0, #3
 80013b0:	4690      	mov	r8, r2
 80013b2:	4acf      	ldr	r2, [pc, #828]	@ (80016f0 <__aeabi_ddiv+0x380>)
 80013b4:	4689      	mov	r9, r1
 80013b6:	4692      	mov	sl, r2
 80013b8:	449a      	add	sl, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	2400      	movs	r4, #0
 80013be:	9303      	str	r3, [sp, #12]
 80013c0:	9e00      	ldr	r6, [sp, #0]
 80013c2:	9f01      	ldr	r7, [sp, #4]
 80013c4:	033b      	lsls	r3, r7, #12
 80013c6:	0b1b      	lsrs	r3, r3, #12
 80013c8:	469b      	mov	fp, r3
 80013ca:	007b      	lsls	r3, r7, #1
 80013cc:	0030      	movs	r0, r6
 80013ce:	0d5b      	lsrs	r3, r3, #21
 80013d0:	0ffd      	lsrs	r5, r7, #31
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x68>
 80013d6:	e128      	b.n	800162a <__aeabi_ddiv+0x2ba>
 80013d8:	4ac4      	ldr	r2, [pc, #784]	@ (80016ec <__aeabi_ddiv+0x37c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d100      	bne.n	80013e0 <__aeabi_ddiv+0x70>
 80013de:	e177      	b.n	80016d0 <__aeabi_ddiv+0x360>
 80013e0:	4659      	mov	r1, fp
 80013e2:	0f72      	lsrs	r2, r6, #29
 80013e4:	00c9      	lsls	r1, r1, #3
 80013e6:	430a      	orrs	r2, r1
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	0409      	lsls	r1, r1, #16
 80013ec:	4311      	orrs	r1, r2
 80013ee:	468b      	mov	fp, r1
 80013f0:	49bf      	ldr	r1, [pc, #764]	@ (80016f0 <__aeabi_ddiv+0x380>)
 80013f2:	00f2      	lsls	r2, r6, #3
 80013f4:	468c      	mov	ip, r1
 80013f6:	4651      	mov	r1, sl
 80013f8:	4463      	add	r3, ip
 80013fa:	1acb      	subs	r3, r1, r3
 80013fc:	469a      	mov	sl, r3
 80013fe:	2300      	movs	r3, #0
 8001400:	9e02      	ldr	r6, [sp, #8]
 8001402:	406e      	eors	r6, r5
 8001404:	2c0f      	cmp	r4, #15
 8001406:	d827      	bhi.n	8001458 <__aeabi_ddiv+0xe8>
 8001408:	49ba      	ldr	r1, [pc, #744]	@ (80016f4 <__aeabi_ddiv+0x384>)
 800140a:	00a4      	lsls	r4, r4, #2
 800140c:	5909      	ldr	r1, [r1, r4]
 800140e:	468f      	mov	pc, r1
 8001410:	46cb      	mov	fp, r9
 8001412:	4642      	mov	r2, r8
 8001414:	9e02      	ldr	r6, [sp, #8]
 8001416:	9b03      	ldr	r3, [sp, #12]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d016      	beq.n	800144a <__aeabi_ddiv+0xda>
 800141c:	2b03      	cmp	r3, #3
 800141e:	d100      	bne.n	8001422 <__aeabi_ddiv+0xb2>
 8001420:	e2a6      	b.n	8001970 <__aeabi_ddiv+0x600>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d000      	beq.n	8001428 <__aeabi_ddiv+0xb8>
 8001426:	e0df      	b.n	80015e8 <__aeabi_ddiv+0x278>
 8001428:	2200      	movs	r2, #0
 800142a:	2300      	movs	r3, #0
 800142c:	2400      	movs	r4, #0
 800142e:	4690      	mov	r8, r2
 8001430:	051b      	lsls	r3, r3, #20
 8001432:	4323      	orrs	r3, r4
 8001434:	07f6      	lsls	r6, r6, #31
 8001436:	4333      	orrs	r3, r6
 8001438:	4640      	mov	r0, r8
 800143a:	0019      	movs	r1, r3
 800143c:	b007      	add	sp, #28
 800143e:	bcf0      	pop	{r4, r5, r6, r7}
 8001440:	46bb      	mov	fp, r7
 8001442:	46b2      	mov	sl, r6
 8001444:	46a9      	mov	r9, r5
 8001446:	46a0      	mov	r8, r4
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144a:	2200      	movs	r2, #0
 800144c:	2400      	movs	r4, #0
 800144e:	4690      	mov	r8, r2
 8001450:	4ba6      	ldr	r3, [pc, #664]	@ (80016ec <__aeabi_ddiv+0x37c>)
 8001452:	e7ed      	b.n	8001430 <__aeabi_ddiv+0xc0>
 8001454:	002e      	movs	r6, r5
 8001456:	e7df      	b.n	8001418 <__aeabi_ddiv+0xa8>
 8001458:	45cb      	cmp	fp, r9
 800145a:	d200      	bcs.n	800145e <__aeabi_ddiv+0xee>
 800145c:	e1d4      	b.n	8001808 <__aeabi_ddiv+0x498>
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0xf2>
 8001460:	e1cf      	b.n	8001802 <__aeabi_ddiv+0x492>
 8001462:	2301      	movs	r3, #1
 8001464:	425b      	negs	r3, r3
 8001466:	469c      	mov	ip, r3
 8001468:	4644      	mov	r4, r8
 800146a:	4648      	mov	r0, r9
 800146c:	2700      	movs	r7, #0
 800146e:	44e2      	add	sl, ip
 8001470:	465b      	mov	r3, fp
 8001472:	0e15      	lsrs	r5, r2, #24
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	431d      	orrs	r5, r3
 8001478:	0c19      	lsrs	r1, r3, #16
 800147a:	042b      	lsls	r3, r5, #16
 800147c:	0212      	lsls	r2, r2, #8
 800147e:	9500      	str	r5, [sp, #0]
 8001480:	0c1d      	lsrs	r5, r3, #16
 8001482:	4691      	mov	r9, r2
 8001484:	9102      	str	r1, [sp, #8]
 8001486:	9503      	str	r5, [sp, #12]
 8001488:	f7fe feea 	bl	8000260 <__aeabi_uidivmod>
 800148c:	0002      	movs	r2, r0
 800148e:	436a      	muls	r2, r5
 8001490:	040b      	lsls	r3, r1, #16
 8001492:	0c21      	lsrs	r1, r4, #16
 8001494:	4680      	mov	r8, r0
 8001496:	4319      	orrs	r1, r3
 8001498:	428a      	cmp	r2, r1
 800149a:	d909      	bls.n	80014b0 <__aeabi_ddiv+0x140>
 800149c:	9d00      	ldr	r5, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	46ac      	mov	ip, r5
 80014a2:	425b      	negs	r3, r3
 80014a4:	4461      	add	r1, ip
 80014a6:	469c      	mov	ip, r3
 80014a8:	44e0      	add	r8, ip
 80014aa:	428d      	cmp	r5, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x140>
 80014ae:	e1fb      	b.n	80018a8 <__aeabi_ddiv+0x538>
 80014b0:	1a88      	subs	r0, r1, r2
 80014b2:	9902      	ldr	r1, [sp, #8]
 80014b4:	f7fe fed4 	bl	8000260 <__aeabi_uidivmod>
 80014b8:	9a03      	ldr	r2, [sp, #12]
 80014ba:	0424      	lsls	r4, r4, #16
 80014bc:	4342      	muls	r2, r0
 80014be:	0409      	lsls	r1, r1, #16
 80014c0:	0c24      	lsrs	r4, r4, #16
 80014c2:	0003      	movs	r3, r0
 80014c4:	430c      	orrs	r4, r1
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d906      	bls.n	80014d8 <__aeabi_ddiv+0x168>
 80014ca:	9900      	ldr	r1, [sp, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	468c      	mov	ip, r1
 80014d0:	4464      	add	r4, ip
 80014d2:	42a1      	cmp	r1, r4
 80014d4:	d800      	bhi.n	80014d8 <__aeabi_ddiv+0x168>
 80014d6:	e1e1      	b.n	800189c <__aeabi_ddiv+0x52c>
 80014d8:	1aa0      	subs	r0, r4, r2
 80014da:	4642      	mov	r2, r8
 80014dc:	0412      	lsls	r2, r2, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	4693      	mov	fp, r2
 80014e2:	464b      	mov	r3, r9
 80014e4:	4659      	mov	r1, fp
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	001d      	movs	r5, r3
 80014ea:	9304      	str	r3, [sp, #16]
 80014ec:	040b      	lsls	r3, r1, #16
 80014ee:	4649      	mov	r1, r9
 80014f0:	0409      	lsls	r1, r1, #16
 80014f2:	0c09      	lsrs	r1, r1, #16
 80014f4:	000c      	movs	r4, r1
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	435c      	muls	r4, r3
 80014fa:	0c12      	lsrs	r2, r2, #16
 80014fc:	436b      	muls	r3, r5
 80014fe:	4688      	mov	r8, r1
 8001500:	4351      	muls	r1, r2
 8001502:	436a      	muls	r2, r5
 8001504:	0c25      	lsrs	r5, r4, #16
 8001506:	46ac      	mov	ip, r5
 8001508:	185b      	adds	r3, r3, r1
 800150a:	4463      	add	r3, ip
 800150c:	4299      	cmp	r1, r3
 800150e:	d903      	bls.n	8001518 <__aeabi_ddiv+0x1a8>
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0249      	lsls	r1, r1, #9
 8001514:	468c      	mov	ip, r1
 8001516:	4462      	add	r2, ip
 8001518:	0c19      	lsrs	r1, r3, #16
 800151a:	0424      	lsls	r4, r4, #16
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	0c24      	lsrs	r4, r4, #16
 8001520:	188a      	adds	r2, r1, r2
 8001522:	191c      	adds	r4, r3, r4
 8001524:	4290      	cmp	r0, r2
 8001526:	d302      	bcc.n	800152e <__aeabi_ddiv+0x1be>
 8001528:	d116      	bne.n	8001558 <__aeabi_ddiv+0x1e8>
 800152a:	42a7      	cmp	r7, r4
 800152c:	d214      	bcs.n	8001558 <__aeabi_ddiv+0x1e8>
 800152e:	465b      	mov	r3, fp
 8001530:	9d00      	ldr	r5, [sp, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	444f      	add	r7, r9
 8001536:	9305      	str	r3, [sp, #20]
 8001538:	454f      	cmp	r7, r9
 800153a:	419b      	sbcs	r3, r3
 800153c:	46ac      	mov	ip, r5
 800153e:	425b      	negs	r3, r3
 8001540:	4463      	add	r3, ip
 8001542:	18c0      	adds	r0, r0, r3
 8001544:	4285      	cmp	r5, r0
 8001546:	d300      	bcc.n	800154a <__aeabi_ddiv+0x1da>
 8001548:	e1a1      	b.n	800188e <__aeabi_ddiv+0x51e>
 800154a:	4282      	cmp	r2, r0
 800154c:	d900      	bls.n	8001550 <__aeabi_ddiv+0x1e0>
 800154e:	e1f6      	b.n	800193e <__aeabi_ddiv+0x5ce>
 8001550:	d100      	bne.n	8001554 <__aeabi_ddiv+0x1e4>
 8001552:	e1f1      	b.n	8001938 <__aeabi_ddiv+0x5c8>
 8001554:	9b05      	ldr	r3, [sp, #20]
 8001556:	469b      	mov	fp, r3
 8001558:	1b3c      	subs	r4, r7, r4
 800155a:	42a7      	cmp	r7, r4
 800155c:	41bf      	sbcs	r7, r7
 800155e:	9d00      	ldr	r5, [sp, #0]
 8001560:	1a80      	subs	r0, r0, r2
 8001562:	427f      	negs	r7, r7
 8001564:	1bc0      	subs	r0, r0, r7
 8001566:	4285      	cmp	r5, r0
 8001568:	d100      	bne.n	800156c <__aeabi_ddiv+0x1fc>
 800156a:	e1d0      	b.n	800190e <__aeabi_ddiv+0x59e>
 800156c:	9902      	ldr	r1, [sp, #8]
 800156e:	f7fe fe77 	bl	8000260 <__aeabi_uidivmod>
 8001572:	9a03      	ldr	r2, [sp, #12]
 8001574:	040b      	lsls	r3, r1, #16
 8001576:	4342      	muls	r2, r0
 8001578:	0c21      	lsrs	r1, r4, #16
 800157a:	0007      	movs	r7, r0
 800157c:	4319      	orrs	r1, r3
 800157e:	428a      	cmp	r2, r1
 8001580:	d900      	bls.n	8001584 <__aeabi_ddiv+0x214>
 8001582:	e178      	b.n	8001876 <__aeabi_ddiv+0x506>
 8001584:	1a88      	subs	r0, r1, r2
 8001586:	9902      	ldr	r1, [sp, #8]
 8001588:	f7fe fe6a 	bl	8000260 <__aeabi_uidivmod>
 800158c:	9a03      	ldr	r2, [sp, #12]
 800158e:	0424      	lsls	r4, r4, #16
 8001590:	4342      	muls	r2, r0
 8001592:	0409      	lsls	r1, r1, #16
 8001594:	0c24      	lsrs	r4, r4, #16
 8001596:	0003      	movs	r3, r0
 8001598:	430c      	orrs	r4, r1
 800159a:	42a2      	cmp	r2, r4
 800159c:	d900      	bls.n	80015a0 <__aeabi_ddiv+0x230>
 800159e:	e15d      	b.n	800185c <__aeabi_ddiv+0x4ec>
 80015a0:	4641      	mov	r1, r8
 80015a2:	1aa4      	subs	r4, r4, r2
 80015a4:	043a      	lsls	r2, r7, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	9d04      	ldr	r5, [sp, #16]
 80015aa:	0413      	lsls	r3, r2, #16
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	4359      	muls	r1, r3
 80015b0:	4647      	mov	r7, r8
 80015b2:	436b      	muls	r3, r5
 80015b4:	469c      	mov	ip, r3
 80015b6:	0c10      	lsrs	r0, r2, #16
 80015b8:	4347      	muls	r7, r0
 80015ba:	0c0b      	lsrs	r3, r1, #16
 80015bc:	44bc      	add	ip, r7
 80015be:	4463      	add	r3, ip
 80015c0:	4368      	muls	r0, r5
 80015c2:	429f      	cmp	r7, r3
 80015c4:	d903      	bls.n	80015ce <__aeabi_ddiv+0x25e>
 80015c6:	2580      	movs	r5, #128	@ 0x80
 80015c8:	026d      	lsls	r5, r5, #9
 80015ca:	46ac      	mov	ip, r5
 80015cc:	4460      	add	r0, ip
 80015ce:	0c1f      	lsrs	r7, r3, #16
 80015d0:	0409      	lsls	r1, r1, #16
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	0c09      	lsrs	r1, r1, #16
 80015d6:	183f      	adds	r7, r7, r0
 80015d8:	185b      	adds	r3, r3, r1
 80015da:	42bc      	cmp	r4, r7
 80015dc:	d200      	bcs.n	80015e0 <__aeabi_ddiv+0x270>
 80015de:	e102      	b.n	80017e6 <__aeabi_ddiv+0x476>
 80015e0:	d100      	bne.n	80015e4 <__aeabi_ddiv+0x274>
 80015e2:	e0fd      	b.n	80017e0 <__aeabi_ddiv+0x470>
 80015e4:	2301      	movs	r3, #1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <__aeabi_ddiv+0x388>)
 80015ea:	4453      	add	r3, sl
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dc00      	bgt.n	80015f2 <__aeabi_ddiv+0x282>
 80015f0:	e0ae      	b.n	8001750 <__aeabi_ddiv+0x3e0>
 80015f2:	0751      	lsls	r1, r2, #29
 80015f4:	d000      	beq.n	80015f8 <__aeabi_ddiv+0x288>
 80015f6:	e198      	b.n	800192a <__aeabi_ddiv+0x5ba>
 80015f8:	4659      	mov	r1, fp
 80015fa:	01c9      	lsls	r1, r1, #7
 80015fc:	d506      	bpl.n	800160c <__aeabi_ddiv+0x29c>
 80015fe:	4659      	mov	r1, fp
 8001600:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <__aeabi_ddiv+0x38c>)
 8001602:	4019      	ands	r1, r3
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	468b      	mov	fp, r1
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4453      	add	r3, sl
 800160c:	493c      	ldr	r1, [pc, #240]	@ (8001700 <__aeabi_ddiv+0x390>)
 800160e:	428b      	cmp	r3, r1
 8001610:	dd00      	ble.n	8001614 <__aeabi_ddiv+0x2a4>
 8001612:	e71a      	b.n	800144a <__aeabi_ddiv+0xda>
 8001614:	4659      	mov	r1, fp
 8001616:	08d2      	lsrs	r2, r2, #3
 8001618:	0749      	lsls	r1, r1, #29
 800161a:	4311      	orrs	r1, r2
 800161c:	465a      	mov	r2, fp
 800161e:	055b      	lsls	r3, r3, #21
 8001620:	0254      	lsls	r4, r2, #9
 8001622:	4688      	mov	r8, r1
 8001624:	0b24      	lsrs	r4, r4, #12
 8001626:	0d5b      	lsrs	r3, r3, #21
 8001628:	e702      	b.n	8001430 <__aeabi_ddiv+0xc0>
 800162a:	465a      	mov	r2, fp
 800162c:	9b00      	ldr	r3, [sp, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x2c4>
 8001632:	e07e      	b.n	8001732 <__aeabi_ddiv+0x3c2>
 8001634:	465b      	mov	r3, fp
 8001636:	2b00      	cmp	r3, #0
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x2cc>
 800163a:	e100      	b.n	800183e <__aeabi_ddiv+0x4ce>
 800163c:	4658      	mov	r0, fp
 800163e:	f001 fabb 	bl	8002bb8 <__clzsi2>
 8001642:	0002      	movs	r2, r0
 8001644:	0003      	movs	r3, r0
 8001646:	3a0b      	subs	r2, #11
 8001648:	271d      	movs	r7, #29
 800164a:	9e00      	ldr	r6, [sp, #0]
 800164c:	1aba      	subs	r2, r7, r2
 800164e:	0019      	movs	r1, r3
 8001650:	4658      	mov	r0, fp
 8001652:	40d6      	lsrs	r6, r2
 8001654:	3908      	subs	r1, #8
 8001656:	4088      	lsls	r0, r1
 8001658:	0032      	movs	r2, r6
 800165a:	4302      	orrs	r2, r0
 800165c:	4693      	mov	fp, r2
 800165e:	9a00      	ldr	r2, [sp, #0]
 8001660:	408a      	lsls	r2, r1
 8001662:	4928      	ldr	r1, [pc, #160]	@ (8001704 <__aeabi_ddiv+0x394>)
 8001664:	4453      	add	r3, sl
 8001666:	468a      	mov	sl, r1
 8001668:	449a      	add	sl, r3
 800166a:	2300      	movs	r3, #0
 800166c:	e6c8      	b.n	8001400 <__aeabi_ddiv+0x90>
 800166e:	465b      	mov	r3, fp
 8001670:	4303      	orrs	r3, r0
 8001672:	4699      	mov	r9, r3
 8001674:	d056      	beq.n	8001724 <__aeabi_ddiv+0x3b4>
 8001676:	465b      	mov	r3, fp
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x30e>
 800167c:	e0cd      	b.n	800181a <__aeabi_ddiv+0x4aa>
 800167e:	4658      	mov	r0, fp
 8001680:	f001 fa9a 	bl	8002bb8 <__clzsi2>
 8001684:	230b      	movs	r3, #11
 8001686:	425b      	negs	r3, r3
 8001688:	469c      	mov	ip, r3
 800168a:	0002      	movs	r2, r0
 800168c:	4484      	add	ip, r0
 800168e:	4666      	mov	r6, ip
 8001690:	231d      	movs	r3, #29
 8001692:	1b9b      	subs	r3, r3, r6
 8001694:	0026      	movs	r6, r4
 8001696:	0011      	movs	r1, r2
 8001698:	4658      	mov	r0, fp
 800169a:	40de      	lsrs	r6, r3
 800169c:	3908      	subs	r1, #8
 800169e:	4088      	lsls	r0, r1
 80016a0:	0033      	movs	r3, r6
 80016a2:	4303      	orrs	r3, r0
 80016a4:	4699      	mov	r9, r3
 80016a6:	0023      	movs	r3, r4
 80016a8:	408b      	lsls	r3, r1
 80016aa:	4698      	mov	r8, r3
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <__aeabi_ddiv+0x398>)
 80016ae:	2400      	movs	r4, #0
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	469a      	mov	sl, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	e682      	b.n	80013c0 <__aeabi_ddiv+0x50>
 80016ba:	465a      	mov	r2, fp
 80016bc:	4302      	orrs	r2, r0
 80016be:	4691      	mov	r9, r2
 80016c0:	d12a      	bne.n	8001718 <__aeabi_ddiv+0x3a8>
 80016c2:	2200      	movs	r2, #0
 80016c4:	469a      	mov	sl, r3
 80016c6:	2302      	movs	r3, #2
 80016c8:	4690      	mov	r8, r2
 80016ca:	2408      	movs	r4, #8
 80016cc:	9303      	str	r3, [sp, #12]
 80016ce:	e677      	b.n	80013c0 <__aeabi_ddiv+0x50>
 80016d0:	465a      	mov	r2, fp
 80016d2:	9b00      	ldr	r3, [sp, #0]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <__aeabi_ddiv+0x39c>)
 80016d8:	469c      	mov	ip, r3
 80016da:	44e2      	add	sl, ip
 80016dc:	2a00      	cmp	r2, #0
 80016de:	d117      	bne.n	8001710 <__aeabi_ddiv+0x3a0>
 80016e0:	2302      	movs	r3, #2
 80016e2:	431c      	orrs	r4, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	469b      	mov	fp, r3
 80016e8:	3302      	adds	r3, #2
 80016ea:	e689      	b.n	8001400 <__aeabi_ddiv+0x90>
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	fffffc01 	.word	0xfffffc01
 80016f4:	0800b648 	.word	0x0800b648
 80016f8:	000003ff 	.word	0x000003ff
 80016fc:	feffffff 	.word	0xfeffffff
 8001700:	000007fe 	.word	0x000007fe
 8001704:	000003f3 	.word	0x000003f3
 8001708:	fffffc0d 	.word	0xfffffc0d
 800170c:	fffff801 	.word	0xfffff801
 8001710:	2303      	movs	r3, #3
 8001712:	0032      	movs	r2, r6
 8001714:	431c      	orrs	r4, r3
 8001716:	e673      	b.n	8001400 <__aeabi_ddiv+0x90>
 8001718:	469a      	mov	sl, r3
 800171a:	2303      	movs	r3, #3
 800171c:	46d9      	mov	r9, fp
 800171e:	240c      	movs	r4, #12
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	e64d      	b.n	80013c0 <__aeabi_ddiv+0x50>
 8001724:	2300      	movs	r3, #0
 8001726:	4698      	mov	r8, r3
 8001728:	469a      	mov	sl, r3
 800172a:	3301      	adds	r3, #1
 800172c:	2404      	movs	r4, #4
 800172e:	9303      	str	r3, [sp, #12]
 8001730:	e646      	b.n	80013c0 <__aeabi_ddiv+0x50>
 8001732:	2301      	movs	r3, #1
 8001734:	431c      	orrs	r4, r3
 8001736:	2300      	movs	r3, #0
 8001738:	469b      	mov	fp, r3
 800173a:	3301      	adds	r3, #1
 800173c:	e660      	b.n	8001400 <__aeabi_ddiv+0x90>
 800173e:	2300      	movs	r3, #0
 8001740:	2480      	movs	r4, #128	@ 0x80
 8001742:	4698      	mov	r8, r3
 8001744:	2600      	movs	r6, #0
 8001746:	4b92      	ldr	r3, [pc, #584]	@ (8001990 <__aeabi_ddiv+0x620>)
 8001748:	0324      	lsls	r4, r4, #12
 800174a:	e671      	b.n	8001430 <__aeabi_ddiv+0xc0>
 800174c:	2201      	movs	r2, #1
 800174e:	4252      	negs	r2, r2
 8001750:	2101      	movs	r1, #1
 8001752:	1ac9      	subs	r1, r1, r3
 8001754:	2938      	cmp	r1, #56	@ 0x38
 8001756:	dd00      	ble.n	800175a <__aeabi_ddiv+0x3ea>
 8001758:	e666      	b.n	8001428 <__aeabi_ddiv+0xb8>
 800175a:	291f      	cmp	r1, #31
 800175c:	dc00      	bgt.n	8001760 <__aeabi_ddiv+0x3f0>
 800175e:	e0ab      	b.n	80018b8 <__aeabi_ddiv+0x548>
 8001760:	201f      	movs	r0, #31
 8001762:	4240      	negs	r0, r0
 8001764:	1ac3      	subs	r3, r0, r3
 8001766:	4658      	mov	r0, fp
 8001768:	40d8      	lsrs	r0, r3
 800176a:	0003      	movs	r3, r0
 800176c:	2920      	cmp	r1, #32
 800176e:	d004      	beq.n	800177a <__aeabi_ddiv+0x40a>
 8001770:	4658      	mov	r0, fp
 8001772:	4988      	ldr	r1, [pc, #544]	@ (8001994 <__aeabi_ddiv+0x624>)
 8001774:	4451      	add	r1, sl
 8001776:	4088      	lsls	r0, r1
 8001778:	4302      	orrs	r2, r0
 800177a:	1e51      	subs	r1, r2, #1
 800177c:	418a      	sbcs	r2, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	2307      	movs	r3, #7
 8001782:	0019      	movs	r1, r3
 8001784:	2400      	movs	r4, #0
 8001786:	4011      	ands	r1, r2
 8001788:	4213      	tst	r3, r2
 800178a:	d00c      	beq.n	80017a6 <__aeabi_ddiv+0x436>
 800178c:	230f      	movs	r3, #15
 800178e:	4013      	ands	r3, r2
 8001790:	2b04      	cmp	r3, #4
 8001792:	d100      	bne.n	8001796 <__aeabi_ddiv+0x426>
 8001794:	e0f9      	b.n	800198a <__aeabi_ddiv+0x61a>
 8001796:	1d11      	adds	r1, r2, #4
 8001798:	4291      	cmp	r1, r2
 800179a:	419b      	sbcs	r3, r3
 800179c:	000a      	movs	r2, r1
 800179e:	425b      	negs	r3, r3
 80017a0:	0759      	lsls	r1, r3, #29
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	0b1c      	lsrs	r4, r3, #12
 80017a6:	08d2      	lsrs	r2, r2, #3
 80017a8:	430a      	orrs	r2, r1
 80017aa:	4690      	mov	r8, r2
 80017ac:	2300      	movs	r3, #0
 80017ae:	e63f      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80017b0:	2480      	movs	r4, #128	@ 0x80
 80017b2:	464b      	mov	r3, r9
 80017b4:	0324      	lsls	r4, r4, #12
 80017b6:	4223      	tst	r3, r4
 80017b8:	d009      	beq.n	80017ce <__aeabi_ddiv+0x45e>
 80017ba:	465b      	mov	r3, fp
 80017bc:	4223      	tst	r3, r4
 80017be:	d106      	bne.n	80017ce <__aeabi_ddiv+0x45e>
 80017c0:	431c      	orrs	r4, r3
 80017c2:	0324      	lsls	r4, r4, #12
 80017c4:	002e      	movs	r6, r5
 80017c6:	4690      	mov	r8, r2
 80017c8:	4b71      	ldr	r3, [pc, #452]	@ (8001990 <__aeabi_ddiv+0x620>)
 80017ca:	0b24      	lsrs	r4, r4, #12
 80017cc:	e630      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80017ce:	2480      	movs	r4, #128	@ 0x80
 80017d0:	464b      	mov	r3, r9
 80017d2:	0324      	lsls	r4, r4, #12
 80017d4:	431c      	orrs	r4, r3
 80017d6:	0324      	lsls	r4, r4, #12
 80017d8:	9e02      	ldr	r6, [sp, #8]
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <__aeabi_ddiv+0x620>)
 80017dc:	0b24      	lsrs	r4, r4, #12
 80017de:	e627      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_ddiv+0x476>
 80017e4:	e700      	b.n	80015e8 <__aeabi_ddiv+0x278>
 80017e6:	9800      	ldr	r0, [sp, #0]
 80017e8:	1e51      	subs	r1, r2, #1
 80017ea:	4684      	mov	ip, r0
 80017ec:	4464      	add	r4, ip
 80017ee:	4284      	cmp	r4, r0
 80017f0:	d200      	bcs.n	80017f4 <__aeabi_ddiv+0x484>
 80017f2:	e084      	b.n	80018fe <__aeabi_ddiv+0x58e>
 80017f4:	42bc      	cmp	r4, r7
 80017f6:	d200      	bcs.n	80017fa <__aeabi_ddiv+0x48a>
 80017f8:	e0ae      	b.n	8001958 <__aeabi_ddiv+0x5e8>
 80017fa:	d100      	bne.n	80017fe <__aeabi_ddiv+0x48e>
 80017fc:	e0c1      	b.n	8001982 <__aeabi_ddiv+0x612>
 80017fe:	000a      	movs	r2, r1
 8001800:	e6f0      	b.n	80015e4 <__aeabi_ddiv+0x274>
 8001802:	4542      	cmp	r2, r8
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x498>
 8001806:	e62c      	b.n	8001462 <__aeabi_ddiv+0xf2>
 8001808:	464b      	mov	r3, r9
 800180a:	07dc      	lsls	r4, r3, #31
 800180c:	0858      	lsrs	r0, r3, #1
 800180e:	4643      	mov	r3, r8
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	431c      	orrs	r4, r3
 8001814:	4643      	mov	r3, r8
 8001816:	07df      	lsls	r7, r3, #31
 8001818:	e62a      	b.n	8001470 <__aeabi_ddiv+0x100>
 800181a:	f001 f9cd 	bl	8002bb8 <__clzsi2>
 800181e:	2315      	movs	r3, #21
 8001820:	469c      	mov	ip, r3
 8001822:	4484      	add	ip, r0
 8001824:	0002      	movs	r2, r0
 8001826:	4663      	mov	r3, ip
 8001828:	3220      	adds	r2, #32
 800182a:	2b1c      	cmp	r3, #28
 800182c:	dc00      	bgt.n	8001830 <__aeabi_ddiv+0x4c0>
 800182e:	e72e      	b.n	800168e <__aeabi_ddiv+0x31e>
 8001830:	0023      	movs	r3, r4
 8001832:	3808      	subs	r0, #8
 8001834:	4083      	lsls	r3, r0
 8001836:	4699      	mov	r9, r3
 8001838:	2300      	movs	r3, #0
 800183a:	4698      	mov	r8, r3
 800183c:	e736      	b.n	80016ac <__aeabi_ddiv+0x33c>
 800183e:	f001 f9bb 	bl	8002bb8 <__clzsi2>
 8001842:	0002      	movs	r2, r0
 8001844:	0003      	movs	r3, r0
 8001846:	3215      	adds	r2, #21
 8001848:	3320      	adds	r3, #32
 800184a:	2a1c      	cmp	r2, #28
 800184c:	dc00      	bgt.n	8001850 <__aeabi_ddiv+0x4e0>
 800184e:	e6fb      	b.n	8001648 <__aeabi_ddiv+0x2d8>
 8001850:	9900      	ldr	r1, [sp, #0]
 8001852:	3808      	subs	r0, #8
 8001854:	4081      	lsls	r1, r0
 8001856:	2200      	movs	r2, #0
 8001858:	468b      	mov	fp, r1
 800185a:	e702      	b.n	8001662 <__aeabi_ddiv+0x2f2>
 800185c:	9900      	ldr	r1, [sp, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	468c      	mov	ip, r1
 8001862:	4464      	add	r4, ip
 8001864:	42a1      	cmp	r1, r4
 8001866:	d900      	bls.n	800186a <__aeabi_ddiv+0x4fa>
 8001868:	e69a      	b.n	80015a0 <__aeabi_ddiv+0x230>
 800186a:	42a2      	cmp	r2, r4
 800186c:	d800      	bhi.n	8001870 <__aeabi_ddiv+0x500>
 800186e:	e697      	b.n	80015a0 <__aeabi_ddiv+0x230>
 8001870:	1e83      	subs	r3, r0, #2
 8001872:	4464      	add	r4, ip
 8001874:	e694      	b.n	80015a0 <__aeabi_ddiv+0x230>
 8001876:	46ac      	mov	ip, r5
 8001878:	4461      	add	r1, ip
 800187a:	3f01      	subs	r7, #1
 800187c:	428d      	cmp	r5, r1
 800187e:	d900      	bls.n	8001882 <__aeabi_ddiv+0x512>
 8001880:	e680      	b.n	8001584 <__aeabi_ddiv+0x214>
 8001882:	428a      	cmp	r2, r1
 8001884:	d800      	bhi.n	8001888 <__aeabi_ddiv+0x518>
 8001886:	e67d      	b.n	8001584 <__aeabi_ddiv+0x214>
 8001888:	1e87      	subs	r7, r0, #2
 800188a:	4461      	add	r1, ip
 800188c:	e67a      	b.n	8001584 <__aeabi_ddiv+0x214>
 800188e:	4285      	cmp	r5, r0
 8001890:	d000      	beq.n	8001894 <__aeabi_ddiv+0x524>
 8001892:	e65f      	b.n	8001554 <__aeabi_ddiv+0x1e4>
 8001894:	45b9      	cmp	r9, r7
 8001896:	d900      	bls.n	800189a <__aeabi_ddiv+0x52a>
 8001898:	e65c      	b.n	8001554 <__aeabi_ddiv+0x1e4>
 800189a:	e656      	b.n	800154a <__aeabi_ddiv+0x1da>
 800189c:	42a2      	cmp	r2, r4
 800189e:	d800      	bhi.n	80018a2 <__aeabi_ddiv+0x532>
 80018a0:	e61a      	b.n	80014d8 <__aeabi_ddiv+0x168>
 80018a2:	1e83      	subs	r3, r0, #2
 80018a4:	4464      	add	r4, ip
 80018a6:	e617      	b.n	80014d8 <__aeabi_ddiv+0x168>
 80018a8:	428a      	cmp	r2, r1
 80018aa:	d800      	bhi.n	80018ae <__aeabi_ddiv+0x53e>
 80018ac:	e600      	b.n	80014b0 <__aeabi_ddiv+0x140>
 80018ae:	46ac      	mov	ip, r5
 80018b0:	1e83      	subs	r3, r0, #2
 80018b2:	4698      	mov	r8, r3
 80018b4:	4461      	add	r1, ip
 80018b6:	e5fb      	b.n	80014b0 <__aeabi_ddiv+0x140>
 80018b8:	4837      	ldr	r0, [pc, #220]	@ (8001998 <__aeabi_ddiv+0x628>)
 80018ba:	0014      	movs	r4, r2
 80018bc:	4450      	add	r0, sl
 80018be:	4082      	lsls	r2, r0
 80018c0:	465b      	mov	r3, fp
 80018c2:	0017      	movs	r7, r2
 80018c4:	4083      	lsls	r3, r0
 80018c6:	40cc      	lsrs	r4, r1
 80018c8:	1e7a      	subs	r2, r7, #1
 80018ca:	4197      	sbcs	r7, r2
 80018cc:	4323      	orrs	r3, r4
 80018ce:	433b      	orrs	r3, r7
 80018d0:	001a      	movs	r2, r3
 80018d2:	465b      	mov	r3, fp
 80018d4:	40cb      	lsrs	r3, r1
 80018d6:	0751      	lsls	r1, r2, #29
 80018d8:	d009      	beq.n	80018ee <__aeabi_ddiv+0x57e>
 80018da:	210f      	movs	r1, #15
 80018dc:	4011      	ands	r1, r2
 80018de:	2904      	cmp	r1, #4
 80018e0:	d005      	beq.n	80018ee <__aeabi_ddiv+0x57e>
 80018e2:	1d11      	adds	r1, r2, #4
 80018e4:	4291      	cmp	r1, r2
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	4252      	negs	r2, r2
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	0219      	lsls	r1, r3, #8
 80018f0:	d400      	bmi.n	80018f4 <__aeabi_ddiv+0x584>
 80018f2:	e755      	b.n	80017a0 <__aeabi_ddiv+0x430>
 80018f4:	2200      	movs	r2, #0
 80018f6:	2301      	movs	r3, #1
 80018f8:	2400      	movs	r4, #0
 80018fa:	4690      	mov	r8, r2
 80018fc:	e598      	b.n	8001430 <__aeabi_ddiv+0xc0>
 80018fe:	000a      	movs	r2, r1
 8001900:	42bc      	cmp	r4, r7
 8001902:	d000      	beq.n	8001906 <__aeabi_ddiv+0x596>
 8001904:	e66e      	b.n	80015e4 <__aeabi_ddiv+0x274>
 8001906:	454b      	cmp	r3, r9
 8001908:	d000      	beq.n	800190c <__aeabi_ddiv+0x59c>
 800190a:	e66b      	b.n	80015e4 <__aeabi_ddiv+0x274>
 800190c:	e66c      	b.n	80015e8 <__aeabi_ddiv+0x278>
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <__aeabi_ddiv+0x62c>)
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <__aeabi_ddiv+0x630>)
 8001912:	4453      	add	r3, sl
 8001914:	4592      	cmp	sl, r2
 8001916:	da00      	bge.n	800191a <__aeabi_ddiv+0x5aa>
 8001918:	e718      	b.n	800174c <__aeabi_ddiv+0x3dc>
 800191a:	2101      	movs	r1, #1
 800191c:	4249      	negs	r1, r1
 800191e:	1d0a      	adds	r2, r1, #4
 8001920:	428a      	cmp	r2, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	4249      	negs	r1, r1
 8001926:	448b      	add	fp, r1
 8001928:	e666      	b.n	80015f8 <__aeabi_ddiv+0x288>
 800192a:	210f      	movs	r1, #15
 800192c:	4011      	ands	r1, r2
 800192e:	2904      	cmp	r1, #4
 8001930:	d100      	bne.n	8001934 <__aeabi_ddiv+0x5c4>
 8001932:	e661      	b.n	80015f8 <__aeabi_ddiv+0x288>
 8001934:	0011      	movs	r1, r2
 8001936:	e7f2      	b.n	800191e <__aeabi_ddiv+0x5ae>
 8001938:	42bc      	cmp	r4, r7
 800193a:	d800      	bhi.n	800193e <__aeabi_ddiv+0x5ce>
 800193c:	e60a      	b.n	8001554 <__aeabi_ddiv+0x1e4>
 800193e:	2302      	movs	r3, #2
 8001940:	425b      	negs	r3, r3
 8001942:	469c      	mov	ip, r3
 8001944:	9900      	ldr	r1, [sp, #0]
 8001946:	444f      	add	r7, r9
 8001948:	454f      	cmp	r7, r9
 800194a:	419b      	sbcs	r3, r3
 800194c:	44e3      	add	fp, ip
 800194e:	468c      	mov	ip, r1
 8001950:	425b      	negs	r3, r3
 8001952:	4463      	add	r3, ip
 8001954:	18c0      	adds	r0, r0, r3
 8001956:	e5ff      	b.n	8001558 <__aeabi_ddiv+0x1e8>
 8001958:	4649      	mov	r1, r9
 800195a:	9d00      	ldr	r5, [sp, #0]
 800195c:	0048      	lsls	r0, r1, #1
 800195e:	4548      	cmp	r0, r9
 8001960:	4189      	sbcs	r1, r1
 8001962:	46ac      	mov	ip, r5
 8001964:	4249      	negs	r1, r1
 8001966:	4461      	add	r1, ip
 8001968:	4681      	mov	r9, r0
 800196a:	3a02      	subs	r2, #2
 800196c:	1864      	adds	r4, r4, r1
 800196e:	e7c7      	b.n	8001900 <__aeabi_ddiv+0x590>
 8001970:	2480      	movs	r4, #128	@ 0x80
 8001972:	465b      	mov	r3, fp
 8001974:	0324      	lsls	r4, r4, #12
 8001976:	431c      	orrs	r4, r3
 8001978:	0324      	lsls	r4, r4, #12
 800197a:	4690      	mov	r8, r2
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__aeabi_ddiv+0x620>)
 800197e:	0b24      	lsrs	r4, r4, #12
 8001980:	e556      	b.n	8001430 <__aeabi_ddiv+0xc0>
 8001982:	4599      	cmp	r9, r3
 8001984:	d3e8      	bcc.n	8001958 <__aeabi_ddiv+0x5e8>
 8001986:	000a      	movs	r2, r1
 8001988:	e7bd      	b.n	8001906 <__aeabi_ddiv+0x596>
 800198a:	2300      	movs	r3, #0
 800198c:	e708      	b.n	80017a0 <__aeabi_ddiv+0x430>
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	000007ff 	.word	0x000007ff
 8001994:	0000043e 	.word	0x0000043e
 8001998:	0000041e 	.word	0x0000041e
 800199c:	000003ff 	.word	0x000003ff
 80019a0:	fffffc02 	.word	0xfffffc02

080019a4 <__eqdf2>:
 80019a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a6:	4657      	mov	r7, sl
 80019a8:	46de      	mov	lr, fp
 80019aa:	464e      	mov	r6, r9
 80019ac:	4645      	mov	r5, r8
 80019ae:	b5e0      	push	{r5, r6, r7, lr}
 80019b0:	000d      	movs	r5, r1
 80019b2:	0004      	movs	r4, r0
 80019b4:	0fe8      	lsrs	r0, r5, #31
 80019b6:	4683      	mov	fp, r0
 80019b8:	0309      	lsls	r1, r1, #12
 80019ba:	0fd8      	lsrs	r0, r3, #31
 80019bc:	0b09      	lsrs	r1, r1, #12
 80019be:	4682      	mov	sl, r0
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <__eqdf2+0x84>)
 80019c2:	468c      	mov	ip, r1
 80019c4:	031f      	lsls	r7, r3, #12
 80019c6:	0069      	lsls	r1, r5, #1
 80019c8:	005e      	lsls	r6, r3, #1
 80019ca:	0d49      	lsrs	r1, r1, #21
 80019cc:	0b3f      	lsrs	r7, r7, #12
 80019ce:	0d76      	lsrs	r6, r6, #21
 80019d0:	4281      	cmp	r1, r0
 80019d2:	d018      	beq.n	8001a06 <__eqdf2+0x62>
 80019d4:	4286      	cmp	r6, r0
 80019d6:	d00f      	beq.n	80019f8 <__eqdf2+0x54>
 80019d8:	2001      	movs	r0, #1
 80019da:	42b1      	cmp	r1, r6
 80019dc:	d10d      	bne.n	80019fa <__eqdf2+0x56>
 80019de:	45bc      	cmp	ip, r7
 80019e0:	d10b      	bne.n	80019fa <__eqdf2+0x56>
 80019e2:	4294      	cmp	r4, r2
 80019e4:	d109      	bne.n	80019fa <__eqdf2+0x56>
 80019e6:	45d3      	cmp	fp, sl
 80019e8:	d01c      	beq.n	8001a24 <__eqdf2+0x80>
 80019ea:	2900      	cmp	r1, #0
 80019ec:	d105      	bne.n	80019fa <__eqdf2+0x56>
 80019ee:	4660      	mov	r0, ip
 80019f0:	4320      	orrs	r0, r4
 80019f2:	1e43      	subs	r3, r0, #1
 80019f4:	4198      	sbcs	r0, r3
 80019f6:	e000      	b.n	80019fa <__eqdf2+0x56>
 80019f8:	2001      	movs	r0, #1
 80019fa:	bcf0      	pop	{r4, r5, r6, r7}
 80019fc:	46bb      	mov	fp, r7
 80019fe:	46b2      	mov	sl, r6
 8001a00:	46a9      	mov	r9, r5
 8001a02:	46a0      	mov	r8, r4
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	2001      	movs	r0, #1
 8001a08:	428e      	cmp	r6, r1
 8001a0a:	d1f6      	bne.n	80019fa <__eqdf2+0x56>
 8001a0c:	4661      	mov	r1, ip
 8001a0e:	4339      	orrs	r1, r7
 8001a10:	000f      	movs	r7, r1
 8001a12:	4317      	orrs	r7, r2
 8001a14:	4327      	orrs	r7, r4
 8001a16:	d1f0      	bne.n	80019fa <__eqdf2+0x56>
 8001a18:	465b      	mov	r3, fp
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	1a98      	subs	r0, r3, r2
 8001a1e:	1e43      	subs	r3, r0, #1
 8001a20:	4198      	sbcs	r0, r3
 8001a22:	e7ea      	b.n	80019fa <__eqdf2+0x56>
 8001a24:	2000      	movs	r0, #0
 8001a26:	e7e8      	b.n	80019fa <__eqdf2+0x56>
 8001a28:	000007ff 	.word	0x000007ff

08001a2c <__gedf2>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	4645      	mov	r5, r8
 8001a34:	46de      	mov	lr, fp
 8001a36:	b5e0      	push	{r5, r6, r7, lr}
 8001a38:	000d      	movs	r5, r1
 8001a3a:	030f      	lsls	r7, r1, #12
 8001a3c:	0b39      	lsrs	r1, r7, #12
 8001a3e:	b083      	sub	sp, #12
 8001a40:	0004      	movs	r4, r0
 8001a42:	4680      	mov	r8, r0
 8001a44:	9101      	str	r1, [sp, #4]
 8001a46:	0058      	lsls	r0, r3, #1
 8001a48:	0fe9      	lsrs	r1, r5, #31
 8001a4a:	4f31      	ldr	r7, [pc, #196]	@ (8001b10 <__gedf2+0xe4>)
 8001a4c:	0d40      	lsrs	r0, r0, #21
 8001a4e:	468c      	mov	ip, r1
 8001a50:	006e      	lsls	r6, r5, #1
 8001a52:	0319      	lsls	r1, r3, #12
 8001a54:	4682      	mov	sl, r0
 8001a56:	4691      	mov	r9, r2
 8001a58:	0d76      	lsrs	r6, r6, #21
 8001a5a:	0b09      	lsrs	r1, r1, #12
 8001a5c:	0fd8      	lsrs	r0, r3, #31
 8001a5e:	42be      	cmp	r6, r7
 8001a60:	d01f      	beq.n	8001aa2 <__gedf2+0x76>
 8001a62:	45ba      	cmp	sl, r7
 8001a64:	d00f      	beq.n	8001a86 <__gedf2+0x5a>
 8001a66:	2e00      	cmp	r6, #0
 8001a68:	d12f      	bne.n	8001aca <__gedf2+0x9e>
 8001a6a:	4655      	mov	r5, sl
 8001a6c:	9e01      	ldr	r6, [sp, #4]
 8001a6e:	4334      	orrs	r4, r6
 8001a70:	2d00      	cmp	r5, #0
 8001a72:	d127      	bne.n	8001ac4 <__gedf2+0x98>
 8001a74:	430a      	orrs	r2, r1
 8001a76:	d03a      	beq.n	8001aee <__gedf2+0xc2>
 8001a78:	2c00      	cmp	r4, #0
 8001a7a:	d145      	bne.n	8001b08 <__gedf2+0xdc>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d11a      	bne.n	8001ab6 <__gedf2+0x8a>
 8001a80:	2001      	movs	r0, #1
 8001a82:	4240      	negs	r0, r0
 8001a84:	e017      	b.n	8001ab6 <__gedf2+0x8a>
 8001a86:	4311      	orrs	r1, r2
 8001a88:	d13b      	bne.n	8001b02 <__gedf2+0xd6>
 8001a8a:	2e00      	cmp	r6, #0
 8001a8c:	d102      	bne.n	8001a94 <__gedf2+0x68>
 8001a8e:	9f01      	ldr	r7, [sp, #4]
 8001a90:	4327      	orrs	r7, r4
 8001a92:	d0f3      	beq.n	8001a7c <__gedf2+0x50>
 8001a94:	4584      	cmp	ip, r0
 8001a96:	d109      	bne.n	8001aac <__gedf2+0x80>
 8001a98:	4663      	mov	r3, ip
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <__gedf2+0x54>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	e009      	b.n	8001ab6 <__gedf2+0x8a>
 8001aa2:	9f01      	ldr	r7, [sp, #4]
 8001aa4:	4327      	orrs	r7, r4
 8001aa6:	d12c      	bne.n	8001b02 <__gedf2+0xd6>
 8001aa8:	45b2      	cmp	sl, r6
 8001aaa:	d024      	beq.n	8001af6 <__gedf2+0xca>
 8001aac:	4663      	mov	r3, ip
 8001aae:	2002      	movs	r0, #2
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	4018      	ands	r0, r3
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	b003      	add	sp, #12
 8001ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aba:	46bb      	mov	fp, r7
 8001abc:	46b2      	mov	sl, r6
 8001abe:	46a9      	mov	r9, r5
 8001ac0:	46a0      	mov	r8, r4
 8001ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac4:	2c00      	cmp	r4, #0
 8001ac6:	d0d9      	beq.n	8001a7c <__gedf2+0x50>
 8001ac8:	e7e4      	b.n	8001a94 <__gedf2+0x68>
 8001aca:	4654      	mov	r4, sl
 8001acc:	2c00      	cmp	r4, #0
 8001ace:	d0ed      	beq.n	8001aac <__gedf2+0x80>
 8001ad0:	4584      	cmp	ip, r0
 8001ad2:	d1eb      	bne.n	8001aac <__gedf2+0x80>
 8001ad4:	4556      	cmp	r6, sl
 8001ad6:	dce9      	bgt.n	8001aac <__gedf2+0x80>
 8001ad8:	dbde      	blt.n	8001a98 <__gedf2+0x6c>
 8001ada:	9b01      	ldr	r3, [sp, #4]
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d8e5      	bhi.n	8001aac <__gedf2+0x80>
 8001ae0:	d1da      	bne.n	8001a98 <__gedf2+0x6c>
 8001ae2:	45c8      	cmp	r8, r9
 8001ae4:	d8e2      	bhi.n	8001aac <__gedf2+0x80>
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	45c8      	cmp	r8, r9
 8001aea:	d2e4      	bcs.n	8001ab6 <__gedf2+0x8a>
 8001aec:	e7d4      	b.n	8001a98 <__gedf2+0x6c>
 8001aee:	2000      	movs	r0, #0
 8001af0:	2c00      	cmp	r4, #0
 8001af2:	d0e0      	beq.n	8001ab6 <__gedf2+0x8a>
 8001af4:	e7da      	b.n	8001aac <__gedf2+0x80>
 8001af6:	4311      	orrs	r1, r2
 8001af8:	d103      	bne.n	8001b02 <__gedf2+0xd6>
 8001afa:	4584      	cmp	ip, r0
 8001afc:	d1d6      	bne.n	8001aac <__gedf2+0x80>
 8001afe:	2000      	movs	r0, #0
 8001b00:	e7d9      	b.n	8001ab6 <__gedf2+0x8a>
 8001b02:	2002      	movs	r0, #2
 8001b04:	4240      	negs	r0, r0
 8001b06:	e7d6      	b.n	8001ab6 <__gedf2+0x8a>
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d0e6      	beq.n	8001ada <__gedf2+0xae>
 8001b0c:	e7ce      	b.n	8001aac <__gedf2+0x80>
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	000007ff 	.word	0x000007ff

08001b14 <__ledf2>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	4657      	mov	r7, sl
 8001b18:	464e      	mov	r6, r9
 8001b1a:	4645      	mov	r5, r8
 8001b1c:	46de      	mov	lr, fp
 8001b1e:	b5e0      	push	{r5, r6, r7, lr}
 8001b20:	000d      	movs	r5, r1
 8001b22:	030f      	lsls	r7, r1, #12
 8001b24:	0004      	movs	r4, r0
 8001b26:	4680      	mov	r8, r0
 8001b28:	0fe8      	lsrs	r0, r5, #31
 8001b2a:	0b39      	lsrs	r1, r7, #12
 8001b2c:	4684      	mov	ip, r0
 8001b2e:	b083      	sub	sp, #12
 8001b30:	0058      	lsls	r0, r3, #1
 8001b32:	4f30      	ldr	r7, [pc, #192]	@ (8001bf4 <__ledf2+0xe0>)
 8001b34:	0d40      	lsrs	r0, r0, #21
 8001b36:	9101      	str	r1, [sp, #4]
 8001b38:	031e      	lsls	r6, r3, #12
 8001b3a:	0069      	lsls	r1, r5, #1
 8001b3c:	4682      	mov	sl, r0
 8001b3e:	4691      	mov	r9, r2
 8001b40:	0d49      	lsrs	r1, r1, #21
 8001b42:	0b36      	lsrs	r6, r6, #12
 8001b44:	0fd8      	lsrs	r0, r3, #31
 8001b46:	42b9      	cmp	r1, r7
 8001b48:	d020      	beq.n	8001b8c <__ledf2+0x78>
 8001b4a:	45ba      	cmp	sl, r7
 8001b4c:	d00f      	beq.n	8001b6e <__ledf2+0x5a>
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d12b      	bne.n	8001baa <__ledf2+0x96>
 8001b52:	9901      	ldr	r1, [sp, #4]
 8001b54:	430c      	orrs	r4, r1
 8001b56:	4651      	mov	r1, sl
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d137      	bne.n	8001bcc <__ledf2+0xb8>
 8001b5c:	4332      	orrs	r2, r6
 8001b5e:	d038      	beq.n	8001bd2 <__ledf2+0xbe>
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	d144      	bne.n	8001bee <__ledf2+0xda>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d119      	bne.n	8001b9c <__ledf2+0x88>
 8001b68:	2001      	movs	r0, #1
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	e016      	b.n	8001b9c <__ledf2+0x88>
 8001b6e:	4316      	orrs	r6, r2
 8001b70:	d113      	bne.n	8001b9a <__ledf2+0x86>
 8001b72:	2900      	cmp	r1, #0
 8001b74:	d102      	bne.n	8001b7c <__ledf2+0x68>
 8001b76:	9f01      	ldr	r7, [sp, #4]
 8001b78:	4327      	orrs	r7, r4
 8001b7a:	d0f3      	beq.n	8001b64 <__ledf2+0x50>
 8001b7c:	4584      	cmp	ip, r0
 8001b7e:	d020      	beq.n	8001bc2 <__ledf2+0xae>
 8001b80:	4663      	mov	r3, ip
 8001b82:	2002      	movs	r0, #2
 8001b84:	3b01      	subs	r3, #1
 8001b86:	4018      	ands	r0, r3
 8001b88:	3801      	subs	r0, #1
 8001b8a:	e007      	b.n	8001b9c <__ledf2+0x88>
 8001b8c:	9f01      	ldr	r7, [sp, #4]
 8001b8e:	4327      	orrs	r7, r4
 8001b90:	d103      	bne.n	8001b9a <__ledf2+0x86>
 8001b92:	458a      	cmp	sl, r1
 8001b94:	d1f4      	bne.n	8001b80 <__ledf2+0x6c>
 8001b96:	4316      	orrs	r6, r2
 8001b98:	d01f      	beq.n	8001bda <__ledf2+0xc6>
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	4654      	mov	r4, sl
 8001bac:	2c00      	cmp	r4, #0
 8001bae:	d0e7      	beq.n	8001b80 <__ledf2+0x6c>
 8001bb0:	4584      	cmp	ip, r0
 8001bb2:	d1e5      	bne.n	8001b80 <__ledf2+0x6c>
 8001bb4:	4551      	cmp	r1, sl
 8001bb6:	dce3      	bgt.n	8001b80 <__ledf2+0x6c>
 8001bb8:	db03      	blt.n	8001bc2 <__ledf2+0xae>
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	42b3      	cmp	r3, r6
 8001bbe:	d8df      	bhi.n	8001b80 <__ledf2+0x6c>
 8001bc0:	d00f      	beq.n	8001be2 <__ledf2+0xce>
 8001bc2:	4663      	mov	r3, ip
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0cf      	beq.n	8001b68 <__ledf2+0x54>
 8001bc8:	4660      	mov	r0, ip
 8001bca:	e7e7      	b.n	8001b9c <__ledf2+0x88>
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d0c9      	beq.n	8001b64 <__ledf2+0x50>
 8001bd0:	e7d4      	b.n	8001b7c <__ledf2+0x68>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	2c00      	cmp	r4, #0
 8001bd6:	d0e1      	beq.n	8001b9c <__ledf2+0x88>
 8001bd8:	e7d2      	b.n	8001b80 <__ledf2+0x6c>
 8001bda:	4584      	cmp	ip, r0
 8001bdc:	d1d0      	bne.n	8001b80 <__ledf2+0x6c>
 8001bde:	2000      	movs	r0, #0
 8001be0:	e7dc      	b.n	8001b9c <__ledf2+0x88>
 8001be2:	45c8      	cmp	r8, r9
 8001be4:	d8cc      	bhi.n	8001b80 <__ledf2+0x6c>
 8001be6:	2000      	movs	r0, #0
 8001be8:	45c8      	cmp	r8, r9
 8001bea:	d2d7      	bcs.n	8001b9c <__ledf2+0x88>
 8001bec:	e7e9      	b.n	8001bc2 <__ledf2+0xae>
 8001bee:	4584      	cmp	ip, r0
 8001bf0:	d0e3      	beq.n	8001bba <__ledf2+0xa6>
 8001bf2:	e7c5      	b.n	8001b80 <__ledf2+0x6c>
 8001bf4:	000007ff 	.word	0x000007ff

08001bf8 <__aeabi_dmul>:
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	4657      	mov	r7, sl
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	464e      	mov	r6, r9
 8001c00:	4645      	mov	r5, r8
 8001c02:	b5e0      	push	{r5, r6, r7, lr}
 8001c04:	001f      	movs	r7, r3
 8001c06:	030b      	lsls	r3, r1, #12
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	0016      	movs	r6, r2
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	0fca      	lsrs	r2, r1, #31
 8001c10:	004b      	lsls	r3, r1, #1
 8001c12:	0004      	movs	r4, r0
 8001c14:	4693      	mov	fp, r2
 8001c16:	b087      	sub	sp, #28
 8001c18:	0d5b      	lsrs	r3, r3, #21
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dmul+0x26>
 8001c1c:	e0d5      	b.n	8001dca <__aeabi_dmul+0x1d2>
 8001c1e:	4abb      	ldr	r2, [pc, #748]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dmul+0x2e>
 8001c24:	e0f8      	b.n	8001e18 <__aeabi_dmul+0x220>
 8001c26:	4651      	mov	r1, sl
 8001c28:	0f42      	lsrs	r2, r0, #29
 8001c2a:	00c9      	lsls	r1, r1, #3
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	0409      	lsls	r1, r1, #16
 8001c32:	4311      	orrs	r1, r2
 8001c34:	00c2      	lsls	r2, r0, #3
 8001c36:	4691      	mov	r9, r2
 8001c38:	4ab5      	ldr	r2, [pc, #724]	@ (8001f10 <__aeabi_dmul+0x318>)
 8001c3a:	468a      	mov	sl, r1
 8001c3c:	189d      	adds	r5, r3, r2
 8001c3e:	2300      	movs	r3, #0
 8001c40:	4698      	mov	r8, r3
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	033c      	lsls	r4, r7, #12
 8001c46:	007b      	lsls	r3, r7, #1
 8001c48:	0ffa      	lsrs	r2, r7, #31
 8001c4a:	0030      	movs	r0, r6
 8001c4c:	0b24      	lsrs	r4, r4, #12
 8001c4e:	0d5b      	lsrs	r3, r3, #21
 8001c50:	9200      	str	r2, [sp, #0]
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x5e>
 8001c54:	e096      	b.n	8001d84 <__aeabi_dmul+0x18c>
 8001c56:	4aad      	ldr	r2, [pc, #692]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d031      	beq.n	8001cc0 <__aeabi_dmul+0xc8>
 8001c5c:	0f72      	lsrs	r2, r6, #29
 8001c5e:	00e4      	lsls	r4, r4, #3
 8001c60:	4322      	orrs	r2, r4
 8001c62:	2480      	movs	r4, #128	@ 0x80
 8001c64:	0424      	lsls	r4, r4, #16
 8001c66:	4314      	orrs	r4, r2
 8001c68:	4aa9      	ldr	r2, [pc, #676]	@ (8001f10 <__aeabi_dmul+0x318>)
 8001c6a:	00f0      	lsls	r0, r6, #3
 8001c6c:	4694      	mov	ip, r2
 8001c6e:	4463      	add	r3, ip
 8001c70:	195b      	adds	r3, r3, r5
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	9201      	str	r2, [sp, #4]
 8001c76:	4642      	mov	r2, r8
 8001c78:	2600      	movs	r6, #0
 8001c7a:	2a0a      	cmp	r2, #10
 8001c7c:	dc42      	bgt.n	8001d04 <__aeabi_dmul+0x10c>
 8001c7e:	465a      	mov	r2, fp
 8001c80:	9900      	ldr	r1, [sp, #0]
 8001c82:	404a      	eors	r2, r1
 8001c84:	4693      	mov	fp, r2
 8001c86:	4642      	mov	r2, r8
 8001c88:	2a02      	cmp	r2, #2
 8001c8a:	dc32      	bgt.n	8001cf2 <__aeabi_dmul+0xfa>
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	2a01      	cmp	r2, #1
 8001c90:	d900      	bls.n	8001c94 <__aeabi_dmul+0x9c>
 8001c92:	e149      	b.n	8001f28 <__aeabi_dmul+0x330>
 8001c94:	2e02      	cmp	r6, #2
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0xa2>
 8001c98:	e0ca      	b.n	8001e30 <__aeabi_dmul+0x238>
 8001c9a:	2e01      	cmp	r6, #1
 8001c9c:	d13d      	bne.n	8001d1a <__aeabi_dmul+0x122>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	465a      	mov	r2, fp
 8001ca8:	051b      	lsls	r3, r3, #20
 8001caa:	4323      	orrs	r3, r4
 8001cac:	07d2      	lsls	r2, r2, #31
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	b007      	add	sp, #28
 8001cb4:	bcf0      	pop	{r4, r5, r6, r7}
 8001cb6:	46bb      	mov	fp, r7
 8001cb8:	46b2      	mov	sl, r6
 8001cba:	46a9      	mov	r9, r5
 8001cbc:	46a0      	mov	r8, r4
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001cc2:	4326      	orrs	r6, r4
 8001cc4:	18eb      	adds	r3, r5, r3
 8001cc6:	2e00      	cmp	r6, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dmul+0xd4>
 8001cca:	e0bb      	b.n	8001e44 <__aeabi_dmul+0x24c>
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4641      	mov	r1, r8
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	465a      	mov	r2, fp
 8001cd4:	4688      	mov	r8, r1
 8001cd6:	9900      	ldr	r1, [sp, #0]
 8001cd8:	404a      	eors	r2, r1
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0109      	lsls	r1, r1, #4
 8001cde:	468c      	mov	ip, r1
 8001ce0:	0029      	movs	r1, r5
 8001ce2:	4461      	add	r1, ip
 8001ce4:	9101      	str	r1, [sp, #4]
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	290a      	cmp	r1, #10
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dmul+0xf6>
 8001cec:	e233      	b.n	8002156 <__aeabi_dmul+0x55e>
 8001cee:	4693      	mov	fp, r2
 8001cf0:	2603      	movs	r6, #3
 8001cf2:	4642      	mov	r2, r8
 8001cf4:	2701      	movs	r7, #1
 8001cf6:	4097      	lsls	r7, r2
 8001cf8:	21a6      	movs	r1, #166	@ 0xa6
 8001cfa:	003a      	movs	r2, r7
 8001cfc:	00c9      	lsls	r1, r1, #3
 8001cfe:	400a      	ands	r2, r1
 8001d00:	420f      	tst	r7, r1
 8001d02:	d031      	beq.n	8001d68 <__aeabi_dmul+0x170>
 8001d04:	9e02      	ldr	r6, [sp, #8]
 8001d06:	2e02      	cmp	r6, #2
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dmul+0x114>
 8001d0a:	e235      	b.n	8002178 <__aeabi_dmul+0x580>
 8001d0c:	2e03      	cmp	r6, #3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x11a>
 8001d10:	e1d2      	b.n	80020b8 <__aeabi_dmul+0x4c0>
 8001d12:	4654      	mov	r4, sl
 8001d14:	4648      	mov	r0, r9
 8001d16:	2e01      	cmp	r6, #1
 8001d18:	d0c1      	beq.n	8001c9e <__aeabi_dmul+0xa6>
 8001d1a:	9a01      	ldr	r2, [sp, #4]
 8001d1c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f14 <__aeabi_dmul+0x31c>)
 8001d1e:	4694      	mov	ip, r2
 8001d20:	4463      	add	r3, ip
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_dmul+0x130>
 8001d26:	e0c0      	b.n	8001eaa <__aeabi_dmul+0x2b2>
 8001d28:	0742      	lsls	r2, r0, #29
 8001d2a:	d009      	beq.n	8001d40 <__aeabi_dmul+0x148>
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	4002      	ands	r2, r0
 8001d30:	2a04      	cmp	r2, #4
 8001d32:	d005      	beq.n	8001d40 <__aeabi_dmul+0x148>
 8001d34:	1d02      	adds	r2, r0, #4
 8001d36:	4282      	cmp	r2, r0
 8001d38:	4180      	sbcs	r0, r0
 8001d3a:	4240      	negs	r0, r0
 8001d3c:	1824      	adds	r4, r4, r0
 8001d3e:	0010      	movs	r0, r2
 8001d40:	01e2      	lsls	r2, r4, #7
 8001d42:	d506      	bpl.n	8001d52 <__aeabi_dmul+0x15a>
 8001d44:	4b74      	ldr	r3, [pc, #464]	@ (8001f18 <__aeabi_dmul+0x320>)
 8001d46:	9a01      	ldr	r2, [sp, #4]
 8001d48:	401c      	ands	r4, r3
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	4694      	mov	ip, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4463      	add	r3, ip
 8001d52:	4a72      	ldr	r2, [pc, #456]	@ (8001f1c <__aeabi_dmul+0x324>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	dc6b      	bgt.n	8001e30 <__aeabi_dmul+0x238>
 8001d58:	0762      	lsls	r2, r4, #29
 8001d5a:	08c0      	lsrs	r0, r0, #3
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	4302      	orrs	r2, r0
 8001d62:	0b24      	lsrs	r4, r4, #12
 8001d64:	0d5b      	lsrs	r3, r3, #21
 8001d66:	e79d      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001d68:	2190      	movs	r1, #144	@ 0x90
 8001d6a:	0089      	lsls	r1, r1, #2
 8001d6c:	420f      	tst	r7, r1
 8001d6e:	d163      	bne.n	8001e38 <__aeabi_dmul+0x240>
 8001d70:	2288      	movs	r2, #136	@ 0x88
 8001d72:	423a      	tst	r2, r7
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dmul+0x180>
 8001d76:	e0d7      	b.n	8001f28 <__aeabi_dmul+0x330>
 8001d78:	9b00      	ldr	r3, [sp, #0]
 8001d7a:	46a2      	mov	sl, r4
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	4681      	mov	r9, r0
 8001d80:	9602      	str	r6, [sp, #8]
 8001d82:	e7bf      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001d84:	0023      	movs	r3, r4
 8001d86:	4333      	orrs	r3, r6
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dmul+0x194>
 8001d8a:	e07f      	b.n	8001e8c <__aeabi_dmul+0x294>
 8001d8c:	2c00      	cmp	r4, #0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dmul+0x19a>
 8001d90:	e1ad      	b.n	80020ee <__aeabi_dmul+0x4f6>
 8001d92:	0020      	movs	r0, r4
 8001d94:	f000 ff10 	bl	8002bb8 <__clzsi2>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	3a0b      	subs	r2, #11
 8001d9e:	201d      	movs	r0, #29
 8001da0:	0019      	movs	r1, r3
 8001da2:	1a82      	subs	r2, r0, r2
 8001da4:	0030      	movs	r0, r6
 8001da6:	3908      	subs	r1, #8
 8001da8:	40d0      	lsrs	r0, r2
 8001daa:	408c      	lsls	r4, r1
 8001dac:	4304      	orrs	r4, r0
 8001dae:	0030      	movs	r0, r6
 8001db0:	4088      	lsls	r0, r1
 8001db2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f20 <__aeabi_dmul+0x328>)
 8001db4:	1aeb      	subs	r3, r5, r3
 8001db6:	4694      	mov	ip, r2
 8001db8:	4463      	add	r3, ip
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	9201      	str	r2, [sp, #4]
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	2600      	movs	r6, #0
 8001dc2:	2a0a      	cmp	r2, #10
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_dmul+0x1d0>
 8001dc6:	e75a      	b.n	8001c7e <__aeabi_dmul+0x86>
 8001dc8:	e79c      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001dca:	4653      	mov	r3, sl
 8001dcc:	4303      	orrs	r3, r0
 8001dce:	4699      	mov	r9, r3
 8001dd0:	d054      	beq.n	8001e7c <__aeabi_dmul+0x284>
 8001dd2:	4653      	mov	r3, sl
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dmul+0x1e2>
 8001dd8:	e177      	b.n	80020ca <__aeabi_dmul+0x4d2>
 8001dda:	4650      	mov	r0, sl
 8001ddc:	f000 feec 	bl	8002bb8 <__clzsi2>
 8001de0:	230b      	movs	r3, #11
 8001de2:	425b      	negs	r3, r3
 8001de4:	469c      	mov	ip, r3
 8001de6:	0002      	movs	r2, r0
 8001de8:	4484      	add	ip, r0
 8001dea:	0011      	movs	r1, r2
 8001dec:	4650      	mov	r0, sl
 8001dee:	3908      	subs	r1, #8
 8001df0:	4088      	lsls	r0, r1
 8001df2:	231d      	movs	r3, #29
 8001df4:	4680      	mov	r8, r0
 8001df6:	4660      	mov	r0, ip
 8001df8:	1a1b      	subs	r3, r3, r0
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	40d8      	lsrs	r0, r3
 8001dfe:	0003      	movs	r3, r0
 8001e00:	4640      	mov	r0, r8
 8001e02:	4303      	orrs	r3, r0
 8001e04:	469a      	mov	sl, r3
 8001e06:	0023      	movs	r3, r4
 8001e08:	408b      	lsls	r3, r1
 8001e0a:	4699      	mov	r9, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4d44      	ldr	r5, [pc, #272]	@ (8001f20 <__aeabi_dmul+0x328>)
 8001e10:	4698      	mov	r8, r3
 8001e12:	1aad      	subs	r5, r5, r2
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	e715      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e18:	4652      	mov	r2, sl
 8001e1a:	4302      	orrs	r2, r0
 8001e1c:	4691      	mov	r9, r2
 8001e1e:	d126      	bne.n	8001e6e <__aeabi_dmul+0x276>
 8001e20:	2200      	movs	r2, #0
 8001e22:	001d      	movs	r5, r3
 8001e24:	2302      	movs	r3, #2
 8001e26:	4692      	mov	sl, r2
 8001e28:	3208      	adds	r2, #8
 8001e2a:	4690      	mov	r8, r2
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	e709      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e30:	2400      	movs	r4, #0
 8001e32:	2200      	movs	r2, #0
 8001e34:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001e36:	e735      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2480      	movs	r4, #128	@ 0x80
 8001e3c:	469b      	mov	fp, r3
 8001e3e:	0324      	lsls	r4, r4, #12
 8001e40:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <__aeabi_dmul+0x314>)
 8001e42:	e72f      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001e44:	2202      	movs	r2, #2
 8001e46:	4641      	mov	r1, r8
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	4694      	mov	ip, r2
 8001e50:	002a      	movs	r2, r5
 8001e52:	4462      	add	r2, ip
 8001e54:	4688      	mov	r8, r1
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	290a      	cmp	r1, #10
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dmul+0x266>
 8001e5c:	e752      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001e5e:	465a      	mov	r2, fp
 8001e60:	2000      	movs	r0, #0
 8001e62:	9900      	ldr	r1, [sp, #0]
 8001e64:	0004      	movs	r4, r0
 8001e66:	404a      	eors	r2, r1
 8001e68:	4693      	mov	fp, r2
 8001e6a:	2602      	movs	r6, #2
 8001e6c:	e70b      	b.n	8001c86 <__aeabi_dmul+0x8e>
 8001e6e:	220c      	movs	r2, #12
 8001e70:	001d      	movs	r5, r3
 8001e72:	2303      	movs	r3, #3
 8001e74:	4681      	mov	r9, r0
 8001e76:	4690      	mov	r8, r2
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	e6e3      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	3304      	adds	r3, #4
 8001e82:	4698      	mov	r8, r3
 8001e84:	3b03      	subs	r3, #3
 8001e86:	2500      	movs	r5, #0
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	e6db      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	3301      	adds	r3, #1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	002b      	movs	r3, r5
 8001e94:	4690      	mov	r8, r2
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	9201      	str	r2, [sp, #4]
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	2601      	movs	r6, #1
 8001ea2:	2a0a      	cmp	r2, #10
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dmul+0x2b0>
 8001ea6:	e6ea      	b.n	8001c7e <__aeabi_dmul+0x86>
 8001ea8:	e72c      	b.n	8001d04 <__aeabi_dmul+0x10c>
 8001eaa:	2201      	movs	r2, #1
 8001eac:	1ad2      	subs	r2, r2, r3
 8001eae:	2a38      	cmp	r2, #56	@ 0x38
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dmul+0x2bc>
 8001eb2:	e6f4      	b.n	8001c9e <__aeabi_dmul+0xa6>
 8001eb4:	2a1f      	cmp	r2, #31
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_dmul+0x2c2>
 8001eb8:	e12a      	b.n	8002110 <__aeabi_dmul+0x518>
 8001eba:	211f      	movs	r1, #31
 8001ebc:	4249      	negs	r1, r1
 8001ebe:	1acb      	subs	r3, r1, r3
 8001ec0:	0021      	movs	r1, r4
 8001ec2:	40d9      	lsrs	r1, r3
 8001ec4:	000b      	movs	r3, r1
 8001ec6:	2a20      	cmp	r2, #32
 8001ec8:	d005      	beq.n	8001ed6 <__aeabi_dmul+0x2de>
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <__aeabi_dmul+0x32c>)
 8001ecc:	9d01      	ldr	r5, [sp, #4]
 8001ece:	4694      	mov	ip, r2
 8001ed0:	4465      	add	r5, ip
 8001ed2:	40ac      	lsls	r4, r5
 8001ed4:	4320      	orrs	r0, r4
 8001ed6:	1e42      	subs	r2, r0, #1
 8001ed8:	4190      	sbcs	r0, r2
 8001eda:	4318      	orrs	r0, r3
 8001edc:	2307      	movs	r3, #7
 8001ede:	0019      	movs	r1, r3
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	4001      	ands	r1, r0
 8001ee4:	4203      	tst	r3, r0
 8001ee6:	d00c      	beq.n	8001f02 <__aeabi_dmul+0x30a>
 8001ee8:	230f      	movs	r3, #15
 8001eea:	4003      	ands	r3, r0
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dmul+0x2fa>
 8001ef0:	e140      	b.n	8002174 <__aeabi_dmul+0x57c>
 8001ef2:	1d03      	adds	r3, r0, #4
 8001ef4:	4283      	cmp	r3, r0
 8001ef6:	41a4      	sbcs	r4, r4
 8001ef8:	0018      	movs	r0, r3
 8001efa:	4264      	negs	r4, r4
 8001efc:	0761      	lsls	r1, r4, #29
 8001efe:	0264      	lsls	r4, r4, #9
 8001f00:	0b24      	lsrs	r4, r4, #12
 8001f02:	08c2      	lsrs	r2, r0, #3
 8001f04:	2300      	movs	r3, #0
 8001f06:	430a      	orrs	r2, r1
 8001f08:	e6cc      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	000007ff 	.word	0x000007ff
 8001f10:	fffffc01 	.word	0xfffffc01
 8001f14:	000003ff 	.word	0x000003ff
 8001f18:	feffffff 	.word	0xfeffffff
 8001f1c:	000007fe 	.word	0x000007fe
 8001f20:	fffffc0d 	.word	0xfffffc0d
 8001f24:	0000043e 	.word	0x0000043e
 8001f28:	4649      	mov	r1, r9
 8001f2a:	464a      	mov	r2, r9
 8001f2c:	0409      	lsls	r1, r1, #16
 8001f2e:	0c09      	lsrs	r1, r1, #16
 8001f30:	000d      	movs	r5, r1
 8001f32:	0c16      	lsrs	r6, r2, #16
 8001f34:	0c02      	lsrs	r2, r0, #16
 8001f36:	0400      	lsls	r0, r0, #16
 8001f38:	0c00      	lsrs	r0, r0, #16
 8001f3a:	4345      	muls	r5, r0
 8001f3c:	46ac      	mov	ip, r5
 8001f3e:	0005      	movs	r5, r0
 8001f40:	4375      	muls	r5, r6
 8001f42:	46a8      	mov	r8, r5
 8001f44:	0015      	movs	r5, r2
 8001f46:	000f      	movs	r7, r1
 8001f48:	4375      	muls	r5, r6
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	9502      	str	r5, [sp, #8]
 8001f4e:	002a      	movs	r2, r5
 8001f50:	9d00      	ldr	r5, [sp, #0]
 8001f52:	436f      	muls	r7, r5
 8001f54:	4665      	mov	r5, ip
 8001f56:	0c2d      	lsrs	r5, r5, #16
 8001f58:	46a9      	mov	r9, r5
 8001f5a:	4447      	add	r7, r8
 8001f5c:	444f      	add	r7, r9
 8001f5e:	45b8      	cmp	r8, r7
 8001f60:	d905      	bls.n	8001f6e <__aeabi_dmul+0x376>
 8001f62:	0015      	movs	r5, r2
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	0252      	lsls	r2, r2, #9
 8001f68:	4690      	mov	r8, r2
 8001f6a:	4445      	add	r5, r8
 8001f6c:	9502      	str	r5, [sp, #8]
 8001f6e:	0c3d      	lsrs	r5, r7, #16
 8001f70:	9503      	str	r5, [sp, #12]
 8001f72:	4665      	mov	r5, ip
 8001f74:	042d      	lsls	r5, r5, #16
 8001f76:	043f      	lsls	r7, r7, #16
 8001f78:	0c2d      	lsrs	r5, r5, #16
 8001f7a:	46ac      	mov	ip, r5
 8001f7c:	003d      	movs	r5, r7
 8001f7e:	4465      	add	r5, ip
 8001f80:	9504      	str	r5, [sp, #16]
 8001f82:	0c25      	lsrs	r5, r4, #16
 8001f84:	0424      	lsls	r4, r4, #16
 8001f86:	0c24      	lsrs	r4, r4, #16
 8001f88:	46ac      	mov	ip, r5
 8001f8a:	0025      	movs	r5, r4
 8001f8c:	4375      	muls	r5, r6
 8001f8e:	46a8      	mov	r8, r5
 8001f90:	4665      	mov	r5, ip
 8001f92:	000f      	movs	r7, r1
 8001f94:	4369      	muls	r1, r5
 8001f96:	4441      	add	r1, r8
 8001f98:	4689      	mov	r9, r1
 8001f9a:	4367      	muls	r7, r4
 8001f9c:	0c39      	lsrs	r1, r7, #16
 8001f9e:	4449      	add	r1, r9
 8001fa0:	436e      	muls	r6, r5
 8001fa2:	4588      	cmp	r8, r1
 8001fa4:	d903      	bls.n	8001fae <__aeabi_dmul+0x3b6>
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	0252      	lsls	r2, r2, #9
 8001faa:	4690      	mov	r8, r2
 8001fac:	4446      	add	r6, r8
 8001fae:	0c0d      	lsrs	r5, r1, #16
 8001fb0:	46a8      	mov	r8, r5
 8001fb2:	0035      	movs	r5, r6
 8001fb4:	4445      	add	r5, r8
 8001fb6:	9505      	str	r5, [sp, #20]
 8001fb8:	9d03      	ldr	r5, [sp, #12]
 8001fba:	043f      	lsls	r7, r7, #16
 8001fbc:	46a8      	mov	r8, r5
 8001fbe:	0c3f      	lsrs	r7, r7, #16
 8001fc0:	0409      	lsls	r1, r1, #16
 8001fc2:	19c9      	adds	r1, r1, r7
 8001fc4:	4488      	add	r8, r1
 8001fc6:	4645      	mov	r5, r8
 8001fc8:	9503      	str	r5, [sp, #12]
 8001fca:	4655      	mov	r5, sl
 8001fcc:	042e      	lsls	r6, r5, #16
 8001fce:	0c36      	lsrs	r6, r6, #16
 8001fd0:	0c2f      	lsrs	r7, r5, #16
 8001fd2:	0035      	movs	r5, r6
 8001fd4:	4345      	muls	r5, r0
 8001fd6:	4378      	muls	r0, r7
 8001fd8:	4681      	mov	r9, r0
 8001fda:	0038      	movs	r0, r7
 8001fdc:	46a8      	mov	r8, r5
 8001fde:	0c2d      	lsrs	r5, r5, #16
 8001fe0:	46aa      	mov	sl, r5
 8001fe2:	9a00      	ldr	r2, [sp, #0]
 8001fe4:	4350      	muls	r0, r2
 8001fe6:	4372      	muls	r2, r6
 8001fe8:	444a      	add	r2, r9
 8001fea:	4452      	add	r2, sl
 8001fec:	4591      	cmp	r9, r2
 8001fee:	d903      	bls.n	8001ff8 <__aeabi_dmul+0x400>
 8001ff0:	2580      	movs	r5, #128	@ 0x80
 8001ff2:	026d      	lsls	r5, r5, #9
 8001ff4:	46a9      	mov	r9, r5
 8001ff6:	4448      	add	r0, r9
 8001ff8:	0c15      	lsrs	r5, r2, #16
 8001ffa:	46a9      	mov	r9, r5
 8001ffc:	4645      	mov	r5, r8
 8001ffe:	042d      	lsls	r5, r5, #16
 8002000:	0c2d      	lsrs	r5, r5, #16
 8002002:	46a8      	mov	r8, r5
 8002004:	4665      	mov	r5, ip
 8002006:	437d      	muls	r5, r7
 8002008:	0412      	lsls	r2, r2, #16
 800200a:	4448      	add	r0, r9
 800200c:	4490      	add	r8, r2
 800200e:	46a9      	mov	r9, r5
 8002010:	0032      	movs	r2, r6
 8002012:	4665      	mov	r5, ip
 8002014:	4362      	muls	r2, r4
 8002016:	436e      	muls	r6, r5
 8002018:	437c      	muls	r4, r7
 800201a:	0c17      	lsrs	r7, r2, #16
 800201c:	1936      	adds	r6, r6, r4
 800201e:	19bf      	adds	r7, r7, r6
 8002020:	42bc      	cmp	r4, r7
 8002022:	d903      	bls.n	800202c <__aeabi_dmul+0x434>
 8002024:	2480      	movs	r4, #128	@ 0x80
 8002026:	0264      	lsls	r4, r4, #9
 8002028:	46a4      	mov	ip, r4
 800202a:	44e1      	add	r9, ip
 800202c:	9c02      	ldr	r4, [sp, #8]
 800202e:	9e03      	ldr	r6, [sp, #12]
 8002030:	46a4      	mov	ip, r4
 8002032:	9d05      	ldr	r5, [sp, #20]
 8002034:	4466      	add	r6, ip
 8002036:	428e      	cmp	r6, r1
 8002038:	4189      	sbcs	r1, r1
 800203a:	46ac      	mov	ip, r5
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	043c      	lsls	r4, r7, #16
 8002040:	0c12      	lsrs	r2, r2, #16
 8002042:	18a2      	adds	r2, r4, r2
 8002044:	4462      	add	r2, ip
 8002046:	4249      	negs	r1, r1
 8002048:	1854      	adds	r4, r2, r1
 800204a:	4446      	add	r6, r8
 800204c:	46a4      	mov	ip, r4
 800204e:	4546      	cmp	r6, r8
 8002050:	41a4      	sbcs	r4, r4
 8002052:	4682      	mov	sl, r0
 8002054:	4264      	negs	r4, r4
 8002056:	46a0      	mov	r8, r4
 8002058:	42aa      	cmp	r2, r5
 800205a:	4192      	sbcs	r2, r2
 800205c:	458c      	cmp	ip, r1
 800205e:	4189      	sbcs	r1, r1
 8002060:	44e2      	add	sl, ip
 8002062:	44d0      	add	r8, sl
 8002064:	4249      	negs	r1, r1
 8002066:	4252      	negs	r2, r2
 8002068:	430a      	orrs	r2, r1
 800206a:	45a0      	cmp	r8, r4
 800206c:	41a4      	sbcs	r4, r4
 800206e:	4582      	cmp	sl, r0
 8002070:	4189      	sbcs	r1, r1
 8002072:	4264      	negs	r4, r4
 8002074:	4249      	negs	r1, r1
 8002076:	430c      	orrs	r4, r1
 8002078:	4641      	mov	r1, r8
 800207a:	0c3f      	lsrs	r7, r7, #16
 800207c:	19d2      	adds	r2, r2, r7
 800207e:	1912      	adds	r2, r2, r4
 8002080:	0dcc      	lsrs	r4, r1, #23
 8002082:	9904      	ldr	r1, [sp, #16]
 8002084:	0270      	lsls	r0, r6, #9
 8002086:	4308      	orrs	r0, r1
 8002088:	1e41      	subs	r1, r0, #1
 800208a:	4188      	sbcs	r0, r1
 800208c:	4641      	mov	r1, r8
 800208e:	444a      	add	r2, r9
 8002090:	0df6      	lsrs	r6, r6, #23
 8002092:	0252      	lsls	r2, r2, #9
 8002094:	4330      	orrs	r0, r6
 8002096:	0249      	lsls	r1, r1, #9
 8002098:	4314      	orrs	r4, r2
 800209a:	4308      	orrs	r0, r1
 800209c:	01d2      	lsls	r2, r2, #7
 800209e:	d535      	bpl.n	800210c <__aeabi_dmul+0x514>
 80020a0:	2201      	movs	r2, #1
 80020a2:	0843      	lsrs	r3, r0, #1
 80020a4:	4002      	ands	r2, r0
 80020a6:	4313      	orrs	r3, r2
 80020a8:	07e0      	lsls	r0, r4, #31
 80020aa:	4318      	orrs	r0, r3
 80020ac:	0864      	lsrs	r4, r4, #1
 80020ae:	e634      	b.n	8001d1a <__aeabi_dmul+0x122>
 80020b0:	9b00      	ldr	r3, [sp, #0]
 80020b2:	46a2      	mov	sl, r4
 80020b4:	469b      	mov	fp, r3
 80020b6:	4681      	mov	r9, r0
 80020b8:	2480      	movs	r4, #128	@ 0x80
 80020ba:	4653      	mov	r3, sl
 80020bc:	0324      	lsls	r4, r4, #12
 80020be:	431c      	orrs	r4, r3
 80020c0:	0324      	lsls	r4, r4, #12
 80020c2:	464a      	mov	r2, r9
 80020c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <__aeabi_dmul+0x588>)
 80020c6:	0b24      	lsrs	r4, r4, #12
 80020c8:	e5ec      	b.n	8001ca4 <__aeabi_dmul+0xac>
 80020ca:	f000 fd75 	bl	8002bb8 <__clzsi2>
 80020ce:	2315      	movs	r3, #21
 80020d0:	469c      	mov	ip, r3
 80020d2:	4484      	add	ip, r0
 80020d4:	0002      	movs	r2, r0
 80020d6:	4663      	mov	r3, ip
 80020d8:	3220      	adds	r2, #32
 80020da:	2b1c      	cmp	r3, #28
 80020dc:	dc00      	bgt.n	80020e0 <__aeabi_dmul+0x4e8>
 80020de:	e684      	b.n	8001dea <__aeabi_dmul+0x1f2>
 80020e0:	2300      	movs	r3, #0
 80020e2:	4699      	mov	r9, r3
 80020e4:	0023      	movs	r3, r4
 80020e6:	3808      	subs	r0, #8
 80020e8:	4083      	lsls	r3, r0
 80020ea:	469a      	mov	sl, r3
 80020ec:	e68e      	b.n	8001e0c <__aeabi_dmul+0x214>
 80020ee:	f000 fd63 	bl	8002bb8 <__clzsi2>
 80020f2:	0002      	movs	r2, r0
 80020f4:	0003      	movs	r3, r0
 80020f6:	3215      	adds	r2, #21
 80020f8:	3320      	adds	r3, #32
 80020fa:	2a1c      	cmp	r2, #28
 80020fc:	dc00      	bgt.n	8002100 <__aeabi_dmul+0x508>
 80020fe:	e64e      	b.n	8001d9e <__aeabi_dmul+0x1a6>
 8002100:	0002      	movs	r2, r0
 8002102:	0034      	movs	r4, r6
 8002104:	3a08      	subs	r2, #8
 8002106:	2000      	movs	r0, #0
 8002108:	4094      	lsls	r4, r2
 800210a:	e652      	b.n	8001db2 <__aeabi_dmul+0x1ba>
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	e604      	b.n	8001d1a <__aeabi_dmul+0x122>
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <__aeabi_dmul+0x58c>)
 8002112:	0021      	movs	r1, r4
 8002114:	469c      	mov	ip, r3
 8002116:	0003      	movs	r3, r0
 8002118:	9d01      	ldr	r5, [sp, #4]
 800211a:	40d3      	lsrs	r3, r2
 800211c:	4465      	add	r5, ip
 800211e:	40a9      	lsls	r1, r5
 8002120:	4319      	orrs	r1, r3
 8002122:	0003      	movs	r3, r0
 8002124:	40ab      	lsls	r3, r5
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	4183      	sbcs	r3, r0
 800212a:	4319      	orrs	r1, r3
 800212c:	0008      	movs	r0, r1
 800212e:	40d4      	lsrs	r4, r2
 8002130:	074b      	lsls	r3, r1, #29
 8002132:	d009      	beq.n	8002148 <__aeabi_dmul+0x550>
 8002134:	230f      	movs	r3, #15
 8002136:	400b      	ands	r3, r1
 8002138:	2b04      	cmp	r3, #4
 800213a:	d005      	beq.n	8002148 <__aeabi_dmul+0x550>
 800213c:	1d0b      	adds	r3, r1, #4
 800213e:	428b      	cmp	r3, r1
 8002140:	4180      	sbcs	r0, r0
 8002142:	4240      	negs	r0, r0
 8002144:	1824      	adds	r4, r4, r0
 8002146:	0018      	movs	r0, r3
 8002148:	0223      	lsls	r3, r4, #8
 800214a:	d400      	bmi.n	800214e <__aeabi_dmul+0x556>
 800214c:	e6d6      	b.n	8001efc <__aeabi_dmul+0x304>
 800214e:	2301      	movs	r3, #1
 8002150:	2400      	movs	r4, #0
 8002152:	2200      	movs	r2, #0
 8002154:	e5a6      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8002156:	290f      	cmp	r1, #15
 8002158:	d1aa      	bne.n	80020b0 <__aeabi_dmul+0x4b8>
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	4652      	mov	r2, sl
 800215e:	031b      	lsls	r3, r3, #12
 8002160:	421a      	tst	r2, r3
 8002162:	d0a9      	beq.n	80020b8 <__aeabi_dmul+0x4c0>
 8002164:	421c      	tst	r4, r3
 8002166:	d1a7      	bne.n	80020b8 <__aeabi_dmul+0x4c0>
 8002168:	431c      	orrs	r4, r3
 800216a:	9b00      	ldr	r3, [sp, #0]
 800216c:	0002      	movs	r2, r0
 800216e:	469b      	mov	fp, r3
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <__aeabi_dmul+0x588>)
 8002172:	e597      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8002174:	2400      	movs	r4, #0
 8002176:	e6c1      	b.n	8001efc <__aeabi_dmul+0x304>
 8002178:	2400      	movs	r4, #0
 800217a:	4b01      	ldr	r3, [pc, #4]	@ (8002180 <__aeabi_dmul+0x588>)
 800217c:	0022      	movs	r2, r4
 800217e:	e591      	b.n	8001ca4 <__aeabi_dmul+0xac>
 8002180:	000007ff 	.word	0x000007ff
 8002184:	0000041e 	.word	0x0000041e

08002188 <__aeabi_dsub>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	464e      	mov	r6, r9
 800218c:	4645      	mov	r5, r8
 800218e:	46de      	mov	lr, fp
 8002190:	4657      	mov	r7, sl
 8002192:	b5e0      	push	{r5, r6, r7, lr}
 8002194:	b085      	sub	sp, #20
 8002196:	9000      	str	r0, [sp, #0]
 8002198:	9101      	str	r1, [sp, #4]
 800219a:	030c      	lsls	r4, r1, #12
 800219c:	004f      	lsls	r7, r1, #1
 800219e:	0fce      	lsrs	r6, r1, #31
 80021a0:	0a61      	lsrs	r1, r4, #9
 80021a2:	9c00      	ldr	r4, [sp, #0]
 80021a4:	46b0      	mov	r8, r6
 80021a6:	0f64      	lsrs	r4, r4, #29
 80021a8:	430c      	orrs	r4, r1
 80021aa:	9900      	ldr	r1, [sp, #0]
 80021ac:	0d7f      	lsrs	r7, r7, #21
 80021ae:	00c8      	lsls	r0, r1, #3
 80021b0:	0011      	movs	r1, r2
 80021b2:	001a      	movs	r2, r3
 80021b4:	031b      	lsls	r3, r3, #12
 80021b6:	469c      	mov	ip, r3
 80021b8:	9100      	str	r1, [sp, #0]
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	0051      	lsls	r1, r2, #1
 80021be:	0d4b      	lsrs	r3, r1, #21
 80021c0:	4699      	mov	r9, r3
 80021c2:	9b01      	ldr	r3, [sp, #4]
 80021c4:	9d00      	ldr	r5, [sp, #0]
 80021c6:	0fd9      	lsrs	r1, r3, #31
 80021c8:	4663      	mov	r3, ip
 80021ca:	0f6a      	lsrs	r2, r5, #29
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	4313      	orrs	r3, r2
 80021d0:	00ea      	lsls	r2, r5, #3
 80021d2:	4694      	mov	ip, r2
 80021d4:	4693      	mov	fp, r2
 80021d6:	4ac1      	ldr	r2, [pc, #772]	@ (80024dc <__aeabi_dsub+0x354>)
 80021d8:	9003      	str	r0, [sp, #12]
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	4591      	cmp	r9, r2
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x5a>
 80021e0:	e0cd      	b.n	800237e <__aeabi_dsub+0x1f6>
 80021e2:	2501      	movs	r5, #1
 80021e4:	4069      	eors	r1, r5
 80021e6:	464d      	mov	r5, r9
 80021e8:	1b7d      	subs	r5, r7, r5
 80021ea:	46aa      	mov	sl, r5
 80021ec:	428e      	cmp	r6, r1
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x6a>
 80021f0:	e080      	b.n	80022f4 <__aeabi_dsub+0x16c>
 80021f2:	2d00      	cmp	r5, #0
 80021f4:	dc00      	bgt.n	80021f8 <__aeabi_dsub+0x70>
 80021f6:	e335      	b.n	8002864 <__aeabi_dsub+0x6dc>
 80021f8:	4649      	mov	r1, r9
 80021fa:	2900      	cmp	r1, #0
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x78>
 80021fe:	e0df      	b.n	80023c0 <__aeabi_dsub+0x238>
 8002200:	4297      	cmp	r7, r2
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x7e>
 8002204:	e194      	b.n	8002530 <__aeabi_dsub+0x3a8>
 8002206:	4652      	mov	r2, sl
 8002208:	2501      	movs	r5, #1
 800220a:	2a38      	cmp	r2, #56	@ 0x38
 800220c:	dc19      	bgt.n	8002242 <__aeabi_dsub+0xba>
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	9b02      	ldr	r3, [sp, #8]
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	4313      	orrs	r3, r2
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	4652      	mov	r2, sl
 800221a:	2a1f      	cmp	r2, #31
 800221c:	dd00      	ble.n	8002220 <__aeabi_dsub+0x98>
 800221e:	e1e3      	b.n	80025e8 <__aeabi_dsub+0x460>
 8002220:	4653      	mov	r3, sl
 8002222:	2220      	movs	r2, #32
 8002224:	4661      	mov	r1, ip
 8002226:	9d02      	ldr	r5, [sp, #8]
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	4095      	lsls	r5, r2
 800222c:	40d9      	lsrs	r1, r3
 800222e:	430d      	orrs	r5, r1
 8002230:	4661      	mov	r1, ip
 8002232:	4091      	lsls	r1, r2
 8002234:	000a      	movs	r2, r1
 8002236:	1e51      	subs	r1, r2, #1
 8002238:	418a      	sbcs	r2, r1
 800223a:	4315      	orrs	r5, r2
 800223c:	9a02      	ldr	r2, [sp, #8]
 800223e:	40da      	lsrs	r2, r3
 8002240:	1aa4      	subs	r4, r4, r2
 8002242:	1b45      	subs	r5, r0, r5
 8002244:	42a8      	cmp	r0, r5
 8002246:	4180      	sbcs	r0, r0
 8002248:	4240      	negs	r0, r0
 800224a:	1a24      	subs	r4, r4, r0
 800224c:	0223      	lsls	r3, r4, #8
 800224e:	d400      	bmi.n	8002252 <__aeabi_dsub+0xca>
 8002250:	e13d      	b.n	80024ce <__aeabi_dsub+0x346>
 8002252:	0264      	lsls	r4, r4, #9
 8002254:	0a64      	lsrs	r4, r4, #9
 8002256:	2c00      	cmp	r4, #0
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0xd4>
 800225a:	e147      	b.n	80024ec <__aeabi_dsub+0x364>
 800225c:	0020      	movs	r0, r4
 800225e:	f000 fcab 	bl	8002bb8 <__clzsi2>
 8002262:	0003      	movs	r3, r0
 8002264:	3b08      	subs	r3, #8
 8002266:	2120      	movs	r1, #32
 8002268:	0028      	movs	r0, r5
 800226a:	1aca      	subs	r2, r1, r3
 800226c:	40d0      	lsrs	r0, r2
 800226e:	409c      	lsls	r4, r3
 8002270:	0002      	movs	r2, r0
 8002272:	409d      	lsls	r5, r3
 8002274:	4322      	orrs	r2, r4
 8002276:	429f      	cmp	r7, r3
 8002278:	dd00      	ble.n	800227c <__aeabi_dsub+0xf4>
 800227a:	e177      	b.n	800256c <__aeabi_dsub+0x3e4>
 800227c:	1bd8      	subs	r0, r3, r7
 800227e:	3001      	adds	r0, #1
 8002280:	1a09      	subs	r1, r1, r0
 8002282:	002c      	movs	r4, r5
 8002284:	408d      	lsls	r5, r1
 8002286:	40c4      	lsrs	r4, r0
 8002288:	1e6b      	subs	r3, r5, #1
 800228a:	419d      	sbcs	r5, r3
 800228c:	0013      	movs	r3, r2
 800228e:	40c2      	lsrs	r2, r0
 8002290:	408b      	lsls	r3, r1
 8002292:	4325      	orrs	r5, r4
 8002294:	2700      	movs	r7, #0
 8002296:	0014      	movs	r4, r2
 8002298:	431d      	orrs	r5, r3
 800229a:	076b      	lsls	r3, r5, #29
 800229c:	d009      	beq.n	80022b2 <__aeabi_dsub+0x12a>
 800229e:	230f      	movs	r3, #15
 80022a0:	402b      	ands	r3, r5
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d005      	beq.n	80022b2 <__aeabi_dsub+0x12a>
 80022a6:	1d2b      	adds	r3, r5, #4
 80022a8:	42ab      	cmp	r3, r5
 80022aa:	41ad      	sbcs	r5, r5
 80022ac:	426d      	negs	r5, r5
 80022ae:	1964      	adds	r4, r4, r5
 80022b0:	001d      	movs	r5, r3
 80022b2:	0223      	lsls	r3, r4, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x130>
 80022b6:	e140      	b.n	800253a <__aeabi_dsub+0x3b2>
 80022b8:	4a88      	ldr	r2, [pc, #544]	@ (80024dc <__aeabi_dsub+0x354>)
 80022ba:	3701      	adds	r7, #1
 80022bc:	4297      	cmp	r7, r2
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x13a>
 80022c0:	e101      	b.n	80024c6 <__aeabi_dsub+0x33e>
 80022c2:	2601      	movs	r6, #1
 80022c4:	4643      	mov	r3, r8
 80022c6:	4986      	ldr	r1, [pc, #536]	@ (80024e0 <__aeabi_dsub+0x358>)
 80022c8:	08ed      	lsrs	r5, r5, #3
 80022ca:	4021      	ands	r1, r4
 80022cc:	074a      	lsls	r2, r1, #29
 80022ce:	432a      	orrs	r2, r5
 80022d0:	057c      	lsls	r4, r7, #21
 80022d2:	024d      	lsls	r5, r1, #9
 80022d4:	0b2d      	lsrs	r5, r5, #12
 80022d6:	0d64      	lsrs	r4, r4, #21
 80022d8:	401e      	ands	r6, r3
 80022da:	0524      	lsls	r4, r4, #20
 80022dc:	432c      	orrs	r4, r5
 80022de:	07f6      	lsls	r6, r6, #31
 80022e0:	4334      	orrs	r4, r6
 80022e2:	0010      	movs	r0, r2
 80022e4:	0021      	movs	r1, r4
 80022e6:	b005      	add	sp, #20
 80022e8:	bcf0      	pop	{r4, r5, r6, r7}
 80022ea:	46bb      	mov	fp, r7
 80022ec:	46b2      	mov	sl, r6
 80022ee:	46a9      	mov	r9, r5
 80022f0:	46a0      	mov	r8, r4
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f4:	2d00      	cmp	r5, #0
 80022f6:	dc00      	bgt.n	80022fa <__aeabi_dsub+0x172>
 80022f8:	e2d0      	b.n	800289c <__aeabi_dsub+0x714>
 80022fa:	4649      	mov	r1, r9
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d000      	beq.n	8002302 <__aeabi_dsub+0x17a>
 8002300:	e0d4      	b.n	80024ac <__aeabi_dsub+0x324>
 8002302:	4661      	mov	r1, ip
 8002304:	9b02      	ldr	r3, [sp, #8]
 8002306:	4319      	orrs	r1, r3
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x184>
 800230a:	e12b      	b.n	8002564 <__aeabi_dsub+0x3dc>
 800230c:	1e69      	subs	r1, r5, #1
 800230e:	2d01      	cmp	r5, #1
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x18c>
 8002312:	e1d9      	b.n	80026c8 <__aeabi_dsub+0x540>
 8002314:	4295      	cmp	r5, r2
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x192>
 8002318:	e10a      	b.n	8002530 <__aeabi_dsub+0x3a8>
 800231a:	2501      	movs	r5, #1
 800231c:	2938      	cmp	r1, #56	@ 0x38
 800231e:	dc17      	bgt.n	8002350 <__aeabi_dsub+0x1c8>
 8002320:	468a      	mov	sl, r1
 8002322:	4653      	mov	r3, sl
 8002324:	2b1f      	cmp	r3, #31
 8002326:	dd00      	ble.n	800232a <__aeabi_dsub+0x1a2>
 8002328:	e1e7      	b.n	80026fa <__aeabi_dsub+0x572>
 800232a:	2220      	movs	r2, #32
 800232c:	1ad2      	subs	r2, r2, r3
 800232e:	9b02      	ldr	r3, [sp, #8]
 8002330:	4661      	mov	r1, ip
 8002332:	4093      	lsls	r3, r2
 8002334:	001d      	movs	r5, r3
 8002336:	4653      	mov	r3, sl
 8002338:	40d9      	lsrs	r1, r3
 800233a:	4663      	mov	r3, ip
 800233c:	4093      	lsls	r3, r2
 800233e:	001a      	movs	r2, r3
 8002340:	430d      	orrs	r5, r1
 8002342:	1e51      	subs	r1, r2, #1
 8002344:	418a      	sbcs	r2, r1
 8002346:	4653      	mov	r3, sl
 8002348:	4315      	orrs	r5, r2
 800234a:	9a02      	ldr	r2, [sp, #8]
 800234c:	40da      	lsrs	r2, r3
 800234e:	18a4      	adds	r4, r4, r2
 8002350:	182d      	adds	r5, r5, r0
 8002352:	4285      	cmp	r5, r0
 8002354:	4180      	sbcs	r0, r0
 8002356:	4240      	negs	r0, r0
 8002358:	1824      	adds	r4, r4, r0
 800235a:	0223      	lsls	r3, r4, #8
 800235c:	d400      	bmi.n	8002360 <__aeabi_dsub+0x1d8>
 800235e:	e0b6      	b.n	80024ce <__aeabi_dsub+0x346>
 8002360:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <__aeabi_dsub+0x354>)
 8002362:	3701      	adds	r7, #1
 8002364:	429f      	cmp	r7, r3
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x1e2>
 8002368:	e0ad      	b.n	80024c6 <__aeabi_dsub+0x33e>
 800236a:	2101      	movs	r1, #1
 800236c:	4b5c      	ldr	r3, [pc, #368]	@ (80024e0 <__aeabi_dsub+0x358>)
 800236e:	086a      	lsrs	r2, r5, #1
 8002370:	401c      	ands	r4, r3
 8002372:	4029      	ands	r1, r5
 8002374:	430a      	orrs	r2, r1
 8002376:	07e5      	lsls	r5, r4, #31
 8002378:	4315      	orrs	r5, r2
 800237a:	0864      	lsrs	r4, r4, #1
 800237c:	e78d      	b.n	800229a <__aeabi_dsub+0x112>
 800237e:	4a59      	ldr	r2, [pc, #356]	@ (80024e4 <__aeabi_dsub+0x35c>)
 8002380:	9b02      	ldr	r3, [sp, #8]
 8002382:	4692      	mov	sl, r2
 8002384:	4662      	mov	r2, ip
 8002386:	44ba      	add	sl, r7
 8002388:	431a      	orrs	r2, r3
 800238a:	d02c      	beq.n	80023e6 <__aeabi_dsub+0x25e>
 800238c:	428e      	cmp	r6, r1
 800238e:	d02e      	beq.n	80023ee <__aeabi_dsub+0x266>
 8002390:	4652      	mov	r2, sl
 8002392:	2a00      	cmp	r2, #0
 8002394:	d060      	beq.n	8002458 <__aeabi_dsub+0x2d0>
 8002396:	2f00      	cmp	r7, #0
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x214>
 800239a:	e0db      	b.n	8002554 <__aeabi_dsub+0x3cc>
 800239c:	4663      	mov	r3, ip
 800239e:	000e      	movs	r6, r1
 80023a0:	9c02      	ldr	r4, [sp, #8]
 80023a2:	08d8      	lsrs	r0, r3, #3
 80023a4:	0762      	lsls	r2, r4, #29
 80023a6:	4302      	orrs	r2, r0
 80023a8:	08e4      	lsrs	r4, r4, #3
 80023aa:	0013      	movs	r3, r2
 80023ac:	4323      	orrs	r3, r4
 80023ae:	d100      	bne.n	80023b2 <__aeabi_dsub+0x22a>
 80023b0:	e254      	b.n	800285c <__aeabi_dsub+0x6d4>
 80023b2:	2580      	movs	r5, #128	@ 0x80
 80023b4:	032d      	lsls	r5, r5, #12
 80023b6:	4325      	orrs	r5, r4
 80023b8:	032d      	lsls	r5, r5, #12
 80023ba:	4c48      	ldr	r4, [pc, #288]	@ (80024dc <__aeabi_dsub+0x354>)
 80023bc:	0b2d      	lsrs	r5, r5, #12
 80023be:	e78c      	b.n	80022da <__aeabi_dsub+0x152>
 80023c0:	4661      	mov	r1, ip
 80023c2:	9b02      	ldr	r3, [sp, #8]
 80023c4:	4319      	orrs	r1, r3
 80023c6:	d100      	bne.n	80023ca <__aeabi_dsub+0x242>
 80023c8:	e0cc      	b.n	8002564 <__aeabi_dsub+0x3dc>
 80023ca:	0029      	movs	r1, r5
 80023cc:	3901      	subs	r1, #1
 80023ce:	2d01      	cmp	r5, #1
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dsub+0x24c>
 80023d2:	e188      	b.n	80026e6 <__aeabi_dsub+0x55e>
 80023d4:	4295      	cmp	r5, r2
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x252>
 80023d8:	e0aa      	b.n	8002530 <__aeabi_dsub+0x3a8>
 80023da:	2501      	movs	r5, #1
 80023dc:	2938      	cmp	r1, #56	@ 0x38
 80023de:	dd00      	ble.n	80023e2 <__aeabi_dsub+0x25a>
 80023e0:	e72f      	b.n	8002242 <__aeabi_dsub+0xba>
 80023e2:	468a      	mov	sl, r1
 80023e4:	e718      	b.n	8002218 <__aeabi_dsub+0x90>
 80023e6:	2201      	movs	r2, #1
 80023e8:	4051      	eors	r1, r2
 80023ea:	428e      	cmp	r6, r1
 80023ec:	d1d0      	bne.n	8002390 <__aeabi_dsub+0x208>
 80023ee:	4653      	mov	r3, sl
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x26e>
 80023f4:	e0be      	b.n	8002574 <__aeabi_dsub+0x3ec>
 80023f6:	2f00      	cmp	r7, #0
 80023f8:	d000      	beq.n	80023fc <__aeabi_dsub+0x274>
 80023fa:	e138      	b.n	800266e <__aeabi_dsub+0x4e6>
 80023fc:	46ca      	mov	sl, r9
 80023fe:	0022      	movs	r2, r4
 8002400:	4302      	orrs	r2, r0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x27e>
 8002404:	e1e2      	b.n	80027cc <__aeabi_dsub+0x644>
 8002406:	4653      	mov	r3, sl
 8002408:	1e59      	subs	r1, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x288>
 800240e:	e20d      	b.n	800282c <__aeabi_dsub+0x6a4>
 8002410:	4a32      	ldr	r2, [pc, #200]	@ (80024dc <__aeabi_dsub+0x354>)
 8002412:	4592      	cmp	sl, r2
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x290>
 8002416:	e1d2      	b.n	80027be <__aeabi_dsub+0x636>
 8002418:	2701      	movs	r7, #1
 800241a:	2938      	cmp	r1, #56	@ 0x38
 800241c:	dc13      	bgt.n	8002446 <__aeabi_dsub+0x2be>
 800241e:	291f      	cmp	r1, #31
 8002420:	dd00      	ble.n	8002424 <__aeabi_dsub+0x29c>
 8002422:	e1ee      	b.n	8002802 <__aeabi_dsub+0x67a>
 8002424:	2220      	movs	r2, #32
 8002426:	9b02      	ldr	r3, [sp, #8]
 8002428:	1a52      	subs	r2, r2, r1
 800242a:	0025      	movs	r5, r4
 800242c:	0007      	movs	r7, r0
 800242e:	469a      	mov	sl, r3
 8002430:	40cc      	lsrs	r4, r1
 8002432:	4090      	lsls	r0, r2
 8002434:	4095      	lsls	r5, r2
 8002436:	40cf      	lsrs	r7, r1
 8002438:	44a2      	add	sl, r4
 800243a:	1e42      	subs	r2, r0, #1
 800243c:	4190      	sbcs	r0, r2
 800243e:	4653      	mov	r3, sl
 8002440:	432f      	orrs	r7, r5
 8002442:	4307      	orrs	r7, r0
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	003d      	movs	r5, r7
 8002448:	4465      	add	r5, ip
 800244a:	4565      	cmp	r5, ip
 800244c:	4192      	sbcs	r2, r2
 800244e:	9b02      	ldr	r3, [sp, #8]
 8002450:	4252      	negs	r2, r2
 8002452:	464f      	mov	r7, r9
 8002454:	18d4      	adds	r4, r2, r3
 8002456:	e780      	b.n	800235a <__aeabi_dsub+0x1d2>
 8002458:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <__aeabi_dsub+0x360>)
 800245a:	1c7d      	adds	r5, r7, #1
 800245c:	4215      	tst	r5, r2
 800245e:	d000      	beq.n	8002462 <__aeabi_dsub+0x2da>
 8002460:	e0aa      	b.n	80025b8 <__aeabi_dsub+0x430>
 8002462:	4662      	mov	r2, ip
 8002464:	0025      	movs	r5, r4
 8002466:	9b02      	ldr	r3, [sp, #8]
 8002468:	4305      	orrs	r5, r0
 800246a:	431a      	orrs	r2, r3
 800246c:	2f00      	cmp	r7, #0
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x2ea>
 8002470:	e0f5      	b.n	800265e <__aeabi_dsub+0x4d6>
 8002472:	2d00      	cmp	r5, #0
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x2f0>
 8002476:	e16b      	b.n	8002750 <__aeabi_dsub+0x5c8>
 8002478:	2a00      	cmp	r2, #0
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x2f6>
 800247c:	e152      	b.n	8002724 <__aeabi_dsub+0x59c>
 800247e:	4663      	mov	r3, ip
 8002480:	1ac5      	subs	r5, r0, r3
 8002482:	9b02      	ldr	r3, [sp, #8]
 8002484:	1ae2      	subs	r2, r4, r3
 8002486:	42a8      	cmp	r0, r5
 8002488:	419b      	sbcs	r3, r3
 800248a:	425b      	negs	r3, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	d400      	bmi.n	8002494 <__aeabi_dsub+0x30c>
 8002492:	e1d5      	b.n	8002840 <__aeabi_dsub+0x6b8>
 8002494:	4663      	mov	r3, ip
 8002496:	1a1d      	subs	r5, r3, r0
 8002498:	45ac      	cmp	ip, r5
 800249a:	4192      	sbcs	r2, r2
 800249c:	2601      	movs	r6, #1
 800249e:	9b02      	ldr	r3, [sp, #8]
 80024a0:	4252      	negs	r2, r2
 80024a2:	1b1c      	subs	r4, r3, r4
 80024a4:	4688      	mov	r8, r1
 80024a6:	1aa4      	subs	r4, r4, r2
 80024a8:	400e      	ands	r6, r1
 80024aa:	e6f6      	b.n	800229a <__aeabi_dsub+0x112>
 80024ac:	4297      	cmp	r7, r2
 80024ae:	d03f      	beq.n	8002530 <__aeabi_dsub+0x3a8>
 80024b0:	4652      	mov	r2, sl
 80024b2:	2501      	movs	r5, #1
 80024b4:	2a38      	cmp	r2, #56	@ 0x38
 80024b6:	dd00      	ble.n	80024ba <__aeabi_dsub+0x332>
 80024b8:	e74a      	b.n	8002350 <__aeabi_dsub+0x1c8>
 80024ba:	2280      	movs	r2, #128	@ 0x80
 80024bc:	9b02      	ldr	r3, [sp, #8]
 80024be:	0412      	lsls	r2, r2, #16
 80024c0:	4313      	orrs	r3, r2
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	e72d      	b.n	8002322 <__aeabi_dsub+0x19a>
 80024c6:	003c      	movs	r4, r7
 80024c8:	2500      	movs	r5, #0
 80024ca:	2200      	movs	r2, #0
 80024cc:	e705      	b.n	80022da <__aeabi_dsub+0x152>
 80024ce:	2307      	movs	r3, #7
 80024d0:	402b      	ands	r3, r5
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d000      	beq.n	80024d8 <__aeabi_dsub+0x350>
 80024d6:	e6e2      	b.n	800229e <__aeabi_dsub+0x116>
 80024d8:	e06b      	b.n	80025b2 <__aeabi_dsub+0x42a>
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	000007ff 	.word	0x000007ff
 80024e0:	ff7fffff 	.word	0xff7fffff
 80024e4:	fffff801 	.word	0xfffff801
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	0028      	movs	r0, r5
 80024ee:	f000 fb63 	bl	8002bb8 <__clzsi2>
 80024f2:	0003      	movs	r3, r0
 80024f4:	3318      	adds	r3, #24
 80024f6:	2b1f      	cmp	r3, #31
 80024f8:	dc00      	bgt.n	80024fc <__aeabi_dsub+0x374>
 80024fa:	e6b4      	b.n	8002266 <__aeabi_dsub+0xde>
 80024fc:	002a      	movs	r2, r5
 80024fe:	3808      	subs	r0, #8
 8002500:	4082      	lsls	r2, r0
 8002502:	429f      	cmp	r7, r3
 8002504:	dd00      	ble.n	8002508 <__aeabi_dsub+0x380>
 8002506:	e0b9      	b.n	800267c <__aeabi_dsub+0x4f4>
 8002508:	1bdb      	subs	r3, r3, r7
 800250a:	1c58      	adds	r0, r3, #1
 800250c:	281f      	cmp	r0, #31
 800250e:	dc00      	bgt.n	8002512 <__aeabi_dsub+0x38a>
 8002510:	e1a0      	b.n	8002854 <__aeabi_dsub+0x6cc>
 8002512:	0015      	movs	r5, r2
 8002514:	3b1f      	subs	r3, #31
 8002516:	40dd      	lsrs	r5, r3
 8002518:	2820      	cmp	r0, #32
 800251a:	d005      	beq.n	8002528 <__aeabi_dsub+0x3a0>
 800251c:	2340      	movs	r3, #64	@ 0x40
 800251e:	1a1b      	subs	r3, r3, r0
 8002520:	409a      	lsls	r2, r3
 8002522:	1e53      	subs	r3, r2, #1
 8002524:	419a      	sbcs	r2, r3
 8002526:	4315      	orrs	r5, r2
 8002528:	2307      	movs	r3, #7
 800252a:	2700      	movs	r7, #0
 800252c:	402b      	ands	r3, r5
 800252e:	e7d0      	b.n	80024d2 <__aeabi_dsub+0x34a>
 8002530:	08c0      	lsrs	r0, r0, #3
 8002532:	0762      	lsls	r2, r4, #29
 8002534:	4302      	orrs	r2, r0
 8002536:	08e4      	lsrs	r4, r4, #3
 8002538:	e737      	b.n	80023aa <__aeabi_dsub+0x222>
 800253a:	08ea      	lsrs	r2, r5, #3
 800253c:	0763      	lsls	r3, r4, #29
 800253e:	431a      	orrs	r2, r3
 8002540:	4bd3      	ldr	r3, [pc, #844]	@ (8002890 <__aeabi_dsub+0x708>)
 8002542:	08e4      	lsrs	r4, r4, #3
 8002544:	429f      	cmp	r7, r3
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x3c2>
 8002548:	e72f      	b.n	80023aa <__aeabi_dsub+0x222>
 800254a:	0324      	lsls	r4, r4, #12
 800254c:	0b25      	lsrs	r5, r4, #12
 800254e:	057c      	lsls	r4, r7, #21
 8002550:	0d64      	lsrs	r4, r4, #21
 8002552:	e6c2      	b.n	80022da <__aeabi_dsub+0x152>
 8002554:	46ca      	mov	sl, r9
 8002556:	0022      	movs	r2, r4
 8002558:	4302      	orrs	r2, r0
 800255a:	d158      	bne.n	800260e <__aeabi_dsub+0x486>
 800255c:	4663      	mov	r3, ip
 800255e:	000e      	movs	r6, r1
 8002560:	9c02      	ldr	r4, [sp, #8]
 8002562:	9303      	str	r3, [sp, #12]
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	4657      	mov	r7, sl
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	e7e7      	b.n	800253c <__aeabi_dsub+0x3b4>
 800256c:	4cc9      	ldr	r4, [pc, #804]	@ (8002894 <__aeabi_dsub+0x70c>)
 800256e:	1aff      	subs	r7, r7, r3
 8002570:	4014      	ands	r4, r2
 8002572:	e692      	b.n	800229a <__aeabi_dsub+0x112>
 8002574:	4dc8      	ldr	r5, [pc, #800]	@ (8002898 <__aeabi_dsub+0x710>)
 8002576:	1c7a      	adds	r2, r7, #1
 8002578:	422a      	tst	r2, r5
 800257a:	d000      	beq.n	800257e <__aeabi_dsub+0x3f6>
 800257c:	e084      	b.n	8002688 <__aeabi_dsub+0x500>
 800257e:	0022      	movs	r2, r4
 8002580:	4302      	orrs	r2, r0
 8002582:	2f00      	cmp	r7, #0
 8002584:	d000      	beq.n	8002588 <__aeabi_dsub+0x400>
 8002586:	e0ef      	b.n	8002768 <__aeabi_dsub+0x5e0>
 8002588:	2a00      	cmp	r2, #0
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x406>
 800258c:	e0e5      	b.n	800275a <__aeabi_dsub+0x5d2>
 800258e:	4662      	mov	r2, ip
 8002590:	9902      	ldr	r1, [sp, #8]
 8002592:	430a      	orrs	r2, r1
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x410>
 8002596:	e0c5      	b.n	8002724 <__aeabi_dsub+0x59c>
 8002598:	4663      	mov	r3, ip
 800259a:	18c5      	adds	r5, r0, r3
 800259c:	468c      	mov	ip, r1
 800259e:	4285      	cmp	r5, r0
 80025a0:	4180      	sbcs	r0, r0
 80025a2:	4464      	add	r4, ip
 80025a4:	4240      	negs	r0, r0
 80025a6:	1824      	adds	r4, r4, r0
 80025a8:	0223      	lsls	r3, r4, #8
 80025aa:	d502      	bpl.n	80025b2 <__aeabi_dsub+0x42a>
 80025ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002894 <__aeabi_dsub+0x70c>)
 80025ae:	3701      	adds	r7, #1
 80025b0:	401c      	ands	r4, r3
 80025b2:	46ba      	mov	sl, r7
 80025b4:	9503      	str	r5, [sp, #12]
 80025b6:	e7d5      	b.n	8002564 <__aeabi_dsub+0x3dc>
 80025b8:	4662      	mov	r2, ip
 80025ba:	1a85      	subs	r5, r0, r2
 80025bc:	42a8      	cmp	r0, r5
 80025be:	4192      	sbcs	r2, r2
 80025c0:	4252      	negs	r2, r2
 80025c2:	4691      	mov	r9, r2
 80025c4:	9b02      	ldr	r3, [sp, #8]
 80025c6:	1ae3      	subs	r3, r4, r3
 80025c8:	001a      	movs	r2, r3
 80025ca:	464b      	mov	r3, r9
 80025cc:	1ad2      	subs	r2, r2, r3
 80025ce:	0013      	movs	r3, r2
 80025d0:	4691      	mov	r9, r2
 80025d2:	021a      	lsls	r2, r3, #8
 80025d4:	d46c      	bmi.n	80026b0 <__aeabi_dsub+0x528>
 80025d6:	464a      	mov	r2, r9
 80025d8:	464c      	mov	r4, r9
 80025da:	432a      	orrs	r2, r5
 80025dc:	d000      	beq.n	80025e0 <__aeabi_dsub+0x458>
 80025de:	e63a      	b.n	8002256 <__aeabi_dsub+0xce>
 80025e0:	2600      	movs	r6, #0
 80025e2:	2400      	movs	r4, #0
 80025e4:	2500      	movs	r5, #0
 80025e6:	e678      	b.n	80022da <__aeabi_dsub+0x152>
 80025e8:	9902      	ldr	r1, [sp, #8]
 80025ea:	4653      	mov	r3, sl
 80025ec:	000d      	movs	r5, r1
 80025ee:	3a20      	subs	r2, #32
 80025f0:	40d5      	lsrs	r5, r2
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d006      	beq.n	8002604 <__aeabi_dsub+0x47c>
 80025f6:	2240      	movs	r2, #64	@ 0x40
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	000b      	movs	r3, r1
 80025fc:	4093      	lsls	r3, r2
 80025fe:	4662      	mov	r2, ip
 8002600:	431a      	orrs	r2, r3
 8002602:	4693      	mov	fp, r2
 8002604:	465b      	mov	r3, fp
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	4193      	sbcs	r3, r2
 800260a:	431d      	orrs	r5, r3
 800260c:	e619      	b.n	8002242 <__aeabi_dsub+0xba>
 800260e:	4653      	mov	r3, sl
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x490>
 8002616:	e0c6      	b.n	80027a6 <__aeabi_dsub+0x61e>
 8002618:	4e9d      	ldr	r6, [pc, #628]	@ (8002890 <__aeabi_dsub+0x708>)
 800261a:	45b2      	cmp	sl, r6
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x498>
 800261e:	e6bd      	b.n	800239c <__aeabi_dsub+0x214>
 8002620:	4688      	mov	r8, r1
 8002622:	000e      	movs	r6, r1
 8002624:	2501      	movs	r5, #1
 8002626:	2a38      	cmp	r2, #56	@ 0x38
 8002628:	dc10      	bgt.n	800264c <__aeabi_dsub+0x4c4>
 800262a:	2a1f      	cmp	r2, #31
 800262c:	dc7f      	bgt.n	800272e <__aeabi_dsub+0x5a6>
 800262e:	2120      	movs	r1, #32
 8002630:	0025      	movs	r5, r4
 8002632:	1a89      	subs	r1, r1, r2
 8002634:	0007      	movs	r7, r0
 8002636:	4088      	lsls	r0, r1
 8002638:	408d      	lsls	r5, r1
 800263a:	40d7      	lsrs	r7, r2
 800263c:	40d4      	lsrs	r4, r2
 800263e:	1e41      	subs	r1, r0, #1
 8002640:	4188      	sbcs	r0, r1
 8002642:	9b02      	ldr	r3, [sp, #8]
 8002644:	433d      	orrs	r5, r7
 8002646:	1b1b      	subs	r3, r3, r4
 8002648:	4305      	orrs	r5, r0
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	4662      	mov	r2, ip
 800264e:	1b55      	subs	r5, r2, r5
 8002650:	45ac      	cmp	ip, r5
 8002652:	4192      	sbcs	r2, r2
 8002654:	9b02      	ldr	r3, [sp, #8]
 8002656:	4252      	negs	r2, r2
 8002658:	464f      	mov	r7, r9
 800265a:	1a9c      	subs	r4, r3, r2
 800265c:	e5f6      	b.n	800224c <__aeabi_dsub+0xc4>
 800265e:	2d00      	cmp	r5, #0
 8002660:	d000      	beq.n	8002664 <__aeabi_dsub+0x4dc>
 8002662:	e0b7      	b.n	80027d4 <__aeabi_dsub+0x64c>
 8002664:	2a00      	cmp	r2, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x4e2>
 8002668:	e0f0      	b.n	800284c <__aeabi_dsub+0x6c4>
 800266a:	2601      	movs	r6, #1
 800266c:	400e      	ands	r6, r1
 800266e:	4663      	mov	r3, ip
 8002670:	9802      	ldr	r0, [sp, #8]
 8002672:	08d9      	lsrs	r1, r3, #3
 8002674:	0742      	lsls	r2, r0, #29
 8002676:	430a      	orrs	r2, r1
 8002678:	08c4      	lsrs	r4, r0, #3
 800267a:	e696      	b.n	80023aa <__aeabi_dsub+0x222>
 800267c:	4c85      	ldr	r4, [pc, #532]	@ (8002894 <__aeabi_dsub+0x70c>)
 800267e:	1aff      	subs	r7, r7, r3
 8002680:	4014      	ands	r4, r2
 8002682:	0762      	lsls	r2, r4, #29
 8002684:	08e4      	lsrs	r4, r4, #3
 8002686:	e760      	b.n	800254a <__aeabi_dsub+0x3c2>
 8002688:	4981      	ldr	r1, [pc, #516]	@ (8002890 <__aeabi_dsub+0x708>)
 800268a:	428a      	cmp	r2, r1
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x508>
 800268e:	e0c9      	b.n	8002824 <__aeabi_dsub+0x69c>
 8002690:	4663      	mov	r3, ip
 8002692:	18c1      	adds	r1, r0, r3
 8002694:	4281      	cmp	r1, r0
 8002696:	4180      	sbcs	r0, r0
 8002698:	9b02      	ldr	r3, [sp, #8]
 800269a:	4240      	negs	r0, r0
 800269c:	18e3      	adds	r3, r4, r3
 800269e:	181b      	adds	r3, r3, r0
 80026a0:	07dd      	lsls	r5, r3, #31
 80026a2:	085c      	lsrs	r4, r3, #1
 80026a4:	2307      	movs	r3, #7
 80026a6:	0849      	lsrs	r1, r1, #1
 80026a8:	430d      	orrs	r5, r1
 80026aa:	0017      	movs	r7, r2
 80026ac:	402b      	ands	r3, r5
 80026ae:	e710      	b.n	80024d2 <__aeabi_dsub+0x34a>
 80026b0:	4663      	mov	r3, ip
 80026b2:	1a1d      	subs	r5, r3, r0
 80026b4:	45ac      	cmp	ip, r5
 80026b6:	4192      	sbcs	r2, r2
 80026b8:	2601      	movs	r6, #1
 80026ba:	9b02      	ldr	r3, [sp, #8]
 80026bc:	4252      	negs	r2, r2
 80026be:	1b1c      	subs	r4, r3, r4
 80026c0:	4688      	mov	r8, r1
 80026c2:	1aa4      	subs	r4, r4, r2
 80026c4:	400e      	ands	r6, r1
 80026c6:	e5c6      	b.n	8002256 <__aeabi_dsub+0xce>
 80026c8:	4663      	mov	r3, ip
 80026ca:	18c5      	adds	r5, r0, r3
 80026cc:	9b02      	ldr	r3, [sp, #8]
 80026ce:	4285      	cmp	r5, r0
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	469c      	mov	ip, r3
 80026d4:	4240      	negs	r0, r0
 80026d6:	4464      	add	r4, ip
 80026d8:	1824      	adds	r4, r4, r0
 80026da:	2701      	movs	r7, #1
 80026dc:	0223      	lsls	r3, r4, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0x55a>
 80026e0:	e6f5      	b.n	80024ce <__aeabi_dsub+0x346>
 80026e2:	2702      	movs	r7, #2
 80026e4:	e641      	b.n	800236a <__aeabi_dsub+0x1e2>
 80026e6:	4663      	mov	r3, ip
 80026e8:	1ac5      	subs	r5, r0, r3
 80026ea:	42a8      	cmp	r0, r5
 80026ec:	4180      	sbcs	r0, r0
 80026ee:	9b02      	ldr	r3, [sp, #8]
 80026f0:	4240      	negs	r0, r0
 80026f2:	1ae4      	subs	r4, r4, r3
 80026f4:	2701      	movs	r7, #1
 80026f6:	1a24      	subs	r4, r4, r0
 80026f8:	e5a8      	b.n	800224c <__aeabi_dsub+0xc4>
 80026fa:	9d02      	ldr	r5, [sp, #8]
 80026fc:	4652      	mov	r2, sl
 80026fe:	002b      	movs	r3, r5
 8002700:	3a20      	subs	r2, #32
 8002702:	40d3      	lsrs	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	4653      	mov	r3, sl
 8002708:	2b20      	cmp	r3, #32
 800270a:	d006      	beq.n	800271a <__aeabi_dsub+0x592>
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	002b      	movs	r3, r5
 8002712:	4093      	lsls	r3, r2
 8002714:	4662      	mov	r2, ip
 8002716:	431a      	orrs	r2, r3
 8002718:	4693      	mov	fp, r2
 800271a:	465d      	mov	r5, fp
 800271c:	1e6b      	subs	r3, r5, #1
 800271e:	419d      	sbcs	r5, r3
 8002720:	430d      	orrs	r5, r1
 8002722:	e615      	b.n	8002350 <__aeabi_dsub+0x1c8>
 8002724:	0762      	lsls	r2, r4, #29
 8002726:	08c0      	lsrs	r0, r0, #3
 8002728:	4302      	orrs	r2, r0
 800272a:	08e4      	lsrs	r4, r4, #3
 800272c:	e70d      	b.n	800254a <__aeabi_dsub+0x3c2>
 800272e:	0011      	movs	r1, r2
 8002730:	0027      	movs	r7, r4
 8002732:	3920      	subs	r1, #32
 8002734:	40cf      	lsrs	r7, r1
 8002736:	2a20      	cmp	r2, #32
 8002738:	d005      	beq.n	8002746 <__aeabi_dsub+0x5be>
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	1a8a      	subs	r2, r1, r2
 800273e:	4094      	lsls	r4, r2
 8002740:	0025      	movs	r5, r4
 8002742:	4305      	orrs	r5, r0
 8002744:	9503      	str	r5, [sp, #12]
 8002746:	9d03      	ldr	r5, [sp, #12]
 8002748:	1e6a      	subs	r2, r5, #1
 800274a:	4195      	sbcs	r5, r2
 800274c:	433d      	orrs	r5, r7
 800274e:	e77d      	b.n	800264c <__aeabi_dsub+0x4c4>
 8002750:	2a00      	cmp	r2, #0
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x5ce>
 8002754:	e744      	b.n	80025e0 <__aeabi_dsub+0x458>
 8002756:	2601      	movs	r6, #1
 8002758:	400e      	ands	r6, r1
 800275a:	4663      	mov	r3, ip
 800275c:	08d9      	lsrs	r1, r3, #3
 800275e:	9b02      	ldr	r3, [sp, #8]
 8002760:	075a      	lsls	r2, r3, #29
 8002762:	430a      	orrs	r2, r1
 8002764:	08dc      	lsrs	r4, r3, #3
 8002766:	e6f0      	b.n	800254a <__aeabi_dsub+0x3c2>
 8002768:	2a00      	cmp	r2, #0
 800276a:	d028      	beq.n	80027be <__aeabi_dsub+0x636>
 800276c:	4662      	mov	r2, ip
 800276e:	9f02      	ldr	r7, [sp, #8]
 8002770:	08c0      	lsrs	r0, r0, #3
 8002772:	433a      	orrs	r2, r7
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x5f0>
 8002776:	e6dc      	b.n	8002532 <__aeabi_dsub+0x3aa>
 8002778:	0762      	lsls	r2, r4, #29
 800277a:	4310      	orrs	r0, r2
 800277c:	2280      	movs	r2, #128	@ 0x80
 800277e:	08e4      	lsrs	r4, r4, #3
 8002780:	0312      	lsls	r2, r2, #12
 8002782:	4214      	tst	r4, r2
 8002784:	d009      	beq.n	800279a <__aeabi_dsub+0x612>
 8002786:	08fd      	lsrs	r5, r7, #3
 8002788:	4215      	tst	r5, r2
 800278a:	d106      	bne.n	800279a <__aeabi_dsub+0x612>
 800278c:	4663      	mov	r3, ip
 800278e:	2601      	movs	r6, #1
 8002790:	002c      	movs	r4, r5
 8002792:	08d8      	lsrs	r0, r3, #3
 8002794:	077b      	lsls	r3, r7, #29
 8002796:	4318      	orrs	r0, r3
 8002798:	400e      	ands	r6, r1
 800279a:	0f42      	lsrs	r2, r0, #29
 800279c:	00c0      	lsls	r0, r0, #3
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0752      	lsls	r2, r2, #29
 80027a2:	4302      	orrs	r2, r0
 80027a4:	e601      	b.n	80023aa <__aeabi_dsub+0x222>
 80027a6:	4663      	mov	r3, ip
 80027a8:	1a1d      	subs	r5, r3, r0
 80027aa:	45ac      	cmp	ip, r5
 80027ac:	4192      	sbcs	r2, r2
 80027ae:	9b02      	ldr	r3, [sp, #8]
 80027b0:	4252      	negs	r2, r2
 80027b2:	1b1c      	subs	r4, r3, r4
 80027b4:	000e      	movs	r6, r1
 80027b6:	4688      	mov	r8, r1
 80027b8:	2701      	movs	r7, #1
 80027ba:	1aa4      	subs	r4, r4, r2
 80027bc:	e546      	b.n	800224c <__aeabi_dsub+0xc4>
 80027be:	4663      	mov	r3, ip
 80027c0:	08d9      	lsrs	r1, r3, #3
 80027c2:	9b02      	ldr	r3, [sp, #8]
 80027c4:	075a      	lsls	r2, r3, #29
 80027c6:	430a      	orrs	r2, r1
 80027c8:	08dc      	lsrs	r4, r3, #3
 80027ca:	e5ee      	b.n	80023aa <__aeabi_dsub+0x222>
 80027cc:	4663      	mov	r3, ip
 80027ce:	9c02      	ldr	r4, [sp, #8]
 80027d0:	9303      	str	r3, [sp, #12]
 80027d2:	e6c7      	b.n	8002564 <__aeabi_dsub+0x3dc>
 80027d4:	08c0      	lsrs	r0, r0, #3
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x654>
 80027da:	e6aa      	b.n	8002532 <__aeabi_dsub+0x3aa>
 80027dc:	0762      	lsls	r2, r4, #29
 80027de:	4310      	orrs	r0, r2
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	08e4      	lsrs	r4, r4, #3
 80027e4:	0312      	lsls	r2, r2, #12
 80027e6:	4214      	tst	r4, r2
 80027e8:	d0d7      	beq.n	800279a <__aeabi_dsub+0x612>
 80027ea:	9f02      	ldr	r7, [sp, #8]
 80027ec:	08fd      	lsrs	r5, r7, #3
 80027ee:	4215      	tst	r5, r2
 80027f0:	d1d3      	bne.n	800279a <__aeabi_dsub+0x612>
 80027f2:	4663      	mov	r3, ip
 80027f4:	2601      	movs	r6, #1
 80027f6:	08d8      	lsrs	r0, r3, #3
 80027f8:	077b      	lsls	r3, r7, #29
 80027fa:	002c      	movs	r4, r5
 80027fc:	4318      	orrs	r0, r3
 80027fe:	400e      	ands	r6, r1
 8002800:	e7cb      	b.n	800279a <__aeabi_dsub+0x612>
 8002802:	000a      	movs	r2, r1
 8002804:	0027      	movs	r7, r4
 8002806:	3a20      	subs	r2, #32
 8002808:	40d7      	lsrs	r7, r2
 800280a:	2920      	cmp	r1, #32
 800280c:	d005      	beq.n	800281a <__aeabi_dsub+0x692>
 800280e:	2240      	movs	r2, #64	@ 0x40
 8002810:	1a52      	subs	r2, r2, r1
 8002812:	4094      	lsls	r4, r2
 8002814:	0025      	movs	r5, r4
 8002816:	4305      	orrs	r5, r0
 8002818:	9503      	str	r5, [sp, #12]
 800281a:	9d03      	ldr	r5, [sp, #12]
 800281c:	1e6a      	subs	r2, r5, #1
 800281e:	4195      	sbcs	r5, r2
 8002820:	432f      	orrs	r7, r5
 8002822:	e610      	b.n	8002446 <__aeabi_dsub+0x2be>
 8002824:	0014      	movs	r4, r2
 8002826:	2500      	movs	r5, #0
 8002828:	2200      	movs	r2, #0
 800282a:	e556      	b.n	80022da <__aeabi_dsub+0x152>
 800282c:	9b02      	ldr	r3, [sp, #8]
 800282e:	4460      	add	r0, ip
 8002830:	4699      	mov	r9, r3
 8002832:	4560      	cmp	r0, ip
 8002834:	4192      	sbcs	r2, r2
 8002836:	444c      	add	r4, r9
 8002838:	4252      	negs	r2, r2
 800283a:	0005      	movs	r5, r0
 800283c:	18a4      	adds	r4, r4, r2
 800283e:	e74c      	b.n	80026da <__aeabi_dsub+0x552>
 8002840:	001a      	movs	r2, r3
 8002842:	001c      	movs	r4, r3
 8002844:	432a      	orrs	r2, r5
 8002846:	d000      	beq.n	800284a <__aeabi_dsub+0x6c2>
 8002848:	e6b3      	b.n	80025b2 <__aeabi_dsub+0x42a>
 800284a:	e6c9      	b.n	80025e0 <__aeabi_dsub+0x458>
 800284c:	2480      	movs	r4, #128	@ 0x80
 800284e:	2600      	movs	r6, #0
 8002850:	0324      	lsls	r4, r4, #12
 8002852:	e5ae      	b.n	80023b2 <__aeabi_dsub+0x22a>
 8002854:	2120      	movs	r1, #32
 8002856:	2500      	movs	r5, #0
 8002858:	1a09      	subs	r1, r1, r0
 800285a:	e517      	b.n	800228c <__aeabi_dsub+0x104>
 800285c:	2200      	movs	r2, #0
 800285e:	2500      	movs	r5, #0
 8002860:	4c0b      	ldr	r4, [pc, #44]	@ (8002890 <__aeabi_dsub+0x708>)
 8002862:	e53a      	b.n	80022da <__aeabi_dsub+0x152>
 8002864:	2d00      	cmp	r5, #0
 8002866:	d100      	bne.n	800286a <__aeabi_dsub+0x6e2>
 8002868:	e5f6      	b.n	8002458 <__aeabi_dsub+0x2d0>
 800286a:	464b      	mov	r3, r9
 800286c:	1bda      	subs	r2, r3, r7
 800286e:	4692      	mov	sl, r2
 8002870:	2f00      	cmp	r7, #0
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x6ee>
 8002874:	e66f      	b.n	8002556 <__aeabi_dsub+0x3ce>
 8002876:	2a38      	cmp	r2, #56	@ 0x38
 8002878:	dc05      	bgt.n	8002886 <__aeabi_dsub+0x6fe>
 800287a:	2680      	movs	r6, #128	@ 0x80
 800287c:	0436      	lsls	r6, r6, #16
 800287e:	4334      	orrs	r4, r6
 8002880:	4688      	mov	r8, r1
 8002882:	000e      	movs	r6, r1
 8002884:	e6d1      	b.n	800262a <__aeabi_dsub+0x4a2>
 8002886:	4688      	mov	r8, r1
 8002888:	000e      	movs	r6, r1
 800288a:	2501      	movs	r5, #1
 800288c:	e6de      	b.n	800264c <__aeabi_dsub+0x4c4>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	000007ff 	.word	0x000007ff
 8002894:	ff7fffff 	.word	0xff7fffff
 8002898:	000007fe 	.word	0x000007fe
 800289c:	2d00      	cmp	r5, #0
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x71a>
 80028a0:	e668      	b.n	8002574 <__aeabi_dsub+0x3ec>
 80028a2:	464b      	mov	r3, r9
 80028a4:	1bd9      	subs	r1, r3, r7
 80028a6:	2f00      	cmp	r7, #0
 80028a8:	d101      	bne.n	80028ae <__aeabi_dsub+0x726>
 80028aa:	468a      	mov	sl, r1
 80028ac:	e5a7      	b.n	80023fe <__aeabi_dsub+0x276>
 80028ae:	2701      	movs	r7, #1
 80028b0:	2938      	cmp	r1, #56	@ 0x38
 80028b2:	dd00      	ble.n	80028b6 <__aeabi_dsub+0x72e>
 80028b4:	e5c7      	b.n	8002446 <__aeabi_dsub+0x2be>
 80028b6:	2280      	movs	r2, #128	@ 0x80
 80028b8:	0412      	lsls	r2, r2, #16
 80028ba:	4314      	orrs	r4, r2
 80028bc:	e5af      	b.n	800241e <__aeabi_dsub+0x296>
 80028be:	46c0      	nop			@ (mov r8, r8)

080028c0 <__aeabi_dcmpun>:
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	46c6      	mov	lr, r8
 80028c4:	031e      	lsls	r6, r3, #12
 80028c6:	0b36      	lsrs	r6, r6, #12
 80028c8:	46b0      	mov	r8, r6
 80028ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002900 <__aeabi_dcmpun+0x40>)
 80028cc:	030c      	lsls	r4, r1, #12
 80028ce:	004d      	lsls	r5, r1, #1
 80028d0:	005f      	lsls	r7, r3, #1
 80028d2:	b500      	push	{lr}
 80028d4:	0b24      	lsrs	r4, r4, #12
 80028d6:	0d6d      	lsrs	r5, r5, #21
 80028d8:	0d7f      	lsrs	r7, r7, #21
 80028da:	42b5      	cmp	r5, r6
 80028dc:	d00b      	beq.n	80028f6 <__aeabi_dcmpun+0x36>
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__aeabi_dcmpun+0x40>)
 80028e0:	2000      	movs	r0, #0
 80028e2:	428f      	cmp	r7, r1
 80028e4:	d104      	bne.n	80028f0 <__aeabi_dcmpun+0x30>
 80028e6:	4646      	mov	r6, r8
 80028e8:	4316      	orrs	r6, r2
 80028ea:	0030      	movs	r0, r6
 80028ec:	1e43      	subs	r3, r0, #1
 80028ee:	4198      	sbcs	r0, r3
 80028f0:	bc80      	pop	{r7}
 80028f2:	46b8      	mov	r8, r7
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f6:	4304      	orrs	r4, r0
 80028f8:	2001      	movs	r0, #1
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d1f8      	bne.n	80028f0 <__aeabi_dcmpun+0x30>
 80028fe:	e7ee      	b.n	80028de <__aeabi_dcmpun+0x1e>
 8002900:	000007ff 	.word	0x000007ff

08002904 <__aeabi_d2iz>:
 8002904:	000b      	movs	r3, r1
 8002906:	0002      	movs	r2, r0
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4d16      	ldr	r5, [pc, #88]	@ (8002964 <__aeabi_d2iz+0x60>)
 800290c:	030c      	lsls	r4, r1, #12
 800290e:	b082      	sub	sp, #8
 8002910:	0049      	lsls	r1, r1, #1
 8002912:	2000      	movs	r0, #0
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	0b24      	lsrs	r4, r4, #12
 800291a:	0d49      	lsrs	r1, r1, #21
 800291c:	0fde      	lsrs	r6, r3, #31
 800291e:	42a9      	cmp	r1, r5
 8002920:	dd04      	ble.n	800292c <__aeabi_d2iz+0x28>
 8002922:	4811      	ldr	r0, [pc, #68]	@ (8002968 <__aeabi_d2iz+0x64>)
 8002924:	4281      	cmp	r1, r0
 8002926:	dd03      	ble.n	8002930 <__aeabi_d2iz+0x2c>
 8002928:	4b10      	ldr	r3, [pc, #64]	@ (800296c <__aeabi_d2iz+0x68>)
 800292a:	18f0      	adds	r0, r6, r3
 800292c:	b002      	add	sp, #8
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	2080      	movs	r0, #128	@ 0x80
 8002932:	0340      	lsls	r0, r0, #13
 8002934:	4320      	orrs	r0, r4
 8002936:	4c0e      	ldr	r4, [pc, #56]	@ (8002970 <__aeabi_d2iz+0x6c>)
 8002938:	1a64      	subs	r4, r4, r1
 800293a:	2c1f      	cmp	r4, #31
 800293c:	dd08      	ble.n	8002950 <__aeabi_d2iz+0x4c>
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <__aeabi_d2iz+0x70>)
 8002940:	1a5b      	subs	r3, r3, r1
 8002942:	40d8      	lsrs	r0, r3
 8002944:	0003      	movs	r3, r0
 8002946:	4258      	negs	r0, r3
 8002948:	2e00      	cmp	r6, #0
 800294a:	d1ef      	bne.n	800292c <__aeabi_d2iz+0x28>
 800294c:	0018      	movs	r0, r3
 800294e:	e7ed      	b.n	800292c <__aeabi_d2iz+0x28>
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <__aeabi_d2iz+0x74>)
 8002952:	9a00      	ldr	r2, [sp, #0]
 8002954:	469c      	mov	ip, r3
 8002956:	0003      	movs	r3, r0
 8002958:	4461      	add	r1, ip
 800295a:	408b      	lsls	r3, r1
 800295c:	40e2      	lsrs	r2, r4
 800295e:	4313      	orrs	r3, r2
 8002960:	e7f1      	b.n	8002946 <__aeabi_d2iz+0x42>
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	000003fe 	.word	0x000003fe
 8002968:	0000041d 	.word	0x0000041d
 800296c:	7fffffff 	.word	0x7fffffff
 8002970:	00000433 	.word	0x00000433
 8002974:	00000413 	.word	0x00000413
 8002978:	fffffbed 	.word	0xfffffbed

0800297c <__aeabi_i2d>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	2800      	cmp	r0, #0
 8002980:	d016      	beq.n	80029b0 <__aeabi_i2d+0x34>
 8002982:	17c3      	asrs	r3, r0, #31
 8002984:	18c5      	adds	r5, r0, r3
 8002986:	405d      	eors	r5, r3
 8002988:	0fc4      	lsrs	r4, r0, #31
 800298a:	0028      	movs	r0, r5
 800298c:	f000 f914 	bl	8002bb8 <__clzsi2>
 8002990:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <__aeabi_i2d+0x58>)
 8002992:	1a1b      	subs	r3, r3, r0
 8002994:	055b      	lsls	r3, r3, #21
 8002996:	0d5b      	lsrs	r3, r3, #21
 8002998:	280a      	cmp	r0, #10
 800299a:	dc14      	bgt.n	80029c6 <__aeabi_i2d+0x4a>
 800299c:	0002      	movs	r2, r0
 800299e:	002e      	movs	r6, r5
 80029a0:	3215      	adds	r2, #21
 80029a2:	4096      	lsls	r6, r2
 80029a4:	220b      	movs	r2, #11
 80029a6:	1a12      	subs	r2, r2, r0
 80029a8:	40d5      	lsrs	r5, r2
 80029aa:	032d      	lsls	r5, r5, #12
 80029ac:	0b2d      	lsrs	r5, r5, #12
 80029ae:	e003      	b.n	80029b8 <__aeabi_i2d+0x3c>
 80029b0:	2400      	movs	r4, #0
 80029b2:	2300      	movs	r3, #0
 80029b4:	2500      	movs	r5, #0
 80029b6:	2600      	movs	r6, #0
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	432b      	orrs	r3, r5
 80029bc:	07e4      	lsls	r4, r4, #31
 80029be:	4323      	orrs	r3, r4
 80029c0:	0030      	movs	r0, r6
 80029c2:	0019      	movs	r1, r3
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	380b      	subs	r0, #11
 80029c8:	4085      	lsls	r5, r0
 80029ca:	032d      	lsls	r5, r5, #12
 80029cc:	2600      	movs	r6, #0
 80029ce:	0b2d      	lsrs	r5, r5, #12
 80029d0:	e7f2      	b.n	80029b8 <__aeabi_i2d+0x3c>
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	0000041e 	.word	0x0000041e

080029d8 <__aeabi_ui2d>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	1e04      	subs	r4, r0, #0
 80029dc:	d010      	beq.n	8002a00 <__aeabi_ui2d+0x28>
 80029de:	f000 f8eb 	bl	8002bb8 <__clzsi2>
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <__aeabi_ui2d+0x44>)
 80029e4:	1a1b      	subs	r3, r3, r0
 80029e6:	055b      	lsls	r3, r3, #21
 80029e8:	0d5b      	lsrs	r3, r3, #21
 80029ea:	280a      	cmp	r0, #10
 80029ec:	dc0f      	bgt.n	8002a0e <__aeabi_ui2d+0x36>
 80029ee:	220b      	movs	r2, #11
 80029f0:	0021      	movs	r1, r4
 80029f2:	1a12      	subs	r2, r2, r0
 80029f4:	40d1      	lsrs	r1, r2
 80029f6:	3015      	adds	r0, #21
 80029f8:	030a      	lsls	r2, r1, #12
 80029fa:	4084      	lsls	r4, r0
 80029fc:	0b12      	lsrs	r2, r2, #12
 80029fe:	e001      	b.n	8002a04 <__aeabi_ui2d+0x2c>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2200      	movs	r2, #0
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	4313      	orrs	r3, r2
 8002a08:	0020      	movs	r0, r4
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	0022      	movs	r2, r4
 8002a10:	380b      	subs	r0, #11
 8002a12:	4082      	lsls	r2, r0
 8002a14:	0312      	lsls	r2, r2, #12
 8002a16:	2400      	movs	r4, #0
 8002a18:	0b12      	lsrs	r2, r2, #12
 8002a1a:	e7f3      	b.n	8002a04 <__aeabi_ui2d+0x2c>
 8002a1c:	0000041e 	.word	0x0000041e

08002a20 <__aeabi_f2d>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	0242      	lsls	r2, r0, #9
 8002a24:	0043      	lsls	r3, r0, #1
 8002a26:	0fc4      	lsrs	r4, r0, #31
 8002a28:	20fe      	movs	r0, #254	@ 0xfe
 8002a2a:	0e1b      	lsrs	r3, r3, #24
 8002a2c:	1c59      	adds	r1, r3, #1
 8002a2e:	0a55      	lsrs	r5, r2, #9
 8002a30:	4208      	tst	r0, r1
 8002a32:	d00c      	beq.n	8002a4e <__aeabi_f2d+0x2e>
 8002a34:	21e0      	movs	r1, #224	@ 0xe0
 8002a36:	0089      	lsls	r1, r1, #2
 8002a38:	468c      	mov	ip, r1
 8002a3a:	076d      	lsls	r5, r5, #29
 8002a3c:	0b12      	lsrs	r2, r2, #12
 8002a3e:	4463      	add	r3, ip
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	4313      	orrs	r3, r2
 8002a44:	07e4      	lsls	r4, r4, #31
 8002a46:	4323      	orrs	r3, r4
 8002a48:	0028      	movs	r0, r5
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d114      	bne.n	8002a7c <__aeabi_f2d+0x5c>
 8002a52:	2d00      	cmp	r5, #0
 8002a54:	d01b      	beq.n	8002a8e <__aeabi_f2d+0x6e>
 8002a56:	0028      	movs	r0, r5
 8002a58:	f000 f8ae 	bl	8002bb8 <__clzsi2>
 8002a5c:	280a      	cmp	r0, #10
 8002a5e:	dc1c      	bgt.n	8002a9a <__aeabi_f2d+0x7a>
 8002a60:	230b      	movs	r3, #11
 8002a62:	002a      	movs	r2, r5
 8002a64:	1a1b      	subs	r3, r3, r0
 8002a66:	40da      	lsrs	r2, r3
 8002a68:	0003      	movs	r3, r0
 8002a6a:	3315      	adds	r3, #21
 8002a6c:	409d      	lsls	r5, r3
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <__aeabi_f2d+0x88>)
 8002a70:	0312      	lsls	r2, r2, #12
 8002a72:	1a1b      	subs	r3, r3, r0
 8002a74:	055b      	lsls	r3, r3, #21
 8002a76:	0b12      	lsrs	r2, r2, #12
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	e7e1      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a7c:	2d00      	cmp	r5, #0
 8002a7e:	d009      	beq.n	8002a94 <__aeabi_f2d+0x74>
 8002a80:	0b13      	lsrs	r3, r2, #12
 8002a82:	2280      	movs	r2, #128	@ 0x80
 8002a84:	0312      	lsls	r2, r2, #12
 8002a86:	431a      	orrs	r2, r3
 8002a88:	076d      	lsls	r5, r5, #29
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <__aeabi_f2d+0x8c>)
 8002a8c:	e7d8      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2200      	movs	r2, #0
 8002a92:	e7d5      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a94:	2200      	movs	r2, #0
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <__aeabi_f2d+0x8c>)
 8002a98:	e7d2      	b.n	8002a40 <__aeabi_f2d+0x20>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	002a      	movs	r2, r5
 8002a9e:	3b0b      	subs	r3, #11
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	e7e3      	b.n	8002a6e <__aeabi_f2d+0x4e>
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	00000389 	.word	0x00000389
 8002aac:	000007ff 	.word	0x000007ff

08002ab0 <__aeabi_d2f>:
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	004b      	lsls	r3, r1, #1
 8002ab4:	030f      	lsls	r7, r1, #12
 8002ab6:	0d5b      	lsrs	r3, r3, #21
 8002ab8:	4c3b      	ldr	r4, [pc, #236]	@ (8002ba8 <__aeabi_d2f+0xf8>)
 8002aba:	0f45      	lsrs	r5, r0, #29
 8002abc:	b083      	sub	sp, #12
 8002abe:	0a7f      	lsrs	r7, r7, #9
 8002ac0:	1c5e      	adds	r6, r3, #1
 8002ac2:	432f      	orrs	r7, r5
 8002ac4:	9000      	str	r0, [sp, #0]
 8002ac6:	9101      	str	r1, [sp, #4]
 8002ac8:	0fca      	lsrs	r2, r1, #31
 8002aca:	00c5      	lsls	r5, r0, #3
 8002acc:	4226      	tst	r6, r4
 8002ace:	d00b      	beq.n	8002ae8 <__aeabi_d2f+0x38>
 8002ad0:	4936      	ldr	r1, [pc, #216]	@ (8002bac <__aeabi_d2f+0xfc>)
 8002ad2:	185c      	adds	r4, r3, r1
 8002ad4:	2cfe      	cmp	r4, #254	@ 0xfe
 8002ad6:	dd13      	ble.n	8002b00 <__aeabi_d2f+0x50>
 8002ad8:	20ff      	movs	r0, #255	@ 0xff
 8002ada:	2300      	movs	r3, #0
 8002adc:	05c0      	lsls	r0, r0, #23
 8002ade:	4318      	orrs	r0, r3
 8002ae0:	07d2      	lsls	r2, r2, #31
 8002ae2:	4310      	orrs	r0, r2
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <__aeabi_d2f+0x42>
 8002aec:	2000      	movs	r0, #0
 8002aee:	2300      	movs	r3, #0
 8002af0:	e7f4      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002af2:	433d      	orrs	r5, r7
 8002af4:	d0f0      	beq.n	8002ad8 <__aeabi_d2f+0x28>
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	03db      	lsls	r3, r3, #15
 8002afa:	20ff      	movs	r0, #255	@ 0xff
 8002afc:	433b      	orrs	r3, r7
 8002afe:	e7ed      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b00:	2c00      	cmp	r4, #0
 8002b02:	dd14      	ble.n	8002b2e <__aeabi_d2f+0x7e>
 8002b04:	9b00      	ldr	r3, [sp, #0]
 8002b06:	00ff      	lsls	r7, r7, #3
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	4183      	sbcs	r3, r0
 8002b0e:	0f69      	lsrs	r1, r5, #29
 8002b10:	433b      	orrs	r3, r7
 8002b12:	430b      	orrs	r3, r1
 8002b14:	0759      	lsls	r1, r3, #29
 8002b16:	d041      	beq.n	8002b9c <__aeabi_d2f+0xec>
 8002b18:	210f      	movs	r1, #15
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	2904      	cmp	r1, #4
 8002b1e:	d028      	beq.n	8002b72 <__aeabi_d2f+0xc2>
 8002b20:	3304      	adds	r3, #4
 8002b22:	0159      	lsls	r1, r3, #5
 8002b24:	d525      	bpl.n	8002b72 <__aeabi_d2f+0xc2>
 8002b26:	3401      	adds	r4, #1
 8002b28:	2300      	movs	r3, #0
 8002b2a:	b2e0      	uxtb	r0, r4
 8002b2c:	e7d6      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b2e:	0021      	movs	r1, r4
 8002b30:	3117      	adds	r1, #23
 8002b32:	dbdb      	blt.n	8002aec <__aeabi_d2f+0x3c>
 8002b34:	2180      	movs	r1, #128	@ 0x80
 8002b36:	201e      	movs	r0, #30
 8002b38:	0409      	lsls	r1, r1, #16
 8002b3a:	4339      	orrs	r1, r7
 8002b3c:	1b00      	subs	r0, r0, r4
 8002b3e:	281f      	cmp	r0, #31
 8002b40:	dd1b      	ble.n	8002b7a <__aeabi_d2f+0xca>
 8002b42:	2602      	movs	r6, #2
 8002b44:	4276      	negs	r6, r6
 8002b46:	1b34      	subs	r4, r6, r4
 8002b48:	000e      	movs	r6, r1
 8002b4a:	40e6      	lsrs	r6, r4
 8002b4c:	0034      	movs	r4, r6
 8002b4e:	2820      	cmp	r0, #32
 8002b50:	d004      	beq.n	8002b5c <__aeabi_d2f+0xac>
 8002b52:	4817      	ldr	r0, [pc, #92]	@ (8002bb0 <__aeabi_d2f+0x100>)
 8002b54:	4684      	mov	ip, r0
 8002b56:	4463      	add	r3, ip
 8002b58:	4099      	lsls	r1, r3
 8002b5a:	430d      	orrs	r5, r1
 8002b5c:	002b      	movs	r3, r5
 8002b5e:	1e59      	subs	r1, r3, #1
 8002b60:	418b      	sbcs	r3, r1
 8002b62:	4323      	orrs	r3, r4
 8002b64:	0759      	lsls	r1, r3, #29
 8002b66:	d015      	beq.n	8002b94 <__aeabi_d2f+0xe4>
 8002b68:	210f      	movs	r1, #15
 8002b6a:	2400      	movs	r4, #0
 8002b6c:	4019      	ands	r1, r3
 8002b6e:	2904      	cmp	r1, #4
 8002b70:	d117      	bne.n	8002ba2 <__aeabi_d2f+0xf2>
 8002b72:	019b      	lsls	r3, r3, #6
 8002b74:	0a5b      	lsrs	r3, r3, #9
 8002b76:	b2e0      	uxtb	r0, r4
 8002b78:	e7b0      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b7a:	4c0e      	ldr	r4, [pc, #56]	@ (8002bb4 <__aeabi_d2f+0x104>)
 8002b7c:	191c      	adds	r4, r3, r4
 8002b7e:	002b      	movs	r3, r5
 8002b80:	40a5      	lsls	r5, r4
 8002b82:	40c3      	lsrs	r3, r0
 8002b84:	40a1      	lsls	r1, r4
 8002b86:	1e68      	subs	r0, r5, #1
 8002b88:	4185      	sbcs	r5, r0
 8002b8a:	4329      	orrs	r1, r5
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	2400      	movs	r4, #0
 8002b90:	0759      	lsls	r1, r3, #29
 8002b92:	d1c1      	bne.n	8002b18 <__aeabi_d2f+0x68>
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	2000      	movs	r0, #0
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	e79f      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	b2e0      	uxtb	r0, r4
 8002ba0:	e79c      	b.n	8002adc <__aeabi_d2f+0x2c>
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	e7e5      	b.n	8002b72 <__aeabi_d2f+0xc2>
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	000007fe 	.word	0x000007fe
 8002bac:	fffffc80 	.word	0xfffffc80
 8002bb0:	fffffca2 	.word	0xfffffca2
 8002bb4:	fffffc82 	.word	0xfffffc82

08002bb8 <__clzsi2>:
 8002bb8:	211c      	movs	r1, #28
 8002bba:	2301      	movs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d301      	bcc.n	8002bc6 <__clzsi2+0xe>
 8002bc2:	0c00      	lsrs	r0, r0, #16
 8002bc4:	3910      	subs	r1, #16
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	4298      	cmp	r0, r3
 8002bca:	d301      	bcc.n	8002bd0 <__clzsi2+0x18>
 8002bcc:	0a00      	lsrs	r0, r0, #8
 8002bce:	3908      	subs	r1, #8
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	4298      	cmp	r0, r3
 8002bd4:	d301      	bcc.n	8002bda <__clzsi2+0x22>
 8002bd6:	0900      	lsrs	r0, r0, #4
 8002bd8:	3904      	subs	r1, #4
 8002bda:	a202      	add	r2, pc, #8	@ (adr r2, 8002be4 <__clzsi2+0x2c>)
 8002bdc:	5c10      	ldrb	r0, [r2, r0]
 8002bde:	1840      	adds	r0, r0, r1
 8002be0:	4770      	bx	lr
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	02020304 	.word	0x02020304
 8002be8:	01010101 	.word	0x01010101
	...

08002bf4 <DS18B20_Init>:
 *@param	Port_DS18B20	Port used for the DS18B20 sensor
 *@param	Pin_DS18B20		Pin used for the DS18B20 sensor
 *@retval	None
 */
void DS18B20_Init(TIM_HandleTypeDef Timer_DS18B20, GPIO_TypeDef* Port_DS18B20, uint16_t Pin_DS18B20)
{
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	b5b0      	push	{r4, r5, r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	2510      	movs	r5, #16
 8002bfc:	197c      	adds	r4, r7, r5
 8002bfe:	6020      	str	r0, [r4, #0]
 8002c00:	6061      	str	r1, [r4, #4]
 8002c02:	60a2      	str	r2, [r4, #8]
 8002c04:	60e3      	str	r3, [r4, #12]
	timer = Timer_DS18B20;
 8002c06:	4a0c      	ldr	r2, [pc, #48]	@ (8002c38 <DS18B20_Init+0x44>)
 8002c08:	002c      	movs	r4, r5
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	2348      	movs	r3, #72	@ 0x48
 8002c12:	001a      	movs	r2, r3
 8002c14:	f005 fc24 	bl	8008460 <memcpy>
	Port = Port_DS18B20;
 8002c18:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <DS18B20_Init+0x48>)
 8002c1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c1c:	601a      	str	r2, [r3, #0]
	Pin = Pin_DS18B20;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <DS18B20_Init+0x4c>)
 8002c20:	224c      	movs	r2, #76	@ 0x4c
 8002c22:	1912      	adds	r2, r2, r4
 8002c24:	19d2      	adds	r2, r2, r7
 8002c26:	8812      	ldrh	r2, [r2, #0]
 8002c28:	801a      	strh	r2, [r3, #0]
}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bcb0      	pop	{r4, r5, r7}
 8002c30:	bc08      	pop	{r3}
 8002c32:	b004      	add	sp, #16
 8002c34:	4718      	bx	r3
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	20000204 	.word	0x20000204
 8002c3c:	2000024c 	.word	0x2000024c
 8002c40:	20000250 	.word	0x20000250

08002c44 <delay>:
 * @brief	Wait the micro-seconds of the parameter.
 * @param	Value	that indicate the microseconds to wait
 * @retval	None
 */
static void delay ( uint16_t us )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	1dbb      	adds	r3, r7, #6
 8002c4e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);	//set the counter value a 0
 8002c50:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <delay+0x30>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&timer) < us);	//wait for the counter to reach the us input in the parameter us
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <delay+0x30>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d3f8      	bcc.n	8002c5a <delay+0x16>
}
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	20000204 	.word	0x20000204

08002c78 <Set_Pin_Input>:
 * @param	GPIOx		Port of the DS18B20 sensor
 * @param	GPIO_PIN	Pin of the DS18B20 sensor
 * @retval	None
 */
static void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN )
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	000a      	movs	r2, r1
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	801a      	strh	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c86:	240c      	movs	r4, #12
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	2314      	movs	r3, #20
 8002c8e:	001a      	movs	r2, r3
 8002c90:	2100      	movs	r1, #0
 8002c92:	f005 fb4b 	bl	800832c <memset>

	GPIO_InitStruct.Pin = GPIO_PIN;
 8002c96:	1cbb      	adds	r3, r7, #2
 8002c98:	881a      	ldrh	r2, [r3, #0]
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002caa:	193a      	adds	r2, r7, r4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f002 f8c1 	bl	8004e38 <HAL_GPIO_Init>
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b009      	add	sp, #36	@ 0x24
 8002cbc:	bd90      	pop	{r4, r7, pc}

08002cbe <Set_Pin_Output>:
 * @param	GPIOx		Port of the DS18B20 sensor
 * @param	GPIO_PIN	Pin of the DS18B20 sensor
 * @retval	None
 */
static void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN )
{
 8002cbe:	b590      	push	{r4, r7, lr}
 8002cc0:	b089      	sub	sp, #36	@ 0x24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	000a      	movs	r2, r1
 8002cc8:	1cbb      	adds	r3, r7, #2
 8002cca:	801a      	strh	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	240c      	movs	r4, #12
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f005 fb28 	bl	800832c <memset>

	GPIO_InitStruct.Pin = GPIO_PIN;
 8002cdc:	1cbb      	adds	r3, r7, #2
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002cf0:	193a      	adds	r2, r7, r4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0011      	movs	r1, r2
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f002 f89e 	bl	8004e38 <HAL_GPIO_Init>

}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b009      	add	sp, #36	@ 0x24
 8002d02:	bd90      	pop	{r4, r7, pc}

08002d04 <DS18B20_Start>:
 * 			with master.
 * @retval	Return value of presence of the DS18B20 sensor. If value=1,
 * 			detected sensor, but valure=0, the not detected sensor.
 */
static uint8_t DS18B20_Start ( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0

	uint8_t Response = 0;
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Port, Pin);
 8002d10:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <DS18B20_Start+0x84>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <DS18B20_Start+0x88>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	0019      	movs	r1, r3
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	f7ff ffcf 	bl	8002cbe <Set_Pin_Output>
	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <DS18B20_Start+0x84>)
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <DS18B20_Start+0x88>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	f002 fa11 	bl	8005152 <HAL_GPIO_WritePin>
	delay (500);
 8002d30:	23fa      	movs	r3, #250	@ 0xfa
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff ff85 	bl	8002c44 <delay>

	Set_Pin_Input(Port, Pin);
 8002d3a:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <DS18B20_Start+0x84>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <DS18B20_Start+0x88>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7ff ff97 	bl	8002c78 <Set_Pin_Input>

	delay (80);
 8002d4a:	2050      	movs	r0, #80	@ 0x50
 8002d4c:	f7ff ff7a 	bl	8002c44 <delay>

	if(!(HAL_GPIO_ReadPin(Port, Pin))) Response = 1;
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <DS18B20_Start+0x84>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <DS18B20_Start+0x88>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	0019      	movs	r1, r3
 8002d5a:	0010      	movs	r0, r2
 8002d5c:	f002 f9dc 	bl	8005118 <HAL_GPIO_ReadPin>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d103      	bne.n	8002d6c <DS18B20_Start+0x68>
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e002      	b.n	8002d72 <DS18B20_Start+0x6e>
	else Response = 0;
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]

	delay (400);
 8002d72:	23c8      	movs	r3, #200	@ 0xc8
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff ff64 	bl	8002c44 <delay>

	return Response;
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	781b      	ldrb	r3, [r3, #0]
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2000024c 	.word	0x2000024c
 8002d8c:	20000250 	.word	0x20000250

08002d90 <DS18B20_Write>:
 * @brief	Write a byte to the DS18B20 for start a process
 * @param	data	byte that indicate the process to start
 * @retval	None
 */
static void DS18B20_Write ( uint8_t data )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	0002      	movs	r2, r0
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	701a      	strb	r2, [r3, #0]

	Set_Pin_Output(Port, Pin);
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	0019      	movs	r1, r3
 8002da6:	0010      	movs	r0, r2
 8002da8:	f7ff ff89 	bl	8002cbe <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e044      	b.n	8002e3c <DS18B20_Write+0xac>
	{

		if ((data & (1<<i)) !=0 )	//if the bit is high
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	411a      	asrs	r2, r3
 8002dba:	0013      	movs	r3, r2
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d01e      	beq.n	8002e00 <DS18B20_Write+0x70>
		{

			//write 1
			Set_Pin_Output(Port, Pin);
 8002dc2:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f7ff ff76 	bl	8002cbe <Set_Pin_Output>
			HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	0019      	movs	r1, r3
 8002dde:	f002 f9b8 	bl	8005152 <HAL_GPIO_WritePin>
			delay (1);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7ff ff2e 	bl	8002c44 <delay>

			Set_Pin_Input(Port, Pin);
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b18      	ldr	r3, [pc, #96]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	0019      	movs	r1, r3
 8002df2:	0010      	movs	r0, r2
 8002df4:	f7ff ff40 	bl	8002c78 <Set_Pin_Input>
			delay (60);
 8002df8:	203c      	movs	r0, #60	@ 0x3c
 8002dfa:	f7ff ff23 	bl	8002c44 <delay>
 8002dfe:	e01a      	b.n	8002e36 <DS18B20_Write+0xa6>

		}else //if the bit is low
		{

			//write 0
			Set_Pin_Output(Port, Pin);
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	f7ff ff57 	bl	8002cbe <Set_Pin_Output>
			HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002e10:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f002 f999 	bl	8005152 <HAL_GPIO_WritePin>
			delay (60); //wait for 60 us
 8002e20:	203c      	movs	r0, #60	@ 0x3c
 8002e22:	f7ff ff0f 	bl	8002c44 <delay>

			Set_Pin_Input(Port, Pin);
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <DS18B20_Write+0xbc>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <DS18B20_Write+0xc0>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	0019      	movs	r1, r3
 8002e30:	0010      	movs	r0, r2
 8002e32:	f7ff ff21 	bl	8002c78 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b07      	cmp	r3, #7
 8002e40:	ddb7      	ble.n	8002db2 <DS18B20_Write+0x22>
		}
	}
}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000024c 	.word	0x2000024c
 8002e50:	20000250 	.word	0x20000250

08002e54 <DS18B20_Read>:
/*
 * @brief	Read byte of the DS18B20 sensor
 * @retval	Byte returned by the DS18B20 sensor
 */
static uint8_t DS18B20_Read (void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0

	uint8_t value = 0;
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
	Set_Pin_Input(Port, Pin);
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <DS18B20_Read+0xa8>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b26      	ldr	r3, [pc, #152]	@ (8002f00 <DS18B20_Read+0xac>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	0019      	movs	r1, r3
 8002e6a:	0010      	movs	r0, r2
 8002e6c:	f7ff ff04 	bl	8002c78 <Set_Pin_Input>

	for(int i=0; i<8; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	e039      	b.n	8002eea <DS18B20_Read+0x96>
	{
		Set_Pin_Output(Port, Pin);
 8002e76:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <DS18B20_Read+0xa8>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <DS18B20_Read+0xac>)
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f7ff ff1c 	bl	8002cbe <Set_Pin_Output>

		HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002e86:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <DS18B20_Read+0xa8>)
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <DS18B20_Read+0xac>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	0019      	movs	r1, r3
 8002e92:	f002 f95e 	bl	8005152 <HAL_GPIO_WritePin>
		delay (2);
 8002e96:	2002      	movs	r0, #2
 8002e98:	f7ff fed4 	bl	8002c44 <delay>

		Set_Pin_Input(Port, Pin);
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <DS18B20_Read+0xa8>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <DS18B20_Read+0xac>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	0010      	movs	r0, r2
 8002ea8:	f7ff fee6 	bl	8002c78 <Set_Pin_Input>
		delay (5);
 8002eac:	2005      	movs	r0, #5
 8002eae:	f7ff fec9 	bl	8002c44 <delay>
		if(HAL_GPIO_ReadPin(Port, Pin))
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <DS18B20_Read+0xa8>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <DS18B20_Read+0xac>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	0019      	movs	r1, r3
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	f002 f92b 	bl	8005118 <HAL_GPIO_ReadPin>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d00b      	beq.n	8002ede <DS18B20_Read+0x8a>
		{
			value |= 1<<i; //read=1
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	b25a      	sxtb	r2, r3
 8002ed0:	1dfb      	adds	r3, r7, #7
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b25a      	sxtb	r2, r3
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	701a      	strb	r2, [r3, #0]
		}
		delay (60);
 8002ede:	203c      	movs	r0, #60	@ 0x3c
 8002ee0:	f7ff feb0 	bl	8002c44 <delay>
	for(int i=0; i<8; i++)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b07      	cmp	r3, #7
 8002eee:	ddc2      	ble.n	8002e76 <DS18B20_Read+0x22>
	}
	return value;
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	781b      	ldrb	r3, [r3, #0]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	2000024c 	.word	0x2000024c
 8002f00:	20000250 	.word	0x20000250

08002f04 <convert_temperature>:
 * @param	byte_1	Byte #1 to convert
 * @param	byte_2	Byte #2 to convert
 * @retval	Decimal value of temperature
 */
static float convert_temperature(uint8_t byte_1, uint8_t byte_2)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	1dbb      	adds	r3, r7, #6
 8002f12:	1c0a      	adds	r2, r1, #0
 8002f14:	701a      	strb	r2, [r3, #0]
	uint16_t tempval = byte_2 << 8 | byte_1;
 8002f16:	1dbb      	adds	r3, r7, #6
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	210e      	movs	r1, #14
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	801a      	strh	r2, [r3, #0]
	float result_temp = (128.0/2048)*tempval;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff fd22 	bl	800297c <__aeabi_i2d>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <convert_temperature+0x58>)
 8002f3c:	f7fe fe5c 	bl	8001bf8 <__aeabi_dmul>
 8002f40:	0002      	movs	r2, r0
 8002f42:	000b      	movs	r3, r1
 8002f44:	0010      	movs	r0, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	f7ff fdb2 	bl	8002ab0 <__aeabi_d2f>
 8002f4c:	1c03      	adds	r3, r0, #0
 8002f4e:	60bb      	str	r3, [r7, #8]

	return result_temp;
 8002f50:	68bb      	ldr	r3, [r7, #8]
}
 8002f52:	1c18      	adds	r0, r3, #0
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b004      	add	sp, #16
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	3fb00000 	.word	0x3fb00000

08002f60 <DS18B20_Get_temperature>:
/*
 * @brief	Get the temperature value
 * @retval	float with the temperature value
 */
float DS18B20_Get_temperature( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 8002f64:	f7ff fece 	bl	8002d04 <DS18B20_Start>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <DS18B20_Get_temperature+0x78>)
 8002f6e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f001 fbab 	bl	80046cc <HAL_Delay>
	DS18B20_Write(SKIP_ROM);
 8002f76:	20cc      	movs	r0, #204	@ 0xcc
 8002f78:	f7ff ff0a 	bl	8002d90 <DS18B20_Write>
	DS18B20_Write(CONVERT_T);
 8002f7c:	2044      	movs	r0, #68	@ 0x44
 8002f7e:	f7ff ff07 	bl	8002d90 <DS18B20_Write>
	//HAL_Delay(50);

	Presence = DS18B20_Start();
 8002f82:	f7ff febf 	bl	8002d04 <DS18B20_Start>
 8002f86:	0003      	movs	r3, r0
 8002f88:	001a      	movs	r2, r3
 8002f8a:	4b13      	ldr	r3, [pc, #76]	@ (8002fd8 <DS18B20_Get_temperature+0x78>)
 8002f8c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f001 fb9c 	bl	80046cc <HAL_Delay>
	DS18B20_Write(SKIP_ROM);
 8002f94:	20cc      	movs	r0, #204	@ 0xcc
 8002f96:	f7ff fefb 	bl	8002d90 <DS18B20_Write>
	DS18B20_Write(READ_SCRATCHPAD);
 8002f9a:	20be      	movs	r0, #190	@ 0xbe
 8002f9c:	f7ff fef8 	bl	8002d90 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8002fa0:	f7ff ff58 	bl	8002e54 <DS18B20_Read>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <DS18B20_Get_temperature+0x7c>)
 8002faa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8002fac:	f7ff ff52 	bl	8002e54 <DS18B20_Read>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <DS18B20_Get_temperature+0x80>)
 8002fb6:	701a      	strb	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1, (const uint8_t *)&read, 6, 1000);
	//size_to_send = sprintf( (char *)&transmit_text, "presence %d el primer %d y el segundo %d \r\n", Presence, Temp_byte1, Temp_byte2);
	//HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, 1000);
	temp_dec = convert_temperature(Temp_byte1, Temp_byte2);
 8002fb8:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <DS18B20_Get_temperature+0x7c>)
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <DS18B20_Get_temperature+0x80>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	0010      	movs	r0, r2
 8002fc4:	f7ff ff9e 	bl	8002f04 <convert_temperature>
 8002fc8:	1c02      	adds	r2, r0, #0
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <DS18B20_Get_temperature+0x84>)
 8002fcc:	601a      	str	r2, [r3, #0]

	return temp_dec;
 8002fce:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <DS18B20_Get_temperature+0x84>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
}
 8002fd2:	1c18      	adds	r0, r3, #0
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000252 	.word	0x20000252
 8002fdc:	20000253 	.word	0x20000253
 8002fe0:	20000254 	.word	0x20000254
 8002fe4:	20000258 	.word	0x20000258

08002fe8 <RGB_Init>:
 * @brief	Set the ports and pins where the LEDs are connected
 * @param	Structure that contain the pins and ports of the LEDS
 * @retval 	None
 */
void RGB_Init(RGB_LEDS_struct_t parameters)
{
 8002fe8:	b084      	sub	sp, #16
 8002fea:	b5b0      	push	{r4, r5, r7, lr}
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	250c      	movs	r5, #12
 8002ff0:	1d2c      	adds	r4, r5, #4
 8002ff2:	19e4      	adds	r4, r4, r7
 8002ff4:	6020      	str	r0, [r4, #0]
 8002ff6:	6061      	str	r1, [r4, #4]
 8002ff8:	60a2      	str	r2, [r4, #8]
 8002ffa:	60e3      	str	r3, [r4, #12]
	parameters_LEDS = parameters;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <RGB_Init+0x38>)
 8002ffe:	1d2a      	adds	r2, r5, #4
 8003000:	19d2      	adds	r2, r2, r7
 8003002:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003004:	c313      	stmia	r3!, {r0, r1, r4}
 8003006:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003008:	c313      	stmia	r3!, {r0, r1, r4}
 800300a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800300c:	c313      	stmia	r3!, {r0, r1, r4}
 800300e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003010:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	bcb0      	pop	{r4, r5, r7}
 8003018:	bc08      	pop	{r3}
 800301a:	b004      	add	sp, #16
 800301c:	4718      	bx	r3
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	2000025c 	.word	0x2000025c

08003024 <RGB_RED_ON>:
 * @brief	Turn on the red LED of ID parameter
 * @param	Identifier of the LED to turn on
 * @retval	None
 */
void RGB_RED_ON(ID_LED ID)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	0002      	movs	r2, r0
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	701a      	strb	r2, [r3, #0]
	switch(ID)
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d01d      	beq.n	8003074 <RGB_RED_ON+0x50>
 8003038:	dc36      	bgt.n	80030a8 <RGB_RED_ON+0x84>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d033      	beq.n	80030a6 <RGB_RED_ON+0x82>
 800303e:	2b01      	cmp	r3, #1
 8003040:	d132      	bne.n	80030a8 <RGB_RED_ON+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_SET);
 8003042:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003048:	889b      	ldrh	r3, [r3, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	0019      	movs	r1, r3
 800304e:	f002 f880 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_RESET);
 8003052:	4b17      	ldr	r3, [pc, #92]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003054:	6898      	ldr	r0, [r3, #8]
 8003056:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003058:	899b      	ldrh	r3, [r3, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	0019      	movs	r1, r3
 800305e:	f002 f878 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_RESET);
 8003062:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003064:	6918      	ldr	r0, [r3, #16]
 8003066:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003068:	8a9b      	ldrh	r3, [r3, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	0019      	movs	r1, r3
 800306e:	f002 f870 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 8003072:	e019      	b.n	80030a8 <RGB_RED_ON+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_SET);
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003076:	6998      	ldr	r0, [r3, #24]
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <RGB_RED_ON+0x8c>)
 800307a:	8b9b      	ldrh	r3, [r3, #28]
 800307c:	2201      	movs	r2, #1
 800307e:	0019      	movs	r1, r3
 8003080:	f002 f867 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_RESET);
 8003084:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003086:	6a18      	ldr	r0, [r3, #32]
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <RGB_RED_ON+0x8c>)
 800308a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800308c:	2200      	movs	r2, #0
 800308e:	0019      	movs	r1, r3
 8003090:	f002 f85f 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_RESET);
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <RGB_RED_ON+0x8c>)
 8003096:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <RGB_RED_ON+0x8c>)
 800309a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800309c:	2200      	movs	r2, #0
 800309e:	0019      	movs	r1, r3
 80030a0:	f002 f857 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 80030a4:	e000      	b.n	80030a8 <RGB_RED_ON+0x84>
		case NONE:
			break;
 80030a6:	46c0      	nop			@ (mov r8, r8)
	}
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000025c 	.word	0x2000025c

080030b4 <RGB_GREEN_ON>:
 * @brief	Turn on the green LED of ID parameter
 * @param	Identifier of the LED to turn on
 * @retval	None
 */
void RGB_GREEN_ON(ID_LED ID)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	0002      	movs	r2, r0
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	701a      	strb	r2, [r3, #0]
	switch(ID)
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d01d      	beq.n	8003104 <RGB_GREEN_ON+0x50>
 80030c8:	dc36      	bgt.n	8003138 <RGB_GREEN_ON+0x84>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d033      	beq.n	8003136 <RGB_GREEN_ON+0x82>
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d132      	bne.n	8003138 <RGB_GREEN_ON+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_RESET);
 80030d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 80030d8:	889b      	ldrh	r3, [r3, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	0019      	movs	r1, r3
 80030de:	f002 f838 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_SET);
 80030e2:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 80030e4:	6898      	ldr	r0, [r3, #8]
 80030e6:	4b16      	ldr	r3, [pc, #88]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 80030e8:	899b      	ldrh	r3, [r3, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	0019      	movs	r1, r3
 80030ee:	f002 f830 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_RESET);
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 80030f4:	6918      	ldr	r0, [r3, #16]
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 80030f8:	8a9b      	ldrh	r3, [r3, #20]
 80030fa:	2200      	movs	r2, #0
 80030fc:	0019      	movs	r1, r3
 80030fe:	f002 f828 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 8003102:	e019      	b.n	8003138 <RGB_GREEN_ON+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_RESET);
 8003104:	4b0e      	ldr	r3, [pc, #56]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 8003106:	6998      	ldr	r0, [r3, #24]
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 800310a:	8b9b      	ldrh	r3, [r3, #28]
 800310c:	2200      	movs	r2, #0
 800310e:	0019      	movs	r1, r3
 8003110:	f002 f81f 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_SET);
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 8003116:	6a18      	ldr	r0, [r3, #32]
 8003118:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 800311a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800311c:	2201      	movs	r2, #1
 800311e:	0019      	movs	r1, r3
 8003120:	f002 f817 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_RESET);
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 8003126:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <RGB_GREEN_ON+0x8c>)
 800312a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800312c:	2200      	movs	r2, #0
 800312e:	0019      	movs	r1, r3
 8003130:	f002 f80f 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 8003134:	e000      	b.n	8003138 <RGB_GREEN_ON+0x84>
		case NONE:
			break;
 8003136:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003138:	46c0      	nop			@ (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2000025c 	.word	0x2000025c

08003144 <RGB_BLUE_ON>:
 * @brief	Turn on the blue LED of ID parameter
 * @param	Identifier of the LED to turn on
 * @retval	None
 */
void RGB_BLUE_ON(ID_LED ID)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	0002      	movs	r2, r0
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	701a      	strb	r2, [r3, #0]
	switch(ID)
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d01d      	beq.n	8003194 <RGB_BLUE_ON+0x50>
 8003158:	dc36      	bgt.n	80031c8 <RGB_BLUE_ON+0x84>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d033      	beq.n	80031c6 <RGB_BLUE_ON+0x82>
 800315e:	2b01      	cmp	r3, #1
 8003160:	d132      	bne.n	80031c8 <RGB_BLUE_ON+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_RESET);
 8003162:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003168:	889b      	ldrh	r3, [r3, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	0019      	movs	r1, r3
 800316e:	f001 fff0 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_RESET);
 8003172:	4b17      	ldr	r3, [pc, #92]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003174:	6898      	ldr	r0, [r3, #8]
 8003176:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003178:	899b      	ldrh	r3, [r3, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	0019      	movs	r1, r3
 800317e:	f001 ffe8 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_SET);
 8003182:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003184:	6918      	ldr	r0, [r3, #16]
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003188:	8a9b      	ldrh	r3, [r3, #20]
 800318a:	2201      	movs	r2, #1
 800318c:	0019      	movs	r1, r3
 800318e:	f001 ffe0 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 8003192:	e019      	b.n	80031c8 <RGB_BLUE_ON+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_RESET);
 8003194:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 8003196:	6998      	ldr	r0, [r3, #24]
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 800319a:	8b9b      	ldrh	r3, [r3, #28]
 800319c:	2200      	movs	r2, #0
 800319e:	0019      	movs	r1, r3
 80031a0:	f001 ffd7 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_RESET);
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 80031a6:	6a18      	ldr	r0, [r3, #32]
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 80031aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80031ac:	2200      	movs	r2, #0
 80031ae:	0019      	movs	r1, r3
 80031b0:	f001 ffcf 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_SET);
 80031b4:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 80031b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <RGB_BLUE_ON+0x8c>)
 80031ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031bc:	2201      	movs	r2, #1
 80031be:	0019      	movs	r1, r3
 80031c0:	f001 ffc7 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 80031c4:	e000      	b.n	80031c8 <RGB_BLUE_ON+0x84>
		case NONE:
			break;
 80031c6:	46c0      	nop			@ (mov r8, r8)
	}
}
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000025c 	.word	0x2000025c

080031d4 <RGB_ALL_OFF>:
 * @brief	Turn off all LEDs of ID parameter
 * @param	Identifier of the LEDs to turn off
 * @retval	None
 */
void RGB_ALL_OFF(ID_LED ID)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	0002      	movs	r2, r0
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	701a      	strb	r2, [r3, #0]
	switch(ID)
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d01d      	beq.n	8003224 <RGB_ALL_OFF+0x50>
 80031e8:	dc36      	bgt.n	8003258 <RGB_ALL_OFF+0x84>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d033      	beq.n	8003256 <RGB_ALL_OFF+0x82>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d132      	bne.n	8003258 <RGB_ALL_OFF+0x84>
	{
		case SPEED:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Speed_Port, parameters_LEDS.RED_Speed_Pin, GPIO_PIN_RESET);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	0019      	movs	r1, r3
 80031fe:	f001 ffa8 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Speed_Port, parameters_LEDS.GREEN_Speed_Pin, GPIO_PIN_RESET);
 8003202:	4b17      	ldr	r3, [pc, #92]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003204:	6898      	ldr	r0, [r3, #8]
 8003206:	4b16      	ldr	r3, [pc, #88]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003208:	899b      	ldrh	r3, [r3, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	0019      	movs	r1, r3
 800320e:	f001 ffa0 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Speed_Port, parameters_LEDS.BLUE_Speed_Pin, GPIO_PIN_RESET);
 8003212:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003214:	6918      	ldr	r0, [r3, #16]
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003218:	8a9b      	ldrh	r3, [r3, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	0019      	movs	r1, r3
 800321e:	f001 ff98 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 8003222:	e019      	b.n	8003258 <RGB_ALL_OFF+0x84>
		case TEMPERATURE:
			HAL_GPIO_WritePin(parameters_LEDS.RED_Temperature_Port, parameters_LEDS.RED_Temperature_Pin, GPIO_PIN_RESET);
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003226:	6998      	ldr	r0, [r3, #24]
 8003228:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 800322a:	8b9b      	ldrh	r3, [r3, #28]
 800322c:	2200      	movs	r2, #0
 800322e:	0019      	movs	r1, r3
 8003230:	f001 ff8f 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.GREEN_Temperature_Port, parameters_LEDS.GREEN_Temperature_Pin, GPIO_PIN_RESET);
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003236:	6a18      	ldr	r0, [r3, #32]
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 800323a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800323c:	2200      	movs	r2, #0
 800323e:	0019      	movs	r1, r3
 8003240:	f001 ff87 	bl	8005152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(parameters_LEDS.BLUE_Temperature_Port, parameters_LEDS.BLUE_Temperature_Pin, GPIO_PIN_RESET);
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 8003246:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <RGB_ALL_OFF+0x8c>)
 800324a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800324c:	2200      	movs	r2, #0
 800324e:	0019      	movs	r1, r3
 8003250:	f001 ff7f 	bl	8005152 <HAL_GPIO_WritePin>
			break;
 8003254:	e000      	b.n	8003258 <RGB_ALL_OFF+0x84>
		case NONE:
			break;
 8003256:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2000025c 	.word	0x2000025c

08003264 <HAL_UART_RxCpltCallback>:
//  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, MAX_TIME_WAIT_TO_TRANSMIT);
//  return len;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0c      	ldr	r2, [pc, #48]	@ (80032a4 <HAL_UART_RxCpltCallback+0x40>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d112      	bne.n	800329c <HAL_UART_RxCpltCallback+0x38>
		data_usart1_rx = USART1->RDR;
 8003276:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_UART_RxCpltCallback+0x40>)
 8003278:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800327a:	b29b      	uxth	r3, r3
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <HAL_UART_RxCpltCallback+0x44>)
 8003280:	701a      	strb	r2, [r3, #0]
		ring_buffer_write(&rb_usart1, data_usart1_rx);
 8003282:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_UART_RxCpltCallback+0x44>)
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <HAL_UART_RxCpltCallback+0x48>)
 8003288:	0011      	movs	r1, r2
 800328a:	0018      	movs	r0, r3
 800328c:	f000 fef8 	bl	8004080 <ring_buffer_write>
		HAL_UART_Receive_IT(&huart1, &data_usart1_rx, 1);
 8003290:	4905      	ldr	r1, [pc, #20]	@ (80032a8 <HAL_UART_RxCpltCallback+0x44>)
 8003292:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <HAL_UART_RxCpltCallback+0x4c>)
 8003294:	2201      	movs	r2, #1
 8003296:	0018      	movs	r0, r3
 8003298:	f003 f95b 	bl	8006552 <HAL_UART_Receive_IT>
	}
}
 800329c:	46c0      	nop			@ (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40013800 	.word	0x40013800
 80032a8:	20000418 	.word	0x20000418
 80032ac:	20000400 	.word	0x20000400
 80032b0:	20000378 	.word	0x20000378

080032b4 <set_value_received>:

void set_value_received()
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
	boolean_enum error_value = False;
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]

	if(!strcmp((const char *)&key, (const char *)ID_TEMP_MIN_RED_LED))
 80032c0:	4aa8      	ldr	r2, [pc, #672]	@ (8003564 <set_value_received+0x2b0>)
 80032c2:	4ba9      	ldr	r3, [pc, #676]	@ (8003568 <set_value_received+0x2b4>)
 80032c4:	0011      	movs	r1, r2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7fc ff1e 	bl	8000108 <strcmp>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d129      	bne.n	8003324 <set_value_received+0x70>
	{
		if((value_decimal >= max_green_temperature) && (value_decimal < max_red_temperature))
 80032d0:	4ba6      	ldr	r3, [pc, #664]	@ (800356c <set_value_received+0x2b8>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fb50 	bl	800297c <__aeabi_i2d>
 80032dc:	4ba4      	ldr	r3, [pc, #656]	@ (8003570 <set_value_received+0x2bc>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f7fd f8cd 	bl	8000480 <__aeabi_dcmple>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d018      	beq.n	800331c <set_value_received+0x68>
 80032ea:	4ba2      	ldr	r3, [pc, #648]	@ (8003574 <set_value_received+0x2c0>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff fb43 	bl	800297c <__aeabi_i2d>
 80032f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003570 <set_value_received+0x2bc>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f7fd f8ca 	bl	8000494 <__aeabi_dcmpgt>
 8003300:	1e03      	subs	r3, r0, #0
 8003302:	d00b      	beq.n	800331c <set_value_received+0x68>
		{
			min_red_temperature = (int8_t)value_decimal;
 8003304:	4b9a      	ldr	r3, [pc, #616]	@ (8003570 <set_value_received+0x2bc>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0010      	movs	r0, r2
 800330c:	0019      	movs	r1, r3
 800330e:	f7ff faf9 	bl	8002904 <__aeabi_d2iz>
 8003312:	0003      	movs	r3, r0
 8003314:	b25a      	sxtb	r2, r3
 8003316:	4b98      	ldr	r3, [pc, #608]	@ (8003578 <set_value_received+0x2c4>)
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e0f4      	b.n	8003506 <set_value_received+0x252>
		}else{error_value = True;}
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e0f0      	b.n	8003506 <set_value_received+0x252>

	}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MAX_RED_LED))
 8003324:	4a95      	ldr	r2, [pc, #596]	@ (800357c <set_value_received+0x2c8>)
 8003326:	4b90      	ldr	r3, [pc, #576]	@ (8003568 <set_value_received+0x2b4>)
 8003328:	0011      	movs	r1, r2
 800332a:	0018      	movs	r0, r3
 800332c:	f7fc feec 	bl	8000108 <strcmp>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d125      	bne.n	8003380 <set_value_received+0xcc>
		{
			if((value_decimal > min_red_temperature) && (value_decimal <= MAX_TEMPERATURE_MEASURE_DS18B20_SENSOR))
 8003334:	4b90      	ldr	r3, [pc, #576]	@ (8003578 <set_value_received+0x2c4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b25b      	sxtb	r3, r3
 800333a:	0018      	movs	r0, r3
 800333c:	f7ff fb1e 	bl	800297c <__aeabi_i2d>
 8003340:	4b8b      	ldr	r3, [pc, #556]	@ (8003570 <set_value_received+0x2bc>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f7fd f891 	bl	800046c <__aeabi_dcmplt>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d014      	beq.n	8003378 <set_value_received+0xc4>
 800334e:	4b88      	ldr	r3, [pc, #544]	@ (8003570 <set_value_received+0x2bc>)
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	4b8a      	ldr	r3, [pc, #552]	@ (8003580 <set_value_received+0x2cc>)
 8003358:	f7fd f892 	bl	8000480 <__aeabi_dcmple>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d00b      	beq.n	8003378 <set_value_received+0xc4>
			{
				max_red_temperature = (int8_t)value_decimal;
 8003360:	4b83      	ldr	r3, [pc, #524]	@ (8003570 <set_value_received+0x2bc>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0010      	movs	r0, r2
 8003368:	0019      	movs	r1, r3
 800336a:	f7ff facb 	bl	8002904 <__aeabi_d2iz>
 800336e:	0003      	movs	r3, r0
 8003370:	b25a      	sxtb	r2, r3
 8003372:	4b80      	ldr	r3, [pc, #512]	@ (8003574 <set_value_received+0x2c0>)
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e0c6      	b.n	8003506 <set_value_received+0x252>
			}else{error_value = True;}
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e0c2      	b.n	8003506 <set_value_received+0x252>
		}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MIN_GREEN_LED))
 8003380:	4a80      	ldr	r2, [pc, #512]	@ (8003584 <set_value_received+0x2d0>)
 8003382:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <set_value_received+0x2b4>)
 8003384:	0011      	movs	r1, r2
 8003386:	0018      	movs	r0, r3
 8003388:	f7fc febe 	bl	8000108 <strcmp>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d129      	bne.n	80033e4 <set_value_received+0x130>
			{
				if((value_decimal >= max_blue_temperature) && (value_decimal < max_green_temperature))
 8003390:	4b7d      	ldr	r3, [pc, #500]	@ (8003588 <set_value_received+0x2d4>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b25b      	sxtb	r3, r3
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff faf0 	bl	800297c <__aeabi_i2d>
 800339c:	4b74      	ldr	r3, [pc, #464]	@ (8003570 <set_value_received+0x2bc>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f7fd f86d 	bl	8000480 <__aeabi_dcmple>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d018      	beq.n	80033dc <set_value_received+0x128>
 80033aa:	4b70      	ldr	r3, [pc, #448]	@ (800356c <set_value_received+0x2b8>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fae3 	bl	800297c <__aeabi_i2d>
 80033b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003570 <set_value_received+0x2bc>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f7fd f86a 	bl	8000494 <__aeabi_dcmpgt>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d00b      	beq.n	80033dc <set_value_received+0x128>
				{
					min_green_temperature = (int8_t)value_decimal;
 80033c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <set_value_received+0x2bc>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0010      	movs	r0, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	f7ff fa99 	bl	8002904 <__aeabi_d2iz>
 80033d2:	0003      	movs	r3, r0
 80033d4:	b25a      	sxtb	r2, r3
 80033d6:	4b6d      	ldr	r3, [pc, #436]	@ (800358c <set_value_received+0x2d8>)
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e094      	b.n	8003506 <set_value_received+0x252>
				}else{error_value = True;}
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e090      	b.n	8003506 <set_value_received+0x252>
			}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MAX_GREEN_LED))
 80033e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003590 <set_value_received+0x2dc>)
 80033e6:	4b60      	ldr	r3, [pc, #384]	@ (8003568 <set_value_received+0x2b4>)
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7fc fe8c 	bl	8000108 <strcmp>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d129      	bne.n	8003448 <set_value_received+0x194>
				{
					if((value_decimal > min_green_temperature) && (value_decimal <= min_red_temperature))
 80033f4:	4b65      	ldr	r3, [pc, #404]	@ (800358c <set_value_received+0x2d8>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff fabe 	bl	800297c <__aeabi_i2d>
 8003400:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <set_value_received+0x2bc>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f7fd f831 	bl	800046c <__aeabi_dcmplt>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d018      	beq.n	8003440 <set_value_received+0x18c>
 800340e:	4b5a      	ldr	r3, [pc, #360]	@ (8003578 <set_value_received+0x2c4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b25b      	sxtb	r3, r3
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff fab1 	bl	800297c <__aeabi_i2d>
 800341a:	4b55      	ldr	r3, [pc, #340]	@ (8003570 <set_value_received+0x2bc>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f7fd f842 	bl	80004a8 <__aeabi_dcmpge>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d00b      	beq.n	8003440 <set_value_received+0x18c>
					{
						max_green_temperature = (int8_t)value_decimal;
 8003428:	4b51      	ldr	r3, [pc, #324]	@ (8003570 <set_value_received+0x2bc>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0010      	movs	r0, r2
 8003430:	0019      	movs	r1, r3
 8003432:	f7ff fa67 	bl	8002904 <__aeabi_d2iz>
 8003436:	0003      	movs	r3, r0
 8003438:	b25a      	sxtb	r2, r3
 800343a:	4b4c      	ldr	r3, [pc, #304]	@ (800356c <set_value_received+0x2b8>)
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e062      	b.n	8003506 <set_value_received+0x252>
					}else{error_value = True;}
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e05e      	b.n	8003506 <set_value_received+0x252>
				}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MIN_BLUE_LED))
 8003448:	4a52      	ldr	r2, [pc, #328]	@ (8003594 <set_value_received+0x2e0>)
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <set_value_received+0x2b4>)
 800344c:	0011      	movs	r1, r2
 800344e:	0018      	movs	r0, r3
 8003450:	f7fc fe5a 	bl	8000108 <strcmp>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d125      	bne.n	80034a4 <set_value_received+0x1f0>
					{
						if((value_decimal >= MIN_TEMPERATURE_MEASURE_DS18B20_SENSOR) && (value_decimal < max_blue_temperature))
 8003458:	4b45      	ldr	r3, [pc, #276]	@ (8003570 <set_value_received+0x2bc>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	4b4d      	ldr	r3, [pc, #308]	@ (8003598 <set_value_received+0x2e4>)
 8003462:	f7fd f821 	bl	80004a8 <__aeabi_dcmpge>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d018      	beq.n	800349c <set_value_received+0x1e8>
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <set_value_received+0x2d4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b25b      	sxtb	r3, r3
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fa83 	bl	800297c <__aeabi_i2d>
 8003476:	4b3e      	ldr	r3, [pc, #248]	@ (8003570 <set_value_received+0x2bc>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f7fd f80a 	bl	8000494 <__aeabi_dcmpgt>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d00b      	beq.n	800349c <set_value_received+0x1e8>
						{
							min_blue_temperature = (int8_t)value_decimal;
 8003484:	4b3a      	ldr	r3, [pc, #232]	@ (8003570 <set_value_received+0x2bc>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	0010      	movs	r0, r2
 800348c:	0019      	movs	r1, r3
 800348e:	f7ff fa39 	bl	8002904 <__aeabi_d2iz>
 8003492:	0003      	movs	r3, r0
 8003494:	b25a      	sxtb	r2, r3
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <set_value_received+0x2e8>)
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e034      	b.n	8003506 <set_value_received+0x252>
						}else{error_value = True;}
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e030      	b.n	8003506 <set_value_received+0x252>
					}else if(!strcmp((const char *)&key, (const char *)ID_TEMP_MAX_BLUE_LED))
 80034a4:	4a3e      	ldr	r2, [pc, #248]	@ (80035a0 <set_value_received+0x2ec>)
 80034a6:	4b30      	ldr	r3, [pc, #192]	@ (8003568 <set_value_received+0x2b4>)
 80034a8:	0011      	movs	r1, r2
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fc fe2c 	bl	8000108 <strcmp>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d128      	bne.n	8003506 <set_value_received+0x252>
						{
							if((value_decimal > min_blue_temperature) && (value_decimal <= min_green_temperature))
 80034b4:	4b39      	ldr	r3, [pc, #228]	@ (800359c <set_value_received+0x2e8>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff fa5e 	bl	800297c <__aeabi_i2d>
 80034c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003570 <set_value_received+0x2bc>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f7fc ffd1 	bl	800046c <__aeabi_dcmplt>
 80034ca:	1e03      	subs	r3, r0, #0
 80034cc:	d018      	beq.n	8003500 <set_value_received+0x24c>
 80034ce:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <set_value_received+0x2d8>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fa51 	bl	800297c <__aeabi_i2d>
 80034da:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <set_value_received+0x2bc>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f7fc ffe2 	bl	80004a8 <__aeabi_dcmpge>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d00b      	beq.n	8003500 <set_value_received+0x24c>
							{
								max_blue_temperature = (int8_t)value_decimal;
 80034e8:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <set_value_received+0x2bc>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0010      	movs	r0, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	f7ff fa07 	bl	8002904 <__aeabi_d2iz>
 80034f6:	0003      	movs	r3, r0
 80034f8:	b25a      	sxtb	r2, r3
 80034fa:	4b23      	ldr	r3, [pc, #140]	@ (8003588 <set_value_received+0x2d4>)
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e002      	b.n	8003506 <set_value_received+0x252>
							}else{error_value = True;}
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
						}

	if(error_value == True)
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10a      	bne.n	8003524 <set_value_received+0x270>
	{
		size_to_send = sprintf((char *)&transmit_text, "\r\n---------------\r\n!Error configuring the value, verify the ranges!\r\n---------------\r\n");
 800350e:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <set_value_received+0x2f0>)
 8003510:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <set_value_received+0x2f4>)
 8003512:	0011      	movs	r1, r2
 8003514:	0018      	movs	r0, r3
 8003516:	f004 fe9d 	bl	8008254 <siprintf>
 800351a:	0003      	movs	r3, r0
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <set_value_received+0x2f8>)
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e010      	b.n	8003546 <set_value_received+0x292>
	}else{
		size_to_send = sprintf((char *)&transmit_text, "\r\n---------------\r\n%s=%d configured successfully!\r\n---------------\r\n", (char *)&key, (int)value_decimal);
 8003524:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <set_value_received+0x2bc>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0010      	movs	r0, r2
 800352c:	0019      	movs	r1, r3
 800352e:	f7ff f9e9 	bl	8002904 <__aeabi_d2iz>
 8003532:	0003      	movs	r3, r0
 8003534:	4a0c      	ldr	r2, [pc, #48]	@ (8003568 <set_value_received+0x2b4>)
 8003536:	491e      	ldr	r1, [pc, #120]	@ (80035b0 <set_value_received+0x2fc>)
 8003538:	481b      	ldr	r0, [pc, #108]	@ (80035a8 <set_value_received+0x2f4>)
 800353a:	f004 fe8b 	bl	8008254 <siprintf>
 800353e:	0003      	movs	r3, r0
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <set_value_received+0x2f8>)
 8003544:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 8003546:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <set_value_received+0x2f8>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	001a      	movs	r2, r3
 800354c:	4916      	ldr	r1, [pc, #88]	@ (80035a8 <set_value_received+0x2f4>)
 800354e:	4819      	ldr	r0, [pc, #100]	@ (80035b4 <set_value_received+0x300>)
 8003550:	2364      	movs	r3, #100	@ 0x64
 8003552:	f002 ff5f 	bl	8006414 <HAL_UART_Transmit>
	new_parameter_to_set_flag = False;
 8003556:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <set_value_received+0x304>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
}
 800355c:	46c0      	nop			@ (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}
 8003564:	0800b488 	.word	0x0800b488
 8003568:	20000460 	.word	0x20000460
 800356c:	20000563 	.word	0x20000563
 8003570:	20000478 	.word	0x20000478
 8003574:	20000561 	.word	0x20000561
 8003578:	20000560 	.word	0x20000560
 800357c:	0800b494 	.word	0x0800b494
 8003580:	405e0000 	.word	0x405e0000
 8003584:	0800b4a0 	.word	0x0800b4a0
 8003588:	20000565 	.word	0x20000565
 800358c:	20000562 	.word	0x20000562
 8003590:	0800b4ac 	.word	0x0800b4ac
 8003594:	0800b4b8 	.word	0x0800b4b8
 8003598:	c0490000 	.word	0xc0490000
 800359c:	20000564 	.word	0x20000564
 80035a0:	0800b4c4 	.word	0x0800b4c4
 80035a4:	0800b4d0 	.word	0x0800b4d0
 80035a8:	20000480 	.word	0x20000480
 80035ac:	20000500 	.word	0x20000500
 80035b0:	0800b528 	.word	0x0800b528
 80035b4:	20000378 	.word	0x20000378
 80035b8:	20000539 	.word	0x20000539

080035bc <print_temperature>:

void print_temperature()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	temperature = DS18B20_Get_temperature();
 80035c0:	f7ff fcce 	bl	8002f60 <DS18B20_Get_temperature>
 80035c4:	1c02      	adds	r2, r0, #0
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <print_temperature+0x60>)
 80035c8:	601a      	str	r2, [r3, #0]
	size_to_send = sprintf((char *)&transmit_text, "Temperature = %0.2f °C \r\n", temperature);
 80035ca:	4b14      	ldr	r3, [pc, #80]	@ (800361c <print_temperature+0x60>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c18      	adds	r0, r3, #0
 80035d0:	f7ff fa26 	bl	8002a20 <__aeabi_f2d>
 80035d4:	0002      	movs	r2, r0
 80035d6:	000b      	movs	r3, r1
 80035d8:	4911      	ldr	r1, [pc, #68]	@ (8003620 <print_temperature+0x64>)
 80035da:	4812      	ldr	r0, [pc, #72]	@ (8003624 <print_temperature+0x68>)
 80035dc:	f004 fe3a 	bl	8008254 <siprintf>
 80035e0:	0003      	movs	r3, r0
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <print_temperature+0x6c>)
 80035e6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, 500);
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <print_temperature+0x6c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	001a      	movs	r2, r3
 80035ee:	23fa      	movs	r3, #250	@ 0xfa
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	490c      	ldr	r1, [pc, #48]	@ (8003624 <print_temperature+0x68>)
 80035f4:	480d      	ldr	r0, [pc, #52]	@ (800362c <print_temperature+0x70>)
 80035f6:	f002 ff0d 	bl	8006414 <HAL_UART_Transmit>

	values_for_mean[counter_for_mean-1] = temperature;
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <print_temperature+0x74>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <print_temperature+0x60>)
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <print_temperature+0x78>)
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	50d1      	str	r1, [r2, r3]

	temperature_printing_control = HAL_GetTick();
 800360a:	f001 f855 	bl	80046b8 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <print_temperature+0x7c>)
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	2000053c 	.word	0x2000053c
 8003620:	0800b570 	.word	0x0800b570
 8003624:	20000480 	.word	0x20000480
 8003628:	20000500 	.word	0x20000500
 800362c:	20000378 	.word	0x20000378
 8003630:	20000544 	.word	0x20000544
 8003634:	20000548 	.word	0x20000548
 8003638:	20000504 	.word	0x20000504

0800363c <update_temperature_indicator>:

void update_temperature_indicator()
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	if((temperature >= min_blue_temperature) && (temperature <= max_blue_temperature)){
 8003640:	4b36      	ldr	r3, [pc, #216]	@ (800371c <update_temperature_indicator+0xe0>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b25b      	sxtb	r3, r3
 8003646:	0018      	movs	r0, r3
 8003648:	f7fd fae2 	bl	8000c10 <__aeabi_i2f>
 800364c:	1c02      	adds	r2, r0, #0
 800364e:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <update_temperature_indicator+0xe4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c19      	adds	r1, r3, #0
 8003654:	1c10      	adds	r0, r2, #0
 8003656:	f7fc ff4d 	bl	80004f4 <__aeabi_fcmple>
 800365a:	1e03      	subs	r3, r0, #0
 800365c:	d012      	beq.n	8003684 <update_temperature_indicator+0x48>
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <update_temperature_indicator+0xe8>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b25b      	sxtb	r3, r3
 8003664:	0018      	movs	r0, r3
 8003666:	f7fd fad3 	bl	8000c10 <__aeabi_i2f>
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	4b2c      	ldr	r3, [pc, #176]	@ (8003720 <update_temperature_indicator+0xe4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1c19      	adds	r1, r3, #0
 8003672:	1c10      	adds	r0, r2, #0
 8003674:	f7fc ff52 	bl	800051c <__aeabi_fcmpge>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d003      	beq.n	8003684 <update_temperature_indicator+0x48>
		RGB_BLUE_ON(TEMPERATURE);
 800367c:	2002      	movs	r0, #2
 800367e:	f7ff fd61 	bl	8003144 <RGB_BLUE_ON>
 8003682:	e047      	b.n	8003714 <update_temperature_indicator+0xd8>
	}else if((temperature > min_green_temperature) && (temperature <= max_green_temperature)){
 8003684:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <update_temperature_indicator+0xec>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b25b      	sxtb	r3, r3
 800368a:	0018      	movs	r0, r3
 800368c:	f7fd fac0 	bl	8000c10 <__aeabi_i2f>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <update_temperature_indicator+0xe4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1c19      	adds	r1, r3, #0
 8003698:	1c10      	adds	r0, r2, #0
 800369a:	f7fc ff21 	bl	80004e0 <__aeabi_fcmplt>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d012      	beq.n	80036c8 <update_temperature_indicator+0x8c>
 80036a2:	4b22      	ldr	r3, [pc, #136]	@ (800372c <update_temperature_indicator+0xf0>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b25b      	sxtb	r3, r3
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fd fab1 	bl	8000c10 <__aeabi_i2f>
 80036ae:	1c02      	adds	r2, r0, #0
 80036b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <update_temperature_indicator+0xe4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c19      	adds	r1, r3, #0
 80036b6:	1c10      	adds	r0, r2, #0
 80036b8:	f7fc ff30 	bl	800051c <__aeabi_fcmpge>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d003      	beq.n	80036c8 <update_temperature_indicator+0x8c>
		RGB_GREEN_ON(TEMPERATURE);
 80036c0:	2002      	movs	r0, #2
 80036c2:	f7ff fcf7 	bl	80030b4 <RGB_GREEN_ON>
 80036c6:	e025      	b.n	8003714 <update_temperature_indicator+0xd8>
	}else if((temperature > min_red_temperature) && (temperature <= max_red_temperature)){
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <update_temperature_indicator+0xf4>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7fd fa9e 	bl	8000c10 <__aeabi_i2f>
 80036d4:	1c02      	adds	r2, r0, #0
 80036d6:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <update_temperature_indicator+0xe4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	1c19      	adds	r1, r3, #0
 80036dc:	1c10      	adds	r0, r2, #0
 80036de:	f7fc feff 	bl	80004e0 <__aeabi_fcmplt>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d012      	beq.n	800370c <update_temperature_indicator+0xd0>
 80036e6:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <update_temperature_indicator+0xf8>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b25b      	sxtb	r3, r3
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fd fa8f 	bl	8000c10 <__aeabi_i2f>
 80036f2:	1c02      	adds	r2, r0, #0
 80036f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <update_temperature_indicator+0xe4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c19      	adds	r1, r3, #0
 80036fa:	1c10      	adds	r0, r2, #0
 80036fc:	f7fc ff0e 	bl	800051c <__aeabi_fcmpge>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d003      	beq.n	800370c <update_temperature_indicator+0xd0>
		RGB_RED_ON(TEMPERATURE);
 8003704:	2002      	movs	r0, #2
 8003706:	f7ff fc8d 	bl	8003024 <RGB_RED_ON>
 800370a:	e003      	b.n	8003714 <update_temperature_indicator+0xd8>
	}else{
		RGB_ALL_OFF(TEMPERATURE);
 800370c:	2002      	movs	r0, #2
 800370e:	f7ff fd61 	bl	80031d4 <RGB_ALL_OFF>
	}
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46c0      	nop			@ (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	20000564 	.word	0x20000564
 8003720:	2000053c 	.word	0x2000053c
 8003724:	20000565 	.word	0x20000565
 8003728:	20000562 	.word	0x20000562
 800372c:	20000563 	.word	0x20000563
 8003730:	20000560 	.word	0x20000560
 8003734:	20000561 	.word	0x20000561

08003738 <calculate_mean_temperature>:

void calculate_mean_temperature()
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
	float temporal_temperature_mean = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]

	for(int i=0; i<MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN; i++)
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	e00c      	b.n	8003762 <calculate_mean_temperature+0x2a>
	{
	 temporal_temperature_mean += values_for_mean[i];
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <calculate_mean_temperature+0x88>)
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	0092      	lsls	r2, r2, #2
 800374e:	58d3      	ldr	r3, [r2, r3]
 8003750:	1c19      	adds	r1, r3, #0
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fc feec 	bl	8000530 <__aeabi_fadd>
 8003758:	1c03      	adds	r3, r0, #0
 800375a:	607b      	str	r3, [r7, #4]
	for(int i=0; i<MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN; i++)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b05      	cmp	r3, #5
 8003766:	ddef      	ble.n	8003748 <calculate_mean_temperature+0x10>
	}
	temperature_mean = temporal_temperature_mean/MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN;
 8003768:	4916      	ldr	r1, [pc, #88]	@ (80037c4 <calculate_mean_temperature+0x8c>)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd f86a 	bl	8000844 <__aeabi_fdiv>
 8003770:	1c03      	adds	r3, r0, #0
 8003772:	1c1a      	adds	r2, r3, #0
 8003774:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <calculate_mean_temperature+0x90>)
 8003776:	601a      	str	r2, [r3, #0]

	size_to_send = sprintf((char *)&transmit_text, "Mean temperature= %0.2f\r\n", temperature_mean);
 8003778:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <calculate_mean_temperature+0x90>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1c18      	adds	r0, r3, #0
 800377e:	f7ff f94f 	bl	8002a20 <__aeabi_f2d>
 8003782:	0002      	movs	r2, r0
 8003784:	000b      	movs	r3, r1
 8003786:	4911      	ldr	r1, [pc, #68]	@ (80037cc <calculate_mean_temperature+0x94>)
 8003788:	4811      	ldr	r0, [pc, #68]	@ (80037d0 <calculate_mean_temperature+0x98>)
 800378a:	f004 fd63 	bl	8008254 <siprintf>
 800378e:	0003      	movs	r3, r0
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <calculate_mean_temperature+0x9c>)
 8003794:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <calculate_mean_temperature+0x9c>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	001a      	movs	r2, r3
 800379c:	490c      	ldr	r1, [pc, #48]	@ (80037d0 <calculate_mean_temperature+0x98>)
 800379e:	480e      	ldr	r0, [pc, #56]	@ (80037d8 <calculate_mean_temperature+0xa0>)
 80037a0:	2364      	movs	r3, #100	@ 0x64
 80037a2:	f002 fe37 	bl	8006414 <HAL_UART_Transmit>
	counter_for_mean = 0;
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <calculate_mean_temperature+0xa4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
	memset(&values_for_mean, 0, sizeof(values_for_mean));
 80037ac:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <calculate_mean_temperature+0x88>)
 80037ae:	2218      	movs	r2, #24
 80037b0:	2100      	movs	r1, #0
 80037b2:	0018      	movs	r0, r3
 80037b4:	f004 fdba 	bl	800832c <memset>
}
 80037b8:	46c0      	nop			@ (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000548 	.word	0x20000548
 80037c4:	40c00000 	.word	0x40c00000
 80037c8:	20000540 	.word	0x20000540
 80037cc:	0800b58c 	.word	0x0800b58c
 80037d0:	20000480 	.word	0x20000480
 80037d4:	20000500 	.word	0x20000500
 80037d8:	20000378 	.word	0x20000378
 80037dc:	20000544 	.word	0x20000544

080037e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e0:	b5b0      	push	{r4, r5, r7, lr}
 80037e2:	b092      	sub	sp, #72	@ 0x48
 80037e4:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e6:	f000 ff0d 	bl	8004604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ea:	f000 f9b7 	bl	8003b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ee:	f000 fb3d 	bl	8003e6c <MX_GPIO_Init>
  MX_SPI1_Init();
 80037f2:	f000 fa77 	bl	8003ce4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80037f6:	f000 fab3 	bl	8003d60 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80037fa:	f000 fb07 	bl	8003e0c <MX_USART1_UART_Init>
  MX_ADC_Init();
 80037fe:	f000 fa15 	bl	8003c2c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8003802:	4bb7      	ldr	r3, [pc, #732]	@ (8003ae0 <main+0x300>)
 8003804:	0018      	movs	r0, r3
 8003806:	f002 fb1b 	bl	8005e40 <HAL_TIM_Base_Start_IT>
  DS18B20_Init(htim3, DS18B20_GPIO_Port, DS18B20_Pin);
 800380a:	4cb5      	ldr	r4, [pc, #724]	@ (8003ae0 <main+0x300>)
 800380c:	2304      	movs	r3, #4
 800380e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003810:	2390      	movs	r3, #144	@ 0x90
 8003812:	05db      	lsls	r3, r3, #23
 8003814:	930e      	str	r3, [sp, #56]	@ 0x38
 8003816:	466b      	mov	r3, sp
 8003818:	0018      	movs	r0, r3
 800381a:	0023      	movs	r3, r4
 800381c:	3310      	adds	r3, #16
 800381e:	2238      	movs	r2, #56	@ 0x38
 8003820:	0019      	movs	r1, r3
 8003822:	f004 fe1d 	bl	8008460 <memcpy>
 8003826:	6820      	ldr	r0, [r4, #0]
 8003828:	6861      	ldr	r1, [r4, #4]
 800382a:	68a2      	ldr	r2, [r4, #8]
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	f7ff f9e1 	bl	8002bf4 <DS18B20_Init>

  parameter_RGB_leds.RED_Speed_Port = R_SPEED_LED_GPIO_Port;
 8003832:	4bac      	ldr	r3, [pc, #688]	@ (8003ae4 <main+0x304>)
 8003834:	4aac      	ldr	r2, [pc, #688]	@ (8003ae8 <main+0x308>)
 8003836:	601a      	str	r2, [r3, #0]
  parameter_RGB_leds.RED_Speed_Pin = R_SPEED_LED_Pin;
 8003838:	4baa      	ldr	r3, [pc, #680]	@ (8003ae4 <main+0x304>)
 800383a:	2280      	movs	r2, #128	@ 0x80
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	809a      	strh	r2, [r3, #4]
  parameter_RGB_leds.GREEN_Speed_Port = G_SPEED_LED_GPIO_Port;
 8003840:	4ba8      	ldr	r3, [pc, #672]	@ (8003ae4 <main+0x304>)
 8003842:	4aa9      	ldr	r2, [pc, #676]	@ (8003ae8 <main+0x308>)
 8003844:	609a      	str	r2, [r3, #8]
  parameter_RGB_leds.GREEN_Speed_Pin = G_SPEED_LED_Pin;
 8003846:	4ba7      	ldr	r3, [pc, #668]	@ (8003ae4 <main+0x304>)
 8003848:	2280      	movs	r2, #128	@ 0x80
 800384a:	00d2      	lsls	r2, r2, #3
 800384c:	819a      	strh	r2, [r3, #12]
  parameter_RGB_leds.BLUE_Speed_Port = B_SPEED_LED_GPIO_Port;
 800384e:	4ba5      	ldr	r3, [pc, #660]	@ (8003ae4 <main+0x304>)
 8003850:	4aa5      	ldr	r2, [pc, #660]	@ (8003ae8 <main+0x308>)
 8003852:	611a      	str	r2, [r3, #16]
  parameter_RGB_leds.BLUE_Speed_Pin = B_SPEED_LED_Pin;
 8003854:	4ba3      	ldr	r3, [pc, #652]	@ (8003ae4 <main+0x304>)
 8003856:	2204      	movs	r2, #4
 8003858:	829a      	strh	r2, [r3, #20]

  parameter_RGB_leds.RED_Temperature_Port = R_TEMP_LED_GPIO_Port;
 800385a:	4ba2      	ldr	r3, [pc, #648]	@ (8003ae4 <main+0x304>)
 800385c:	4aa2      	ldr	r2, [pc, #648]	@ (8003ae8 <main+0x308>)
 800385e:	619a      	str	r2, [r3, #24]
  parameter_RGB_leds.RED_Temperature_Pin = R_TEMP_LED_Pin;
 8003860:	4ba0      	ldr	r3, [pc, #640]	@ (8003ae4 <main+0x304>)
 8003862:	2202      	movs	r2, #2
 8003864:	839a      	strh	r2, [r3, #28]
  parameter_RGB_leds.GREEN_Temperature_Port = G_TEMP_LED_GPIO_Port;
 8003866:	4b9f      	ldr	r3, [pc, #636]	@ (8003ae4 <main+0x304>)
 8003868:	4a9f      	ldr	r2, [pc, #636]	@ (8003ae8 <main+0x308>)
 800386a:	621a      	str	r2, [r3, #32]
  parameter_RGB_leds.GREEN_Temperature_Pin = G_TEMP_LED_Pin;
 800386c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ae4 <main+0x304>)
 800386e:	2201      	movs	r2, #1
 8003870:	849a      	strh	r2, [r3, #36]	@ 0x24
  parameter_RGB_leds.BLUE_Temperature_Port = B_TEMP_LED_GPIO_Port;
 8003872:	4b9c      	ldr	r3, [pc, #624]	@ (8003ae4 <main+0x304>)
 8003874:	2290      	movs	r2, #144	@ 0x90
 8003876:	05d2      	lsls	r2, r2, #23
 8003878:	629a      	str	r2, [r3, #40]	@ 0x28
  parameter_RGB_leds.BLUE_Temperature_Pin = B_TEMP_LED_Pin;
 800387a:	4b9a      	ldr	r3, [pc, #616]	@ (8003ae4 <main+0x304>)
 800387c:	2280      	movs	r2, #128	@ 0x80
 800387e:	859a      	strh	r2, [r3, #44]	@ 0x2c

  RGB_Init(parameter_RGB_leds);
 8003880:	4b98      	ldr	r3, [pc, #608]	@ (8003ae4 <main+0x304>)
 8003882:	466a      	mov	r2, sp
 8003884:	0011      	movs	r1, r2
 8003886:	001a      	movs	r2, r3
 8003888:	3210      	adds	r2, #16
 800388a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800388c:	c131      	stmia	r1!, {r0, r4, r5}
 800388e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003890:	c131      	stmia	r1!, {r0, r4, r5}
 8003892:	ca11      	ldmia	r2!, {r0, r4}
 8003894:	c111      	stmia	r1!, {r0, r4}
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f7ff fba3 	bl	8002fe8 <RGB_Init>

  ring_buffer_init(&rb_usart1, rb_buffer_usart1, CAPACITY_USART1);
 80038a2:	4992      	ldr	r1, [pc, #584]	@ (8003aec <main+0x30c>)
 80038a4:	4b92      	ldr	r3, [pc, #584]	@ (8003af0 <main+0x310>)
 80038a6:	2210      	movs	r2, #16
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fb7f 	bl	8003fac <ring_buffer_init>
  HAL_UART_Receive_IT(&huart1, &data_usart1_rx, 1);
 80038ae:	4991      	ldr	r1, [pc, #580]	@ (8003af4 <main+0x314>)
 80038b0:	4b91      	ldr	r3, [pc, #580]	@ (8003af8 <main+0x318>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	0018      	movs	r0, r3
 80038b6:	f002 fe4c 	bl	8006552 <HAL_UART_Receive_IT>

  key_flag = False;
 80038ba:	4b90      	ldr	r3, [pc, #576]	@ (8003afc <main+0x31c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
  new_parameter_to_set_flag = False;
 80038c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b00 <main+0x320>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
  read_buffer_ring_counter = 0;
 80038c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003b04 <main+0x324>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
  value_decimal = 0;
 80038cc:	498e      	ldr	r1, [pc, #568]	@ (8003b08 <main+0x328>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	2300      	movs	r3, #0
 80038d2:	600a      	str	r2, [r1, #0]
 80038d4:	604b      	str	r3, [r1, #4]

  temperature = 0;
 80038d6:	4b8d      	ldr	r3, [pc, #564]	@ (8003b0c <main+0x32c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
  temperature_mean = 0;
 80038dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003b10 <main+0x330>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
  counter_for_mean = 0;
 80038e2:	4b8c      	ldr	r3, [pc, #560]	@ (8003b14 <main+0x334>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
  min_blue_temperature = 0;
 80038e8:	4b8b      	ldr	r3, [pc, #556]	@ (8003b18 <main+0x338>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
  max_blue_temperature = 10;
 80038ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003b1c <main+0x33c>)
 80038f0:	220a      	movs	r2, #10
 80038f2:	701a      	strb	r2, [r3, #0]
  min_green_temperature = 10;
 80038f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003b20 <main+0x340>)
 80038f6:	220a      	movs	r2, #10
 80038f8:	701a      	strb	r2, [r3, #0]
  max_green_temperature = 20;
 80038fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003b24 <main+0x344>)
 80038fc:	2214      	movs	r2, #20
 80038fe:	701a      	strb	r2, [r3, #0]
  min_red_temperature = 20;
 8003900:	4b89      	ldr	r3, [pc, #548]	@ (8003b28 <main+0x348>)
 8003902:	2214      	movs	r2, #20
 8003904:	701a      	strb	r2, [r3, #0]
  max_red_temperature = 30;
 8003906:	4b89      	ldr	r3, [pc, #548]	@ (8003b2c <main+0x34c>)
 8003908:	221e      	movs	r2, #30
 800390a:	701a      	strb	r2, [r3, #0]

	  /*
	   *Check if UART have any data and separate the key and
	   *value for validation
	   */
	  if(ring_buffer_is_empty(&rb_usart1) != 1)						//Si el buffer de rb_usart1 tiene datos para leer
 800390c:	4b78      	ldr	r3, [pc, #480]	@ (8003af0 <main+0x310>)
 800390e:	0018      	movs	r0, r3
 8003910:	f000 fba0 	bl	8004054 <ring_buffer_is_empty>
 8003914:	0003      	movs	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d100      	bne.n	800391c <main+0x13c>
 800391a:	e0bf      	b.n	8003a9c <main+0x2bc>
	  {
		  ring_buffer_read(&rb_usart1, &data_rb_usart1);			//lee un dato del buffer
 800391c:	4a84      	ldr	r2, [pc, #528]	@ (8003b30 <main+0x350>)
 800391e:	4b74      	ldr	r3, [pc, #464]	@ (8003af0 <main+0x310>)
 8003920:	0011      	movs	r1, r2
 8003922:	0018      	movs	r0, r3
 8003924:	f000 fbea 	bl	80040fc <ring_buffer_read>
		  /*
		   * Si detecta que el dato leído es igual al caracter "="
		   * Porcede a guardar lo que se encuentre en el arreglo
		   * buffer_usart1_rx en la variable "key"
		   */
		  if((data_rb_usart1 == '=') && (key_flag == False))
 8003928:	4b81      	ldr	r3, [pc, #516]	@ (8003b30 <main+0x350>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b3d      	cmp	r3, #61	@ 0x3d
 800392e:	d12e      	bne.n	800398e <main+0x1ae>
 8003930:	4b72      	ldr	r3, [pc, #456]	@ (8003afc <main+0x31c>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12a      	bne.n	800398e <main+0x1ae>
		  {
			  memset(&key, 0, sizeof(key));
 8003938:	4b7e      	ldr	r3, [pc, #504]	@ (8003b34 <main+0x354>)
 800393a:	2210      	movs	r2, #16
 800393c:	2100      	movs	r1, #0
 800393e:	0018      	movs	r0, r3
 8003940:	f004 fcf4 	bl	800832c <memset>
			  strcpy((char *)&key, (const char *)&buffer_usart1_rx);
 8003944:	4a7c      	ldr	r2, [pc, #496]	@ (8003b38 <main+0x358>)
 8003946:	4b7b      	ldr	r3, [pc, #492]	@ (8003b34 <main+0x354>)
 8003948:	0011      	movs	r1, r2
 800394a:	0018      	movs	r0, r3
 800394c:	f004 fd75 	bl	800843a <strcpy>

			  memset(&buffer_usart1_rx, 0, sizeof(buffer_usart1_rx));
 8003950:	4b79      	ldr	r3, [pc, #484]	@ (8003b38 <main+0x358>)
 8003952:	2240      	movs	r2, #64	@ 0x40
 8003954:	2100      	movs	r1, #0
 8003956:	0018      	movs	r0, r3
 8003958:	f004 fce8 	bl	800832c <memset>
			  read_buffer_ring_counter = 0;
 800395c:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <main+0x324>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
			  key_flag = True;
 8003962:	4b66      	ldr	r3, [pc, #408]	@ (8003afc <main+0x31c>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]

			  size_to_send = sprintf((char *)&transmit_text, "UART received: Key= %s\t", key);
 8003968:	4a72      	ldr	r2, [pc, #456]	@ (8003b34 <main+0x354>)
 800396a:	4974      	ldr	r1, [pc, #464]	@ (8003b3c <main+0x35c>)
 800396c:	4b74      	ldr	r3, [pc, #464]	@ (8003b40 <main+0x360>)
 800396e:	0018      	movs	r0, r3
 8003970:	f004 fc70 	bl	8008254 <siprintf>
 8003974:	0003      	movs	r3, r0
 8003976:	b2da      	uxtb	r2, r3
 8003978:	4b72      	ldr	r3, [pc, #456]	@ (8003b44 <main+0x364>)
 800397a:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 800397c:	4b71      	ldr	r3, [pc, #452]	@ (8003b44 <main+0x364>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	001a      	movs	r2, r3
 8003982:	496f      	ldr	r1, [pc, #444]	@ (8003b40 <main+0x360>)
 8003984:	485c      	ldr	r0, [pc, #368]	@ (8003af8 <main+0x318>)
 8003986:	2364      	movs	r3, #100	@ 0x64
 8003988:	f002 fd44 	bl	8006414 <HAL_UART_Transmit>

			  continue;
 800398c:	e0a7      	b.n	8003ade <main+0x2fe>
		  }

		  buffer_usart1_rx[read_buffer_ring_counter] = data_rb_usart1;	//Va llenando un nuevo arreglo con el dato leído dle buffer
 800398e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b04 <main+0x324>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	001a      	movs	r2, r3
 8003994:	4b66      	ldr	r3, [pc, #408]	@ (8003b30 <main+0x350>)
 8003996:	7819      	ldrb	r1, [r3, #0]
 8003998:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <main+0x358>)
 800399a:	5499      	strb	r1, [r3, r2]

		  /*
		   * Cuando ya no hay datos para leer, procede a guardar el arrelo
		   * buffer_usart1_rx en la variable value
		   */
		  if(ring_buffer_size(&rb_usart1) == 0 && key_flag == True)
 800399c:	4b54      	ldr	r3, [pc, #336]	@ (8003af0 <main+0x310>)
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 fb2b 	bl	8003ffa <ring_buffer_size>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d173      	bne.n	8003a90 <main+0x2b0>
 80039a8:	4b54      	ldr	r3, [pc, #336]	@ (8003afc <main+0x31c>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d16f      	bne.n	8003a90 <main+0x2b0>
		  {
			  value_decimal = 0;
 80039b0:	4955      	ldr	r1, [pc, #340]	@ (8003b08 <main+0x328>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	2300      	movs	r3, #0
 80039b6:	600a      	str	r2, [r1, #0]
 80039b8:	604b      	str	r3, [r1, #4]
			  memset(&value_str, 0, sizeof(value_str));
 80039ba:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <main+0x368>)
 80039bc:	2208      	movs	r2, #8
 80039be:	2100      	movs	r1, #0
 80039c0:	0018      	movs	r0, r3
 80039c2:	f004 fcb3 	bl	800832c <memset>
			  strcpy((char *)&value_str, (const char *)&buffer_usart1_rx);
 80039c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b38 <main+0x358>)
 80039c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003b48 <main+0x368>)
 80039ca:	0011      	movs	r1, r2
 80039cc:	0018      	movs	r0, r3
 80039ce:	f004 fd34 	bl	800843a <strcpy>

			  for(int i = 0; i<strlen((const char *)value_str); i++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	e031      	b.n	8003a3c <main+0x25c>
			  {
				  value_decimal += (value_str[i]-'0') * pow(10, (strlen((const char *)value_str)-1-i));
 80039d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003b48 <main+0x368>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3b30      	subs	r3, #48	@ 0x30
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7fe ffca 	bl	800297c <__aeabi_i2d>
 80039e8:	0004      	movs	r4, r0
 80039ea:	000d      	movs	r5, r1
 80039ec:	4b56      	ldr	r3, [pc, #344]	@ (8003b48 <main+0x368>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb94 	bl	800011c <strlen>
 80039f4:	0002      	movs	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7fe ffeb 	bl	80029d8 <__aeabi_ui2d>
 8003a02:	0002      	movs	r2, r0
 8003a04:	000b      	movs	r3, r1
 8003a06:	2000      	movs	r0, #0
 8003a08:	4950      	ldr	r1, [pc, #320]	@ (8003b4c <main+0x36c>)
 8003a0a:	f006 fe09 	bl	800a620 <pow>
 8003a0e:	0002      	movs	r2, r0
 8003a10:	000b      	movs	r3, r1
 8003a12:	0020      	movs	r0, r4
 8003a14:	0029      	movs	r1, r5
 8003a16:	f7fe f8ef 	bl	8001bf8 <__aeabi_dmul>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	000b      	movs	r3, r1
 8003a1e:	0010      	movs	r0, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <main+0x328>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f7fd f93e 	bl	8000ca8 <__aeabi_dadd>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	000b      	movs	r3, r1
 8003a30:	4935      	ldr	r1, [pc, #212]	@ (8003b08 <main+0x328>)
 8003a32:	600a      	str	r2, [r1, #0]
 8003a34:	604b      	str	r3, [r1, #4]
			  for(int i = 0; i<strlen((const char *)value_str); i++)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	4b42      	ldr	r3, [pc, #264]	@ (8003b48 <main+0x368>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fc fb6c 	bl	800011c <strlen>
 8003a44:	0002      	movs	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d8c5      	bhi.n	80039d8 <main+0x1f8>
			  }

			  memset(&buffer_usart1_rx, 0, sizeof(buffer_usart1_rx));
 8003a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b38 <main+0x358>)
 8003a4e:	2240      	movs	r2, #64	@ 0x40
 8003a50:	2100      	movs	r1, #0
 8003a52:	0018      	movs	r0, r3
 8003a54:	f004 fc6a 	bl	800832c <memset>
			  read_buffer_ring_counter = 0;
 8003a58:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <main+0x324>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
			  key_flag = False;
 8003a5e:	4b27      	ldr	r3, [pc, #156]	@ (8003afc <main+0x31c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]

			  size_to_send = sprintf((char *)&transmit_text, "Value= %s\r\n", value_str);
 8003a64:	4a38      	ldr	r2, [pc, #224]	@ (8003b48 <main+0x368>)
 8003a66:	493a      	ldr	r1, [pc, #232]	@ (8003b50 <main+0x370>)
 8003a68:	4b35      	ldr	r3, [pc, #212]	@ (8003b40 <main+0x360>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f004 fbf2 	bl	8008254 <siprintf>
 8003a70:	0003      	movs	r3, r0
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b33      	ldr	r3, [pc, #204]	@ (8003b44 <main+0x364>)
 8003a76:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, MAX_TIME_WAIT_TO_TRANSMIT);
 8003a78:	4b32      	ldr	r3, [pc, #200]	@ (8003b44 <main+0x364>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	4930      	ldr	r1, [pc, #192]	@ (8003b40 <main+0x360>)
 8003a80:	481d      	ldr	r0, [pc, #116]	@ (8003af8 <main+0x318>)
 8003a82:	2364      	movs	r3, #100	@ 0x64
 8003a84:	f002 fcc6 	bl	8006414 <HAL_UART_Transmit>

			  new_parameter_to_set_flag = True;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <main+0x320>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
			  continue;
 8003a8e:	e026      	b.n	8003ade <main+0x2fe>
		  }

		  read_buffer_ring_counter ++; //Va aumentando el contador de control del arreglo buffer_usart1_rx
 8003a90:	4b1c      	ldr	r3, [pc, #112]	@ (8003b04 <main+0x324>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <main+0x324>)
 8003a9a:	701a      	strb	r2, [r3, #0]
	  }

	  /*
	   * After receive a new value, it sets it in the corresponding variable
	   */
	  if(new_parameter_to_set_flag == True)
 8003a9c:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <main+0x320>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <main+0x2c8>
	  {
		  set_value_received();
 8003aa4:	f7ff fc06 	bl	80032b4 <set_value_received>

	  /*
	  *Wait a time specified in WAIT_TEMPERATURE_PRINT and
	  *temperature print
	  */
	  if(HAL_GetTick() - temperature_printing_control >= WAIT_TEMPERATURE_PRINT)
 8003aa8:	f000 fe06 	bl	80046b8 <HAL_GetTick>
 8003aac:	0002      	movs	r2, r0
 8003aae:	4b29      	ldr	r3, [pc, #164]	@ (8003b54 <main+0x374>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	4a28      	ldr	r2, [pc, #160]	@ (8003b58 <main+0x378>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d800      	bhi.n	8003abc <main+0x2dc>
 8003aba:	e727      	b.n	800390c <main+0x12c>
	  {
		 counter_for_mean++;
 8003abc:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <main+0x334>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <main+0x334>)
 8003ac6:	701a      	strb	r2, [r3, #0]

		 print_temperature();
 8003ac8:	f7ff fd78 	bl	80035bc <print_temperature>
		 update_temperature_indicator();
 8003acc:	f7ff fdb6 	bl	800363c <update_temperature_indicator>

		 if(counter_for_mean == MAX_MEASURES_OF_TEMPERATURE_FOR_MEAN)
 8003ad0:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <main+0x334>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d000      	beq.n	8003ada <main+0x2fa>
 8003ad8:	e718      	b.n	800390c <main+0x12c>
		 {
			 calculate_mean_temperature();
 8003ada:	f7ff fe2d 	bl	8003738 <calculate_mean_temperature>
	  if(ring_buffer_is_empty(&rb_usart1) != 1)						//Si el buffer de rb_usart1 tiene datos para leer
 8003ade:	e715      	b.n	800390c <main+0x12c>
 8003ae0:	20000330 	.word	0x20000330
 8003ae4:	20000508 	.word	0x20000508
 8003ae8:	48000400 	.word	0x48000400
 8003aec:	20000408 	.word	0x20000408
 8003af0:	20000400 	.word	0x20000400
 8003af4:	20000418 	.word	0x20000418
 8003af8:	20000378 	.word	0x20000378
 8003afc:	20000538 	.word	0x20000538
 8003b00:	20000539 	.word	0x20000539
 8003b04:	2000045c 	.word	0x2000045c
 8003b08:	20000478 	.word	0x20000478
 8003b0c:	2000053c 	.word	0x2000053c
 8003b10:	20000540 	.word	0x20000540
 8003b14:	20000544 	.word	0x20000544
 8003b18:	20000564 	.word	0x20000564
 8003b1c:	20000565 	.word	0x20000565
 8003b20:	20000562 	.word	0x20000562
 8003b24:	20000563 	.word	0x20000563
 8003b28:	20000560 	.word	0x20000560
 8003b2c:	20000561 	.word	0x20000561
 8003b30:	20000419 	.word	0x20000419
 8003b34:	20000460 	.word	0x20000460
 8003b38:	2000041c 	.word	0x2000041c
 8003b3c:	0800b5a8 	.word	0x0800b5a8
 8003b40:	20000480 	.word	0x20000480
 8003b44:	20000500 	.word	0x20000500
 8003b48:	20000470 	.word	0x20000470
 8003b4c:	40240000 	.word	0x40240000
 8003b50:	0800b5c0 	.word	0x0800b5c0
 8003b54:	20000504 	.word	0x20000504
 8003b58:	0000270f 	.word	0x0000270f

08003b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b095      	sub	sp, #84	@ 0x54
 8003b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b62:	2420      	movs	r4, #32
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	0018      	movs	r0, r3
 8003b68:	2330      	movs	r3, #48	@ 0x30
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f004 fbdd 	bl	800832c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b72:	2310      	movs	r3, #16
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	0018      	movs	r0, r3
 8003b78:	2310      	movs	r3, #16
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f004 fbd5 	bl	800832c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b82:	003b      	movs	r3, r7
 8003b84:	0018      	movs	r0, r3
 8003b86:	2310      	movs	r3, #16
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f004 fbce 	bl	800832c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003b90:	0021      	movs	r1, r4
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2212      	movs	r2, #18
 8003b96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	2210      	movs	r2, #16
 8003bae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2200      	movs	r2, #0
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	22a0      	movs	r2, #160	@ 0xa0
 8003bc0:	0392      	lsls	r2, r2, #14
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f001 fb03 	bl	80051d8 <HAL_RCC_OscConfig>
 8003bd2:	1e03      	subs	r3, r0, #0
 8003bd4:	d001      	beq.n	8003bda <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003bd6:	f000 f9e3 	bl	8003fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bda:	2110      	movs	r1, #16
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	2207      	movs	r2, #7
 8003be0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2202      	movs	r2, #2
 8003be6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f001 fe07 	bl	800580c <HAL_RCC_ClockConfig>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d001      	beq.n	8003c06 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003c02:	f000 f9cd 	bl	8003fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c06:	003b      	movs	r3, r7
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003c0c:	003b      	movs	r3, r7
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c12:	003b      	movs	r3, r7
 8003c14:	0018      	movs	r0, r3
 8003c16:	f001 ff3d 	bl	8005a94 <HAL_RCCEx_PeriphCLKConfig>
 8003c1a:	1e03      	subs	r3, r0, #0
 8003c1c:	d001      	beq.n	8003c22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c1e:	f000 f9bf 	bl	8003fa0 <Error_Handler>
  }
}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b015      	add	sp, #84	@ 0x54
 8003c28:	bd90      	pop	{r4, r7, pc}
	...

08003c2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	0018      	movs	r0, r3
 8003c36:	230c      	movs	r3, #12
 8003c38:	001a      	movs	r2, r3
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f004 fb76 	bl	800832c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c40:	4b26      	ldr	r3, [pc, #152]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c42:	4a27      	ldr	r2, [pc, #156]	@ (8003ce0 <MX_ADC_Init+0xb4>)
 8003c44:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003c46:	4b25      	ldr	r3, [pc, #148]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c4c:	4b23      	ldr	r3, [pc, #140]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c52:	4b22      	ldr	r3, [pc, #136]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c58:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c60:	2204      	movs	r2, #4
 8003c62:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c70:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c76:	4b19      	ldr	r3, [pc, #100]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c7c:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c7e:	22c2      	movs	r2, #194	@ 0xc2
 8003c80:	32ff      	adds	r2, #255	@ 0xff
 8003c82:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c84:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c8c:	2224      	movs	r2, #36	@ 0x24
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c92:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003c98:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 fd3a 	bl	8004714 <HAL_ADC_Init>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003ca4:	f000 f97c 	bl	8003fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	2203      	movs	r2, #3
 8003cac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	2280      	movs	r2, #128	@ 0x80
 8003cb2:	0152      	lsls	r2, r2, #5
 8003cb4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2280      	movs	r2, #128	@ 0x80
 8003cba:	0552      	lsls	r2, r2, #21
 8003cbc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003cbe:	1d3a      	adds	r2, r7, #4
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <MX_ADC_Init+0xb0>)
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 fe65 	bl	8004994 <HAL_ADC_ConfigChannel>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003cce:	f000 f967 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	2000028c 	.word	0x2000028c
 8003ce0:	40012400 	.word	0x40012400

08003ce4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003cea:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <MX_SPI1_Init+0x78>)
 8003cec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cee:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003cf0:	2282      	movs	r2, #130	@ 0x82
 8003cf2:	0052      	lsls	r2, r2, #1
 8003cf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cf6:	4b18      	ldr	r3, [pc, #96]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cfc:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003cfe:	22e0      	movs	r2, #224	@ 0xe0
 8003d00:	00d2      	lsls	r2, r2, #3
 8003d02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d04:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d0a:	4b13      	ldr	r3, [pc, #76]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d10:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d12:	2280      	movs	r2, #128	@ 0x80
 8003d14:	0092      	lsls	r2, r2, #2
 8003d16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d32:	2207      	movs	r2, #7
 8003d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d36:	4b08      	ldr	r3, [pc, #32]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d3e:	2208      	movs	r2, #8
 8003d40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <MX_SPI1_Init+0x74>)
 8003d44:	0018      	movs	r0, r3
 8003d46:	f001 ff73 	bl	8005c30 <HAL_SPI_Init>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003d4e:	f000 f927 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200002cc 	.word	0x200002cc
 8003d5c:	40013000 	.word	0x40013000

08003d60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d66:	2308      	movs	r3, #8
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	001a      	movs	r2, r3
 8003d70:	2100      	movs	r1, #0
 8003d72:	f004 fadb 	bl	800832c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d76:	003b      	movs	r3, r7
 8003d78:	0018      	movs	r0, r3
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f004 fad4 	bl	800832c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d84:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003d86:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <MX_TIM3_Init+0xa4>)
 8003d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003d8c:	222f      	movs	r2, #47	@ 0x2f
 8003d8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF-1;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003d98:	4a1b      	ldr	r2, [pc, #108]	@ (8003e08 <MX_TIM3_Init+0xa8>)
 8003d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d9c:	4b18      	ldr	r3, [pc, #96]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003da8:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003daa:	0018      	movs	r0, r3
 8003dac:	f001 fff8 	bl	8005da0 <HAL_TIM_Base_Init>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003db4:	f000 f8f4 	bl	8003fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db8:	2108      	movs	r1, #8
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2280      	movs	r2, #128	@ 0x80
 8003dbe:	0152      	lsls	r2, r2, #5
 8003dc0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dc2:	187a      	adds	r2, r7, r1
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f002 f885 	bl	8005ed8 <HAL_TIM_ConfigClockSource>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003dd2:	f000 f8e5 	bl	8003fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd6:	003b      	movs	r3, r7
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ddc:	003b      	movs	r3, r7
 8003dde:	2200      	movs	r2, #0
 8003de0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de2:	003a      	movs	r2, r7
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <MX_TIM3_Init+0xa0>)
 8003de6:	0011      	movs	r1, r2
 8003de8:	0018      	movs	r0, r3
 8003dea:	f002 fa67 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d001      	beq.n	8003df6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003df2:	f000 f8d5 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b006      	add	sp, #24
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	20000330 	.word	0x20000330
 8003e04:	40000400 	.word	0x40000400
 8003e08:	0000fffe 	.word	0x0000fffe

08003e0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e12:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <MX_USART1_UART_Init+0x5c>)
 8003e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e16:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e18:	22e1      	movs	r2, #225	@ 0xe1
 8003e1a:	0252      	lsls	r2, r2, #9
 8003e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e32:	220c      	movs	r2, #12
 8003e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e3c:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e42:	4b08      	ldr	r3, [pc, #32]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e48:	4b06      	ldr	r3, [pc, #24]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e4e:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <MX_USART1_UART_Init+0x58>)
 8003e50:	0018      	movs	r0, r3
 8003e52:	f002 fa8b 	bl	800636c <HAL_UART_Init>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d001      	beq.n	8003e5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003e5a:	f000 f8a1 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000378 	.word	0x20000378
 8003e68:	40013800 	.word	0x40013800

08003e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b089      	sub	sp, #36	@ 0x24
 8003e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e72:	240c      	movs	r4, #12
 8003e74:	193b      	adds	r3, r7, r4
 8003e76:	0018      	movs	r0, r3
 8003e78:	2314      	movs	r3, #20
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f004 fa55 	bl	800832c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	4b42      	ldr	r3, [pc, #264]	@ (8003f8c <MX_GPIO_Init+0x120>)
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	4b41      	ldr	r3, [pc, #260]	@ (8003f8c <MX_GPIO_Init+0x120>)
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	0289      	lsls	r1, r1, #10
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	615a      	str	r2, [r3, #20]
 8003e90:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <MX_GPIO_Init+0x120>)
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	2380      	movs	r3, #128	@ 0x80
 8003e96:	029b      	lsls	r3, r3, #10
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <MX_GPIO_Init+0x120>)
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8003f8c <MX_GPIO_Init+0x120>)
 8003ea4:	2180      	movs	r1, #128	@ 0x80
 8003ea6:	02c9      	lsls	r1, r1, #11
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	615a      	str	r2, [r3, #20]
 8003eac:	4b37      	ldr	r3, [pc, #220]	@ (8003f8c <MX_GPIO_Init+0x120>)
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	02db      	lsls	r3, r3, #11
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|B_TEMP_LED_Pin|SETTING_LED_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8003eba:	4935      	ldr	r1, [pc, #212]	@ (8003f90 <MX_GPIO_Init+0x124>)
 8003ebc:	2390      	movs	r3, #144	@ 0x90
 8003ebe:	05db      	lsls	r3, r3, #23
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f001 f945 	bl	8005152 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_TEMP_LED_Pin|R_TEMP_LED_Pin|B_SPEED_LED_Pin|G_SPEED_LED_Pin
 8003ec8:	4932      	ldr	r1, [pc, #200]	@ (8003f94 <MX_GPIO_Init+0x128>)
 8003eca:	4b33      	ldr	r3, [pc, #204]	@ (8003f98 <MX_GPIO_Init+0x12c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f001 f93f 	bl	8005152 <HAL_GPIO_WritePin>
                          |R_SPEED_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	2390      	movs	r3, #144	@ 0x90
 8003eda:	05db      	lsls	r3, r3, #23
 8003edc:	2201      	movs	r2, #1
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f001 f937 	bl	8005152 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DS18B20_Pin B_TEMP_LED_Pin SETTING_LED_Pin LOAD_Pin
                           FLASH_CS_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin|B_TEMP_LED_Pin|SETTING_LED_Pin|LOAD_Pin
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <MX_GPIO_Init+0x130>)
 8003ee8:	601a      	str	r2, [r3, #0]
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	2201      	movs	r2, #1
 8003eee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	193b      	adds	r3, r7, r4
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef6:	193b      	adds	r3, r7, r4
 8003ef8:	2200      	movs	r2, #0
 8003efa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efc:	193a      	adds	r2, r7, r4
 8003efe:	2390      	movs	r3, #144	@ 0x90
 8003f00:	05db      	lsls	r3, r3, #23
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 ff97 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEED_SENSOR_DIGITAL_Pin */
  GPIO_InitStruct.Pin = SPEED_SENSOR_DIGITAL_Pin;
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	193b      	adds	r3, r7, r4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPEED_SENSOR_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 8003f1c:	193a      	adds	r2, r7, r4
 8003f1e:	2390      	movs	r3, #144	@ 0x90
 8003f20:	05db      	lsls	r3, r3, #23
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 ff87 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_TEMP_LED_Pin R_TEMP_LED_Pin B_SPEED_LED_Pin G_SPEED_LED_Pin
                           R_SPEED_LED_Pin */
  GPIO_InitStruct.Pin = G_TEMP_LED_Pin|R_TEMP_LED_Pin|B_SPEED_LED_Pin|G_SPEED_LED_Pin
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <MX_GPIO_Init+0x128>)
 8003f2e:	601a      	str	r2, [r3, #0]
                          |R_SPEED_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f30:	193b      	adds	r3, r7, r4
 8003f32:	2201      	movs	r2, #1
 8003f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f42:	193b      	adds	r3, r7, r4
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <MX_GPIO_Init+0x12c>)
 8003f46:	0019      	movs	r1, r3
 8003f48:	0010      	movs	r0, r2
 8003f4a:	f000 ff75 	bl	8004e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_BUTTON_Pin MODE_BUTTON_Pin UP_BUTTON_Pin */
  GPIO_InitStruct.Pin = DOWN_BUTTON_Pin|MODE_BUTTON_Pin|UP_BUTTON_Pin;
 8003f4e:	0021      	movs	r1, r4
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	22e0      	movs	r2, #224	@ 0xe0
 8003f54:	01d2      	lsls	r2, r2, #7
 8003f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2288      	movs	r2, #136	@ 0x88
 8003f5c:	0352      	lsls	r2, r2, #13
 8003f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	4a0b      	ldr	r2, [pc, #44]	@ (8003f98 <MX_GPIO_Init+0x12c>)
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	0010      	movs	r0, r2
 8003f6e:	f000 ff63 	bl	8004e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	2007      	movs	r0, #7
 8003f78:	f000 feae 	bl	8004cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003f7c:	2007      	movs	r0, #7
 8003f7e:	f000 fec0 	bl	8004d02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b009      	add	sp, #36	@ 0x24
 8003f88:	bd90      	pop	{r4, r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	00008184 	.word	0x00008184
 8003f94:	00000c07 	.word	0x00000c07
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	00009184 	.word	0x00009184

08003fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fa4:	b672      	cpsid	i
}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	e7fd      	b.n	8003fa8 <Error_Handler+0x8>

08003fac <ring_buffer_init>:

#include "ring_buffer.h"


void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t capacity)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	1dfb      	adds	r3, r7, #7
 8003fb8:	701a      	strb	r2, [r3, #0]
	rb->buffer = mem_add;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	601a      	str	r2, [r3, #0]
	rb->capacity = capacity;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1dfa      	adds	r2, r7, #7
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 f804 	bl	8003fd8 <ring_buffer_reset>
}
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ring_buffer_reset>:
 * @brief Esta funcion reinicia los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
void ring_buffer_reset(ring_buffer_t *rb)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	rb->head = 0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	719a      	strb	r2, [r3, #6]
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <ring_buffer_size>:
 * @brief Esta funcion calcula los datos disponibles en el buffer
 *
 * @retval size: cantidad de datos disponibles
 */
uint8_t ring_buffer_size(ring_buffer_t *rb)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
	uint8_t size = 0;
 8004002:	200f      	movs	r0, #15
 8004004:	183b      	adds	r3, r7, r0
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
	if (rb->head >= rb->tail && rb->is_full == 0) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	791a      	ldrb	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	795b      	ldrb	r3, [r3, #5]
 8004012:	429a      	cmp	r2, r3
 8004014:	d30b      	bcc.n	800402e <ring_buffer_size+0x34>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	799b      	ldrb	r3, [r3, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <ring_buffer_size+0x34>
		size = rb->head - rb->tail;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7919      	ldrb	r1, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	795a      	ldrb	r2, [r3, #5]
 8004026:	183b      	adds	r3, r7, r0
 8004028:	1a8a      	subs	r2, r1, r2
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e00b      	b.n	8004046 <ring_buffer_size+0x4c>
	} else {
		size = (rb->capacity - rb->tail) + rb->head;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	79da      	ldrb	r2, [r3, #7]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	795b      	ldrb	r3, [r3, #5]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	b2d9      	uxtb	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	791a      	ldrb	r2, [r3, #4]
 800403e:	230f      	movs	r3, #15
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	188a      	adds	r2, r1, r2
 8004044:	701a      	strb	r2, [r3, #0]
	}
	return size;
 8004046:	230f      	movs	r3, #15
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	781b      	ldrb	r3, [r3, #0]
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}

08004054 <ring_buffer_is_empty>:
 * @brief Esta funcion revisa si el buffer esta vacio
 *
 * @retval 1 si esta vacio, 0 si no esta vacio
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *rb)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	return ((rb->head == rb->tail) && (rb->is_full == 0)) ? 1 : 0;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	791a      	ldrb	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	429a      	cmp	r2, r3
 8004066:	d105      	bne.n	8004074 <ring_buffer_is_empty+0x20>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	799b      	ldrb	r3, [r3, #6]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <ring_buffer_is_empty+0x20>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <ring_buffer_is_empty+0x22>
 8004074:	2300      	movs	r3, #0
 8004076:	b2db      	uxtb	r3, r3
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}

08004080 <ring_buffer_write>:
 * @param data: el dato que se va a escribir
 *
 * @retval Ninguno
 */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	000a      	movs	r2, r1
 800408a:	1cfb      	adds	r3, r7, #3
 800408c:	701a      	strb	r2, [r3, #0]
	rb->buffer[rb->head] = data;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	7912      	ldrb	r2, [r2, #4]
 8004096:	189b      	adds	r3, r3, r2
 8004098:	1cfa      	adds	r2, r7, #3
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	3301      	adds	r3, #1
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	711a      	strb	r2, [r3, #4]

	if (rb->head >= rb->capacity) { // si la cabeza llega al final de la memoria
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	791a      	ldrb	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	79db      	ldrb	r3, [r3, #7]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <ring_buffer_write+0x3c>
	  rb->head = 0;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	711a      	strb	r2, [r3, #4]
	}

	if (rb->is_full != 0) { // si se pierden datos viejos
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	799b      	ldrb	r3, [r3, #6]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <ring_buffer_write+0x50>
	  rb->tail = rb->tail + 1;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	795b      	ldrb	r3, [r3, #5]
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	715a      	strb	r2, [r3, #5]
	}

	if (rb->tail >= rb->capacity) { // si la cola llega al final de la memoria
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	795a      	ldrb	r2, [r3, #5]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	79db      	ldrb	r3, [r3, #7]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <ring_buffer_write+0x62>
	  rb->tail = 0;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	715a      	strb	r2, [r3, #5]
	}

	if (rb->head == rb->tail) { // si la cabeza alcanza la cola
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	791a      	ldrb	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	795b      	ldrb	r3, [r3, #5]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d102      	bne.n	80040f4 <ring_buffer_write+0x74>
	  rb->is_full = 1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	719a      	strb	r2, [r3, #6]
	}
}
 80040f4:	46c0      	nop			@ (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <ring_buffer_read>:
 * @param data: la direccion de donde se va a escribir el dato
 *
 * @retval 1: hay datos disponibles, 0: no hay datos
 */
uint8_t ring_buffer_read(ring_buffer_t *rb,uint8_t *byte) // 0x20
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
	if ((rb->is_full != 0) || (rb->head != rb->tail)) { // data available
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	799b      	ldrb	r3, [r3, #6]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <ring_buffer_read+0x1e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	791a      	ldrb	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	795b      	ldrb	r3, [r3, #5]
 8004116:	429a      	cmp	r2, r3
 8004118:	d01b      	beq.n	8004152 <ring_buffer_read+0x56>
		*byte = rb->buffer[rb->tail]; // add: 0x20, val: buffer
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	7952      	ldrb	r2, [r2, #5]
 8004122:	189b      	adds	r3, r3, r2
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail + 1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	795b      	ldrb	r3, [r3, #5]
 800412e:	3301      	adds	r3, #1
 8004130:	b2da      	uxtb	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	715a      	strb	r2, [r3, #5]
		if (rb->tail >= rb->capacity) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	795a      	ldrb	r2, [r3, #5]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	79db      	ldrb	r3, [r3, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <ring_buffer_read+0x4c>
			rb->tail = 0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	715a      	strb	r2, [r3, #5]
		}
		rb->is_full = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	719a      	strb	r2, [r3, #6]

		return 1; // buffer con datos
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <ring_buffer_read+0x58>
	}
	return 0; // buffer vacio
 8004152:	2300      	movs	r3, #0
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b002      	add	sp, #8
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004162:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <HAL_MspInit+0x44>)
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	4b0e      	ldr	r3, [pc, #56]	@ (80041a0 <HAL_MspInit+0x44>)
 8004168:	2101      	movs	r1, #1
 800416a:	430a      	orrs	r2, r1
 800416c:	619a      	str	r2, [r3, #24]
 800416e:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <HAL_MspInit+0x44>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2201      	movs	r2, #1
 8004174:	4013      	ands	r3, r2
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <HAL_MspInit+0x44>)
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <HAL_MspInit+0x44>)
 8004180:	2180      	movs	r1, #128	@ 0x80
 8004182:	0549      	lsls	r1, r1, #21
 8004184:	430a      	orrs	r2, r1
 8004186:	61da      	str	r2, [r3, #28]
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_MspInit+0x44>)
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	055b      	lsls	r3, r3, #21
 8004190:	4013      	ands	r3, r2
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b002      	add	sp, #8
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b08b      	sub	sp, #44	@ 0x2c
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	2414      	movs	r4, #20
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	0018      	movs	r0, r3
 80041b2:	2314      	movs	r3, #20
 80041b4:	001a      	movs	r2, r3
 80041b6:	2100      	movs	r1, #0
 80041b8:	f004 f8b8 	bl	800832c <memset>
  if(hadc->Instance==ADC1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <HAL_ADC_MspInit+0x84>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d12b      	bne.n	800421e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041c6:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_ADC_MspInit+0x88>)
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	4b18      	ldr	r3, [pc, #96]	@ (800422c <HAL_ADC_MspInit+0x88>)
 80041cc:	2180      	movs	r1, #128	@ 0x80
 80041ce:	0089      	lsls	r1, r1, #2
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]
 80041d4:	4b15      	ldr	r3, [pc, #84]	@ (800422c <HAL_ADC_MspInit+0x88>)
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_ADC_MspInit+0x88>)
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	4b11      	ldr	r3, [pc, #68]	@ (800422c <HAL_ADC_MspInit+0x88>)
 80041e8:	2180      	movs	r1, #128	@ 0x80
 80041ea:	0289      	lsls	r1, r1, #10
 80041ec:	430a      	orrs	r2, r1
 80041ee:	615a      	str	r2, [r3, #20]
 80041f0:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <HAL_ADC_MspInit+0x88>)
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	2380      	movs	r3, #128	@ 0x80
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = SPEED_SENSOR_ANALOG_Pin;
 80041fe:	193b      	adds	r3, r7, r4
 8004200:	2208      	movs	r2, #8
 8004202:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004204:	193b      	adds	r3, r7, r4
 8004206:	2203      	movs	r2, #3
 8004208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	193b      	adds	r3, r7, r4
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SPEED_SENSOR_ANALOG_GPIO_Port, &GPIO_InitStruct);
 8004210:	193a      	adds	r2, r7, r4
 8004212:	2390      	movs	r3, #144	@ 0x90
 8004214:	05db      	lsls	r3, r3, #23
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f000 fe0d 	bl	8004e38 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b00b      	add	sp, #44	@ 0x2c
 8004224:	bd90      	pop	{r4, r7, pc}
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	40012400 	.word	0x40012400
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b08b      	sub	sp, #44	@ 0x2c
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	2414      	movs	r4, #20
 800423a:	193b      	adds	r3, r7, r4
 800423c:	0018      	movs	r0, r3
 800423e:	2314      	movs	r3, #20
 8004240:	001a      	movs	r2, r3
 8004242:	2100      	movs	r1, #0
 8004244:	f004 f872 	bl	800832c <memset>
  if(hspi->Instance==SPI1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <HAL_SPI_MspInit+0x90>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d131      	bne.n	80042b6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004252:	4b1c      	ldr	r3, [pc, #112]	@ (80042c4 <HAL_SPI_MspInit+0x94>)
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_SPI_MspInit+0x94>)
 8004258:	2180      	movs	r1, #128	@ 0x80
 800425a:	0149      	lsls	r1, r1, #5
 800425c:	430a      	orrs	r2, r1
 800425e:	619a      	str	r2, [r3, #24]
 8004260:	4b18      	ldr	r3, [pc, #96]	@ (80042c4 <HAL_SPI_MspInit+0x94>)
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	015b      	lsls	r3, r3, #5
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <HAL_SPI_MspInit+0x94>)
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <HAL_SPI_MspInit+0x94>)
 8004274:	2180      	movs	r1, #128	@ 0x80
 8004276:	02c9      	lsls	r1, r1, #11
 8004278:	430a      	orrs	r2, r1
 800427a:	615a      	str	r2, [r3, #20]
 800427c:	4b11      	ldr	r3, [pc, #68]	@ (80042c4 <HAL_SPI_MspInit+0x94>)
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	02db      	lsls	r3, r3, #11
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 800428a:	0021      	movs	r1, r4
 800428c:	187b      	adds	r3, r7, r1
 800428e:	2238      	movs	r2, #56	@ 0x38
 8004290:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004292:	187b      	adds	r3, r7, r1
 8004294:	2202      	movs	r2, #2
 8004296:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	187b      	adds	r3, r7, r1
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800429e:	187b      	adds	r3, r7, r1
 80042a0:	2203      	movs	r2, #3
 80042a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80042a4:	187b      	adds	r3, r7, r1
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	4a06      	ldr	r2, [pc, #24]	@ (80042c8 <HAL_SPI_MspInit+0x98>)
 80042ae:	0019      	movs	r1, r3
 80042b0:	0010      	movs	r0, r2
 80042b2:	f000 fdc1 	bl	8004e38 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b00b      	add	sp, #44	@ 0x2c
 80042bc:	bd90      	pop	{r4, r7, pc}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	40013000 	.word	0x40013000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	48000400 	.word	0x48000400

080042cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <HAL_TIM_Base_MspInit+0x34>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10b      	bne.n	80042f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_TIM_Base_MspInit+0x38>)
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <HAL_TIM_Base_MspInit+0x38>)
 80042e4:	2102      	movs	r1, #2
 80042e6:	430a      	orrs	r2, r1
 80042e8:	61da      	str	r2, [r3, #28]
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_TIM_Base_MspInit+0x38>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2202      	movs	r2, #2
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	40000400 	.word	0x40000400
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b08b      	sub	sp, #44	@ 0x2c
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	2414      	movs	r4, #20
 8004312:	193b      	adds	r3, r7, r4
 8004314:	0018      	movs	r0, r3
 8004316:	2314      	movs	r3, #20
 8004318:	001a      	movs	r2, r3
 800431a:	2100      	movs	r1, #0
 800431c:	f004 f806 	bl	800832c <memset>
  if(huart->Instance==USART1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <HAL_UART_MspInit+0xa0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d139      	bne.n	800439e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_UART_MspInit+0xa4>)
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HAL_UART_MspInit+0xa4>)
 8004330:	2180      	movs	r1, #128	@ 0x80
 8004332:	01c9      	lsls	r1, r1, #7
 8004334:	430a      	orrs	r2, r1
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	4b1c      	ldr	r3, [pc, #112]	@ (80043ac <HAL_UART_MspInit+0xa4>)
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	2380      	movs	r3, #128	@ 0x80
 800433e:	01db      	lsls	r3, r3, #7
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <HAL_UART_MspInit+0xa4>)
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	4b18      	ldr	r3, [pc, #96]	@ (80043ac <HAL_UART_MspInit+0xa4>)
 800434c:	2180      	movs	r1, #128	@ 0x80
 800434e:	02c9      	lsls	r1, r1, #11
 8004350:	430a      	orrs	r2, r1
 8004352:	615a      	str	r2, [r3, #20]
 8004354:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_UART_MspInit+0xa4>)
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	2380      	movs	r3, #128	@ 0x80
 800435a:	02db      	lsls	r3, r3, #11
 800435c:	4013      	ands	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004362:	0021      	movs	r1, r4
 8004364:	187b      	adds	r3, r7, r1
 8004366:	22c0      	movs	r2, #192	@ 0xc0
 8004368:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	187b      	adds	r3, r7, r1
 800436c:	2202      	movs	r2, #2
 800436e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	187b      	adds	r3, r7, r1
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004376:	187b      	adds	r3, r7, r1
 8004378:	2203      	movs	r2, #3
 800437a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800437c:	187b      	adds	r3, r7, r1
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	187b      	adds	r3, r7, r1
 8004384:	4a0a      	ldr	r2, [pc, #40]	@ (80043b0 <HAL_UART_MspInit+0xa8>)
 8004386:	0019      	movs	r1, r3
 8004388:	0010      	movs	r0, r2
 800438a:	f000 fd55 	bl	8004e38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2100      	movs	r1, #0
 8004392:	201b      	movs	r0, #27
 8004394:	f000 fca0 	bl	8004cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004398:	201b      	movs	r0, #27
 800439a:	f000 fcb2 	bl	8004d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b00b      	add	sp, #44	@ 0x2c
 80043a4:	bd90      	pop	{r4, r7, pc}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40021000 	.word	0x40021000
 80043b0:	48000400 	.word	0x48000400

080043b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	e7fd      	b.n	80043b8 <NMI_Handler+0x4>

080043bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	e7fd      	b.n	80043c0 <HardFault_Handler+0x4>

080043c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043dc:	f000 f95a 	bl	8004694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUTTON_Pin);
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	015b      	lsls	r3, r3, #5
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 fecc 	bl	800518c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MODE_BUTTON_Pin);
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 fec7 	bl	800518c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_BUTTON_Pin);
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	01db      	lsls	r3, r3, #7
 8004402:	0018      	movs	r0, r3
 8004404:	f000 fec2 	bl	800518c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004414:	4b03      	ldr	r3, [pc, #12]	@ (8004424 <USART1_IRQHandler+0x14>)
 8004416:	0018      	movs	r0, r3
 8004418:	f002 f8f2 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	20000378 	.word	0x20000378

08004428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  return 1;
 800442c:	2301      	movs	r3, #1
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_kill>:

int _kill(int pid, int sig)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800443e:	f003 ffcf 	bl	80083e0 <__errno>
 8004442:	0003      	movs	r3, r0
 8004444:	2216      	movs	r2, #22
 8004446:	601a      	str	r2, [r3, #0]
  return -1;
 8004448:	2301      	movs	r3, #1
 800444a:	425b      	negs	r3, r3
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <_exit>:

void _exit (int status)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800445c:	2301      	movs	r3, #1
 800445e:	425a      	negs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff ffe5 	bl	8004434 <_kill>
  while (1) {}    /* Make sure we hang here */
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	e7fd      	b.n	800446a <_exit+0x16>

0800446e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e00a      	b.n	8004496 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004480:	e000      	b.n	8004484 <_read+0x16>
 8004482:	bf00      	nop
 8004484:	0001      	movs	r1, r0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	60ba      	str	r2, [r7, #8]
 800448c:	b2ca      	uxtb	r2, r1
 800448e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3301      	adds	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	dbf0      	blt.n	8004480 <_read+0x12>
  }

  return len;
 800449e:	687b      	ldr	r3, [r7, #4]
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b006      	add	sp, #24
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e009      	b.n	80044ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	60ba      	str	r2, [r7, #8]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	0018      	movs	r0, r3
 80044c4:	e000      	b.n	80044c8 <_write+0x20>
 80044c6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	dbf1      	blt.n	80044ba <_write+0x12>
  }
  return len;
 80044d6:	687b      	ldr	r3, [r7, #4]
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b006      	add	sp, #24
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_close>:

int _close(int file)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	425b      	negs	r3, r3
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2280      	movs	r2, #128	@ 0x80
 8004502:	0192      	lsls	r2, r2, #6
 8004504:	605a      	str	r2, [r3, #4]
  return 0;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b002      	add	sp, #8
 800450e:	bd80      	pop	{r7, pc}

08004510 <_isatty>:

int _isatty(int file)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004518:	2301      	movs	r3, #1
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b002      	add	sp, #8
 8004520:	bd80      	pop	{r7, pc}

08004522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800452e:	2300      	movs	r3, #0
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bd80      	pop	{r7, pc}

08004538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <_sbrk+0x5c>)
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <_sbrk+0x60>)
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <_sbrk+0x64>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004554:	4b11      	ldr	r3, [pc, #68]	@ (800459c <_sbrk+0x64>)
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <_sbrk+0x68>)
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <_sbrk+0x64>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	429a      	cmp	r2, r3
 8004566:	d207      	bcs.n	8004578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004568:	f003 ff3a 	bl	80083e0 <__errno>
 800456c:	0003      	movs	r3, r0
 800456e:	220c      	movs	r2, #12
 8004570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004572:	2301      	movs	r3, #1
 8004574:	425b      	negs	r3, r3
 8004576:	e009      	b.n	800458c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004578:	4b08      	ldr	r3, [pc, #32]	@ (800459c <_sbrk+0x64>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800457e:	4b07      	ldr	r3, [pc, #28]	@ (800459c <_sbrk+0x64>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	18d2      	adds	r2, r2, r3
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <_sbrk+0x64>)
 8004588:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800458a:	68fb      	ldr	r3, [r7, #12]
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b006      	add	sp, #24
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20002000 	.word	0x20002000
 8004598:	00000400 	.word	0x00000400
 800459c:	20000568 	.word	0x20000568
 80045a0:	200006c0 	.word	0x200006c0

080045a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80045a8:	46c0      	nop			@ (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045b0:	480d      	ldr	r0, [pc, #52]	@ (80045e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80045b4:	f7ff fff6 	bl	80045a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045b8:	480c      	ldr	r0, [pc, #48]	@ (80045ec <LoopForever+0x6>)
  ldr r1, =_edata
 80045ba:	490d      	ldr	r1, [pc, #52]	@ (80045f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045bc:	4a0d      	ldr	r2, [pc, #52]	@ (80045f4 <LoopForever+0xe>)
  movs r3, #0
 80045be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045c0:	e002      	b.n	80045c8 <LoopCopyDataInit>

080045c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045c6:	3304      	adds	r3, #4

080045c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045cc:	d3f9      	bcc.n	80045c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ce:	4a0a      	ldr	r2, [pc, #40]	@ (80045f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045d0:	4c0a      	ldr	r4, [pc, #40]	@ (80045fc <LoopForever+0x16>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045d4:	e001      	b.n	80045da <LoopFillZerobss>

080045d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045d8:	3204      	adds	r2, #4

080045da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045dc:	d3fb      	bcc.n	80045d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80045de:	f003 ff05 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045e2:	f7ff f8fd 	bl	80037e0 <main>

080045e6 <LoopForever>:

LoopForever:
    b LoopForever
 80045e6:	e7fe      	b.n	80045e6 <LoopForever>
  ldr   r0, =_estack
 80045e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80045ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045f0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80045f4:	0800ba68 	.word	0x0800ba68
  ldr r2, =_sbss
 80045f8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80045fc:	200006bc 	.word	0x200006bc

08004600 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004600:	e7fe      	b.n	8004600 <ADC1_IRQHandler>
	...

08004604 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004608:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <HAL_Init+0x24>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_Init+0x24>)
 800460e:	2110      	movs	r1, #16
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004614:	2003      	movs	r0, #3
 8004616:	f000 f809 	bl	800462c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800461a:	f7ff fd9f 	bl	800415c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	40022000 	.word	0x40022000

0800462c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004634:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <HAL_InitTick+0x5c>)
 8004636:	681c      	ldr	r4, [r3, #0]
 8004638:	4b14      	ldr	r3, [pc, #80]	@ (800468c <HAL_InitTick+0x60>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	0019      	movs	r1, r3
 800463e:	23fa      	movs	r3, #250	@ 0xfa
 8004640:	0098      	lsls	r0, r3, #2
 8004642:	f7fb fd87 	bl	8000154 <__udivsi3>
 8004646:	0003      	movs	r3, r0
 8004648:	0019      	movs	r1, r3
 800464a:	0020      	movs	r0, r4
 800464c:	f7fb fd82 	bl	8000154 <__udivsi3>
 8004650:	0003      	movs	r3, r0
 8004652:	0018      	movs	r0, r3
 8004654:	f000 fb65 	bl	8004d22 <HAL_SYSTICK_Config>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d001      	beq.n	8004660 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e00f      	b.n	8004680 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d80b      	bhi.n	800467e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	2301      	movs	r3, #1
 800466a:	425b      	negs	r3, r3
 800466c:	2200      	movs	r2, #0
 800466e:	0018      	movs	r0, r3
 8004670:	f000 fb32 	bl	8004cd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004674:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <HAL_InitTick+0x64>)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e000      	b.n	8004680 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b003      	add	sp, #12
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	20000000 	.word	0x20000000
 800468c:	20000008 	.word	0x20000008
 8004690:	20000004 	.word	0x20000004

08004694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <HAL_IncTick+0x1c>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	001a      	movs	r2, r3
 800469e:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <HAL_IncTick+0x20>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	18d2      	adds	r2, r2, r3
 80046a4:	4b03      	ldr	r3, [pc, #12]	@ (80046b4 <HAL_IncTick+0x20>)
 80046a6:	601a      	str	r2, [r3, #0]
}
 80046a8:	46c0      	nop			@ (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	20000008 	.word	0x20000008
 80046b4:	2000056c 	.word	0x2000056c

080046b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  return uwTick;
 80046bc:	4b02      	ldr	r3, [pc, #8]	@ (80046c8 <HAL_GetTick+0x10>)
 80046be:	681b      	ldr	r3, [r3, #0]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	2000056c 	.word	0x2000056c

080046cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046d4:	f7ff fff0 	bl	80046b8 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	d005      	beq.n	80046f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <HAL_Delay+0x44>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	001a      	movs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	f7ff ffe0 	bl	80046b8 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	429a      	cmp	r2, r3
 8004702:	d8f7      	bhi.n	80046f4 <HAL_Delay+0x28>
  {
  }
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b004      	add	sp, #16
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	20000008 	.word	0x20000008

08004714 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471c:	230f      	movs	r3, #15
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e125      	b.n	800497e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2234      	movs	r2, #52	@ 0x34
 8004744:	2100      	movs	r1, #0
 8004746:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f7ff fd2a 	bl	80041a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	2210      	movs	r2, #16
 8004756:	4013      	ands	r3, r2
 8004758:	d000      	beq.n	800475c <HAL_ADC_Init+0x48>
 800475a:	e103      	b.n	8004964 <HAL_ADC_Init+0x250>
 800475c:	230f      	movs	r3, #15
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d000      	beq.n	8004768 <HAL_ADC_Init+0x54>
 8004766:	e0fd      	b.n	8004964 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2204      	movs	r2, #4
 8004770:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004772:	d000      	beq.n	8004776 <HAL_ADC_Init+0x62>
 8004774:	e0f6      	b.n	8004964 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	4a83      	ldr	r2, [pc, #524]	@ (8004988 <HAL_ADC_Init+0x274>)
 800477c:	4013      	ands	r3, r2
 800477e:	2202      	movs	r2, #2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2203      	movs	r2, #3
 800478e:	4013      	ands	r3, r2
 8004790:	2b01      	cmp	r3, #1
 8004792:	d112      	bne.n	80047ba <HAL_ADC_Init+0xa6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	4013      	ands	r3, r2
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d009      	beq.n	80047b6 <HAL_ADC_Init+0xa2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	2380      	movs	r3, #128	@ 0x80
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	401a      	ands	r2, r3
 80047ae:	2380      	movs	r3, #128	@ 0x80
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_Init+0xa6>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_ADC_Init+0xa8>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2218      	movs	r2, #24
 80047c8:	4393      	bics	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	0899      	lsrs	r1, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4964      	ldr	r1, [pc, #400]	@ (800498c <HAL_ADC_Init+0x278>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7e1b      	ldrb	r3, [r3, #24]
 8004802:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	7e5b      	ldrb	r3, [r3, #25]
 8004808:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800480a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7e9b      	ldrb	r3, [r3, #26]
 8004810:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004812:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	2b01      	cmp	r3, #1
 800481a:	d002      	beq.n	8004822 <HAL_ADC_Init+0x10e>
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	015b      	lsls	r3, r3, #5
 8004820:	e000      	b.n	8004824 <HAL_ADC_Init+0x110>
 8004822:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004824:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800482a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d101      	bne.n	8004838 <HAL_ADC_Init+0x124>
 8004834:	2304      	movs	r3, #4
 8004836:	e000      	b.n	800483a <HAL_ADC_Init+0x126>
 8004838:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800483a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2124      	movs	r1, #36	@ 0x24
 8004840:	5c5b      	ldrb	r3, [r3, r1]
 8004842:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004844:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7edb      	ldrb	r3, [r3, #27]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d115      	bne.n	8004880 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7e9b      	ldrb	r3, [r3, #26]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	0252      	lsls	r2, r2, #9
 8004862:	4313      	orrs	r3, r2
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	e00b      	b.n	8004880 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	2220      	movs	r2, #32
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004878:	2201      	movs	r2, #1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	23c2      	movs	r3, #194	@ 0xc2
 8004886:	33ff      	adds	r3, #255	@ 0xff
 8004888:	429a      	cmp	r2, r3
 800488a:	d007      	beq.n	800489c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004894:	4313      	orrs	r3, r2
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4313      	orrs	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68d9      	ldr	r1, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b0:	2380      	movs	r3, #128	@ 0x80
 80048b2:	055b      	lsls	r3, r3, #21
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d01b      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d017      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d013      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d00f      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d00b      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d007      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d003      	beq.n	80048f0 <HAL_ADC_Init+0x1dc>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	2b07      	cmp	r3, #7
 80048ee:	d112      	bne.n	8004916 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2107      	movs	r1, #7
 80048fc:	438a      	bics	r2, r1
 80048fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6959      	ldr	r1, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490a:	2207      	movs	r2, #7
 800490c:	401a      	ands	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_ADC_Init+0x27c>)
 800491e:	4013      	ands	r3, r2
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d10b      	bne.n	800493e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	2203      	movs	r2, #3
 8004932:	4393      	bics	r3, r2
 8004934:	2201      	movs	r2, #1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800493c:	e01c      	b.n	8004978 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	2212      	movs	r2, #18
 8004944:	4393      	bics	r3, r2
 8004946:	2210      	movs	r2, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	2201      	movs	r2, #1
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800495a:	230f      	movs	r3, #15
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004962:	e009      	b.n	8004978 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004968:	2210      	movs	r2, #16
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004970:	230f      	movs	r3, #15
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004978:	230f      	movs	r3, #15
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	781b      	ldrb	r3, [r3, #0]
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b004      	add	sp, #16
 8004984:	bd80      	pop	{r7, pc}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	fffffefd 	.word	0xfffffefd
 800498c:	fffe0219 	.word	0xfffe0219
 8004990:	833fffe7 	.word	0x833fffe7

08004994 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499e:	230f      	movs	r3, #15
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	055b      	lsls	r3, r3, #21
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d011      	beq.n	80049da <HAL_ADC_ConfigChannel+0x46>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d00d      	beq.n	80049da <HAL_ADC_ConfigChannel+0x46>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d009      	beq.n	80049da <HAL_ADC_ConfigChannel+0x46>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d005      	beq.n	80049da <HAL_ADC_ConfigChannel+0x46>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d001      	beq.n	80049da <HAL_ADC_ConfigChannel+0x46>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2234      	movs	r2, #52	@ 0x34
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x54>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0bb      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x1cc>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2234      	movs	r2, #52	@ 0x34
 80049ec:	2101      	movs	r1, #1
 80049ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2204      	movs	r2, #4
 80049f8:	4013      	ands	r3, r2
 80049fa:	d000      	beq.n	80049fe <HAL_ADC_ConfigChannel+0x6a>
 80049fc:	e09f      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a59      	ldr	r2, [pc, #356]	@ (8004b68 <HAL_ADC_ConfigChannel+0x1d4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d100      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x76>
 8004a08:	e077      	b.n	8004afa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	409a      	lsls	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	055b      	lsls	r3, r3, #21
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d037      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d033      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d02f      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d02b      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d027      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d023      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d01f      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	2b07      	cmp	r3, #7
 8004a62:	d01b      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2107      	movs	r1, #7
 8004a70:	400b      	ands	r3, r1
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d012      	beq.n	8004a9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2107      	movs	r1, #7
 8004a82:	438a      	bics	r2, r1
 8004a84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6959      	ldr	r1, [r3, #20]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2207      	movs	r2, #7
 8004a92:	401a      	ands	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d003      	beq.n	8004aac <HAL_ADC_ConfigChannel+0x118>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b11      	cmp	r3, #17
 8004aaa:	d152      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004aac:	4b2f      	ldr	r3, [pc, #188]	@ (8004b6c <HAL_ADC_ConfigChannel+0x1d8>)
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d102      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x12a>
 8004ab8:	2380      	movs	r3, #128	@ 0x80
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	e001      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x12e>
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	03db      	lsls	r3, r3, #15
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <HAL_ADC_ConfigChannel+0x1d8>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d140      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ad0:	4b27      	ldr	r3, [pc, #156]	@ (8004b70 <HAL_ADC_ConfigChannel+0x1dc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4927      	ldr	r1, [pc, #156]	@ (8004b74 <HAL_ADC_ConfigChannel+0x1e0>)
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fb fb3c 	bl	8000154 <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	001a      	movs	r2, r3
 8004ae0:	0013      	movs	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004aea:	e002      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f9      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x158>
 8004af8:	e02b      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	4099      	lsls	r1, r3
 8004b08:	000b      	movs	r3, r1
 8004b0a:	43d9      	mvns	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	400a      	ands	r2, r1
 8004b12:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d003      	beq.n	8004b24 <HAL_ADC_ConfigChannel+0x190>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b11      	cmp	r3, #17
 8004b22:	d116      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <HAL_ADC_ConfigChannel+0x1d8>)
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x1a0>
 8004b30:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <HAL_ADC_ConfigChannel+0x1e4>)
 8004b32:	e000      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x1a2>
 8004b34:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <HAL_ADC_ConfigChannel+0x1e8>)
 8004b36:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <HAL_ADC_ConfigChannel+0x1d8>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e009      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	2220      	movs	r2, #32
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004b4a:	230f      	movs	r3, #15
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2234      	movs	r2, #52	@ 0x34
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004b5a:	230f      	movs	r3, #15
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	781b      	ldrb	r3, [r3, #0]
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b004      	add	sp, #16
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	00001001 	.word	0x00001001
 8004b6c:	40012708 	.word	0x40012708
 8004b70:	20000000 	.word	0x20000000
 8004b74:	000f4240 	.word	0x000f4240
 8004b78:	ff7fffff 	.word	0xff7fffff
 8004b7c:	ffbfffff 	.word	0xffbfffff

08004b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	0002      	movs	r2, r0
 8004b88:	1dfb      	adds	r3, r7, #7
 8004b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b8c:	1dfb      	adds	r3, r7, #7
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b92:	d809      	bhi.n	8004ba8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b94:	1dfb      	adds	r3, r7, #7
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	001a      	movs	r2, r3
 8004b9a:	231f      	movs	r3, #31
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <__NVIC_EnableIRQ+0x30>)
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4091      	lsls	r1, r2
 8004ba4:	000a      	movs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]
  }
}
 8004ba8:	46c0      	nop			@ (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	e000e100 	.word	0xe000e100

08004bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	0002      	movs	r2, r0
 8004bbc:	6039      	str	r1, [r7, #0]
 8004bbe:	1dfb      	adds	r3, r7, #7
 8004bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc8:	d828      	bhi.n	8004c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bca:	4a2f      	ldr	r2, [pc, #188]	@ (8004c88 <__NVIC_SetPriority+0xd4>)
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	33c0      	adds	r3, #192	@ 0xc0
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	589b      	ldr	r3, [r3, r2]
 8004bda:	1dfa      	adds	r2, r7, #7
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	0011      	movs	r1, r2
 8004be0:	2203      	movs	r2, #3
 8004be2:	400a      	ands	r2, r1
 8004be4:	00d2      	lsls	r2, r2, #3
 8004be6:	21ff      	movs	r1, #255	@ 0xff
 8004be8:	4091      	lsls	r1, r2
 8004bea:	000a      	movs	r2, r1
 8004bec:	43d2      	mvns	r2, r2
 8004bee:	401a      	ands	r2, r3
 8004bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	22ff      	movs	r2, #255	@ 0xff
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	2303      	movs	r3, #3
 8004c02:	4003      	ands	r3, r0
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c08:	481f      	ldr	r0, [pc, #124]	@ (8004c88 <__NVIC_SetPriority+0xd4>)
 8004c0a:	1dfb      	adds	r3, r7, #7
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b25b      	sxtb	r3, r3
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	430a      	orrs	r2, r1
 8004c14:	33c0      	adds	r3, #192	@ 0xc0
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c1a:	e031      	b.n	8004c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <__NVIC_SetPriority+0xd8>)
 8004c1e:	1dfb      	adds	r3, r7, #7
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	0019      	movs	r1, r3
 8004c24:	230f      	movs	r3, #15
 8004c26:	400b      	ands	r3, r1
 8004c28:	3b08      	subs	r3, #8
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3306      	adds	r3, #6
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	18d3      	adds	r3, r2, r3
 8004c32:	3304      	adds	r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1dfa      	adds	r2, r7, #7
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	400a      	ands	r2, r1
 8004c40:	00d2      	lsls	r2, r2, #3
 8004c42:	21ff      	movs	r1, #255	@ 0xff
 8004c44:	4091      	lsls	r1, r2
 8004c46:	000a      	movs	r2, r1
 8004c48:	43d2      	mvns	r2, r2
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	22ff      	movs	r2, #255	@ 0xff
 8004c54:	401a      	ands	r2, r3
 8004c56:	1dfb      	adds	r3, r7, #7
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	4003      	ands	r3, r0
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c64:	4809      	ldr	r0, [pc, #36]	@ (8004c8c <__NVIC_SetPriority+0xd8>)
 8004c66:	1dfb      	adds	r3, r7, #7
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	001c      	movs	r4, r3
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	4023      	ands	r3, r4
 8004c70:	3b08      	subs	r3, #8
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	430a      	orrs	r2, r1
 8004c76:	3306      	adds	r3, #6
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	18c3      	adds	r3, r0, r3
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	46c0      	nop			@ (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b003      	add	sp, #12
 8004c86:	bd90      	pop	{r4, r7, pc}
 8004c88:	e000e100 	.word	0xe000e100
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	1e5a      	subs	r2, r3, #1
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	045b      	lsls	r3, r3, #17
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d301      	bcc.n	8004ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e010      	b.n	8004cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <SysTick_Config+0x44>)
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	3a01      	subs	r2, #1
 8004cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	2103      	movs	r1, #3
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff ff7c 	bl	8004bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <SysTick_Config+0x44>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cc2:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <SysTick_Config+0x44>)
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	e000e010 	.word	0xe000e010

08004cd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	1c02      	adds	r2, r0, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	0011      	movs	r1, r2
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff ff5d 	bl	8004bb4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	0002      	movs	r2, r0
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b25b      	sxtb	r3, r3
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff ff33 	bl	8004b80 <__NVIC_EnableIRQ>
}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b002      	add	sp, #8
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7ff ffaf 	bl	8004c90 <SysTick_Config>
 8004d32:	0003      	movs	r3, r0
}
 8004d34:	0018      	movs	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2221      	movs	r2, #33	@ 0x21
 8004d48:	5c9b      	ldrb	r3, [r3, r2]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d008      	beq.n	8004d62 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2204      	movs	r2, #4
 8004d54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e020      	b.n	8004da4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	210e      	movs	r1, #14
 8004d6e:	438a      	bics	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	438a      	bics	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4091      	lsls	r1, r2
 8004d8e:	000a      	movs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2221      	movs	r2, #33	@ 0x21
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	210f      	movs	r1, #15
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2221      	movs	r2, #33	@ 0x21
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d006      	beq.n	8004dd6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e028      	b.n	8004e28 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	210e      	movs	r1, #14
 8004de2:	438a      	bics	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	438a      	bics	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4091      	lsls	r1, r2
 8004e02:	000a      	movs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2221      	movs	r2, #33	@ 0x21
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	2100      	movs	r1, #0
 8004e14:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	0010      	movs	r0, r2
 8004e26:	4798      	blx	r3
    }
  }
  return status;
 8004e28:	230f      	movs	r3, #15
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
}
 8004e2e:	0018      	movs	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b004      	add	sp, #16
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e46:	e14f      	b.n	80050e8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4091      	lsls	r1, r2
 8004e52:	000a      	movs	r2, r1
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d100      	bne.n	8004e60 <HAL_GPIO_Init+0x28>
 8004e5e:	e140      	b.n	80050e2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2203      	movs	r2, #3
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d005      	beq.n	8004e78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2203      	movs	r2, #3
 8004e72:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d130      	bne.n	8004eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	409a      	lsls	r2, r3
 8004e86:	0013      	movs	r3, r2
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	0013      	movs	r3, r2
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eae:	2201      	movs	r2, #1
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	0013      	movs	r3, r2
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	0013      	movs	r3, r2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d017      	beq.n	8004f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	0013      	movs	r3, r2
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	0013      	movs	r3, r2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d123      	bne.n	8004f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	08da      	lsrs	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3208      	adds	r2, #8
 8004f2a:	0092      	lsls	r2, r2, #2
 8004f2c:	58d3      	ldr	r3, [r2, r3]
 8004f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2207      	movs	r2, #7
 8004f34:	4013      	ands	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	220f      	movs	r2, #15
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	0013      	movs	r3, r2
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4013      	ands	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2107      	movs	r1, #7
 8004f4e:	400b      	ands	r3, r1
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	409a      	lsls	r2, r3
 8004f54:	0013      	movs	r3, r2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	08da      	lsrs	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3208      	adds	r2, #8
 8004f64:	0092      	lsls	r2, r2, #2
 8004f66:	6939      	ldr	r1, [r7, #16]
 8004f68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2203      	movs	r2, #3
 8004f76:	409a      	lsls	r2, r3
 8004f78:	0013      	movs	r3, r2
 8004f7a:	43da      	mvns	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2203      	movs	r2, #3
 8004f88:	401a      	ands	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	0013      	movs	r3, r2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	23c0      	movs	r3, #192	@ 0xc0
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d100      	bne.n	8004fac <HAL_GPIO_Init+0x174>
 8004faa:	e09a      	b.n	80050e2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fac:	4b54      	ldr	r3, [pc, #336]	@ (8005100 <HAL_GPIO_Init+0x2c8>)
 8004fae:	699a      	ldr	r2, [r3, #24]
 8004fb0:	4b53      	ldr	r3, [pc, #332]	@ (8005100 <HAL_GPIO_Init+0x2c8>)
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]
 8004fb8:	4b51      	ldr	r3, [pc, #324]	@ (8005100 <HAL_GPIO_Init+0x2c8>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005104 <HAL_GPIO_Init+0x2cc>)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	589b      	ldr	r3, [r3, r2]
 8004fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	0013      	movs	r3, r2
 8004fe0:	43da      	mvns	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	2390      	movs	r3, #144	@ 0x90
 8004fec:	05db      	lsls	r3, r3, #23
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d013      	beq.n	800501a <HAL_GPIO_Init+0x1e2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a44      	ldr	r2, [pc, #272]	@ (8005108 <HAL_GPIO_Init+0x2d0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00d      	beq.n	8005016 <HAL_GPIO_Init+0x1de>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a43      	ldr	r2, [pc, #268]	@ (800510c <HAL_GPIO_Init+0x2d4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <HAL_GPIO_Init+0x1da>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a42      	ldr	r2, [pc, #264]	@ (8005110 <HAL_GPIO_Init+0x2d8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <HAL_GPIO_Init+0x1d6>
 800500a:	2303      	movs	r3, #3
 800500c:	e006      	b.n	800501c <HAL_GPIO_Init+0x1e4>
 800500e:	2305      	movs	r3, #5
 8005010:	e004      	b.n	800501c <HAL_GPIO_Init+0x1e4>
 8005012:	2302      	movs	r3, #2
 8005014:	e002      	b.n	800501c <HAL_GPIO_Init+0x1e4>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_GPIO_Init+0x1e4>
 800501a:	2300      	movs	r3, #0
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	2103      	movs	r1, #3
 8005020:	400a      	ands	r2, r1
 8005022:	0092      	lsls	r2, r2, #2
 8005024:	4093      	lsls	r3, r2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800502c:	4935      	ldr	r1, [pc, #212]	@ (8005104 <HAL_GPIO_Init+0x2cc>)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	3302      	adds	r3, #2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503a:	4b36      	ldr	r3, [pc, #216]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	43da      	mvns	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	2380      	movs	r3, #128	@ 0x80
 8005050:	035b      	lsls	r3, r3, #13
 8005052:	4013      	ands	r3, r2
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800505e:	4b2d      	ldr	r3, [pc, #180]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	43da      	mvns	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4013      	ands	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	039b      	lsls	r3, r3, #14
 800507c:	4013      	ands	r3, r2
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005088:	4b22      	ldr	r3, [pc, #136]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800508e:	4b21      	ldr	r3, [pc, #132]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43da      	mvns	r2, r3
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	029b      	lsls	r3, r3, #10
 80050a6:	4013      	ands	r3, r2
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050b2:	4b18      	ldr	r3, [pc, #96]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80050b8:	4b16      	ldr	r3, [pc, #88]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	43da      	mvns	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	025b      	lsls	r3, r3, #9
 80050d0:	4013      	ands	r3, r2
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <HAL_GPIO_Init+0x2dc>)
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	3301      	adds	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	40da      	lsrs	r2, r3
 80050f0:	1e13      	subs	r3, r2, #0
 80050f2:	d000      	beq.n	80050f6 <HAL_GPIO_Init+0x2be>
 80050f4:	e6a8      	b.n	8004e48 <HAL_GPIO_Init+0x10>
  } 
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46c0      	nop			@ (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b006      	add	sp, #24
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40021000 	.word	0x40021000
 8005104:	40010000 	.word	0x40010000
 8005108:	48000400 	.word	0x48000400
 800510c:	48000800 	.word	0x48000800
 8005110:	48000c00 	.word	0x48000c00
 8005114:	40010400 	.word	0x40010400

08005118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	000a      	movs	r2, r1
 8005122:	1cbb      	adds	r3, r7, #2
 8005124:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	1cba      	adds	r2, r7, #2
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	4013      	ands	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005132:	230f      	movs	r3, #15
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e003      	b.n	8005144 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800513c:	230f      	movs	r3, #15
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005144:	230f      	movs	r3, #15
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
  }
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	b004      	add	sp, #16
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	0008      	movs	r0, r1
 800515c:	0011      	movs	r1, r2
 800515e:	1cbb      	adds	r3, r7, #2
 8005160:	1c02      	adds	r2, r0, #0
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	1c7b      	adds	r3, r7, #1
 8005166:	1c0a      	adds	r2, r1, #0
 8005168:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800516a:	1c7b      	adds	r3, r7, #1
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005172:	1cbb      	adds	r3, r7, #2
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800517a:	e003      	b.n	8005184 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800517c:	1cbb      	adds	r3, r7, #2
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005184:	46c0      	nop			@ (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	0002      	movs	r2, r0
 8005194:	1dbb      	adds	r3, r7, #6
 8005196:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	1dba      	adds	r2, r7, #6
 800519e:	8812      	ldrh	r2, [r2, #0]
 80051a0:	4013      	ands	r3, r2
 80051a2:	d008      	beq.n	80051b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80051a6:	1dba      	adds	r2, r7, #6
 80051a8:	8812      	ldrh	r2, [r2, #0]
 80051aa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ac:	1dbb      	adds	r3, r7, #6
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 f807 	bl	80051c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b002      	add	sp, #8
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	40010400 	.word	0x40010400

080051c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	0002      	movs	r2, r0
 80051cc:	1dbb      	adds	r3, r7, #6
 80051ce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80051d0:	46c0      	nop			@ (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e301      	b.n	80057ee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2201      	movs	r2, #1
 80051f0:	4013      	ands	r3, r2
 80051f2:	d100      	bne.n	80051f6 <HAL_RCC_OscConfig+0x1e>
 80051f4:	e08d      	b.n	8005312 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80051f6:	4bc3      	ldr	r3, [pc, #780]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	220c      	movs	r2, #12
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d00e      	beq.n	8005220 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005202:	4bc0      	ldr	r3, [pc, #768]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	220c      	movs	r2, #12
 8005208:	4013      	ands	r3, r2
 800520a:	2b08      	cmp	r3, #8
 800520c:	d116      	bne.n	800523c <HAL_RCC_OscConfig+0x64>
 800520e:	4bbd      	ldr	r3, [pc, #756]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	2380      	movs	r3, #128	@ 0x80
 8005214:	025b      	lsls	r3, r3, #9
 8005216:	401a      	ands	r2, r3
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	025b      	lsls	r3, r3, #9
 800521c:	429a      	cmp	r2, r3
 800521e:	d10d      	bne.n	800523c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	4bb8      	ldr	r3, [pc, #736]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	2380      	movs	r3, #128	@ 0x80
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	4013      	ands	r3, r2
 800522a:	d100      	bne.n	800522e <HAL_RCC_OscConfig+0x56>
 800522c:	e070      	b.n	8005310 <HAL_RCC_OscConfig+0x138>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d000      	beq.n	8005238 <HAL_RCC_OscConfig+0x60>
 8005236:	e06b      	b.n	8005310 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e2d8      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x7c>
 8005244:	4baf      	ldr	r3, [pc, #700]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4bae      	ldr	r3, [pc, #696]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800524a:	2180      	movs	r1, #128	@ 0x80
 800524c:	0249      	lsls	r1, r1, #9
 800524e:	430a      	orrs	r2, r1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e02f      	b.n	80052b4 <HAL_RCC_OscConfig+0xdc>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10c      	bne.n	8005276 <HAL_RCC_OscConfig+0x9e>
 800525c:	4ba9      	ldr	r3, [pc, #676]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4ba8      	ldr	r3, [pc, #672]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005262:	49a9      	ldr	r1, [pc, #676]	@ (8005508 <HAL_RCC_OscConfig+0x330>)
 8005264:	400a      	ands	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	4ba6      	ldr	r3, [pc, #664]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4ba5      	ldr	r3, [pc, #660]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800526e:	49a7      	ldr	r1, [pc, #668]	@ (800550c <HAL_RCC_OscConfig+0x334>)
 8005270:	400a      	ands	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e01e      	b.n	80052b4 <HAL_RCC_OscConfig+0xdc>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b05      	cmp	r3, #5
 800527c:	d10e      	bne.n	800529c <HAL_RCC_OscConfig+0xc4>
 800527e:	4ba1      	ldr	r3, [pc, #644]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba0      	ldr	r3, [pc, #640]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005284:	2180      	movs	r1, #128	@ 0x80
 8005286:	02c9      	lsls	r1, r1, #11
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	4b9d      	ldr	r3, [pc, #628]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b9c      	ldr	r3, [pc, #624]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005292:	2180      	movs	r1, #128	@ 0x80
 8005294:	0249      	lsls	r1, r1, #9
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xdc>
 800529c:	4b99      	ldr	r3, [pc, #612]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b98      	ldr	r3, [pc, #608]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80052a2:	4999      	ldr	r1, [pc, #612]	@ (8005508 <HAL_RCC_OscConfig+0x330>)
 80052a4:	400a      	ands	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	4b96      	ldr	r3, [pc, #600]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b95      	ldr	r3, [pc, #596]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80052ae:	4997      	ldr	r1, [pc, #604]	@ (800550c <HAL_RCC_OscConfig+0x334>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d014      	beq.n	80052e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7ff f9fc 	bl	80046b8 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c6:	f7ff f9f7 	bl	80046b8 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b64      	cmp	r3, #100	@ 0x64
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e28a      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	029b      	lsls	r3, r3, #10
 80052e0:	4013      	ands	r3, r2
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0xee>
 80052e4:	e015      	b.n	8005312 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7ff f9e7 	bl	80046b8 <HAL_GetTick>
 80052ea:	0003      	movs	r3, r0
 80052ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f0:	f7ff f9e2 	bl	80046b8 <HAL_GetTick>
 80052f4:	0002      	movs	r2, r0
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	@ 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e275      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005302:	4b80      	ldr	r3, [pc, #512]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	2380      	movs	r3, #128	@ 0x80
 8005308:	029b      	lsls	r3, r3, #10
 800530a:	4013      	ands	r3, r2
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x118>
 800530e:	e000      	b.n	8005312 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2202      	movs	r2, #2
 8005318:	4013      	ands	r3, r2
 800531a:	d100      	bne.n	800531e <HAL_RCC_OscConfig+0x146>
 800531c:	e069      	b.n	80053f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800531e:	4b79      	ldr	r3, [pc, #484]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	220c      	movs	r2, #12
 8005324:	4013      	ands	r3, r2
 8005326:	d00b      	beq.n	8005340 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005328:	4b76      	ldr	r3, [pc, #472]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	220c      	movs	r2, #12
 800532e:	4013      	ands	r3, r2
 8005330:	2b08      	cmp	r3, #8
 8005332:	d11c      	bne.n	800536e <HAL_RCC_OscConfig+0x196>
 8005334:	4b73      	ldr	r3, [pc, #460]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	025b      	lsls	r3, r3, #9
 800533c:	4013      	ands	r3, r2
 800533e:	d116      	bne.n	800536e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005340:	4b70      	ldr	r3, [pc, #448]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2202      	movs	r2, #2
 8005346:	4013      	ands	r3, r2
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x17e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e24b      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b6b      	ldr	r3, [pc, #428]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	22f8      	movs	r2, #248	@ 0xf8
 800535c:	4393      	bics	r3, r2
 800535e:	0019      	movs	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	00da      	lsls	r2, r3, #3
 8005366:	4b67      	ldr	r3, [pc, #412]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536c:	e041      	b.n	80053f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d024      	beq.n	80053c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005376:	4b63      	ldr	r3, [pc, #396]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b62      	ldr	r3, [pc, #392]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800537c:	2101      	movs	r1, #1
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005382:	f7ff f999 	bl	80046b8 <HAL_GetTick>
 8005386:	0003      	movs	r3, r0
 8005388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800538c:	f7ff f994 	bl	80046b8 <HAL_GetTick>
 8005390:	0002      	movs	r2, r0
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e227      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539e:	4b59      	ldr	r3, [pc, #356]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2202      	movs	r2, #2
 80053a4:	4013      	ands	r3, r2
 80053a6:	d0f1      	beq.n	800538c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a8:	4b56      	ldr	r3, [pc, #344]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	22f8      	movs	r2, #248	@ 0xf8
 80053ae:	4393      	bics	r3, r2
 80053b0:	0019      	movs	r1, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	00da      	lsls	r2, r3, #3
 80053b8:	4b52      	ldr	r3, [pc, #328]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e018      	b.n	80053f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c0:	4b50      	ldr	r3, [pc, #320]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80053c6:	2101      	movs	r1, #1
 80053c8:	438a      	bics	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7ff f974 	bl	80046b8 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d6:	f7ff f96f 	bl	80046b8 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e202      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e8:	4b46      	ldr	r3, [pc, #280]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2202      	movs	r2, #2
 80053ee:	4013      	ands	r3, r2
 80053f0:	d1f1      	bne.n	80053d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2208      	movs	r2, #8
 80053f8:	4013      	ands	r3, r2
 80053fa:	d036      	beq.n	800546a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d019      	beq.n	8005438 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005404:	4b3f      	ldr	r3, [pc, #252]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005408:	4b3e      	ldr	r3, [pc, #248]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800540a:	2101      	movs	r1, #1
 800540c:	430a      	orrs	r2, r1
 800540e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005410:	f7ff f952 	bl	80046b8 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800541a:	f7ff f94d 	bl	80046b8 <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1e0      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542c:	4b35      	ldr	r3, [pc, #212]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	2202      	movs	r2, #2
 8005432:	4013      	ands	r3, r2
 8005434:	d0f1      	beq.n	800541a <HAL_RCC_OscConfig+0x242>
 8005436:	e018      	b.n	800546a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b32      	ldr	r3, [pc, #200]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800543a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800543c:	4b31      	ldr	r3, [pc, #196]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800543e:	2101      	movs	r1, #1
 8005440:	438a      	bics	r2, r1
 8005442:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005444:	f7ff f938 	bl	80046b8 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800544e:	f7ff f933 	bl	80046b8 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e1c6      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005460:	4b28      	ldr	r3, [pc, #160]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	2202      	movs	r2, #2
 8005466:	4013      	ands	r3, r2
 8005468:	d1f1      	bne.n	800544e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2204      	movs	r2, #4
 8005470:	4013      	ands	r3, r2
 8005472:	d100      	bne.n	8005476 <HAL_RCC_OscConfig+0x29e>
 8005474:	e0b4      	b.n	80055e0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005476:	201f      	movs	r0, #31
 8005478:	183b      	adds	r3, r7, r0
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547e:	4b21      	ldr	r3, [pc, #132]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	2380      	movs	r3, #128	@ 0x80
 8005484:	055b      	lsls	r3, r3, #21
 8005486:	4013      	ands	r3, r2
 8005488:	d110      	bne.n	80054ac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 8005490:	2180      	movs	r1, #128	@ 0x80
 8005492:	0549      	lsls	r1, r1, #21
 8005494:	430a      	orrs	r2, r1
 8005496:	61da      	str	r2, [r3, #28]
 8005498:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	055b      	lsls	r3, r3, #21
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ac:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <HAL_RCC_OscConfig+0x338>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4013      	ands	r3, r2
 80054b6:	d11a      	bne.n	80054ee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b8:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <HAL_RCC_OscConfig+0x338>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b14      	ldr	r3, [pc, #80]	@ (8005510 <HAL_RCC_OscConfig+0x338>)
 80054be:	2180      	movs	r1, #128	@ 0x80
 80054c0:	0049      	lsls	r1, r1, #1
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7ff f8f7 	bl	80046b8 <HAL_GetTick>
 80054ca:	0003      	movs	r3, r0
 80054cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d0:	f7ff f8f2 	bl	80046b8 <HAL_GetTick>
 80054d4:	0002      	movs	r2, r0
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	@ 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e185      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_RCC_OscConfig+0x338>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	@ 0x80
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d10e      	bne.n	8005514 <HAL_RCC_OscConfig+0x33c>
 80054f6:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	4b02      	ldr	r3, [pc, #8]	@ (8005504 <HAL_RCC_OscConfig+0x32c>)
 80054fc:	2101      	movs	r1, #1
 80054fe:	430a      	orrs	r2, r1
 8005500:	621a      	str	r2, [r3, #32]
 8005502:	e035      	b.n	8005570 <HAL_RCC_OscConfig+0x398>
 8005504:	40021000 	.word	0x40021000
 8005508:	fffeffff 	.word	0xfffeffff
 800550c:	fffbffff 	.word	0xfffbffff
 8005510:	40007000 	.word	0x40007000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <HAL_RCC_OscConfig+0x35e>
 800551c:	4bb6      	ldr	r3, [pc, #728]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	4bb5      	ldr	r3, [pc, #724]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005522:	2101      	movs	r1, #1
 8005524:	438a      	bics	r2, r1
 8005526:	621a      	str	r2, [r3, #32]
 8005528:	4bb3      	ldr	r3, [pc, #716]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	4bb2      	ldr	r3, [pc, #712]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800552e:	2104      	movs	r1, #4
 8005530:	438a      	bics	r2, r1
 8005532:	621a      	str	r2, [r3, #32]
 8005534:	e01c      	b.n	8005570 <HAL_RCC_OscConfig+0x398>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d10c      	bne.n	8005558 <HAL_RCC_OscConfig+0x380>
 800553e:	4bae      	ldr	r3, [pc, #696]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	4bad      	ldr	r3, [pc, #692]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005544:	2104      	movs	r1, #4
 8005546:	430a      	orrs	r2, r1
 8005548:	621a      	str	r2, [r3, #32]
 800554a:	4bab      	ldr	r3, [pc, #684]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	4baa      	ldr	r3, [pc, #680]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005550:	2101      	movs	r1, #1
 8005552:	430a      	orrs	r2, r1
 8005554:	621a      	str	r2, [r3, #32]
 8005556:	e00b      	b.n	8005570 <HAL_RCC_OscConfig+0x398>
 8005558:	4ba7      	ldr	r3, [pc, #668]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	4ba6      	ldr	r3, [pc, #664]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800555e:	2101      	movs	r1, #1
 8005560:	438a      	bics	r2, r1
 8005562:	621a      	str	r2, [r3, #32]
 8005564:	4ba4      	ldr	r3, [pc, #656]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	4ba3      	ldr	r3, [pc, #652]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800556a:	2104      	movs	r1, #4
 800556c:	438a      	bics	r2, r1
 800556e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d014      	beq.n	80055a2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005578:	f7ff f89e 	bl	80046b8 <HAL_GetTick>
 800557c:	0003      	movs	r3, r0
 800557e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005580:	e009      	b.n	8005596 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005582:	f7ff f899 	bl	80046b8 <HAL_GetTick>
 8005586:	0002      	movs	r2, r0
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	4a9b      	ldr	r2, [pc, #620]	@ (80057fc <HAL_RCC_OscConfig+0x624>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e12b      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005596:	4b98      	ldr	r3, [pc, #608]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x3aa>
 80055a0:	e013      	b.n	80055ca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a2:	f7ff f889 	bl	80046b8 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055aa:	e009      	b.n	80055c0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ac:	f7ff f884 	bl	80046b8 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	4a91      	ldr	r2, [pc, #580]	@ (80057fc <HAL_RCC_OscConfig+0x624>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e116      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c0:	4b8d      	ldr	r3, [pc, #564]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	2202      	movs	r2, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ca:	231f      	movs	r3, #31
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d105      	bne.n	80055e0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d4:	4b88      	ldr	r3, [pc, #544]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	4b87      	ldr	r3, [pc, #540]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80055da:	4989      	ldr	r1, [pc, #548]	@ (8005800 <HAL_RCC_OscConfig+0x628>)
 80055dc:	400a      	ands	r2, r1
 80055de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2210      	movs	r2, #16
 80055e6:	4013      	ands	r3, r2
 80055e8:	d063      	beq.n	80056b2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d12a      	bne.n	8005648 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80055f2:	4b81      	ldr	r3, [pc, #516]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80055f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f6:	4b80      	ldr	r3, [pc, #512]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80055f8:	2104      	movs	r1, #4
 80055fa:	430a      	orrs	r2, r1
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80055fe:	4b7e      	ldr	r3, [pc, #504]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005602:	4b7d      	ldr	r3, [pc, #500]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005604:	2101      	movs	r1, #1
 8005606:	430a      	orrs	r2, r1
 8005608:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560a:	f7ff f855 	bl	80046b8 <HAL_GetTick>
 800560e:	0003      	movs	r3, r0
 8005610:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005614:	f7ff f850 	bl	80046b8 <HAL_GetTick>
 8005618:	0002      	movs	r2, r0
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0e3      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005626:	4b74      	ldr	r3, [pc, #464]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562a:	2202      	movs	r2, #2
 800562c:	4013      	ands	r3, r2
 800562e:	d0f1      	beq.n	8005614 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005630:	4b71      	ldr	r3, [pc, #452]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005634:	22f8      	movs	r2, #248	@ 0xf8
 8005636:	4393      	bics	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	00da      	lsls	r2, r3, #3
 8005640:	4b6d      	ldr	r3, [pc, #436]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005642:	430a      	orrs	r2, r1
 8005644:	635a      	str	r2, [r3, #52]	@ 0x34
 8005646:	e034      	b.n	80056b2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	3305      	adds	r3, #5
 800564e:	d111      	bne.n	8005674 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005650:	4b69      	ldr	r3, [pc, #420]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005654:	4b68      	ldr	r3, [pc, #416]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005656:	2104      	movs	r1, #4
 8005658:	438a      	bics	r2, r1
 800565a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800565c:	4b66      	ldr	r3, [pc, #408]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800565e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005660:	22f8      	movs	r2, #248	@ 0xf8
 8005662:	4393      	bics	r3, r2
 8005664:	0019      	movs	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	4b62      	ldr	r3, [pc, #392]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800566e:	430a      	orrs	r2, r1
 8005670:	635a      	str	r2, [r3, #52]	@ 0x34
 8005672:	e01e      	b.n	80056b2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005674:	4b60      	ldr	r3, [pc, #384]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005678:	4b5f      	ldr	r3, [pc, #380]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800567a:	2104      	movs	r1, #4
 800567c:	430a      	orrs	r2, r1
 800567e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005680:	4b5d      	ldr	r3, [pc, #372]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005684:	4b5c      	ldr	r3, [pc, #368]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005686:	2101      	movs	r1, #1
 8005688:	438a      	bics	r2, r1
 800568a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568c:	f7ff f814 	bl	80046b8 <HAL_GetTick>
 8005690:	0003      	movs	r3, r0
 8005692:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005696:	f7ff f80f 	bl	80046b8 <HAL_GetTick>
 800569a:	0002      	movs	r2, r0
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e0a2      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056a8:	4b53      	ldr	r3, [pc, #332]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80056aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ac:	2202      	movs	r2, #2
 80056ae:	4013      	ands	r3, r2
 80056b0:	d1f1      	bne.n	8005696 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d100      	bne.n	80056bc <HAL_RCC_OscConfig+0x4e4>
 80056ba:	e097      	b.n	80057ec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056bc:	4b4e      	ldr	r3, [pc, #312]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	220c      	movs	r2, #12
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d100      	bne.n	80056ca <HAL_RCC_OscConfig+0x4f2>
 80056c8:	e06b      	b.n	80057a2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d14c      	bne.n	800576c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b49      	ldr	r3, [pc, #292]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80056d8:	494a      	ldr	r1, [pc, #296]	@ (8005804 <HAL_RCC_OscConfig+0x62c>)
 80056da:	400a      	ands	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fe ffeb 	bl	80046b8 <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fe ffe6 	bl	80046b8 <HAL_GetTick>
 80056ec:	0002      	movs	r2, r0
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e079      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056fa:	4b3f      	ldr	r3, [pc, #252]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	049b      	lsls	r3, r3, #18
 8005702:	4013      	ands	r3, r2
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005706:	4b3c      	ldr	r3, [pc, #240]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	220f      	movs	r2, #15
 800570c:	4393      	bics	r3, r2
 800570e:	0019      	movs	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005714:	4b38      	ldr	r3, [pc, #224]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005716:	430a      	orrs	r2, r1
 8005718:	62da      	str	r2, [r3, #44]	@ 0x2c
 800571a:	4b37      	ldr	r3, [pc, #220]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a3a      	ldr	r2, [pc, #232]	@ (8005808 <HAL_RCC_OscConfig+0x630>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	431a      	orrs	r2, r3
 800572e:	4b32      	ldr	r3, [pc, #200]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005734:	4b30      	ldr	r3, [pc, #192]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b2f      	ldr	r3, [pc, #188]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800573a:	2180      	movs	r1, #128	@ 0x80
 800573c:	0449      	lsls	r1, r1, #17
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005742:	f7fe ffb9 	bl	80046b8 <HAL_GetTick>
 8005746:	0003      	movs	r3, r0
 8005748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800574c:	f7fe ffb4 	bl	80046b8 <HAL_GetTick>
 8005750:	0002      	movs	r2, r0
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e047      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800575e:	4b26      	ldr	r3, [pc, #152]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	2380      	movs	r3, #128	@ 0x80
 8005764:	049b      	lsls	r3, r3, #18
 8005766:	4013      	ands	r3, r2
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0x574>
 800576a:	e03f      	b.n	80057ec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576c:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b21      	ldr	r3, [pc, #132]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005772:	4924      	ldr	r1, [pc, #144]	@ (8005804 <HAL_RCC_OscConfig+0x62c>)
 8005774:	400a      	ands	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fe ff9e 	bl	80046b8 <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005782:	f7fe ff99 	bl	80046b8 <HAL_GetTick>
 8005786:	0002      	movs	r2, r0
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e02c      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005794:	4b18      	ldr	r3, [pc, #96]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	049b      	lsls	r3, r3, #18
 800579c:	4013      	ands	r3, r2
 800579e:	d1f0      	bne.n	8005782 <HAL_RCC_OscConfig+0x5aa>
 80057a0:	e024      	b.n	80057ec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e01f      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80057ae:	4b12      	ldr	r3, [pc, #72]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	2380      	movs	r3, #128	@ 0x80
 80057be:	025b      	lsls	r3, r3, #9
 80057c0:	401a      	ands	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d10e      	bne.n	80057e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	220f      	movs	r2, #15
 80057ce:	401a      	ands	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d107      	bne.n	80057e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	23f0      	movs	r3, #240	@ 0xf0
 80057dc:	039b      	lsls	r3, r3, #14
 80057de:	401a      	ands	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b008      	add	sp, #32
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	40021000 	.word	0x40021000
 80057fc:	00001388 	.word	0x00001388
 8005800:	efffffff 	.word	0xefffffff
 8005804:	feffffff 	.word	0xfeffffff
 8005808:	ffc2ffff 	.word	0xffc2ffff

0800580c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0b3      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b5b      	ldr	r3, [pc, #364]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2201      	movs	r2, #1
 8005826:	4013      	ands	r3, r2
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d911      	bls.n	8005852 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b58      	ldr	r3, [pc, #352]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	4393      	bics	r3, r2
 8005836:	0019      	movs	r1, r3
 8005838:	4b55      	ldr	r3, [pc, #340]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005840:	4b53      	ldr	r3, [pc, #332]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	4013      	ands	r3, r2
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d001      	beq.n	8005852 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e09a      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2202      	movs	r2, #2
 8005858:	4013      	ands	r3, r2
 800585a:	d015      	beq.n	8005888 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2204      	movs	r2, #4
 8005862:	4013      	ands	r3, r2
 8005864:	d006      	beq.n	8005874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005866:	4b4b      	ldr	r3, [pc, #300]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b4a      	ldr	r3, [pc, #296]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 800586c:	21e0      	movs	r1, #224	@ 0xe0
 800586e:	00c9      	lsls	r1, r1, #3
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b47      	ldr	r3, [pc, #284]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	22f0      	movs	r2, #240	@ 0xf0
 800587a:	4393      	bics	r3, r2
 800587c:	0019      	movs	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	4b44      	ldr	r3, [pc, #272]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2201      	movs	r2, #1
 800588e:	4013      	ands	r3, r2
 8005890:	d040      	beq.n	8005914 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589a:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	4013      	ands	r3, r2
 80058a4:	d114      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e06e      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b2:	4b38      	ldr	r3, [pc, #224]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	2380      	movs	r3, #128	@ 0x80
 80058b8:	049b      	lsls	r3, r3, #18
 80058ba:	4013      	ands	r3, r2
 80058bc:	d108      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e062      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c2:	4b34      	ldr	r3, [pc, #208]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2202      	movs	r2, #2
 80058c8:	4013      	ands	r3, r2
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e05b      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058d0:	4b30      	ldr	r3, [pc, #192]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2203      	movs	r2, #3
 80058d6:	4393      	bics	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4b2d      	ldr	r3, [pc, #180]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058e4:	f7fe fee8 	bl	80046b8 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ec:	e009      	b.n	8005902 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fe fee3 	bl	80046b8 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	4a27      	ldr	r2, [pc, #156]	@ (8005998 <HAL_RCC_ClockConfig+0x18c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e042      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	4b24      	ldr	r3, [pc, #144]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	220c      	movs	r2, #12
 8005908:	401a      	ands	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	429a      	cmp	r2, r3
 8005912:	d1ec      	bne.n	80058ee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005914:	4b1e      	ldr	r3, [pc, #120]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	4013      	ands	r3, r2
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d211      	bcs.n	8005946 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b1b      	ldr	r3, [pc, #108]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	4393      	bics	r3, r2
 800592a:	0019      	movs	r1, r3
 800592c:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005934:	4b16      	ldr	r3, [pc, #88]	@ (8005990 <HAL_RCC_ClockConfig+0x184>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	4013      	ands	r3, r2
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e020      	b.n	8005988 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2204      	movs	r2, #4
 800594c:	4013      	ands	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005950:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4a11      	ldr	r2, [pc, #68]	@ (800599c <HAL_RCC_ClockConfig+0x190>)
 8005956:	4013      	ands	r3, r2
 8005958:	0019      	movs	r1, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005964:	f000 f820 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005968:	0001      	movs	r1, r0
 800596a:	4b0a      	ldr	r3, [pc, #40]	@ (8005994 <HAL_RCC_ClockConfig+0x188>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	091b      	lsrs	r3, r3, #4
 8005970:	220f      	movs	r2, #15
 8005972:	4013      	ands	r3, r2
 8005974:	4a0a      	ldr	r2, [pc, #40]	@ (80059a0 <HAL_RCC_ClockConfig+0x194>)
 8005976:	5cd3      	ldrb	r3, [r2, r3]
 8005978:	000a      	movs	r2, r1
 800597a:	40da      	lsrs	r2, r3
 800597c:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <HAL_RCC_ClockConfig+0x198>)
 800597e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005980:	2003      	movs	r0, #3
 8005982:	f7fe fe53 	bl	800462c <HAL_InitTick>
  
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b004      	add	sp, #16
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40022000 	.word	0x40022000
 8005994:	40021000 	.word	0x40021000
 8005998:	00001388 	.word	0x00001388
 800599c:	fffff8ff 	.word	0xfffff8ff
 80059a0:	0800b688 	.word	0x0800b688
 80059a4:	20000000 	.word	0x20000000

080059a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80059c2:	4b20      	ldr	r3, [pc, #128]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	220c      	movs	r2, #12
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d002      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x30>
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d003      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x36>
 80059d6:	e02c      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 80059da:	613b      	str	r3, [r7, #16]
      break;
 80059dc:	e02c      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	0c9b      	lsrs	r3, r3, #18
 80059e2:	220f      	movs	r2, #15
 80059e4:	4013      	ands	r3, r2
 80059e6:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80059e8:	5cd3      	ldrb	r3, [r2, r3]
 80059ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80059ec:	4b15      	ldr	r3, [pc, #84]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	220f      	movs	r2, #15
 80059f2:	4013      	ands	r3, r2
 80059f4:	4a16      	ldr	r2, [pc, #88]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xa8>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	025b      	lsls	r3, r3, #9
 8005a00:	4013      	ands	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4810      	ldr	r0, [pc, #64]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a08:	f7fa fba4 	bl	8000154 <__udivsi3>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	001a      	movs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4353      	muls	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e009      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	000a      	movs	r2, r1
 8005a1c:	0152      	lsls	r2, r2, #5
 8005a1e:	1a52      	subs	r2, r2, r1
 8005a20:	0193      	lsls	r3, r2, #6
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	185b      	adds	r3, r3, r1
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	613b      	str	r3, [r7, #16]
      break;
 8005a30:	e002      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a32:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a34:	613b      	str	r3, [r7, #16]
      break;
 8005a36:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005a38:	693b      	ldr	r3, [r7, #16]
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b006      	add	sp, #24
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	40021000 	.word	0x40021000
 8005a48:	007a1200 	.word	0x007a1200
 8005a4c:	0800b6a0 	.word	0x0800b6a0
 8005a50:	0800b6b0 	.word	0x0800b6b0

08005a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a58:	4b02      	ldr	r3, [pc, #8]	@ (8005a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	20000000 	.word	0x20000000

08005a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005a6c:	f7ff fff2 	bl	8005a54 <HAL_RCC_GetHCLKFreq>
 8005a70:	0001      	movs	r1, r0
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	2207      	movs	r2, #7
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	4a04      	ldr	r2, [pc, #16]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	40d9      	lsrs	r1, r3
 8005a82:	000b      	movs	r3, r1
}    
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	46c0      	nop			@ (mov r8, r8)
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	0800b698 	.word	0x0800b698

08005a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	2380      	movs	r3, #128	@ 0x80
 8005aaa:	025b      	lsls	r3, r3, #9
 8005aac:	4013      	ands	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005ab0:	e08e      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005ab2:	2017      	movs	r0, #23
 8005ab4:	183b      	adds	r3, r7, r0
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aba:	4b57      	ldr	r3, [pc, #348]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	055b      	lsls	r3, r3, #21
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d110      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac6:	4b54      	ldr	r3, [pc, #336]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	4b53      	ldr	r3, [pc, #332]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005acc:	2180      	movs	r1, #128	@ 0x80
 8005ace:	0549      	lsls	r1, r1, #21
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	61da      	str	r2, [r3, #28]
 8005ad4:	4b50      	ldr	r3, [pc, #320]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	2380      	movs	r3, #128	@ 0x80
 8005ada:	055b      	lsls	r3, r3, #21
 8005adc:	4013      	ands	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ae2:	183b      	adds	r3, r7, r0
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	d11a      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005af4:	4b49      	ldr	r3, [pc, #292]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b48      	ldr	r3, [pc, #288]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005afa:	2180      	movs	r1, #128	@ 0x80
 8005afc:	0049      	lsls	r1, r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b02:	f7fe fdd9 	bl	80046b8 <HAL_GetTick>
 8005b06:	0003      	movs	r3, r0
 8005b08:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0a:	e008      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0c:	f7fe fdd4 	bl	80046b8 <HAL_GetTick>
 8005b10:	0002      	movs	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	@ 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e077      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	2380      	movs	r3, #128	@ 0x80
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4013      	ands	r3, r2
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
 8005b2e:	23c0      	movs	r3, #192	@ 0xc0
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d034      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	23c0      	movs	r3, #192	@ 0xc0
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4013      	ands	r3, r2
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d02c      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b4c:	4b32      	ldr	r3, [pc, #200]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	4a33      	ldr	r2, [pc, #204]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b56:	4b30      	ldr	r3, [pc, #192]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b5c:	2180      	movs	r1, #128	@ 0x80
 8005b5e:	0249      	lsls	r1, r1, #9
 8005b60:	430a      	orrs	r2, r1
 8005b62:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b64:	4b2c      	ldr	r3, [pc, #176]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b6a:	492e      	ldr	r1, [pc, #184]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b70:	4b29      	ldr	r3, [pc, #164]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7e:	f7fe fd9b 	bl	80046b8 <HAL_GetTick>
 8005b82:	0003      	movs	r3, r0
 8005b84:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b86:	e009      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b88:	f7fe fd96 	bl	80046b8 <HAL_GetTick>
 8005b8c:	0002      	movs	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a25      	ldr	r2, [pc, #148]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e038      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	4b18      	ldr	r3, [pc, #96]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bba:	2317      	movs	r3, #23
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc4:	4b14      	ldr	r3, [pc, #80]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005bca:	4918      	ldr	r1, [pc, #96]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005bcc:	400a      	ands	r2, r1
 8005bce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bda:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	2203      	movs	r2, #3
 8005be0:	4393      	bics	r3, r2
 8005be2:	0019      	movs	r1, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005bea:	430a      	orrs	r2, r1
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bf8:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	4393      	bics	r3, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	0018      	movs	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b006      	add	sp, #24
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	fffffcff 	.word	0xfffffcff
 8005c24:	fffeffff 	.word	0xfffeffff
 8005c28:	00001388 	.word	0x00001388
 8005c2c:	efffffff 	.word	0xefffffff

08005c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0a8      	b.n	8005d94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	2382      	movs	r3, #130	@ 0x82
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d009      	beq.n	8005c6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	61da      	str	r2, [r3, #28]
 8005c5c:	e005      	b.n	8005c6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	225d      	movs	r2, #93	@ 0x5d
 8005c74:	5c9b      	ldrb	r3, [r3, r2]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d107      	bne.n	8005c8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	225c      	movs	r2, #92	@ 0x5c
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fe fad2 	bl	8004230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	225d      	movs	r2, #93	@ 0x5d
 8005c90:	2102      	movs	r1, #2
 8005c92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2140      	movs	r1, #64	@ 0x40
 8005ca0:	438a      	bics	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	23e0      	movs	r3, #224	@ 0xe0
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d902      	bls.n	8005cb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e002      	b.n	8005cbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	015b      	lsls	r3, r3, #5
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	23f0      	movs	r3, #240	@ 0xf0
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d008      	beq.n	8005cda <HAL_SPI_Init+0xaa>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	23e0      	movs	r3, #224	@ 0xe0
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d002      	beq.n	8005cda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	2382      	movs	r3, #130	@ 0x82
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	2384      	movs	r3, #132	@ 0x84
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	400b      	ands	r3, r1
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	400b      	ands	r3, r1
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6999      	ldr	r1, [r3, #24]
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2138      	movs	r1, #56	@ 0x38
 8005d16:	400b      	ands	r3, r1
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	2180      	movs	r1, #128	@ 0x80
 8005d20:	400b      	ands	r3, r1
 8005d22:	431a      	orrs	r2, r3
 8005d24:	0011      	movs	r1, r2
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d2a:	2380      	movs	r3, #128	@ 0x80
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	401a      	ands	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	2204      	movs	r2, #4
 8005d40:	401a      	ands	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	2110      	movs	r1, #16
 8005d48:	400b      	ands	r3, r1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	2108      	movs	r1, #8
 8005d52:	400b      	ands	r3, r1
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	23f0      	movs	r3, #240	@ 0xf0
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	400b      	ands	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	0011      	movs	r1, r2
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	2380      	movs	r3, #128	@ 0x80
 8005d68:	015b      	lsls	r3, r3, #5
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4907      	ldr	r1, [pc, #28]	@ (8005d9c <HAL_SPI_Init+0x16c>)
 8005d80:	400a      	ands	r2, r1
 8005d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	225d      	movs	r2, #93	@ 0x5d
 8005d8e:	2101      	movs	r1, #1
 8005d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	fffff7ff 	.word	0xfffff7ff

08005da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e042      	b.n	8005e38 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	223d      	movs	r2, #61	@ 0x3d
 8005db6:	5c9b      	ldrb	r3, [r3, r2]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	223c      	movs	r2, #60	@ 0x3c
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7fe fa7f 	bl	80042cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	223d      	movs	r2, #61	@ 0x3d
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	0019      	movs	r1, r3
 8005de0:	0010      	movs	r0, r2
 8005de2:	f000 f94d 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2246      	movs	r2, #70	@ 0x46
 8005dea:	2101      	movs	r1, #1
 8005dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	223e      	movs	r2, #62	@ 0x3e
 8005df2:	2101      	movs	r1, #1
 8005df4:	5499      	strb	r1, [r3, r2]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	223f      	movs	r2, #63	@ 0x3f
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2240      	movs	r2, #64	@ 0x40
 8005e02:	2101      	movs	r1, #1
 8005e04:	5499      	strb	r1, [r3, r2]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2241      	movs	r2, #65	@ 0x41
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2242      	movs	r2, #66	@ 0x42
 8005e12:	2101      	movs	r1, #1
 8005e14:	5499      	strb	r1, [r3, r2]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2243      	movs	r2, #67	@ 0x43
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	5499      	strb	r1, [r3, r2]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2244      	movs	r2, #68	@ 0x44
 8005e22:	2101      	movs	r1, #1
 8005e24:	5499      	strb	r1, [r3, r2]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2245      	movs	r2, #69	@ 0x45
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	223d      	movs	r2, #61	@ 0x3d
 8005e32:	2101      	movs	r1, #1
 8005e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	223d      	movs	r2, #61	@ 0x3d
 8005e4c:	5c9b      	ldrb	r3, [r3, r2]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e035      	b.n	8005ec4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	223d      	movs	r2, #61	@ 0x3d
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a15      	ldr	r2, [pc, #84]	@ (8005ecc <HAL_TIM_Base_Start_IT+0x8c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x4e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a14      	ldr	r2, [pc, #80]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0x90>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x4e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a12      	ldr	r2, [pc, #72]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0x94>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d111      	bne.n	8005eb2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2207      	movs	r2, #7
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d010      	beq.n	8005ec2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	430a      	orrs	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb0:	e007      	b.n	8005ec2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40014000 	.word	0x40014000

08005ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	230f      	movs	r3, #15
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	223c      	movs	r2, #60	@ 0x3c
 8005eee:	5c9b      	ldrb	r3, [r3, r2]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x20>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0bc      	b.n	8006072 <HAL_TIM_ConfigClockSource+0x19a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	223c      	movs	r2, #60	@ 0x3c
 8005efc:	2101      	movs	r1, #1
 8005efe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	223d      	movs	r2, #61	@ 0x3d
 8005f04:	2102      	movs	r1, #2
 8005f06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2277      	movs	r2, #119	@ 0x77
 8005f14:	4393      	bics	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4a58      	ldr	r2, [pc, #352]	@ (800607c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2280      	movs	r2, #128	@ 0x80
 8005f2e:	0192      	lsls	r2, r2, #6
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0xde>
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	0192      	lsls	r2, r2, #6
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d900      	bls.n	8005f3e <HAL_TIM_ConfigClockSource+0x66>
 8005f3c:	e088      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f3e:	2280      	movs	r2, #128	@ 0x80
 8005f40:	0152      	lsls	r2, r2, #5
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d100      	bne.n	8005f48 <HAL_TIM_ConfigClockSource+0x70>
 8005f46:	e088      	b.n	800605a <HAL_TIM_ConfigClockSource+0x182>
 8005f48:	2280      	movs	r2, #128	@ 0x80
 8005f4a:	0152      	lsls	r2, r2, #5
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d900      	bls.n	8005f52 <HAL_TIM_ConfigClockSource+0x7a>
 8005f50:	e07e      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f52:	2b70      	cmp	r3, #112	@ 0x70
 8005f54:	d018      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0xb0>
 8005f56:	d900      	bls.n	8005f5a <HAL_TIM_ConfigClockSource+0x82>
 8005f58:	e07a      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f5a:	2b60      	cmp	r3, #96	@ 0x60
 8005f5c:	d04f      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x126>
 8005f5e:	d900      	bls.n	8005f62 <HAL_TIM_ConfigClockSource+0x8a>
 8005f60:	e076      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f62:	2b50      	cmp	r3, #80	@ 0x50
 8005f64:	d03b      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x106>
 8005f66:	d900      	bls.n	8005f6a <HAL_TIM_ConfigClockSource+0x92>
 8005f68:	e072      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f6a:	2b40      	cmp	r3, #64	@ 0x40
 8005f6c:	d057      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x146>
 8005f6e:	d900      	bls.n	8005f72 <HAL_TIM_ConfigClockSource+0x9a>
 8005f70:	e06e      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f72:	2b30      	cmp	r3, #48	@ 0x30
 8005f74:	d063      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x166>
 8005f76:	d86b      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d060      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x166>
 8005f7c:	d868      	bhi.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d05d      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x166>
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d05b      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x166>
 8005f86:	e063      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f98:	f000 f970 	bl	800627c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2277      	movs	r2, #119	@ 0x77
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]
      break;
 8005fb4:	e052      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	f000 f959 	bl	800627c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2180      	movs	r1, #128	@ 0x80
 8005fd6:	01c9      	lsls	r1, r1, #7
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
      break;
 8005fdc:	e03e      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	001a      	movs	r2, r3
 8005fec:	f000 f8cc 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2150      	movs	r1, #80	@ 0x50
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f000 f926 	bl	8006248 <TIM_ITRx_SetConfig>
      break;
 8005ffc:	e02e      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	001a      	movs	r2, r3
 800600c:	f000 f8ea 	bl	80061e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2160      	movs	r1, #96	@ 0x60
 8006016:	0018      	movs	r0, r3
 8006018:	f000 f916 	bl	8006248 <TIM_ITRx_SetConfig>
      break;
 800601c:	e01e      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	001a      	movs	r2, r3
 800602c:	f000 f8ac 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2140      	movs	r1, #64	@ 0x40
 8006036:	0018      	movs	r0, r3
 8006038:	f000 f906 	bl	8006248 <TIM_ITRx_SetConfig>
      break;
 800603c:	e00e      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	0019      	movs	r1, r3
 8006048:	0010      	movs	r0, r2
 800604a:	f000 f8fd 	bl	8006248 <TIM_ITRx_SetConfig>
      break;
 800604e:	e005      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006050:	230f      	movs	r3, #15
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
      break;
 8006058:	e000      	b.n	800605c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800605a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	223d      	movs	r2, #61	@ 0x3d
 8006060:	2101      	movs	r1, #1
 8006062:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	223c      	movs	r2, #60	@ 0x3c
 8006068:	2100      	movs	r1, #0
 800606a:	5499      	strb	r1, [r3, r2]

  return status;
 800606c:	230f      	movs	r3, #15
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	781b      	ldrb	r3, [r3, #0]
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b004      	add	sp, #16
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	ffff00ff 	.word	0xffff00ff

08006080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a36      	ldr	r2, [pc, #216]	@ (800616c <TIM_Base_SetConfig+0xec>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0x20>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a35      	ldr	r2, [pc, #212]	@ (8006170 <TIM_Base_SetConfig+0xf0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d108      	bne.n	80060b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2270      	movs	r2, #112	@ 0x70
 80060a4:	4393      	bics	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <TIM_Base_SetConfig+0xec>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <TIM_Base_SetConfig+0xf0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00f      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006174 <TIM_Base_SetConfig+0xf4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006178 <TIM_Base_SetConfig+0xf8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a29      	ldr	r2, [pc, #164]	@ (800617c <TIM_Base_SetConfig+0xfc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a28      	ldr	r2, [pc, #160]	@ (8006180 <TIM_Base_SetConfig+0x100>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a27      	ldr	r2, [pc, #156]	@ (8006184 <TIM_Base_SetConfig+0x104>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	4393      	bics	r3, r2
 80060fa:	001a      	movs	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a13      	ldr	r2, [pc, #76]	@ (800616c <TIM_Base_SetConfig+0xec>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_Base_SetConfig+0xba>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a14      	ldr	r2, [pc, #80]	@ (8006178 <TIM_Base_SetConfig+0xf8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0xba>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a13      	ldr	r2, [pc, #76]	@ (800617c <TIM_Base_SetConfig+0xfc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0xba>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <TIM_Base_SetConfig+0x100>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d103      	bne.n	8006142 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2201      	movs	r2, #1
 800614e:	4013      	ands	r3, r2
 8006150:	2b01      	cmp	r3, #1
 8006152:	d106      	bne.n	8006162 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2201      	movs	r2, #1
 800615a:	4393      	bics	r3, r2
 800615c:	001a      	movs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]
  }
}
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	b004      	add	sp, #16
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40000400 	.word	0x40000400
 8006174:	40002000 	.word	0x40002000
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800
 8006184:	fffffcff 	.word	0xfffffcff

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	2201      	movs	r2, #1
 80061a0:	4393      	bics	r3, r2
 80061a2:	001a      	movs	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	22f0      	movs	r2, #240	@ 0xf0
 80061b2:	4393      	bics	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	220a      	movs	r2, #10
 80061c4:	4393      	bics	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	46c0      	nop			@ (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b006      	add	sp, #24
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	2210      	movs	r2, #16
 80061fc:	4393      	bics	r3, r2
 80061fe:	001a      	movs	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4a0d      	ldr	r2, [pc, #52]	@ (8006244 <TIM_TI2_ConfigInputStage+0x60>)
 800620e:	4013      	ands	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	22a0      	movs	r2, #160	@ 0xa0
 8006220:	4393      	bics	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	46bd      	mov	sp, r7
 800623e:	b006      	add	sp, #24
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	ffff0fff 	.word	0xffff0fff

08006248 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2270      	movs	r2, #112	@ 0x70
 800625c:	4393      	bics	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	2207      	movs	r2, #7
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	609a      	str	r2, [r3, #8]
}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b004      	add	sp, #16
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4a09      	ldr	r2, [pc, #36]	@ (80062b8 <TIM_ETR_SetConfig+0x3c>)
 8006294:	4013      	ands	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	46c0      	nop			@ (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b006      	add	sp, #24
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	ffff00ff 	.word	0xffff00ff

080062bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	223c      	movs	r2, #60	@ 0x3c
 80062ca:	5c9b      	ldrb	r3, [r3, r2]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e041      	b.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	223c      	movs	r2, #60	@ 0x3c
 80062d8:	2101      	movs	r1, #1
 80062da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	223d      	movs	r2, #61	@ 0x3d
 80062e0:	2102      	movs	r1, #2
 80062e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2270      	movs	r2, #112	@ 0x70
 80062f8:	4393      	bics	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a13      	ldr	r2, [pc, #76]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a11      	ldr	r2, [pc, #68]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a10      	ldr	r2, [pc, #64]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10c      	bne.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2280      	movs	r2, #128	@ 0x80
 8006330:	4393      	bics	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	223d      	movs	r2, #61	@ 0x3d
 800634a:	2101      	movs	r1, #1
 800634c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	223c      	movs	r2, #60	@ 0x3c
 8006352:	2100      	movs	r1, #0
 8006354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b004      	add	sp, #16
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40000400 	.word	0x40000400
 8006368:	40014000 	.word	0x40014000

0800636c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e044      	b.n	8006408 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d107      	bne.n	8006396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2278      	movs	r2, #120	@ 0x78
 800638a:	2100      	movs	r1, #0
 800638c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	0018      	movs	r0, r3
 8006392:	f7fd ffb9 	bl	8004308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2224      	movs	r2, #36	@ 0x24
 800639a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2101      	movs	r1, #1
 80063a8:	438a      	bics	r2, r1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 fd46 	bl	8006e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 fc02 	bl	8006bc8 <UART_SetConfig>
 80063c4:	0003      	movs	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01c      	b.n	8006408 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	490d      	ldr	r1, [pc, #52]	@ (8006410 <HAL_UART_Init+0xa4>)
 80063da:	400a      	ands	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2108      	movs	r1, #8
 80063ea:	438a      	bics	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2101      	movs	r1, #1
 80063fa:	430a      	orrs	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	0018      	movs	r0, r3
 8006402:	f000 fdd5 	bl	8006fb0 <UART_CheckIdleState>
 8006406:	0003      	movs	r3, r0
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b002      	add	sp, #8
 800640e:	bd80      	pop	{r7, pc}
 8006410:	fffff7ff 	.word	0xfffff7ff

08006414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	@ 0x28
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	1dbb      	adds	r3, r7, #6
 8006422:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006428:	2b20      	cmp	r3, #32
 800642a:	d000      	beq.n	800642e <HAL_UART_Transmit+0x1a>
 800642c:	e08c      	b.n	8006548 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_UART_Transmit+0x28>
 8006434:	1dbb      	adds	r3, r7, #6
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e084      	b.n	800654a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	015b      	lsls	r3, r3, #5
 8006448:	429a      	cmp	r2, r3
 800644a:	d109      	bne.n	8006460 <HAL_UART_Transmit+0x4c>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2201      	movs	r2, #1
 8006458:	4013      	ands	r3, r2
 800645a:	d001      	beq.n	8006460 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e074      	b.n	800654a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2284      	movs	r2, #132	@ 0x84
 8006464:	2100      	movs	r1, #0
 8006466:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2221      	movs	r2, #33	@ 0x21
 800646c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646e:	f7fe f923 	bl	80046b8 <HAL_GetTick>
 8006472:	0003      	movs	r3, r0
 8006474:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1dba      	adds	r2, r7, #6
 800647a:	2150      	movs	r1, #80	@ 0x50
 800647c:	8812      	ldrh	r2, [r2, #0]
 800647e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1dba      	adds	r2, r7, #6
 8006484:	2152      	movs	r1, #82	@ 0x52
 8006486:	8812      	ldrh	r2, [r2, #0]
 8006488:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	2380      	movs	r3, #128	@ 0x80
 8006490:	015b      	lsls	r3, r3, #5
 8006492:	429a      	cmp	r2, r3
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x94>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b0:	e02f      	b.n	8006512 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	0013      	movs	r3, r2
 80064bc:	2200      	movs	r2, #0
 80064be:	2180      	movs	r1, #128	@ 0x80
 80064c0:	f000 fe1e 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 80064c4:	1e03      	subs	r3, r0, #0
 80064c6:	d004      	beq.n	80064d2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e03b      	b.n	800654a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	05d2      	lsls	r2, r2, #23
 80064e2:	0dd2      	lsrs	r2, r2, #23
 80064e4:	b292      	uxth	r2, r2
 80064e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	3302      	adds	r3, #2
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e007      	b.n	8006500 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2252      	movs	r2, #82	@ 0x52
 8006504:	5a9b      	ldrh	r3, [r3, r2]
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b299      	uxth	r1, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2252      	movs	r2, #82	@ 0x52
 8006510:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2252      	movs	r2, #82	@ 0x52
 8006516:	5a9b      	ldrh	r3, [r3, r2]
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1c9      	bne.n	80064b2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	0013      	movs	r3, r2
 8006528:	2200      	movs	r2, #0
 800652a:	2140      	movs	r1, #64	@ 0x40
 800652c:	f000 fde8 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8006530:	1e03      	subs	r3, r0, #0
 8006532:	d004      	beq.n	800653e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e005      	b.n	800654a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	0018      	movs	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	b008      	add	sp, #32
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	1dbb      	adds	r3, r7, #6
 800655e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2280      	movs	r2, #128	@ 0x80
 8006564:	589b      	ldr	r3, [r3, r2]
 8006566:	2b20      	cmp	r3, #32
 8006568:	d145      	bne.n	80065f6 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_UART_Receive_IT+0x26>
 8006570:	1dbb      	adds	r3, r7, #6
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e03d      	b.n	80065f8 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	2380      	movs	r3, #128	@ 0x80
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	429a      	cmp	r2, r3
 8006586:	d109      	bne.n	800659c <HAL_UART_Receive_IT+0x4a>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2201      	movs	r2, #1
 8006594:	4013      	ands	r3, r2
 8006596:	d001      	beq.n	800659c <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e02d      	b.n	80065f8 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	4013      	ands	r3, r2
 80065ae:	d019      	beq.n	80065e4 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b0:	f3ef 8310 	mrs	r3, PRIMASK
 80065b4:	613b      	str	r3, [r7, #16]
  return(result);
 80065b6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	2301      	movs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f383 8810 	msr	PRIMASK, r3
}
 80065c4:	46c0      	nop			@ (mov r8, r8)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	04c9      	lsls	r1, r1, #19
 80065d4:	430a      	orrs	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f383 8810 	msr	PRIMASK, r3
}
 80065e2:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065e4:	1dbb      	adds	r3, r7, #6
 80065e6:	881a      	ldrh	r2, [r3, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fdf7 	bl	80071e0 <UART_Start_Receive_IT>
 80065f2:	0003      	movs	r3, r0
 80065f4:	e000      	b.n	80065f8 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
  }
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b008      	add	sp, #32
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b0ab      	sub	sp, #172	@ 0xac
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	22a4      	movs	r2, #164	@ 0xa4
 8006610:	18b9      	adds	r1, r7, r2
 8006612:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	20a0      	movs	r0, #160	@ 0xa0
 800661c:	1839      	adds	r1, r7, r0
 800661e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	219c      	movs	r1, #156	@ 0x9c
 8006628:	1879      	adds	r1, r7, r1
 800662a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800662c:	0011      	movs	r1, r2
 800662e:	18bb      	adds	r3, r7, r2
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a99      	ldr	r2, [pc, #612]	@ (8006898 <HAL_UART_IRQHandler+0x298>)
 8006634:	4013      	ands	r3, r2
 8006636:	2298      	movs	r2, #152	@ 0x98
 8006638:	18bc      	adds	r4, r7, r2
 800663a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800663c:	18bb      	adds	r3, r7, r2
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d114      	bne.n	800666e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006644:	187b      	adds	r3, r7, r1
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2220      	movs	r2, #32
 800664a:	4013      	ands	r3, r2
 800664c:	d00f      	beq.n	800666e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800664e:	183b      	adds	r3, r7, r0
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2220      	movs	r2, #32
 8006654:	4013      	ands	r3, r2
 8006656:	d00a      	beq.n	800666e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800665c:	2b00      	cmp	r3, #0
 800665e:	d100      	bne.n	8006662 <HAL_UART_IRQHandler+0x62>
 8006660:	e286      	b.n	8006b70 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	0010      	movs	r0, r2
 800666a:	4798      	blx	r3
      }
      return;
 800666c:	e280      	b.n	8006b70 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800666e:	2398      	movs	r3, #152	@ 0x98
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d100      	bne.n	800667a <HAL_UART_IRQHandler+0x7a>
 8006678:	e114      	b.n	80068a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800667a:	239c      	movs	r3, #156	@ 0x9c
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2201      	movs	r2, #1
 8006682:	4013      	ands	r3, r2
 8006684:	d106      	bne.n	8006694 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006686:	23a0      	movs	r3, #160	@ 0xa0
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a83      	ldr	r2, [pc, #524]	@ (800689c <HAL_UART_IRQHandler+0x29c>)
 800668e:	4013      	ands	r3, r2
 8006690:	d100      	bne.n	8006694 <HAL_UART_IRQHandler+0x94>
 8006692:	e107      	b.n	80068a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006694:	23a4      	movs	r3, #164	@ 0xa4
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2201      	movs	r2, #1
 800669c:	4013      	ands	r3, r2
 800669e:	d012      	beq.n	80066c6 <HAL_UART_IRQHandler+0xc6>
 80066a0:	23a0      	movs	r3, #160	@ 0xa0
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	2380      	movs	r3, #128	@ 0x80
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4013      	ands	r3, r2
 80066ac:	d00b      	beq.n	80066c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2201      	movs	r2, #1
 80066b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2284      	movs	r2, #132	@ 0x84
 80066ba:	589b      	ldr	r3, [r3, r2]
 80066bc:	2201      	movs	r2, #1
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2184      	movs	r1, #132	@ 0x84
 80066c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c6:	23a4      	movs	r3, #164	@ 0xa4
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2202      	movs	r2, #2
 80066ce:	4013      	ands	r3, r2
 80066d0:	d011      	beq.n	80066f6 <HAL_UART_IRQHandler+0xf6>
 80066d2:	239c      	movs	r3, #156	@ 0x9c
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	4013      	ands	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2202      	movs	r2, #2
 80066e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2284      	movs	r2, #132	@ 0x84
 80066ea:	589b      	ldr	r3, [r3, r2]
 80066ec:	2204      	movs	r2, #4
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2184      	movs	r1, #132	@ 0x84
 80066f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f6:	23a4      	movs	r3, #164	@ 0xa4
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2204      	movs	r2, #4
 80066fe:	4013      	ands	r3, r2
 8006700:	d011      	beq.n	8006726 <HAL_UART_IRQHandler+0x126>
 8006702:	239c      	movs	r3, #156	@ 0x9c
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	4013      	ands	r3, r2
 800670c:	d00b      	beq.n	8006726 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2204      	movs	r2, #4
 8006714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2284      	movs	r2, #132	@ 0x84
 800671a:	589b      	ldr	r3, [r3, r2]
 800671c:	2202      	movs	r2, #2
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2184      	movs	r1, #132	@ 0x84
 8006724:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006726:	23a4      	movs	r3, #164	@ 0xa4
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2208      	movs	r2, #8
 800672e:	4013      	ands	r3, r2
 8006730:	d017      	beq.n	8006762 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006732:	23a0      	movs	r3, #160	@ 0xa0
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2220      	movs	r2, #32
 800673a:	4013      	ands	r3, r2
 800673c:	d105      	bne.n	800674a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800673e:	239c      	movs	r3, #156	@ 0x9c
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006748:	d00b      	beq.n	8006762 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2208      	movs	r2, #8
 8006750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2284      	movs	r2, #132	@ 0x84
 8006756:	589b      	ldr	r3, [r3, r2]
 8006758:	2208      	movs	r2, #8
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2184      	movs	r1, #132	@ 0x84
 8006760:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006762:	23a4      	movs	r3, #164	@ 0xa4
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	4013      	ands	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_UART_IRQHandler+0x198>
 8006770:	23a0      	movs	r3, #160	@ 0xa0
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	04db      	lsls	r3, r3, #19
 800677a:	4013      	ands	r3, r2
 800677c:	d00c      	beq.n	8006798 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2280      	movs	r2, #128	@ 0x80
 8006784:	0112      	lsls	r2, r2, #4
 8006786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2284      	movs	r2, #132	@ 0x84
 800678c:	589b      	ldr	r3, [r3, r2]
 800678e:	2220      	movs	r2, #32
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2184      	movs	r1, #132	@ 0x84
 8006796:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2284      	movs	r2, #132	@ 0x84
 800679c:	589b      	ldr	r3, [r3, r2]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d100      	bne.n	80067a4 <HAL_UART_IRQHandler+0x1a4>
 80067a2:	e1e7      	b.n	8006b74 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067a4:	23a4      	movs	r3, #164	@ 0xa4
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2220      	movs	r2, #32
 80067ac:	4013      	ands	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067b0:	23a0      	movs	r3, #160	@ 0xa0
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2220      	movs	r2, #32
 80067b8:	4013      	ands	r3, r2
 80067ba:	d008      	beq.n	80067ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d004      	beq.n	80067ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	0010      	movs	r0, r2
 80067cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2284      	movs	r2, #132	@ 0x84
 80067d2:	589b      	ldr	r3, [r3, r2]
 80067d4:	2194      	movs	r1, #148	@ 0x94
 80067d6:	187a      	adds	r2, r7, r1
 80067d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2240      	movs	r2, #64	@ 0x40
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b40      	cmp	r3, #64	@ 0x40
 80067e6:	d004      	beq.n	80067f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067e8:	187b      	adds	r3, r7, r1
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2228      	movs	r2, #40	@ 0x28
 80067ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067f0:	d047      	beq.n	8006882 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 fda9 	bl	800734c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2240      	movs	r2, #64	@ 0x40
 8006802:	4013      	ands	r3, r2
 8006804:	2b40      	cmp	r3, #64	@ 0x40
 8006806:	d137      	bne.n	8006878 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006808:	f3ef 8310 	mrs	r3, PRIMASK
 800680c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800680e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006810:	2090      	movs	r0, #144	@ 0x90
 8006812:	183a      	adds	r2, r7, r0
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	2301      	movs	r3, #1
 8006818:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800681c:	f383 8810 	msr	PRIMASK, r3
}
 8006820:	46c0      	nop			@ (mov r8, r8)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2140      	movs	r1, #64	@ 0x40
 800682e:	438a      	bics	r2, r1
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	183b      	adds	r3, r7, r0
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800683a:	f383 8810 	msr	PRIMASK, r3
}
 800683e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684c:	4a14      	ldr	r2, [pc, #80]	@ (80068a0 <HAL_UART_IRQHandler+0x2a0>)
 800684e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006854:	0018      	movs	r0, r3
 8006856:	f7fe faa9 	bl	8004dac <HAL_DMA_Abort_IT>
 800685a:	1e03      	subs	r3, r0, #0
 800685c:	d01a      	beq.n	8006894 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006868:	0018      	movs	r0, r3
 800686a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	e012      	b.n	8006894 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	f000 f995 	bl	8006ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006876:	e00d      	b.n	8006894 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0018      	movs	r0, r3
 800687c:	f000 f990 	bl	8006ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	e008      	b.n	8006894 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f000 f98b 	bl	8006ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2284      	movs	r2, #132	@ 0x84
 800688e:	2100      	movs	r1, #0
 8006890:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006892:	e16f      	b.n	8006b74 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006894:	46c0      	nop			@ (mov r8, r8)
    return;
 8006896:	e16d      	b.n	8006b74 <HAL_UART_IRQHandler+0x574>
 8006898:	0000080f 	.word	0x0000080f
 800689c:	04000120 	.word	0x04000120
 80068a0:	08007415 	.word	0x08007415

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d000      	beq.n	80068ae <HAL_UART_IRQHandler+0x2ae>
 80068ac:	e139      	b.n	8006b22 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068ae:	23a4      	movs	r3, #164	@ 0xa4
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2210      	movs	r2, #16
 80068b6:	4013      	ands	r3, r2
 80068b8:	d100      	bne.n	80068bc <HAL_UART_IRQHandler+0x2bc>
 80068ba:	e132      	b.n	8006b22 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068bc:	23a0      	movs	r3, #160	@ 0xa0
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	4013      	ands	r3, r2
 80068c6:	d100      	bne.n	80068ca <HAL_UART_IRQHandler+0x2ca>
 80068c8:	e12b      	b.n	8006b22 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2210      	movs	r2, #16
 80068d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2240      	movs	r2, #64	@ 0x40
 80068da:	4013      	ands	r3, r2
 80068dc:	2b40      	cmp	r3, #64	@ 0x40
 80068de:	d000      	beq.n	80068e2 <HAL_UART_IRQHandler+0x2e2>
 80068e0:	e09f      	b.n	8006a22 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	217e      	movs	r1, #126	@ 0x7e
 80068ec:	187b      	adds	r3, r7, r1
 80068ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d100      	bne.n	80068fa <HAL_UART_IRQHandler+0x2fa>
 80068f8:	e13e      	b.n	8006b78 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2258      	movs	r2, #88	@ 0x58
 80068fe:	5a9b      	ldrh	r3, [r3, r2]
 8006900:	187a      	adds	r2, r7, r1
 8006902:	8812      	ldrh	r2, [r2, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d300      	bcc.n	800690a <HAL_UART_IRQHandler+0x30a>
 8006908:	e136      	b.n	8006b78 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	187a      	adds	r2, r7, r1
 800690e:	215a      	movs	r1, #90	@ 0x5a
 8006910:	8812      	ldrh	r2, [r2, #0]
 8006912:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b20      	cmp	r3, #32
 800691c:	d06f      	beq.n	80069fe <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800691e:	f3ef 8310 	mrs	r3, PRIMASK
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006926:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006928:	2301      	movs	r3, #1
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692e:	f383 8810 	msr	PRIMASK, r3
}
 8006932:	46c0      	nop			@ (mov r8, r8)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4992      	ldr	r1, [pc, #584]	@ (8006b88 <HAL_UART_IRQHandler+0x588>)
 8006940:	400a      	ands	r2, r1
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006946:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694a:	f383 8810 	msr	PRIMASK, r3
}
 800694e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006950:	f3ef 8310 	mrs	r3, PRIMASK
 8006954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	677b      	str	r3, [r7, #116]	@ 0x74
 800695a:	2301      	movs	r3, #1
 800695c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006960:	f383 8810 	msr	PRIMASK, r3
}
 8006964:	46c0      	nop			@ (mov r8, r8)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2101      	movs	r1, #1
 8006972:	438a      	bics	r2, r1
 8006974:	609a      	str	r2, [r3, #8]
 8006976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006978:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800697c:	f383 8810 	msr	PRIMASK, r3
}
 8006980:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006982:	f3ef 8310 	mrs	r3, PRIMASK
 8006986:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	673b      	str	r3, [r7, #112]	@ 0x70
 800698c:	2301      	movs	r3, #1
 800698e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006992:	f383 8810 	msr	PRIMASK, r3
}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2140      	movs	r1, #64	@ 0x40
 80069a4:	438a      	bics	r2, r1
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069aa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ae:	f383 8810 	msr	PRIMASK, r3
}
 80069b2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2280      	movs	r2, #128	@ 0x80
 80069b8:	2120      	movs	r1, #32
 80069ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c2:	f3ef 8310 	mrs	r3, PRIMASK
 80069c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80069c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069cc:	2301      	movs	r3, #1
 80069ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069d2:	f383 8810 	msr	PRIMASK, r3
}
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2110      	movs	r1, #16
 80069e4:	438a      	bics	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ee:	f383 8810 	msr	PRIMASK, r3
}
 80069f2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7fe f99f 	bl	8004d3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2258      	movs	r2, #88	@ 0x58
 8006a08:	5a9a      	ldrh	r2, [r3, r2]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	215a      	movs	r1, #90	@ 0x5a
 8006a0e:	5a5b      	ldrh	r3, [r3, r1]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0011      	movs	r1, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 f8c8 	bl	8006bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a20:	e0aa      	b.n	8006b78 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2258      	movs	r2, #88	@ 0x58
 8006a26:	5a99      	ldrh	r1, [r3, r2]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	225a      	movs	r2, #90	@ 0x5a
 8006a2c:	5a9b      	ldrh	r3, [r3, r2]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	208e      	movs	r0, #142	@ 0x8e
 8006a32:	183b      	adds	r3, r7, r0
 8006a34:	1a8a      	subs	r2, r1, r2
 8006a36:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	225a      	movs	r2, #90	@ 0x5a
 8006a3c:	5a9b      	ldrh	r3, [r3, r2]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d100      	bne.n	8006a46 <HAL_UART_IRQHandler+0x446>
 8006a44:	e09a      	b.n	8006b7c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8006a46:	183b      	adds	r3, r7, r0
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d100      	bne.n	8006a50 <HAL_UART_IRQHandler+0x450>
 8006a4e:	e095      	b.n	8006b7c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a50:	f3ef 8310 	mrs	r3, PRIMASK
 8006a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a56:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a58:	2488      	movs	r4, #136	@ 0x88
 8006a5a:	193a      	adds	r2, r7, r4
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	2301      	movs	r3, #1
 8006a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			@ (mov r8, r8)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4945      	ldr	r1, [pc, #276]	@ (8006b8c <HAL_UART_IRQHandler+0x58c>)
 8006a76:	400a      	ands	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	193b      	adds	r3, r7, r4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f383 8810 	msr	PRIMASK, r3
}
 8006a86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a88:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a8e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	2484      	movs	r4, #132	@ 0x84
 8006a92:	193a      	adds	r2, r7, r4
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	2301      	movs	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f383 8810 	msr	PRIMASK, r3
}
 8006aa0:	46c0      	nop			@ (mov r8, r8)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2101      	movs	r1, #1
 8006aae:	438a      	bics	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]
 8006ab2:	193b      	adds	r3, r7, r4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f383 8810 	msr	PRIMASK, r3
}
 8006abe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2280      	movs	r2, #128	@ 0x80
 8006ac4:	2120      	movs	r1, #32
 8006ac6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	2480      	movs	r4, #128	@ 0x80
 8006ade:	193a      	adds	r2, r7, r4
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	f383 8810 	msr	PRIMASK, r3
}
 8006aec:	46c0      	nop			@ (mov r8, r8)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2110      	movs	r1, #16
 8006afa:	438a      	bics	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	193b      	adds	r3, r7, r4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	f383 8810 	msr	PRIMASK, r3
}
 8006b0a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b12:	183b      	adds	r3, r7, r0
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	0011      	movs	r1, r2
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f000 f848 	bl	8006bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b20:	e02c      	b.n	8006b7c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b22:	23a4      	movs	r3, #164	@ 0xa4
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2280      	movs	r2, #128	@ 0x80
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d00f      	beq.n	8006b4e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b2e:	23a0      	movs	r3, #160	@ 0xa0
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2280      	movs	r2, #128	@ 0x80
 8006b36:	4013      	ands	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01e      	beq.n	8006b80 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	0010      	movs	r0, r2
 8006b4a:	4798      	blx	r3
    }
    return;
 8006b4c:	e018      	b.n	8006b80 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b4e:	23a4      	movs	r3, #164	@ 0xa4
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2240      	movs	r2, #64	@ 0x40
 8006b56:	4013      	ands	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_UART_IRQHandler+0x582>
 8006b5a:	23a0      	movs	r3, #160	@ 0xa0
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2240      	movs	r2, #64	@ 0x40
 8006b62:	4013      	ands	r3, r2
 8006b64:	d00d      	beq.n	8006b82 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f000 fc6a 	bl	8007442 <UART_EndTransmit_IT>
    return;
 8006b6e:	e008      	b.n	8006b82 <HAL_UART_IRQHandler+0x582>
      return;
 8006b70:	46c0      	nop			@ (mov r8, r8)
 8006b72:	e006      	b.n	8006b82 <HAL_UART_IRQHandler+0x582>
    return;
 8006b74:	46c0      	nop			@ (mov r8, r8)
 8006b76:	e004      	b.n	8006b82 <HAL_UART_IRQHandler+0x582>
      return;
 8006b78:	46c0      	nop			@ (mov r8, r8)
 8006b7a:	e002      	b.n	8006b82 <HAL_UART_IRQHandler+0x582>
      return;
 8006b7c:	46c0      	nop			@ (mov r8, r8)
 8006b7e:	e000      	b.n	8006b82 <HAL_UART_IRQHandler+0x582>
    return;
 8006b80:	46c0      	nop			@ (mov r8, r8)
  }

}
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b02b      	add	sp, #172	@ 0xac
 8006b86:	bd90      	pop	{r4, r7, pc}
 8006b88:	fffffeff 	.word	0xfffffeff
 8006b8c:	fffffedf 	.word	0xfffffedf

08006b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b98:	46c0      	nop			@ (mov r8, r8)
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b002      	add	sp, #8
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ba8:	46c0      	nop			@ (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b002      	add	sp, #8
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	000a      	movs	r2, r1
 8006bba:	1cbb      	adds	r3, r7, #2
 8006bbc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bd0:	231e      	movs	r3, #30
 8006bd2:	18fb      	adds	r3, r7, r3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a8d      	ldr	r2, [pc, #564]	@ (8006e2c <UART_SetConfig+0x264>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	0019      	movs	r1, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a88      	ldr	r2, [pc, #544]	@ (8006e30 <UART_SetConfig+0x268>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	0019      	movs	r1, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a7f      	ldr	r2, [pc, #508]	@ (8006e34 <UART_SetConfig+0x26c>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	0019      	movs	r1, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a7b      	ldr	r2, [pc, #492]	@ (8006e38 <UART_SetConfig+0x270>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d127      	bne.n	8006c9e <UART_SetConfig+0xd6>
 8006c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e3c <UART_SetConfig+0x274>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	2203      	movs	r2, #3
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d00d      	beq.n	8006c76 <UART_SetConfig+0xae>
 8006c5a:	d81b      	bhi.n	8006c94 <UART_SetConfig+0xcc>
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d014      	beq.n	8006c8a <UART_SetConfig+0xc2>
 8006c60:	d818      	bhi.n	8006c94 <UART_SetConfig+0xcc>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <UART_SetConfig+0xa4>
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d00a      	beq.n	8006c80 <UART_SetConfig+0xb8>
 8006c6a:	e013      	b.n	8006c94 <UART_SetConfig+0xcc>
 8006c6c:	231f      	movs	r3, #31
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e021      	b.n	8006cba <UART_SetConfig+0xf2>
 8006c76:	231f      	movs	r3, #31
 8006c78:	18fb      	adds	r3, r7, r3
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e01c      	b.n	8006cba <UART_SetConfig+0xf2>
 8006c80:	231f      	movs	r3, #31
 8006c82:	18fb      	adds	r3, r7, r3
 8006c84:	2204      	movs	r2, #4
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e017      	b.n	8006cba <UART_SetConfig+0xf2>
 8006c8a:	231f      	movs	r3, #31
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	2208      	movs	r2, #8
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e012      	b.n	8006cba <UART_SetConfig+0xf2>
 8006c94:	231f      	movs	r3, #31
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	2210      	movs	r2, #16
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	e00d      	b.n	8006cba <UART_SetConfig+0xf2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a67      	ldr	r2, [pc, #412]	@ (8006e40 <UART_SetConfig+0x278>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d104      	bne.n	8006cb2 <UART_SetConfig+0xea>
 8006ca8:	231f      	movs	r3, #31
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	e003      	b.n	8006cba <UART_SetConfig+0xf2>
 8006cb2:	231f      	movs	r3, #31
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	2380      	movs	r3, #128	@ 0x80
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d15c      	bne.n	8006d80 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8006cc6:	231f      	movs	r3, #31
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d015      	beq.n	8006cfc <UART_SetConfig+0x134>
 8006cd0:	dc18      	bgt.n	8006d04 <UART_SetConfig+0x13c>
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d00d      	beq.n	8006cf2 <UART_SetConfig+0x12a>
 8006cd6:	dc15      	bgt.n	8006d04 <UART_SetConfig+0x13c>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <UART_SetConfig+0x11a>
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d005      	beq.n	8006cec <UART_SetConfig+0x124>
 8006ce0:	e010      	b.n	8006d04 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce2:	f7fe fec1 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	61bb      	str	r3, [r7, #24]
        break;
 8006cea:	e012      	b.n	8006d12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b55      	ldr	r3, [pc, #340]	@ (8006e44 <UART_SetConfig+0x27c>)
 8006cee:	61bb      	str	r3, [r7, #24]
        break;
 8006cf0:	e00f      	b.n	8006d12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe fe59 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	61bb      	str	r3, [r7, #24]
        break;
 8006cfa:	e00a      	b.n	8006d12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfc:	2380      	movs	r3, #128	@ 0x80
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	61bb      	str	r3, [r7, #24]
        break;
 8006d02:	e006      	b.n	8006d12 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d08:	231e      	movs	r3, #30
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
        break;
 8006d10:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d100      	bne.n	8006d1a <UART_SetConfig+0x152>
 8006d18:	e07a      	b.n	8006e10 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	005a      	lsls	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	18d2      	adds	r2, r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	0010      	movs	r0, r2
 8006d2e:	f7f9 fa11 	bl	8000154 <__udivsi3>
 8006d32:	0003      	movs	r3, r0
 8006d34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b0f      	cmp	r3, #15
 8006d3a:	d91c      	bls.n	8006d76 <UART_SetConfig+0x1ae>
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	2380      	movs	r3, #128	@ 0x80
 8006d40:	025b      	lsls	r3, r3, #9
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d217      	bcs.n	8006d76 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	200e      	movs	r0, #14
 8006d4c:	183b      	adds	r3, r7, r0
 8006d4e:	210f      	movs	r1, #15
 8006d50:	438a      	bics	r2, r1
 8006d52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2207      	movs	r2, #7
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	b299      	uxth	r1, r3
 8006d60:	183b      	adds	r3, r7, r0
 8006d62:	183a      	adds	r2, r7, r0
 8006d64:	8812      	ldrh	r2, [r2, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	183a      	adds	r2, r7, r0
 8006d70:	8812      	ldrh	r2, [r2, #0]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	e04c      	b.n	8006e10 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006d76:	231e      	movs	r3, #30
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e047      	b.n	8006e10 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d80:	231f      	movs	r3, #31
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d015      	beq.n	8006db6 <UART_SetConfig+0x1ee>
 8006d8a:	dc18      	bgt.n	8006dbe <UART_SetConfig+0x1f6>
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d00d      	beq.n	8006dac <UART_SetConfig+0x1e4>
 8006d90:	dc15      	bgt.n	8006dbe <UART_SetConfig+0x1f6>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <UART_SetConfig+0x1d4>
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d005      	beq.n	8006da6 <UART_SetConfig+0x1de>
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fe fe64 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006da0:	0003      	movs	r3, r0
 8006da2:	61bb      	str	r3, [r7, #24]
        break;
 8006da4:	e012      	b.n	8006dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da6:	4b27      	ldr	r3, [pc, #156]	@ (8006e44 <UART_SetConfig+0x27c>)
 8006da8:	61bb      	str	r3, [r7, #24]
        break;
 8006daa:	e00f      	b.n	8006dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dac:	f7fe fdfc 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8006db0:	0003      	movs	r3, r0
 8006db2:	61bb      	str	r3, [r7, #24]
        break;
 8006db4:	e00a      	b.n	8006dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db6:	2380      	movs	r3, #128	@ 0x80
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	61bb      	str	r3, [r7, #24]
        break;
 8006dbc:	e006      	b.n	8006dcc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dc2:	231e      	movs	r3, #30
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	701a      	strb	r2, [r3, #0]
        break;
 8006dca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01e      	beq.n	8006e10 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	085a      	lsrs	r2, r3, #1
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	18d2      	adds	r2, r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	0019      	movs	r1, r3
 8006de2:	0010      	movs	r0, r2
 8006de4:	f7f9 f9b6 	bl	8000154 <__udivsi3>
 8006de8:	0003      	movs	r3, r0
 8006dea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d90a      	bls.n	8006e08 <UART_SetConfig+0x240>
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	025b      	lsls	r3, r3, #9
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d205      	bcs.n	8006e08 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	e003      	b.n	8006e10 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006e08:	231e      	movs	r3, #30
 8006e0a:	18fb      	adds	r3, r7, r3
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e1c:	231e      	movs	r3, #30
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	781b      	ldrb	r3, [r3, #0]
}
 8006e22:	0018      	movs	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b008      	add	sp, #32
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	ffff69f3 	.word	0xffff69f3
 8006e30:	ffffcfff 	.word	0xffffcfff
 8006e34:	fffff4ff 	.word	0xfffff4ff
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	40004400 	.word	0x40004400
 8006e44:	007a1200 	.word	0x007a1200

08006e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	2208      	movs	r2, #8
 8006e56:	4013      	ands	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a4a      	ldr	r2, [pc, #296]	@ (8006f8c <UART_AdvFeatureConfig+0x144>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	0019      	movs	r1, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	2201      	movs	r2, #1
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	4a43      	ldr	r2, [pc, #268]	@ (8006f90 <UART_AdvFeatureConfig+0x148>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	0019      	movs	r1, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	2202      	movs	r2, #2
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8006f94 <UART_AdvFeatureConfig+0x14c>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	0019      	movs	r1, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	2204      	movs	r2, #4
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4a34      	ldr	r2, [pc, #208]	@ (8006f98 <UART_AdvFeatureConfig+0x150>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	0019      	movs	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	2210      	movs	r2, #16
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f9c <UART_AdvFeatureConfig+0x154>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	2220      	movs	r2, #32
 8006f00:	4013      	ands	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4a25      	ldr	r2, [pc, #148]	@ (8006fa0 <UART_AdvFeatureConfig+0x158>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	0019      	movs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	2240      	movs	r2, #64	@ 0x40
 8006f22:	4013      	ands	r3, r2
 8006f24:	d01d      	beq.n	8006f62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa4 <UART_AdvFeatureConfig+0x15c>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	0019      	movs	r1, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f42:	2380      	movs	r3, #128	@ 0x80
 8006f44:	035b      	lsls	r3, r3, #13
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d10b      	bne.n	8006f62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4a15      	ldr	r2, [pc, #84]	@ (8006fa8 <UART_AdvFeatureConfig+0x160>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	0019      	movs	r1, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	2280      	movs	r2, #128	@ 0x80
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d00b      	beq.n	8006f84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4a0e      	ldr	r2, [pc, #56]	@ (8006fac <UART_AdvFeatureConfig+0x164>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	0019      	movs	r1, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }
}
 8006f84:	46c0      	nop			@ (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b002      	add	sp, #8
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	ffff7fff 	.word	0xffff7fff
 8006f90:	fffdffff 	.word	0xfffdffff
 8006f94:	fffeffff 	.word	0xfffeffff
 8006f98:	fffbffff 	.word	0xfffbffff
 8006f9c:	ffffefff 	.word	0xffffefff
 8006fa0:	ffffdfff 	.word	0xffffdfff
 8006fa4:	ffefffff 	.word	0xffefffff
 8006fa8:	ff9fffff 	.word	0xff9fffff
 8006fac:	fff7ffff 	.word	0xfff7ffff

08006fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b092      	sub	sp, #72	@ 0x48
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2284      	movs	r2, #132	@ 0x84
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc0:	f7fd fb7a 	bl	80046b8 <HAL_GetTick>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2208      	movs	r2, #8
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d12c      	bne.n	8007030 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd8:	2280      	movs	r2, #128	@ 0x80
 8006fda:	0391      	lsls	r1, r2, #14
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4a46      	ldr	r2, [pc, #280]	@ (80070f8 <UART_CheckIdleState+0x148>)
 8006fe0:	9200      	str	r2, [sp, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f000 f88c 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8006fe8:	1e03      	subs	r3, r0, #0
 8006fea:	d021      	beq.n	8007030 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fec:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2180      	movs	r1, #128	@ 0x80
 800700e:	438a      	bics	r2, r1
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	f383 8810 	msr	PRIMASK, r3
}
 800701c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2278      	movs	r2, #120	@ 0x78
 8007028:	2100      	movs	r1, #0
 800702a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e05f      	b.n	80070f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2204      	movs	r2, #4
 8007038:	4013      	ands	r3, r2
 800703a:	2b04      	cmp	r3, #4
 800703c:	d146      	bne.n	80070cc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800703e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007040:	2280      	movs	r2, #128	@ 0x80
 8007042:	03d1      	lsls	r1, r2, #15
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4a2c      	ldr	r2, [pc, #176]	@ (80070f8 <UART_CheckIdleState+0x148>)
 8007048:	9200      	str	r2, [sp, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	f000 f858 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8007050:	1e03      	subs	r3, r0, #0
 8007052:	d03b      	beq.n	80070cc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007054:	f3ef 8310 	mrs	r3, PRIMASK
 8007058:	60fb      	str	r3, [r7, #12]
  return(result);
 800705a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
 800705e:	2301      	movs	r3, #1
 8007060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f383 8810 	msr	PRIMASK, r3
}
 8007068:	46c0      	nop			@ (mov r8, r8)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4921      	ldr	r1, [pc, #132]	@ (80070fc <UART_CheckIdleState+0x14c>)
 8007076:	400a      	ands	r2, r1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f383 8810 	msr	PRIMASK, r3
}
 8007084:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007086:	f3ef 8310 	mrs	r3, PRIMASK
 800708a:	61bb      	str	r3, [r7, #24]
  return(result);
 800708c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007090:	2301      	movs	r3, #1
 8007092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f383 8810 	msr	PRIMASK, r3
}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2101      	movs	r1, #1
 80070a8:	438a      	bics	r2, r1
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	f383 8810 	msr	PRIMASK, r3
}
 80070b6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2280      	movs	r2, #128	@ 0x80
 80070bc:	2120      	movs	r1, #32
 80070be:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2278      	movs	r2, #120	@ 0x78
 80070c4:	2100      	movs	r1, #0
 80070c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e011      	b.n	80070f0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2280      	movs	r2, #128	@ 0x80
 80070d6:	2120      	movs	r1, #32
 80070d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2278      	movs	r2, #120	@ 0x78
 80070ea:	2100      	movs	r1, #0
 80070ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	0018      	movs	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b010      	add	sp, #64	@ 0x40
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	01ffffff 	.word	0x01ffffff
 80070fc:	fffffedf 	.word	0xfffffedf

08007100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	1dfb      	adds	r3, r7, #7
 800710e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007110:	e051      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3301      	adds	r3, #1
 8007116:	d04e      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007118:	f7fd face 	bl	80046b8 <HAL_GetTick>
 800711c:	0002      	movs	r2, r0
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e051      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2204      	movs	r2, #4
 800713a:	4013      	ands	r3, r2
 800713c:	d03b      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b80      	cmp	r3, #128	@ 0x80
 8007142:	d038      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b40      	cmp	r3, #64	@ 0x40
 8007148:	d035      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	2208      	movs	r2, #8
 8007152:	4013      	ands	r3, r2
 8007154:	2b08      	cmp	r3, #8
 8007156:	d111      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2208      	movs	r2, #8
 800715e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	0018      	movs	r0, r3
 8007164:	f000 f8f2 	bl	800734c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2284      	movs	r2, #132	@ 0x84
 800716c:	2108      	movs	r1, #8
 800716e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2278      	movs	r2, #120	@ 0x78
 8007174:	2100      	movs	r1, #0
 8007176:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e02c      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	2380      	movs	r3, #128	@ 0x80
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	401a      	ands	r2, r3
 8007188:	2380      	movs	r3, #128	@ 0x80
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	429a      	cmp	r2, r3
 800718e:	d112      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2280      	movs	r2, #128	@ 0x80
 8007196:	0112      	lsls	r2, r2, #4
 8007198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	0018      	movs	r0, r3
 800719e:	f000 f8d5 	bl	800734c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2284      	movs	r2, #132	@ 0x84
 80071a6:	2120      	movs	r1, #32
 80071a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2278      	movs	r2, #120	@ 0x78
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e00f      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4013      	ands	r3, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	425a      	negs	r2, r3
 80071c6:	4153      	adcs	r3, r2
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	001a      	movs	r2, r3
 80071cc:	1dfb      	adds	r3, r7, #7
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d09e      	beq.n	8007112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	0018      	movs	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	b004      	add	sp, #16
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b090      	sub	sp, #64	@ 0x40
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	1dbb      	adds	r3, r7, #6
 80071ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	1dba      	adds	r2, r7, #6
 80071f8:	2158      	movs	r1, #88	@ 0x58
 80071fa:	8812      	ldrh	r2, [r2, #0]
 80071fc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1dba      	adds	r2, r7, #6
 8007202:	215a      	movs	r1, #90	@ 0x5a
 8007204:	8812      	ldrh	r2, [r2, #0]
 8007206:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	2380      	movs	r3, #128	@ 0x80
 8007214:	015b      	lsls	r3, r3, #5
 8007216:	429a      	cmp	r2, r3
 8007218:	d10d      	bne.n	8007236 <UART_Start_Receive_IT+0x56>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <UART_Start_Receive_IT+0x4c>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	225c      	movs	r2, #92	@ 0x5c
 8007226:	4946      	ldr	r1, [pc, #280]	@ (8007340 <UART_Start_Receive_IT+0x160>)
 8007228:	5299      	strh	r1, [r3, r2]
 800722a:	e01a      	b.n	8007262 <UART_Start_Receive_IT+0x82>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	225c      	movs	r2, #92	@ 0x5c
 8007230:	21ff      	movs	r1, #255	@ 0xff
 8007232:	5299      	strh	r1, [r3, r2]
 8007234:	e015      	b.n	8007262 <UART_Start_Receive_IT+0x82>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10d      	bne.n	800725a <UART_Start_Receive_IT+0x7a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d104      	bne.n	8007250 <UART_Start_Receive_IT+0x70>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	225c      	movs	r2, #92	@ 0x5c
 800724a:	21ff      	movs	r1, #255	@ 0xff
 800724c:	5299      	strh	r1, [r3, r2]
 800724e:	e008      	b.n	8007262 <UART_Start_Receive_IT+0x82>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	225c      	movs	r2, #92	@ 0x5c
 8007254:	217f      	movs	r1, #127	@ 0x7f
 8007256:	5299      	strh	r1, [r3, r2]
 8007258:	e003      	b.n	8007262 <UART_Start_Receive_IT+0x82>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	225c      	movs	r2, #92	@ 0x5c
 800725e:	2100      	movs	r1, #0
 8007260:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2284      	movs	r2, #132	@ 0x84
 8007266:	2100      	movs	r1, #0
 8007268:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2280      	movs	r2, #128	@ 0x80
 800726e:	2122      	movs	r1, #34	@ 0x22
 8007270:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007272:	f3ef 8310 	mrs	r3, PRIMASK
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800727c:	2301      	movs	r3, #1
 800727e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007282:	f383 8810 	msr	PRIMASK, r3
}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2101      	movs	r1, #1
 8007294:	430a      	orrs	r2, r1
 8007296:	609a      	str	r2, [r3, #8]
 8007298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	f383 8810 	msr	PRIMASK, r3
}
 80072a2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	2380      	movs	r3, #128	@ 0x80
 80072aa:	015b      	lsls	r3, r3, #5
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d107      	bne.n	80072c0 <UART_Start_Receive_IT+0xe0>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a22      	ldr	r2, [pc, #136]	@ (8007344 <UART_Start_Receive_IT+0x164>)
 80072bc:	669a      	str	r2, [r3, #104]	@ 0x68
 80072be:	e002      	b.n	80072c6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a21      	ldr	r2, [pc, #132]	@ (8007348 <UART_Start_Receive_IT+0x168>)
 80072c4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ce:	f3ef 8310 	mrs	r3, PRIMASK
 80072d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80072d4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d8:	2301      	movs	r3, #1
 80072da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	f383 8810 	msr	PRIMASK, r3
}
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2190      	movs	r1, #144	@ 0x90
 80072f0:	0049      	lsls	r1, r1, #1
 80072f2:	430a      	orrs	r2, r1
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	f383 8810 	msr	PRIMASK, r3
}
 8007300:	e018      	b.n	8007334 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007302:	f3ef 8310 	mrs	r3, PRIMASK
 8007306:	613b      	str	r3, [r7, #16]
  return(result);
 8007308:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800730a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800730c:	2301      	movs	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f383 8810 	msr	PRIMASK, r3
}
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2120      	movs	r1, #32
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f383 8810 	msr	PRIMASK, r3
}
 8007332:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b010      	add	sp, #64	@ 0x40
 800733c:	bd80      	pop	{r7, pc}
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	000001ff 	.word	0x000001ff
 8007344:	08007651 	.word	0x08007651
 8007348:	08007499 	.word	0x08007499

0800734c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	@ 0x38
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007354:	f3ef 8310 	mrs	r3, PRIMASK
 8007358:	617b      	str	r3, [r7, #20]
  return(result);
 800735a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
 800735e:	2301      	movs	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f383 8810 	msr	PRIMASK, r3
}
 8007368:	46c0      	nop			@ (mov r8, r8)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4926      	ldr	r1, [pc, #152]	@ (8007410 <UART_EndRxTransfer+0xc4>)
 8007376:	400a      	ands	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	f383 8810 	msr	PRIMASK, r3
}
 8007384:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007386:	f3ef 8310 	mrs	r3, PRIMASK
 800738a:	623b      	str	r3, [r7, #32]
  return(result);
 800738c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007390:	2301      	movs	r3, #1
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	f383 8810 	msr	PRIMASK, r3
}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2101      	movs	r1, #1
 80073a8:	438a      	bics	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	f383 8810 	msr	PRIMASK, r3
}
 80073b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d118      	bne.n	80073f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c0:	f3ef 8310 	mrs	r3, PRIMASK
 80073c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ca:	2301      	movs	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f383 8810 	msr	PRIMASK, r3
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2110      	movs	r1, #16
 80073e2:	438a      	bics	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f383 8810 	msr	PRIMASK, r3
}
 80073f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2280      	movs	r2, #128	@ 0x80
 80073f6:	2120      	movs	r1, #32
 80073f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	b00e      	add	sp, #56	@ 0x38
 800740c:	bd80      	pop	{r7, pc}
 800740e:	46c0      	nop			@ (mov r8, r8)
 8007410:	fffffedf 	.word	0xfffffedf

08007414 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	225a      	movs	r2, #90	@ 0x5a
 8007426:	2100      	movs	r1, #0
 8007428:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2252      	movs	r2, #82	@ 0x52
 800742e:	2100      	movs	r1, #0
 8007430:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	0018      	movs	r0, r3
 8007436:	f7ff fbb3 	bl	8006ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	46bd      	mov	sp, r7
 800743e:	b004      	add	sp, #16
 8007440:	bd80      	pop	{r7, pc}

08007442 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b086      	sub	sp, #24
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744a:	f3ef 8310 	mrs	r3, PRIMASK
 800744e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007450:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	2301      	movs	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f383 8810 	msr	PRIMASK, r3
}
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2140      	movs	r1, #64	@ 0x40
 800746c:	438a      	bics	r2, r1
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f383 8810 	msr	PRIMASK, r3
}
 800747a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	0018      	movs	r0, r3
 800748c:	f7ff fb80 	bl	8006b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007490:	46c0      	nop			@ (mov r8, r8)
 8007492:	46bd      	mov	sp, r7
 8007494:	b006      	add	sp, #24
 8007496:	bd80      	pop	{r7, pc}

08007498 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b094      	sub	sp, #80	@ 0x50
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074a0:	204e      	movs	r0, #78	@ 0x4e
 80074a2:	183b      	adds	r3, r7, r0
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	215c      	movs	r1, #92	@ 0x5c
 80074a8:	5a52      	ldrh	r2, [r2, r1]
 80074aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	@ 0x80
 80074b0:	589b      	ldr	r3, [r3, r2]
 80074b2:	2b22      	cmp	r3, #34	@ 0x22
 80074b4:	d000      	beq.n	80074b8 <UART_RxISR_8BIT+0x20>
 80074b6:	e0ba      	b.n	800762e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	214c      	movs	r1, #76	@ 0x4c
 80074be:	187b      	adds	r3, r7, r1
 80074c0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80074c2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074c4:	187b      	adds	r3, r7, r1
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	183b      	adds	r3, r7, r0
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b2d9      	uxtb	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d4:	400a      	ands	r2, r1
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	225a      	movs	r2, #90	@ 0x5a
 80074e8:	5a9b      	ldrh	r3, [r3, r2]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b299      	uxth	r1, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	225a      	movs	r2, #90	@ 0x5a
 80074f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	225a      	movs	r2, #90	@ 0x5a
 80074fa:	5a9b      	ldrh	r3, [r3, r2]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d000      	beq.n	8007504 <UART_RxISR_8BIT+0x6c>
 8007502:	e09c      	b.n	800763e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007504:	f3ef 8310 	mrs	r3, PRIMASK
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800750e:	2301      	movs	r3, #1
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			@ (mov r8, r8)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4948      	ldr	r1, [pc, #288]	@ (8007648 <UART_RxISR_8BIT+0x1b0>)
 8007526:	400a      	ands	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	f383 8810 	msr	PRIMASK, r3
}
 8007534:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007536:	f3ef 8310 	mrs	r3, PRIMASK
 800753a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007540:	2301      	movs	r3, #1
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2101      	movs	r1, #1
 8007558:	438a      	bics	r2, r1
 800755a:	609a      	str	r2, [r3, #8]
 800755c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	f383 8810 	msr	PRIMASK, r3
}
 8007566:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2280      	movs	r2, #128	@ 0x80
 800756c:	2120      	movs	r1, #32
 800756e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	2380      	movs	r3, #128	@ 0x80
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	4013      	ands	r3, r2
 8007588:	d018      	beq.n	80075bc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758a:	f3ef 8310 	mrs	r3, PRIMASK
 800758e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007590:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007592:	643b      	str	r3, [r7, #64]	@ 0x40
 8007594:	2301      	movs	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f383 8810 	msr	PRIMASK, r3
}
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4928      	ldr	r1, [pc, #160]	@ (800764c <UART_RxISR_8BIT+0x1b4>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	f383 8810 	msr	PRIMASK, r3
}
 80075ba:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d12f      	bne.n	8007624 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ca:	f3ef 8310 	mrs	r3, PRIMASK
 80075ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d4:	2301      	movs	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f383 8810 	msr	PRIMASK, r3
}
 80075de:	46c0      	nop			@ (mov r8, r8)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2110      	movs	r1, #16
 80075ec:	438a      	bics	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	2210      	movs	r2, #16
 8007604:	4013      	ands	r3, r2
 8007606:	2b10      	cmp	r3, #16
 8007608:	d103      	bne.n	8007612 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2210      	movs	r2, #16
 8007610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2258      	movs	r2, #88	@ 0x58
 8007616:	5a9a      	ldrh	r2, [r3, r2]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	0011      	movs	r1, r2
 800761c:	0018      	movs	r0, r3
 800761e:	f7ff fac7 	bl	8006bb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007622:	e00c      	b.n	800763e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0018      	movs	r0, r3
 8007628:	f7fb fe1c 	bl	8003264 <HAL_UART_RxCpltCallback>
}
 800762c:	e007      	b.n	800763e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2108      	movs	r1, #8
 800763a:	430a      	orrs	r2, r1
 800763c:	619a      	str	r2, [r3, #24]
}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	46bd      	mov	sp, r7
 8007642:	b014      	add	sp, #80	@ 0x50
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	fffffedf 	.word	0xfffffedf
 800764c:	fbffffff 	.word	0xfbffffff

08007650 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b094      	sub	sp, #80	@ 0x50
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007658:	204e      	movs	r0, #78	@ 0x4e
 800765a:	183b      	adds	r3, r7, r0
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	215c      	movs	r1, #92	@ 0x5c
 8007660:	5a52      	ldrh	r2, [r2, r1]
 8007662:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2280      	movs	r2, #128	@ 0x80
 8007668:	589b      	ldr	r3, [r3, r2]
 800766a:	2b22      	cmp	r3, #34	@ 0x22
 800766c:	d000      	beq.n	8007670 <UART_RxISR_16BIT+0x20>
 800766e:	e0ba      	b.n	80077e6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	214c      	movs	r1, #76	@ 0x4c
 8007676:	187b      	adds	r3, r7, r1
 8007678:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800767a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007680:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007682:	187b      	adds	r3, r7, r1
 8007684:	183a      	adds	r2, r7, r0
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	4013      	ands	r3, r2
 800768c:	b29a      	uxth	r2, r3
 800768e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007690:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007696:	1c9a      	adds	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	225a      	movs	r2, #90	@ 0x5a
 80076a0:	5a9b      	ldrh	r3, [r3, r2]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b299      	uxth	r1, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	225a      	movs	r2, #90	@ 0x5a
 80076ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	225a      	movs	r2, #90	@ 0x5a
 80076b2:	5a9b      	ldrh	r3, [r3, r2]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d000      	beq.n	80076bc <UART_RxISR_16BIT+0x6c>
 80076ba:	e09c      	b.n	80077f6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076bc:	f3ef 8310 	mrs	r3, PRIMASK
 80076c0:	623b      	str	r3, [r7, #32]
  return(result);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076c6:	2301      	movs	r3, #1
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	f383 8810 	msr	PRIMASK, r3
}
 80076d0:	46c0      	nop			@ (mov r8, r8)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4948      	ldr	r1, [pc, #288]	@ (8007800 <UART_RxISR_16BIT+0x1b0>)
 80076de:	400a      	ands	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	f383 8810 	msr	PRIMASK, r3
}
 80076ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ee:	f3ef 8310 	mrs	r3, PRIMASK
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80076f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076f8:	2301      	movs	r3, #1
 80076fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f383 8810 	msr	PRIMASK, r3
}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2101      	movs	r1, #1
 8007710:	438a      	bics	r2, r1
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771a:	f383 8810 	msr	PRIMASK, r3
}
 800771e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2280      	movs	r2, #128	@ 0x80
 8007724:	2120      	movs	r1, #32
 8007726:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	2380      	movs	r3, #128	@ 0x80
 800773c:	041b      	lsls	r3, r3, #16
 800773e:	4013      	ands	r3, r2
 8007740:	d018      	beq.n	8007774 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007742:	f3ef 8310 	mrs	r3, PRIMASK
 8007746:	617b      	str	r3, [r7, #20]
  return(result);
 8007748:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800774c:	2301      	movs	r3, #1
 800774e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f383 8810 	msr	PRIMASK, r3
}
 8007756:	46c0      	nop			@ (mov r8, r8)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4928      	ldr	r1, [pc, #160]	@ (8007804 <UART_RxISR_16BIT+0x1b4>)
 8007764:	400a      	ands	r2, r1
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f383 8810 	msr	PRIMASK, r3
}
 8007772:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007778:	2b01      	cmp	r3, #1
 800777a:	d12f      	bne.n	80077dc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007782:	f3ef 8310 	mrs	r3, PRIMASK
 8007786:	60bb      	str	r3, [r7, #8]
  return(result);
 8007788:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800778c:	2301      	movs	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f383 8810 	msr	PRIMASK, r3
}
 8007796:	46c0      	nop			@ (mov r8, r8)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2110      	movs	r1, #16
 80077a4:	438a      	bics	r2, r1
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f383 8810 	msr	PRIMASK, r3
}
 80077b2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	2210      	movs	r2, #16
 80077bc:	4013      	ands	r3, r2
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d103      	bne.n	80077ca <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2210      	movs	r2, #16
 80077c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2258      	movs	r2, #88	@ 0x58
 80077ce:	5a9a      	ldrh	r2, [r3, r2]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	0011      	movs	r1, r2
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7ff f9eb 	bl	8006bb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077da:	e00c      	b.n	80077f6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	0018      	movs	r0, r3
 80077e0:	f7fb fd40 	bl	8003264 <HAL_UART_RxCpltCallback>
}
 80077e4:	e007      	b.n	80077f6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2108      	movs	r1, #8
 80077f2:	430a      	orrs	r2, r1
 80077f4:	619a      	str	r2, [r3, #24]
}
 80077f6:	46c0      	nop			@ (mov r8, r8)
 80077f8:	46bd      	mov	sp, r7
 80077fa:	b014      	add	sp, #80	@ 0x50
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	46c0      	nop			@ (mov r8, r8)
 8007800:	fffffedf 	.word	0xfffffedf
 8007804:	fbffffff 	.word	0xfbffffff

08007808 <__cvt>:
 8007808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800780a:	001f      	movs	r7, r3
 800780c:	2300      	movs	r3, #0
 800780e:	0016      	movs	r6, r2
 8007810:	b08b      	sub	sp, #44	@ 0x2c
 8007812:	429f      	cmp	r7, r3
 8007814:	da04      	bge.n	8007820 <__cvt+0x18>
 8007816:	2180      	movs	r1, #128	@ 0x80
 8007818:	0609      	lsls	r1, r1, #24
 800781a:	187b      	adds	r3, r7, r1
 800781c:	001f      	movs	r7, r3
 800781e:	232d      	movs	r3, #45	@ 0x2d
 8007820:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007822:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007824:	7013      	strb	r3, [r2, #0]
 8007826:	2320      	movs	r3, #32
 8007828:	2203      	movs	r2, #3
 800782a:	439d      	bics	r5, r3
 800782c:	2d46      	cmp	r5, #70	@ 0x46
 800782e:	d007      	beq.n	8007840 <__cvt+0x38>
 8007830:	002b      	movs	r3, r5
 8007832:	3b45      	subs	r3, #69	@ 0x45
 8007834:	4259      	negs	r1, r3
 8007836:	414b      	adcs	r3, r1
 8007838:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800783a:	3a01      	subs	r2, #1
 800783c:	18cb      	adds	r3, r1, r3
 800783e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007840:	ab09      	add	r3, sp, #36	@ 0x24
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	ab08      	add	r3, sp, #32
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800784a:	9200      	str	r2, [sp, #0]
 800784c:	9302      	str	r3, [sp, #8]
 800784e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007850:	0032      	movs	r2, r6
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	003b      	movs	r3, r7
 8007856:	f000 fe9b 	bl	8008590 <_dtoa_r>
 800785a:	0004      	movs	r4, r0
 800785c:	2d47      	cmp	r5, #71	@ 0x47
 800785e:	d11b      	bne.n	8007898 <__cvt+0x90>
 8007860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d511      	bpl.n	800788a <__cvt+0x82>
 8007866:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007868:	18c3      	adds	r3, r0, r3
 800786a:	9307      	str	r3, [sp, #28]
 800786c:	2200      	movs	r2, #0
 800786e:	2300      	movs	r3, #0
 8007870:	0030      	movs	r0, r6
 8007872:	0039      	movs	r1, r7
 8007874:	f7f8 fdf4 	bl	8000460 <__aeabi_dcmpeq>
 8007878:	2800      	cmp	r0, #0
 800787a:	d001      	beq.n	8007880 <__cvt+0x78>
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007880:	2230      	movs	r2, #48	@ 0x30
 8007882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007884:	9907      	ldr	r1, [sp, #28]
 8007886:	428b      	cmp	r3, r1
 8007888:	d320      	bcc.n	80078cc <__cvt+0xc4>
 800788a:	0020      	movs	r0, r4
 800788c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007890:	1b1b      	subs	r3, r3, r4
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	b00b      	add	sp, #44	@ 0x2c
 8007896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007898:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800789a:	18c3      	adds	r3, r0, r3
 800789c:	9307      	str	r3, [sp, #28]
 800789e:	2d46      	cmp	r5, #70	@ 0x46
 80078a0:	d1e4      	bne.n	800786c <__cvt+0x64>
 80078a2:	7803      	ldrb	r3, [r0, #0]
 80078a4:	2b30      	cmp	r3, #48	@ 0x30
 80078a6:	d10c      	bne.n	80078c2 <__cvt+0xba>
 80078a8:	2200      	movs	r2, #0
 80078aa:	2300      	movs	r3, #0
 80078ac:	0030      	movs	r0, r6
 80078ae:	0039      	movs	r1, r7
 80078b0:	f7f8 fdd6 	bl	8000460 <__aeabi_dcmpeq>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d104      	bne.n	80078c2 <__cvt+0xba>
 80078b8:	2301      	movs	r3, #1
 80078ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078c4:	9a07      	ldr	r2, [sp, #28]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	18d3      	adds	r3, r2, r3
 80078ca:	e7ce      	b.n	800786a <__cvt+0x62>
 80078cc:	1c59      	adds	r1, r3, #1
 80078ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e7d6      	b.n	8007882 <__cvt+0x7a>

080078d4 <__exponent>:
 80078d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078d6:	232b      	movs	r3, #43	@ 0x2b
 80078d8:	0005      	movs	r5, r0
 80078da:	000c      	movs	r4, r1
 80078dc:	b085      	sub	sp, #20
 80078de:	7002      	strb	r2, [r0, #0]
 80078e0:	2900      	cmp	r1, #0
 80078e2:	da01      	bge.n	80078e8 <__exponent+0x14>
 80078e4:	424c      	negs	r4, r1
 80078e6:	3302      	adds	r3, #2
 80078e8:	706b      	strb	r3, [r5, #1]
 80078ea:	2c09      	cmp	r4, #9
 80078ec:	dd2c      	ble.n	8007948 <__exponent+0x74>
 80078ee:	ab02      	add	r3, sp, #8
 80078f0:	1dde      	adds	r6, r3, #7
 80078f2:	0020      	movs	r0, r4
 80078f4:	210a      	movs	r1, #10
 80078f6:	f7f8 fd9d 	bl	8000434 <__aeabi_idivmod>
 80078fa:	0037      	movs	r7, r6
 80078fc:	3130      	adds	r1, #48	@ 0x30
 80078fe:	3e01      	subs	r6, #1
 8007900:	0020      	movs	r0, r4
 8007902:	7031      	strb	r1, [r6, #0]
 8007904:	210a      	movs	r1, #10
 8007906:	9401      	str	r4, [sp, #4]
 8007908:	f7f8 fcae 	bl	8000268 <__divsi3>
 800790c:	9b01      	ldr	r3, [sp, #4]
 800790e:	0004      	movs	r4, r0
 8007910:	2b63      	cmp	r3, #99	@ 0x63
 8007912:	dcee      	bgt.n	80078f2 <__exponent+0x1e>
 8007914:	1eba      	subs	r2, r7, #2
 8007916:	1ca8      	adds	r0, r5, #2
 8007918:	0001      	movs	r1, r0
 800791a:	0013      	movs	r3, r2
 800791c:	3430      	adds	r4, #48	@ 0x30
 800791e:	7014      	strb	r4, [r2, #0]
 8007920:	ac02      	add	r4, sp, #8
 8007922:	3407      	adds	r4, #7
 8007924:	429c      	cmp	r4, r3
 8007926:	d80a      	bhi.n	800793e <__exponent+0x6a>
 8007928:	2300      	movs	r3, #0
 800792a:	42a2      	cmp	r2, r4
 800792c:	d803      	bhi.n	8007936 <__exponent+0x62>
 800792e:	3309      	adds	r3, #9
 8007930:	aa02      	add	r2, sp, #8
 8007932:	189b      	adds	r3, r3, r2
 8007934:	1bdb      	subs	r3, r3, r7
 8007936:	18c0      	adds	r0, r0, r3
 8007938:	1b40      	subs	r0, r0, r5
 800793a:	b005      	add	sp, #20
 800793c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800793e:	781c      	ldrb	r4, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	700c      	strb	r4, [r1, #0]
 8007944:	3101      	adds	r1, #1
 8007946:	e7eb      	b.n	8007920 <__exponent+0x4c>
 8007948:	2330      	movs	r3, #48	@ 0x30
 800794a:	18e4      	adds	r4, r4, r3
 800794c:	70ab      	strb	r3, [r5, #2]
 800794e:	1d28      	adds	r0, r5, #4
 8007950:	70ec      	strb	r4, [r5, #3]
 8007952:	e7f1      	b.n	8007938 <__exponent+0x64>

08007954 <_printf_float>:
 8007954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007956:	b097      	sub	sp, #92	@ 0x5c
 8007958:	000d      	movs	r5, r1
 800795a:	920a      	str	r2, [sp, #40]	@ 0x28
 800795c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800795e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007960:	9009      	str	r0, [sp, #36]	@ 0x24
 8007962:	f000 fceb 	bl	800833c <_localeconv_r>
 8007966:	6803      	ldr	r3, [r0, #0]
 8007968:	0018      	movs	r0, r3
 800796a:	930d      	str	r3, [sp, #52]	@ 0x34
 800796c:	f7f8 fbd6 	bl	800011c <strlen>
 8007970:	2300      	movs	r3, #0
 8007972:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007974:	9314      	str	r3, [sp, #80]	@ 0x50
 8007976:	7e2b      	ldrb	r3, [r5, #24]
 8007978:	2207      	movs	r2, #7
 800797a:	930c      	str	r3, [sp, #48]	@ 0x30
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007980:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	05c9      	lsls	r1, r1, #23
 8007986:	d545      	bpl.n	8007a14 <_printf_float+0xc0>
 8007988:	189b      	adds	r3, r3, r2
 800798a:	4393      	bics	r3, r2
 800798c:	001a      	movs	r2, r3
 800798e:	3208      	adds	r2, #8
 8007990:	6022      	str	r2, [r4, #0]
 8007992:	2201      	movs	r2, #1
 8007994:	681e      	ldr	r6, [r3, #0]
 8007996:	685f      	ldr	r7, [r3, #4]
 8007998:	007b      	lsls	r3, r7, #1
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	9311      	str	r3, [sp, #68]	@ 0x44
 800799e:	9610      	str	r6, [sp, #64]	@ 0x40
 80079a0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80079a2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80079a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80079a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80079a8:	4ba7      	ldr	r3, [pc, #668]	@ (8007c48 <_printf_float+0x2f4>)
 80079aa:	4252      	negs	r2, r2
 80079ac:	f7fa ff88 	bl	80028c0 <__aeabi_dcmpun>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d131      	bne.n	8007a18 <_printf_float+0xc4>
 80079b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80079b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80079b8:	2201      	movs	r2, #1
 80079ba:	4ba3      	ldr	r3, [pc, #652]	@ (8007c48 <_printf_float+0x2f4>)
 80079bc:	4252      	negs	r2, r2
 80079be:	f7f8 fd5f 	bl	8000480 <__aeabi_dcmple>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d128      	bne.n	8007a18 <_printf_float+0xc4>
 80079c6:	2200      	movs	r2, #0
 80079c8:	2300      	movs	r3, #0
 80079ca:	0030      	movs	r0, r6
 80079cc:	0039      	movs	r1, r7
 80079ce:	f7f8 fd4d 	bl	800046c <__aeabi_dcmplt>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d003      	beq.n	80079de <_printf_float+0x8a>
 80079d6:	002b      	movs	r3, r5
 80079d8:	222d      	movs	r2, #45	@ 0x2d
 80079da:	3343      	adds	r3, #67	@ 0x43
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079e0:	4f9a      	ldr	r7, [pc, #616]	@ (8007c4c <_printf_float+0x2f8>)
 80079e2:	2b47      	cmp	r3, #71	@ 0x47
 80079e4:	d900      	bls.n	80079e8 <_printf_float+0x94>
 80079e6:	4f9a      	ldr	r7, [pc, #616]	@ (8007c50 <_printf_float+0x2fc>)
 80079e8:	2303      	movs	r3, #3
 80079ea:	2400      	movs	r4, #0
 80079ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ee:	612b      	str	r3, [r5, #16]
 80079f0:	3301      	adds	r3, #1
 80079f2:	439a      	bics	r2, r3
 80079f4:	602a      	str	r2, [r5, #0]
 80079f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079f8:	0029      	movs	r1, r5
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a00:	aa15      	add	r2, sp, #84	@ 0x54
 8007a02:	f000 f9e5 	bl	8007dd0 <_printf_common>
 8007a06:	3001      	adds	r0, #1
 8007a08:	d000      	beq.n	8007a0c <_printf_float+0xb8>
 8007a0a:	e09f      	b.n	8007b4c <_printf_float+0x1f8>
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	4240      	negs	r0, r0
 8007a10:	b017      	add	sp, #92	@ 0x5c
 8007a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a14:	3307      	adds	r3, #7
 8007a16:	e7b8      	b.n	800798a <_printf_float+0x36>
 8007a18:	0032      	movs	r2, r6
 8007a1a:	003b      	movs	r3, r7
 8007a1c:	0030      	movs	r0, r6
 8007a1e:	0039      	movs	r1, r7
 8007a20:	f7fa ff4e 	bl	80028c0 <__aeabi_dcmpun>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d00b      	beq.n	8007a40 <_printf_float+0xec>
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	da03      	bge.n	8007a34 <_printf_float+0xe0>
 8007a2c:	002b      	movs	r3, r5
 8007a2e:	222d      	movs	r2, #45	@ 0x2d
 8007a30:	3343      	adds	r3, #67	@ 0x43
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a36:	4f87      	ldr	r7, [pc, #540]	@ (8007c54 <_printf_float+0x300>)
 8007a38:	2b47      	cmp	r3, #71	@ 0x47
 8007a3a:	d9d5      	bls.n	80079e8 <_printf_float+0x94>
 8007a3c:	4f86      	ldr	r7, [pc, #536]	@ (8007c58 <_printf_float+0x304>)
 8007a3e:	e7d3      	b.n	80079e8 <_printf_float+0x94>
 8007a40:	2220      	movs	r2, #32
 8007a42:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007a44:	686b      	ldr	r3, [r5, #4]
 8007a46:	4394      	bics	r4, r2
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	d146      	bne.n	8007ada <_printf_float+0x186>
 8007a4c:	3307      	adds	r3, #7
 8007a4e:	606b      	str	r3, [r5, #4]
 8007a50:	2380      	movs	r3, #128	@ 0x80
 8007a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	4313      	orrs	r3, r2
 8007a58:	2200      	movs	r2, #0
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	9206      	str	r2, [sp, #24]
 8007a5e:	aa14      	add	r2, sp, #80	@ 0x50
 8007a60:	9205      	str	r2, [sp, #20]
 8007a62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a64:	a90a      	add	r1, sp, #40	@ 0x28
 8007a66:	9204      	str	r2, [sp, #16]
 8007a68:	aa13      	add	r2, sp, #76	@ 0x4c
 8007a6a:	9203      	str	r2, [sp, #12]
 8007a6c:	2223      	movs	r2, #35	@ 0x23
 8007a6e:	1852      	adds	r2, r2, r1
 8007a70:	9202      	str	r2, [sp, #8]
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	686b      	ldr	r3, [r5, #4]
 8007a76:	0032      	movs	r2, r6
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a7c:	003b      	movs	r3, r7
 8007a7e:	f7ff fec3 	bl	8007808 <__cvt>
 8007a82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a84:	0007      	movs	r7, r0
 8007a86:	2c47      	cmp	r4, #71	@ 0x47
 8007a88:	d12d      	bne.n	8007ae6 <_printf_float+0x192>
 8007a8a:	1cd3      	adds	r3, r2, #3
 8007a8c:	db02      	blt.n	8007a94 <_printf_float+0x140>
 8007a8e:	686b      	ldr	r3, [r5, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	dd48      	ble.n	8007b26 <_printf_float+0x1d2>
 8007a94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007a98:	3b02      	subs	r3, #2
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a9e:	0028      	movs	r0, r5
 8007aa0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007aa2:	3901      	subs	r1, #1
 8007aa4:	3050      	adds	r0, #80	@ 0x50
 8007aa6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007aa8:	f7ff ff14 	bl	80078d4 <__exponent>
 8007aac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007aae:	0004      	movs	r4, r0
 8007ab0:	1813      	adds	r3, r2, r0
 8007ab2:	612b      	str	r3, [r5, #16]
 8007ab4:	2a01      	cmp	r2, #1
 8007ab6:	dc02      	bgt.n	8007abe <_printf_float+0x16a>
 8007ab8:	682a      	ldr	r2, [r5, #0]
 8007aba:	07d2      	lsls	r2, r2, #31
 8007abc:	d501      	bpl.n	8007ac2 <_printf_float+0x16e>
 8007abe:	3301      	adds	r3, #1
 8007ac0:	612b      	str	r3, [r5, #16]
 8007ac2:	2323      	movs	r3, #35	@ 0x23
 8007ac4:	aa0a      	add	r2, sp, #40	@ 0x28
 8007ac6:	189b      	adds	r3, r3, r2
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d100      	bne.n	8007ad0 <_printf_float+0x17c>
 8007ace:	e792      	b.n	80079f6 <_printf_float+0xa2>
 8007ad0:	002b      	movs	r3, r5
 8007ad2:	222d      	movs	r2, #45	@ 0x2d
 8007ad4:	3343      	adds	r3, #67	@ 0x43
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	e78d      	b.n	80079f6 <_printf_float+0xa2>
 8007ada:	2c47      	cmp	r4, #71	@ 0x47
 8007adc:	d1b8      	bne.n	8007a50 <_printf_float+0xfc>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1b6      	bne.n	8007a50 <_printf_float+0xfc>
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	e7b3      	b.n	8007a4e <_printf_float+0xfa>
 8007ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae8:	0011      	movs	r1, r2
 8007aea:	2b65      	cmp	r3, #101	@ 0x65
 8007aec:	d9d7      	bls.n	8007a9e <_printf_float+0x14a>
 8007aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007af0:	2b66      	cmp	r3, #102	@ 0x66
 8007af2:	d11a      	bne.n	8007b2a <_printf_float+0x1d6>
 8007af4:	686b      	ldr	r3, [r5, #4]
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	dd09      	ble.n	8007b0e <_printf_float+0x1ba>
 8007afa:	612a      	str	r2, [r5, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <_printf_float+0x1b2>
 8007b00:	6829      	ldr	r1, [r5, #0]
 8007b02:	07c9      	lsls	r1, r1, #31
 8007b04:	d50b      	bpl.n	8007b1e <_printf_float+0x1ca>
 8007b06:	3301      	adds	r3, #1
 8007b08:	189b      	adds	r3, r3, r2
 8007b0a:	612b      	str	r3, [r5, #16]
 8007b0c:	e007      	b.n	8007b1e <_printf_float+0x1ca>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <_printf_float+0x1c6>
 8007b12:	2201      	movs	r2, #1
 8007b14:	6829      	ldr	r1, [r5, #0]
 8007b16:	4211      	tst	r1, r2
 8007b18:	d000      	beq.n	8007b1c <_printf_float+0x1c8>
 8007b1a:	1c9a      	adds	r2, r3, #2
 8007b1c:	612a      	str	r2, [r5, #16]
 8007b1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b20:	2400      	movs	r4, #0
 8007b22:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007b24:	e7cd      	b.n	8007ac2 <_printf_float+0x16e>
 8007b26:	2367      	movs	r3, #103	@ 0x67
 8007b28:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007b2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	db06      	blt.n	8007b40 <_printf_float+0x1ec>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	6129      	str	r1, [r5, #16]
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d5f1      	bpl.n	8007b1e <_printf_float+0x1ca>
 8007b3a:	3101      	adds	r1, #1
 8007b3c:	6129      	str	r1, [r5, #16]
 8007b3e:	e7ee      	b.n	8007b1e <_printf_float+0x1ca>
 8007b40:	2201      	movs	r2, #1
 8007b42:	2900      	cmp	r1, #0
 8007b44:	dce0      	bgt.n	8007b08 <_printf_float+0x1b4>
 8007b46:	1892      	adds	r2, r2, r2
 8007b48:	1a52      	subs	r2, r2, r1
 8007b4a:	e7dd      	b.n	8007b08 <_printf_float+0x1b4>
 8007b4c:	682a      	ldr	r2, [r5, #0]
 8007b4e:	0553      	lsls	r3, r2, #21
 8007b50:	d408      	bmi.n	8007b64 <_printf_float+0x210>
 8007b52:	692b      	ldr	r3, [r5, #16]
 8007b54:	003a      	movs	r2, r7
 8007b56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b5c:	47a0      	blx	r4
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d129      	bne.n	8007bb6 <_printf_float+0x262>
 8007b62:	e753      	b.n	8007a0c <_printf_float+0xb8>
 8007b64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b66:	2b65      	cmp	r3, #101	@ 0x65
 8007b68:	d800      	bhi.n	8007b6c <_printf_float+0x218>
 8007b6a:	e0da      	b.n	8007d22 <_printf_float+0x3ce>
 8007b6c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007b6e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	f7f8 fc74 	bl	8000460 <__aeabi_dcmpeq>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d033      	beq.n	8007be4 <_printf_float+0x290>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4a37      	ldr	r2, [pc, #220]	@ (8007c5c <_printf_float+0x308>)
 8007b80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b86:	47a0      	blx	r4
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d100      	bne.n	8007b8e <_printf_float+0x23a>
 8007b8c:	e73e      	b.n	8007a0c <_printf_float+0xb8>
 8007b8e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007b90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b92:	42b3      	cmp	r3, r6
 8007b94:	db02      	blt.n	8007b9c <_printf_float+0x248>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	07db      	lsls	r3, r3, #31
 8007b9a:	d50c      	bpl.n	8007bb6 <_printf_float+0x262>
 8007b9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ba2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ba4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ba6:	47a0      	blx	r4
 8007ba8:	2400      	movs	r4, #0
 8007baa:	3001      	adds	r0, #1
 8007bac:	d100      	bne.n	8007bb0 <_printf_float+0x25c>
 8007bae:	e72d      	b.n	8007a0c <_printf_float+0xb8>
 8007bb0:	1e73      	subs	r3, r6, #1
 8007bb2:	42a3      	cmp	r3, r4
 8007bb4:	dc0a      	bgt.n	8007bcc <_printf_float+0x278>
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	079b      	lsls	r3, r3, #30
 8007bba:	d500      	bpl.n	8007bbe <_printf_float+0x26a>
 8007bbc:	e105      	b.n	8007dca <_printf_float+0x476>
 8007bbe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007bc0:	68e8      	ldr	r0, [r5, #12]
 8007bc2:	4298      	cmp	r0, r3
 8007bc4:	db00      	blt.n	8007bc8 <_printf_float+0x274>
 8007bc6:	e723      	b.n	8007a10 <_printf_float+0xbc>
 8007bc8:	0018      	movs	r0, r3
 8007bca:	e721      	b.n	8007a10 <_printf_float+0xbc>
 8007bcc:	002a      	movs	r2, r5
 8007bce:	2301      	movs	r3, #1
 8007bd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007bd6:	321a      	adds	r2, #26
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d100      	bne.n	8007be0 <_printf_float+0x28c>
 8007bde:	e715      	b.n	8007a0c <_printf_float+0xb8>
 8007be0:	3401      	adds	r4, #1
 8007be2:	e7e5      	b.n	8007bb0 <_printf_float+0x25c>
 8007be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dc3a      	bgt.n	8007c60 <_printf_float+0x30c>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4a1b      	ldr	r2, [pc, #108]	@ (8007c5c <_printf_float+0x308>)
 8007bee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bf2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007bf4:	47a0      	blx	r4
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	d100      	bne.n	8007bfc <_printf_float+0x2a8>
 8007bfa:	e707      	b.n	8007a0c <_printf_float+0xb8>
 8007bfc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007bfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c00:	4333      	orrs	r3, r6
 8007c02:	d102      	bne.n	8007c0a <_printf_float+0x2b6>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	07db      	lsls	r3, r3, #31
 8007c08:	d5d5      	bpl.n	8007bb6 <_printf_float+0x262>
 8007c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007c14:	47a0      	blx	r4
 8007c16:	2300      	movs	r3, #0
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d100      	bne.n	8007c1e <_printf_float+0x2ca>
 8007c1c:	e6f6      	b.n	8007a0c <_printf_float+0xb8>
 8007c1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c24:	425b      	negs	r3, r3
 8007c26:	4293      	cmp	r3, r2
 8007c28:	dc01      	bgt.n	8007c2e <_printf_float+0x2da>
 8007c2a:	0033      	movs	r3, r6
 8007c2c:	e792      	b.n	8007b54 <_printf_float+0x200>
 8007c2e:	002a      	movs	r2, r5
 8007c30:	2301      	movs	r3, #1
 8007c32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007c38:	321a      	adds	r2, #26
 8007c3a:	47a0      	blx	r4
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d100      	bne.n	8007c42 <_printf_float+0x2ee>
 8007c40:	e6e4      	b.n	8007a0c <_printf_float+0xb8>
 8007c42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c44:	3301      	adds	r3, #1
 8007c46:	e7ea      	b.n	8007c1e <_printf_float+0x2ca>
 8007c48:	7fefffff 	.word	0x7fefffff
 8007c4c:	0800b6c0 	.word	0x0800b6c0
 8007c50:	0800b6c4 	.word	0x0800b6c4
 8007c54:	0800b6c8 	.word	0x0800b6c8
 8007c58:	0800b6cc 	.word	0x0800b6cc
 8007c5c:	0800b6d0 	.word	0x0800b6d0
 8007c60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c62:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007c64:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c66:	429e      	cmp	r6, r3
 8007c68:	dd00      	ble.n	8007c6c <_printf_float+0x318>
 8007c6a:	001e      	movs	r6, r3
 8007c6c:	2e00      	cmp	r6, #0
 8007c6e:	dc31      	bgt.n	8007cd4 <_printf_float+0x380>
 8007c70:	43f3      	mvns	r3, r6
 8007c72:	2400      	movs	r4, #0
 8007c74:	17db      	asrs	r3, r3, #31
 8007c76:	4033      	ands	r3, r6
 8007c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c7a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c7e:	1af3      	subs	r3, r6, r3
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	dc30      	bgt.n	8007ce6 <_printf_float+0x392>
 8007c84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	dc38      	bgt.n	8007cfe <_printf_float+0x3aa>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	07db      	lsls	r3, r3, #31
 8007c90:	d435      	bmi.n	8007cfe <_printf_float+0x3aa>
 8007c92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007c94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c98:	1b9b      	subs	r3, r3, r6
 8007c9a:	1b14      	subs	r4, r2, r4
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	dd00      	ble.n	8007ca2 <_printf_float+0x34e>
 8007ca0:	001c      	movs	r4, r3
 8007ca2:	2c00      	cmp	r4, #0
 8007ca4:	dc34      	bgt.n	8007d10 <_printf_float+0x3bc>
 8007ca6:	43e3      	mvns	r3, r4
 8007ca8:	2600      	movs	r6, #0
 8007caa:	17db      	asrs	r3, r3, #31
 8007cac:	401c      	ands	r4, r3
 8007cae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	1b1b      	subs	r3, r3, r4
 8007cb6:	42b3      	cmp	r3, r6
 8007cb8:	dc00      	bgt.n	8007cbc <_printf_float+0x368>
 8007cba:	e77c      	b.n	8007bb6 <_printf_float+0x262>
 8007cbc:	002a      	movs	r2, r5
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007cc6:	321a      	adds	r2, #26
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d100      	bne.n	8007cd0 <_printf_float+0x37c>
 8007cce:	e69d      	b.n	8007a0c <_printf_float+0xb8>
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7ec      	b.n	8007cae <_printf_float+0x35a>
 8007cd4:	0033      	movs	r3, r6
 8007cd6:	003a      	movs	r2, r7
 8007cd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cdc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007cde:	47a0      	blx	r4
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1c5      	bne.n	8007c70 <_printf_float+0x31c>
 8007ce4:	e692      	b.n	8007a0c <_printf_float+0xb8>
 8007ce6:	002a      	movs	r2, r5
 8007ce8:	2301      	movs	r3, #1
 8007cea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007cf0:	321a      	adds	r2, #26
 8007cf2:	47b0      	blx	r6
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d100      	bne.n	8007cfa <_printf_float+0x3a6>
 8007cf8:	e688      	b.n	8007a0c <_printf_float+0xb8>
 8007cfa:	3401      	adds	r4, #1
 8007cfc:	e7bd      	b.n	8007c7a <_printf_float+0x326>
 8007cfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007d08:	47a0      	blx	r4
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d1c1      	bne.n	8007c92 <_printf_float+0x33e>
 8007d0e:	e67d      	b.n	8007a0c <_printf_float+0xb8>
 8007d10:	19ba      	adds	r2, r7, r6
 8007d12:	0023      	movs	r3, r4
 8007d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d1a:	47b0      	blx	r6
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d1c2      	bne.n	8007ca6 <_printf_float+0x352>
 8007d20:	e674      	b.n	8007a0c <_printf_float+0xb8>
 8007d22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	dc02      	bgt.n	8007d30 <_printf_float+0x3dc>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	421a      	tst	r2, r3
 8007d2e:	d039      	beq.n	8007da4 <_printf_float+0x450>
 8007d30:	2301      	movs	r3, #1
 8007d32:	003a      	movs	r2, r7
 8007d34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d3a:	47b0      	blx	r6
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d100      	bne.n	8007d42 <_printf_float+0x3ee>
 8007d40:	e664      	b.n	8007a0c <_printf_float+0xb8>
 8007d42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d4c:	47b0      	blx	r6
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d100      	bne.n	8007d54 <_printf_float+0x400>
 8007d52:	e65b      	b.n	8007a0c <_printf_float+0xb8>
 8007d54:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007d56:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007d58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d60:	2300      	movs	r3, #0
 8007d62:	f7f8 fb7d 	bl	8000460 <__aeabi_dcmpeq>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d11a      	bne.n	8007da0 <_printf_float+0x44c>
 8007d6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d6c:	1c7a      	adds	r2, r7, #1
 8007d6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d72:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007d74:	47b0      	blx	r6
 8007d76:	3001      	adds	r0, #1
 8007d78:	d10e      	bne.n	8007d98 <_printf_float+0x444>
 8007d7a:	e647      	b.n	8007a0c <_printf_float+0xb8>
 8007d7c:	002a      	movs	r2, r5
 8007d7e:	2301      	movs	r3, #1
 8007d80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007d86:	321a      	adds	r2, #26
 8007d88:	47b8      	blx	r7
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d100      	bne.n	8007d90 <_printf_float+0x43c>
 8007d8e:	e63d      	b.n	8007a0c <_printf_float+0xb8>
 8007d90:	3601      	adds	r6, #1
 8007d92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d94:	429e      	cmp	r6, r3
 8007d96:	dbf1      	blt.n	8007d7c <_printf_float+0x428>
 8007d98:	002a      	movs	r2, r5
 8007d9a:	0023      	movs	r3, r4
 8007d9c:	3250      	adds	r2, #80	@ 0x50
 8007d9e:	e6da      	b.n	8007b56 <_printf_float+0x202>
 8007da0:	2600      	movs	r6, #0
 8007da2:	e7f6      	b.n	8007d92 <_printf_float+0x43e>
 8007da4:	003a      	movs	r2, r7
 8007da6:	e7e2      	b.n	8007d6e <_printf_float+0x41a>
 8007da8:	002a      	movs	r2, r5
 8007daa:	2301      	movs	r3, #1
 8007dac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007db2:	3219      	adds	r2, #25
 8007db4:	47b0      	blx	r6
 8007db6:	3001      	adds	r0, #1
 8007db8:	d100      	bne.n	8007dbc <_printf_float+0x468>
 8007dba:	e627      	b.n	8007a0c <_printf_float+0xb8>
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	68eb      	ldr	r3, [r5, #12]
 8007dc0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	42a3      	cmp	r3, r4
 8007dc6:	dcef      	bgt.n	8007da8 <_printf_float+0x454>
 8007dc8:	e6f9      	b.n	8007bbe <_printf_float+0x26a>
 8007dca:	2400      	movs	r4, #0
 8007dcc:	e7f7      	b.n	8007dbe <_printf_float+0x46a>
 8007dce:	46c0      	nop			@ (mov r8, r8)

08007dd0 <_printf_common>:
 8007dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dd2:	0016      	movs	r6, r2
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	688a      	ldr	r2, [r1, #8]
 8007dd8:	690b      	ldr	r3, [r1, #16]
 8007dda:	000c      	movs	r4, r1
 8007ddc:	9000      	str	r0, [sp, #0]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	da00      	bge.n	8007de4 <_printf_common+0x14>
 8007de2:	0013      	movs	r3, r2
 8007de4:	0022      	movs	r2, r4
 8007de6:	6033      	str	r3, [r6, #0]
 8007de8:	3243      	adds	r2, #67	@ 0x43
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d001      	beq.n	8007df4 <_printf_common+0x24>
 8007df0:	3301      	adds	r3, #1
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	069b      	lsls	r3, r3, #26
 8007df8:	d502      	bpl.n	8007e00 <_printf_common+0x30>
 8007dfa:	6833      	ldr	r3, [r6, #0]
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	6033      	str	r3, [r6, #0]
 8007e00:	6822      	ldr	r2, [r4, #0]
 8007e02:	2306      	movs	r3, #6
 8007e04:	0015      	movs	r5, r2
 8007e06:	401d      	ands	r5, r3
 8007e08:	421a      	tst	r2, r3
 8007e0a:	d027      	beq.n	8007e5c <_printf_common+0x8c>
 8007e0c:	0023      	movs	r3, r4
 8007e0e:	3343      	adds	r3, #67	@ 0x43
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	1e5a      	subs	r2, r3, #1
 8007e14:	4193      	sbcs	r3, r2
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	0692      	lsls	r2, r2, #26
 8007e1a:	d430      	bmi.n	8007e7e <_printf_common+0xae>
 8007e1c:	0022      	movs	r2, r4
 8007e1e:	9901      	ldr	r1, [sp, #4]
 8007e20:	9800      	ldr	r0, [sp, #0]
 8007e22:	9d08      	ldr	r5, [sp, #32]
 8007e24:	3243      	adds	r2, #67	@ 0x43
 8007e26:	47a8      	blx	r5
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d025      	beq.n	8007e78 <_printf_common+0xa8>
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	2500      	movs	r5, #0
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d105      	bne.n	8007e44 <_printf_common+0x74>
 8007e38:	6833      	ldr	r3, [r6, #0]
 8007e3a:	68e5      	ldr	r5, [r4, #12]
 8007e3c:	1aed      	subs	r5, r5, r3
 8007e3e:	43eb      	mvns	r3, r5
 8007e40:	17db      	asrs	r3, r3, #31
 8007e42:	401d      	ands	r5, r3
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	6922      	ldr	r2, [r4, #16]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	dd01      	ble.n	8007e50 <_printf_common+0x80>
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	18ed      	adds	r5, r5, r3
 8007e50:	2600      	movs	r6, #0
 8007e52:	42b5      	cmp	r5, r6
 8007e54:	d120      	bne.n	8007e98 <_printf_common+0xc8>
 8007e56:	2000      	movs	r0, #0
 8007e58:	e010      	b.n	8007e7c <_printf_common+0xac>
 8007e5a:	3501      	adds	r5, #1
 8007e5c:	68e3      	ldr	r3, [r4, #12]
 8007e5e:	6832      	ldr	r2, [r6, #0]
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	42ab      	cmp	r3, r5
 8007e64:	ddd2      	ble.n	8007e0c <_printf_common+0x3c>
 8007e66:	0022      	movs	r2, r4
 8007e68:	2301      	movs	r3, #1
 8007e6a:	9901      	ldr	r1, [sp, #4]
 8007e6c:	9800      	ldr	r0, [sp, #0]
 8007e6e:	9f08      	ldr	r7, [sp, #32]
 8007e70:	3219      	adds	r2, #25
 8007e72:	47b8      	blx	r7
 8007e74:	3001      	adds	r0, #1
 8007e76:	d1f0      	bne.n	8007e5a <_printf_common+0x8a>
 8007e78:	2001      	movs	r0, #1
 8007e7a:	4240      	negs	r0, r0
 8007e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e7e:	2030      	movs	r0, #48	@ 0x30
 8007e80:	18e1      	adds	r1, r4, r3
 8007e82:	3143      	adds	r1, #67	@ 0x43
 8007e84:	7008      	strb	r0, [r1, #0]
 8007e86:	0021      	movs	r1, r4
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	3145      	adds	r1, #69	@ 0x45
 8007e8c:	7809      	ldrb	r1, [r1, #0]
 8007e8e:	18a2      	adds	r2, r4, r2
 8007e90:	3243      	adds	r2, #67	@ 0x43
 8007e92:	3302      	adds	r3, #2
 8007e94:	7011      	strb	r1, [r2, #0]
 8007e96:	e7c1      	b.n	8007e1c <_printf_common+0x4c>
 8007e98:	0022      	movs	r2, r4
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9901      	ldr	r1, [sp, #4]
 8007e9e:	9800      	ldr	r0, [sp, #0]
 8007ea0:	9f08      	ldr	r7, [sp, #32]
 8007ea2:	321a      	adds	r2, #26
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d0e6      	beq.n	8007e78 <_printf_common+0xa8>
 8007eaa:	3601      	adds	r6, #1
 8007eac:	e7d1      	b.n	8007e52 <_printf_common+0x82>
	...

08007eb0 <_printf_i>:
 8007eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb2:	b08b      	sub	sp, #44	@ 0x2c
 8007eb4:	9206      	str	r2, [sp, #24]
 8007eb6:	000a      	movs	r2, r1
 8007eb8:	3243      	adds	r2, #67	@ 0x43
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	9005      	str	r0, [sp, #20]
 8007ebe:	9203      	str	r2, [sp, #12]
 8007ec0:	7e0a      	ldrb	r2, [r1, #24]
 8007ec2:	000c      	movs	r4, r1
 8007ec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ec6:	2a78      	cmp	r2, #120	@ 0x78
 8007ec8:	d809      	bhi.n	8007ede <_printf_i+0x2e>
 8007eca:	2a62      	cmp	r2, #98	@ 0x62
 8007ecc:	d80b      	bhi.n	8007ee6 <_printf_i+0x36>
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	d100      	bne.n	8007ed4 <_printf_i+0x24>
 8007ed2:	e0bc      	b.n	800804e <_printf_i+0x19e>
 8007ed4:	497b      	ldr	r1, [pc, #492]	@ (80080c4 <_printf_i+0x214>)
 8007ed6:	9104      	str	r1, [sp, #16]
 8007ed8:	2a58      	cmp	r2, #88	@ 0x58
 8007eda:	d100      	bne.n	8007ede <_printf_i+0x2e>
 8007edc:	e090      	b.n	8008000 <_printf_i+0x150>
 8007ede:	0025      	movs	r5, r4
 8007ee0:	3542      	adds	r5, #66	@ 0x42
 8007ee2:	702a      	strb	r2, [r5, #0]
 8007ee4:	e022      	b.n	8007f2c <_printf_i+0x7c>
 8007ee6:	0010      	movs	r0, r2
 8007ee8:	3863      	subs	r0, #99	@ 0x63
 8007eea:	2815      	cmp	r0, #21
 8007eec:	d8f7      	bhi.n	8007ede <_printf_i+0x2e>
 8007eee:	f7f8 f927 	bl	8000140 <__gnu_thumb1_case_shi>
 8007ef2:	0016      	.short	0x0016
 8007ef4:	fff6001f 	.word	0xfff6001f
 8007ef8:	fff6fff6 	.word	0xfff6fff6
 8007efc:	001ffff6 	.word	0x001ffff6
 8007f00:	fff6fff6 	.word	0xfff6fff6
 8007f04:	fff6fff6 	.word	0xfff6fff6
 8007f08:	003600a1 	.word	0x003600a1
 8007f0c:	fff60080 	.word	0xfff60080
 8007f10:	00b2fff6 	.word	0x00b2fff6
 8007f14:	0036fff6 	.word	0x0036fff6
 8007f18:	fff6fff6 	.word	0xfff6fff6
 8007f1c:	0084      	.short	0x0084
 8007f1e:	0025      	movs	r5, r4
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	3542      	adds	r5, #66	@ 0x42
 8007f24:	1d11      	adds	r1, r2, #4
 8007f26:	6019      	str	r1, [r3, #0]
 8007f28:	6813      	ldr	r3, [r2, #0]
 8007f2a:	702b      	strb	r3, [r5, #0]
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e0a0      	b.n	8008072 <_printf_i+0x1c2>
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	6809      	ldr	r1, [r1, #0]
 8007f34:	1d02      	adds	r2, r0, #4
 8007f36:	060d      	lsls	r5, r1, #24
 8007f38:	d50b      	bpl.n	8007f52 <_printf_i+0xa2>
 8007f3a:	6806      	ldr	r6, [r0, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	da03      	bge.n	8007f4a <_printf_i+0x9a>
 8007f42:	232d      	movs	r3, #45	@ 0x2d
 8007f44:	9a03      	ldr	r2, [sp, #12]
 8007f46:	4276      	negs	r6, r6
 8007f48:	7013      	strb	r3, [r2, #0]
 8007f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80080c4 <_printf_i+0x214>)
 8007f4c:	270a      	movs	r7, #10
 8007f4e:	9304      	str	r3, [sp, #16]
 8007f50:	e018      	b.n	8007f84 <_printf_i+0xd4>
 8007f52:	6806      	ldr	r6, [r0, #0]
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	0649      	lsls	r1, r1, #25
 8007f58:	d5f1      	bpl.n	8007f3e <_printf_i+0x8e>
 8007f5a:	b236      	sxth	r6, r6
 8007f5c:	e7ef      	b.n	8007f3e <_printf_i+0x8e>
 8007f5e:	6808      	ldr	r0, [r1, #0]
 8007f60:	6819      	ldr	r1, [r3, #0]
 8007f62:	c940      	ldmia	r1!, {r6}
 8007f64:	0605      	lsls	r5, r0, #24
 8007f66:	d402      	bmi.n	8007f6e <_printf_i+0xbe>
 8007f68:	0640      	lsls	r0, r0, #25
 8007f6a:	d500      	bpl.n	8007f6e <_printf_i+0xbe>
 8007f6c:	b2b6      	uxth	r6, r6
 8007f6e:	6019      	str	r1, [r3, #0]
 8007f70:	4b54      	ldr	r3, [pc, #336]	@ (80080c4 <_printf_i+0x214>)
 8007f72:	270a      	movs	r7, #10
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	2a6f      	cmp	r2, #111	@ 0x6f
 8007f78:	d100      	bne.n	8007f7c <_printf_i+0xcc>
 8007f7a:	3f02      	subs	r7, #2
 8007f7c:	0023      	movs	r3, r4
 8007f7e:	2200      	movs	r2, #0
 8007f80:	3343      	adds	r3, #67	@ 0x43
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	60a3      	str	r3, [r4, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db03      	blt.n	8007f94 <_printf_i+0xe4>
 8007f8c:	2104      	movs	r1, #4
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	438a      	bics	r2, r1
 8007f92:	6022      	str	r2, [r4, #0]
 8007f94:	2e00      	cmp	r6, #0
 8007f96:	d102      	bne.n	8007f9e <_printf_i+0xee>
 8007f98:	9d03      	ldr	r5, [sp, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <_printf_i+0x108>
 8007f9e:	9d03      	ldr	r5, [sp, #12]
 8007fa0:	0030      	movs	r0, r6
 8007fa2:	0039      	movs	r1, r7
 8007fa4:	f7f8 f95c 	bl	8000260 <__aeabi_uidivmod>
 8007fa8:	9b04      	ldr	r3, [sp, #16]
 8007faa:	3d01      	subs	r5, #1
 8007fac:	5c5b      	ldrb	r3, [r3, r1]
 8007fae:	702b      	strb	r3, [r5, #0]
 8007fb0:	0033      	movs	r3, r6
 8007fb2:	0006      	movs	r6, r0
 8007fb4:	429f      	cmp	r7, r3
 8007fb6:	d9f3      	bls.n	8007fa0 <_printf_i+0xf0>
 8007fb8:	2f08      	cmp	r7, #8
 8007fba:	d109      	bne.n	8007fd0 <_printf_i+0x120>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d506      	bpl.n	8007fd0 <_printf_i+0x120>
 8007fc2:	6862      	ldr	r2, [r4, #4]
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	dc02      	bgt.n	8007fd0 <_printf_i+0x120>
 8007fca:	2330      	movs	r3, #48	@ 0x30
 8007fcc:	3d01      	subs	r5, #1
 8007fce:	702b      	strb	r3, [r5, #0]
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	1b5b      	subs	r3, r3, r5
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	9b07      	ldr	r3, [sp, #28]
 8007fd8:	0021      	movs	r1, r4
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	9805      	ldr	r0, [sp, #20]
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	aa09      	add	r2, sp, #36	@ 0x24
 8007fe2:	f7ff fef5 	bl	8007dd0 <_printf_common>
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d148      	bne.n	800807c <_printf_i+0x1cc>
 8007fea:	2001      	movs	r0, #1
 8007fec:	4240      	negs	r0, r0
 8007fee:	b00b      	add	sp, #44	@ 0x2c
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	6809      	ldr	r1, [r1, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	6022      	str	r2, [r4, #0]
 8007ffa:	2278      	movs	r2, #120	@ 0x78
 8007ffc:	4932      	ldr	r1, [pc, #200]	@ (80080c8 <_printf_i+0x218>)
 8007ffe:	9104      	str	r1, [sp, #16]
 8008000:	0021      	movs	r1, r4
 8008002:	3145      	adds	r1, #69	@ 0x45
 8008004:	700a      	strb	r2, [r1, #0]
 8008006:	6819      	ldr	r1, [r3, #0]
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	c940      	ldmia	r1!, {r6}
 800800c:	0610      	lsls	r0, r2, #24
 800800e:	d402      	bmi.n	8008016 <_printf_i+0x166>
 8008010:	0650      	lsls	r0, r2, #25
 8008012:	d500      	bpl.n	8008016 <_printf_i+0x166>
 8008014:	b2b6      	uxth	r6, r6
 8008016:	6019      	str	r1, [r3, #0]
 8008018:	07d3      	lsls	r3, r2, #31
 800801a:	d502      	bpl.n	8008022 <_printf_i+0x172>
 800801c:	2320      	movs	r3, #32
 800801e:	4313      	orrs	r3, r2
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	2e00      	cmp	r6, #0
 8008024:	d001      	beq.n	800802a <_printf_i+0x17a>
 8008026:	2710      	movs	r7, #16
 8008028:	e7a8      	b.n	8007f7c <_printf_i+0xcc>
 800802a:	2220      	movs	r2, #32
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	4393      	bics	r3, r2
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	e7f8      	b.n	8008026 <_printf_i+0x176>
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	680d      	ldr	r5, [r1, #0]
 8008038:	1d10      	adds	r0, r2, #4
 800803a:	6949      	ldr	r1, [r1, #20]
 800803c:	6018      	str	r0, [r3, #0]
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	062e      	lsls	r6, r5, #24
 8008042:	d501      	bpl.n	8008048 <_printf_i+0x198>
 8008044:	6019      	str	r1, [r3, #0]
 8008046:	e002      	b.n	800804e <_printf_i+0x19e>
 8008048:	066d      	lsls	r5, r5, #25
 800804a:	d5fb      	bpl.n	8008044 <_printf_i+0x194>
 800804c:	8019      	strh	r1, [r3, #0]
 800804e:	2300      	movs	r3, #0
 8008050:	9d03      	ldr	r5, [sp, #12]
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	e7bf      	b.n	8007fd6 <_printf_i+0x126>
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	1d11      	adds	r1, r2, #4
 800805a:	6019      	str	r1, [r3, #0]
 800805c:	6815      	ldr	r5, [r2, #0]
 800805e:	2100      	movs	r1, #0
 8008060:	0028      	movs	r0, r5
 8008062:	6862      	ldr	r2, [r4, #4]
 8008064:	f000 f9f1 	bl	800844a <memchr>
 8008068:	2800      	cmp	r0, #0
 800806a:	d001      	beq.n	8008070 <_printf_i+0x1c0>
 800806c:	1b40      	subs	r0, r0, r5
 800806e:	6060      	str	r0, [r4, #4]
 8008070:	6863      	ldr	r3, [r4, #4]
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	2300      	movs	r3, #0
 8008076:	9a03      	ldr	r2, [sp, #12]
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	e7ac      	b.n	8007fd6 <_printf_i+0x126>
 800807c:	002a      	movs	r2, r5
 800807e:	6923      	ldr	r3, [r4, #16]
 8008080:	9906      	ldr	r1, [sp, #24]
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	9d07      	ldr	r5, [sp, #28]
 8008086:	47a8      	blx	r5
 8008088:	3001      	adds	r0, #1
 800808a:	d0ae      	beq.n	8007fea <_printf_i+0x13a>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	079b      	lsls	r3, r3, #30
 8008090:	d415      	bmi.n	80080be <_printf_i+0x20e>
 8008092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008094:	68e0      	ldr	r0, [r4, #12]
 8008096:	4298      	cmp	r0, r3
 8008098:	daa9      	bge.n	8007fee <_printf_i+0x13e>
 800809a:	0018      	movs	r0, r3
 800809c:	e7a7      	b.n	8007fee <_printf_i+0x13e>
 800809e:	0022      	movs	r2, r4
 80080a0:	2301      	movs	r3, #1
 80080a2:	9906      	ldr	r1, [sp, #24]
 80080a4:	9805      	ldr	r0, [sp, #20]
 80080a6:	9e07      	ldr	r6, [sp, #28]
 80080a8:	3219      	adds	r2, #25
 80080aa:	47b0      	blx	r6
 80080ac:	3001      	adds	r0, #1
 80080ae:	d09c      	beq.n	8007fea <_printf_i+0x13a>
 80080b0:	3501      	adds	r5, #1
 80080b2:	68e3      	ldr	r3, [r4, #12]
 80080b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	42ab      	cmp	r3, r5
 80080ba:	dcf0      	bgt.n	800809e <_printf_i+0x1ee>
 80080bc:	e7e9      	b.n	8008092 <_printf_i+0x1e2>
 80080be:	2500      	movs	r5, #0
 80080c0:	e7f7      	b.n	80080b2 <_printf_i+0x202>
 80080c2:	46c0      	nop			@ (mov r8, r8)
 80080c4:	0800b6d2 	.word	0x0800b6d2
 80080c8:	0800b6e3 	.word	0x0800b6e3

080080cc <std>:
 80080cc:	2300      	movs	r3, #0
 80080ce:	b510      	push	{r4, lr}
 80080d0:	0004      	movs	r4, r0
 80080d2:	6003      	str	r3, [r0, #0]
 80080d4:	6043      	str	r3, [r0, #4]
 80080d6:	6083      	str	r3, [r0, #8]
 80080d8:	8181      	strh	r1, [r0, #12]
 80080da:	6643      	str	r3, [r0, #100]	@ 0x64
 80080dc:	81c2      	strh	r2, [r0, #14]
 80080de:	6103      	str	r3, [r0, #16]
 80080e0:	6143      	str	r3, [r0, #20]
 80080e2:	6183      	str	r3, [r0, #24]
 80080e4:	0019      	movs	r1, r3
 80080e6:	2208      	movs	r2, #8
 80080e8:	305c      	adds	r0, #92	@ 0x5c
 80080ea:	f000 f91f 	bl	800832c <memset>
 80080ee:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <std+0x50>)
 80080f0:	6224      	str	r4, [r4, #32]
 80080f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80080f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008120 <std+0x54>)
 80080f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <std+0x58>)
 80080fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <std+0x5c>)
 80080fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8008100:	4b0a      	ldr	r3, [pc, #40]	@ (800812c <std+0x60>)
 8008102:	429c      	cmp	r4, r3
 8008104:	d005      	beq.n	8008112 <std+0x46>
 8008106:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <std+0x64>)
 8008108:	429c      	cmp	r4, r3
 800810a:	d002      	beq.n	8008112 <std+0x46>
 800810c:	4b09      	ldr	r3, [pc, #36]	@ (8008134 <std+0x68>)
 800810e:	429c      	cmp	r4, r3
 8008110:	d103      	bne.n	800811a <std+0x4e>
 8008112:	0020      	movs	r0, r4
 8008114:	3058      	adds	r0, #88	@ 0x58
 8008116:	f000 f98d 	bl	8008434 <__retarget_lock_init_recursive>
 800811a:	bd10      	pop	{r4, pc}
 800811c:	08008295 	.word	0x08008295
 8008120:	080082bd 	.word	0x080082bd
 8008124:	080082f5 	.word	0x080082f5
 8008128:	08008321 	.word	0x08008321
 800812c:	20000570 	.word	0x20000570
 8008130:	200005d8 	.word	0x200005d8
 8008134:	20000640 	.word	0x20000640

08008138 <stdio_exit_handler>:
 8008138:	b510      	push	{r4, lr}
 800813a:	4a03      	ldr	r2, [pc, #12]	@ (8008148 <stdio_exit_handler+0x10>)
 800813c:	4903      	ldr	r1, [pc, #12]	@ (800814c <stdio_exit_handler+0x14>)
 800813e:	4804      	ldr	r0, [pc, #16]	@ (8008150 <stdio_exit_handler+0x18>)
 8008140:	f000 f86c 	bl	800821c <_fwalk_sglue>
 8008144:	bd10      	pop	{r4, pc}
 8008146:	46c0      	nop			@ (mov r8, r8)
 8008148:	2000000c 	.word	0x2000000c
 800814c:	08009e95 	.word	0x08009e95
 8008150:	2000001c 	.word	0x2000001c

08008154 <cleanup_stdio>:
 8008154:	6841      	ldr	r1, [r0, #4]
 8008156:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <cleanup_stdio+0x30>)
 8008158:	b510      	push	{r4, lr}
 800815a:	0004      	movs	r4, r0
 800815c:	4299      	cmp	r1, r3
 800815e:	d001      	beq.n	8008164 <cleanup_stdio+0x10>
 8008160:	f001 fe98 	bl	8009e94 <_fflush_r>
 8008164:	68a1      	ldr	r1, [r4, #8]
 8008166:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <cleanup_stdio+0x34>)
 8008168:	4299      	cmp	r1, r3
 800816a:	d002      	beq.n	8008172 <cleanup_stdio+0x1e>
 800816c:	0020      	movs	r0, r4
 800816e:	f001 fe91 	bl	8009e94 <_fflush_r>
 8008172:	68e1      	ldr	r1, [r4, #12]
 8008174:	4b05      	ldr	r3, [pc, #20]	@ (800818c <cleanup_stdio+0x38>)
 8008176:	4299      	cmp	r1, r3
 8008178:	d002      	beq.n	8008180 <cleanup_stdio+0x2c>
 800817a:	0020      	movs	r0, r4
 800817c:	f001 fe8a 	bl	8009e94 <_fflush_r>
 8008180:	bd10      	pop	{r4, pc}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	20000570 	.word	0x20000570
 8008188:	200005d8 	.word	0x200005d8
 800818c:	20000640 	.word	0x20000640

08008190 <global_stdio_init.part.0>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4b09      	ldr	r3, [pc, #36]	@ (80081b8 <global_stdio_init.part.0+0x28>)
 8008194:	4a09      	ldr	r2, [pc, #36]	@ (80081bc <global_stdio_init.part.0+0x2c>)
 8008196:	2104      	movs	r1, #4
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	4809      	ldr	r0, [pc, #36]	@ (80081c0 <global_stdio_init.part.0+0x30>)
 800819c:	2200      	movs	r2, #0
 800819e:	f7ff ff95 	bl	80080cc <std>
 80081a2:	2201      	movs	r2, #1
 80081a4:	2109      	movs	r1, #9
 80081a6:	4807      	ldr	r0, [pc, #28]	@ (80081c4 <global_stdio_init.part.0+0x34>)
 80081a8:	f7ff ff90 	bl	80080cc <std>
 80081ac:	2202      	movs	r2, #2
 80081ae:	2112      	movs	r1, #18
 80081b0:	4805      	ldr	r0, [pc, #20]	@ (80081c8 <global_stdio_init.part.0+0x38>)
 80081b2:	f7ff ff8b 	bl	80080cc <std>
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	200006a8 	.word	0x200006a8
 80081bc:	08008139 	.word	0x08008139
 80081c0:	20000570 	.word	0x20000570
 80081c4:	200005d8 	.word	0x200005d8
 80081c8:	20000640 	.word	0x20000640

080081cc <__sfp_lock_acquire>:
 80081cc:	b510      	push	{r4, lr}
 80081ce:	4802      	ldr	r0, [pc, #8]	@ (80081d8 <__sfp_lock_acquire+0xc>)
 80081d0:	f000 f931 	bl	8008436 <__retarget_lock_acquire_recursive>
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	46c0      	nop			@ (mov r8, r8)
 80081d8:	200006b1 	.word	0x200006b1

080081dc <__sfp_lock_release>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4802      	ldr	r0, [pc, #8]	@ (80081e8 <__sfp_lock_release+0xc>)
 80081e0:	f000 f92a 	bl	8008438 <__retarget_lock_release_recursive>
 80081e4:	bd10      	pop	{r4, pc}
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	200006b1 	.word	0x200006b1

080081ec <__sinit>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	0004      	movs	r4, r0
 80081f0:	f7ff ffec 	bl	80081cc <__sfp_lock_acquire>
 80081f4:	6a23      	ldr	r3, [r4, #32]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <__sinit+0x14>
 80081fa:	f7ff ffef 	bl	80081dc <__sfp_lock_release>
 80081fe:	bd10      	pop	{r4, pc}
 8008200:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <__sinit+0x28>)
 8008202:	6223      	str	r3, [r4, #32]
 8008204:	4b04      	ldr	r3, [pc, #16]	@ (8008218 <__sinit+0x2c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f6      	bne.n	80081fa <__sinit+0xe>
 800820c:	f7ff ffc0 	bl	8008190 <global_stdio_init.part.0>
 8008210:	e7f3      	b.n	80081fa <__sinit+0xe>
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	08008155 	.word	0x08008155
 8008218:	200006a8 	.word	0x200006a8

0800821c <_fwalk_sglue>:
 800821c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800821e:	0014      	movs	r4, r2
 8008220:	2600      	movs	r6, #0
 8008222:	9000      	str	r0, [sp, #0]
 8008224:	9101      	str	r1, [sp, #4]
 8008226:	68a5      	ldr	r5, [r4, #8]
 8008228:	6867      	ldr	r7, [r4, #4]
 800822a:	3f01      	subs	r7, #1
 800822c:	d504      	bpl.n	8008238 <_fwalk_sglue+0x1c>
 800822e:	6824      	ldr	r4, [r4, #0]
 8008230:	2c00      	cmp	r4, #0
 8008232:	d1f8      	bne.n	8008226 <_fwalk_sglue+0xa>
 8008234:	0030      	movs	r0, r6
 8008236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008238:	89ab      	ldrh	r3, [r5, #12]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d908      	bls.n	8008250 <_fwalk_sglue+0x34>
 800823e:	220e      	movs	r2, #14
 8008240:	5eab      	ldrsh	r3, [r5, r2]
 8008242:	3301      	adds	r3, #1
 8008244:	d004      	beq.n	8008250 <_fwalk_sglue+0x34>
 8008246:	0029      	movs	r1, r5
 8008248:	9800      	ldr	r0, [sp, #0]
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	4798      	blx	r3
 800824e:	4306      	orrs	r6, r0
 8008250:	3568      	adds	r5, #104	@ 0x68
 8008252:	e7ea      	b.n	800822a <_fwalk_sglue+0xe>

08008254 <siprintf>:
 8008254:	b40e      	push	{r1, r2, r3}
 8008256:	b500      	push	{lr}
 8008258:	490b      	ldr	r1, [pc, #44]	@ (8008288 <siprintf+0x34>)
 800825a:	b09c      	sub	sp, #112	@ 0x70
 800825c:	ab1d      	add	r3, sp, #116	@ 0x74
 800825e:	9002      	str	r0, [sp, #8]
 8008260:	9006      	str	r0, [sp, #24]
 8008262:	9107      	str	r1, [sp, #28]
 8008264:	9104      	str	r1, [sp, #16]
 8008266:	4809      	ldr	r0, [pc, #36]	@ (800828c <siprintf+0x38>)
 8008268:	4909      	ldr	r1, [pc, #36]	@ (8008290 <siprintf+0x3c>)
 800826a:	cb04      	ldmia	r3!, {r2}
 800826c:	9105      	str	r1, [sp, #20]
 800826e:	6800      	ldr	r0, [r0, #0]
 8008270:	a902      	add	r1, sp, #8
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	f001 fc8a 	bl	8009b8c <_svfiprintf_r>
 8008278:	2200      	movs	r2, #0
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	b01c      	add	sp, #112	@ 0x70
 8008280:	bc08      	pop	{r3}
 8008282:	b003      	add	sp, #12
 8008284:	4718      	bx	r3
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	7fffffff 	.word	0x7fffffff
 800828c:	20000018 	.word	0x20000018
 8008290:	ffff0208 	.word	0xffff0208

08008294 <__sread>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	000c      	movs	r4, r1
 8008298:	250e      	movs	r5, #14
 800829a:	5f49      	ldrsh	r1, [r1, r5]
 800829c:	f000 f878 	bl	8008390 <_read_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	db03      	blt.n	80082ac <__sread+0x18>
 80082a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082a6:	181b      	adds	r3, r3, r0
 80082a8:	6563      	str	r3, [r4, #84]	@ 0x54
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	4a02      	ldr	r2, [pc, #8]	@ (80082b8 <__sread+0x24>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	e7f9      	b.n	80082aa <__sread+0x16>
 80082b6:	46c0      	nop			@ (mov r8, r8)
 80082b8:	ffffefff 	.word	0xffffefff

080082bc <__swrite>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	001f      	movs	r7, r3
 80082c0:	898b      	ldrh	r3, [r1, #12]
 80082c2:	0005      	movs	r5, r0
 80082c4:	000c      	movs	r4, r1
 80082c6:	0016      	movs	r6, r2
 80082c8:	05db      	lsls	r3, r3, #23
 80082ca:	d505      	bpl.n	80082d8 <__swrite+0x1c>
 80082cc:	230e      	movs	r3, #14
 80082ce:	5ec9      	ldrsh	r1, [r1, r3]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2302      	movs	r3, #2
 80082d4:	f000 f848 	bl	8008368 <_lseek_r>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	4a05      	ldr	r2, [pc, #20]	@ (80082f0 <__swrite+0x34>)
 80082dc:	0028      	movs	r0, r5
 80082de:	4013      	ands	r3, r2
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	0032      	movs	r2, r6
 80082e4:	230e      	movs	r3, #14
 80082e6:	5ee1      	ldrsh	r1, [r4, r3]
 80082e8:	003b      	movs	r3, r7
 80082ea:	f000 f865 	bl	80083b8 <_write_r>
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	ffffefff 	.word	0xffffefff

080082f4 <__sseek>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	000c      	movs	r4, r1
 80082f8:	250e      	movs	r5, #14
 80082fa:	5f49      	ldrsh	r1, [r1, r5]
 80082fc:	f000 f834 	bl	8008368 <_lseek_r>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	1c42      	adds	r2, r0, #1
 8008304:	d103      	bne.n	800830e <__sseek+0x1a>
 8008306:	4a05      	ldr	r2, [pc, #20]	@ (800831c <__sseek+0x28>)
 8008308:	4013      	ands	r3, r2
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	2280      	movs	r2, #128	@ 0x80
 8008310:	0152      	lsls	r2, r2, #5
 8008312:	4313      	orrs	r3, r2
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	6560      	str	r0, [r4, #84]	@ 0x54
 8008318:	e7f8      	b.n	800830c <__sseek+0x18>
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	ffffefff 	.word	0xffffefff

08008320 <__sclose>:
 8008320:	b510      	push	{r4, lr}
 8008322:	230e      	movs	r3, #14
 8008324:	5ec9      	ldrsh	r1, [r1, r3]
 8008326:	f000 f80d 	bl	8008344 <_close_r>
 800832a:	bd10      	pop	{r4, pc}

0800832c <memset>:
 800832c:	0003      	movs	r3, r0
 800832e:	1882      	adds	r2, r0, r2
 8008330:	4293      	cmp	r3, r2
 8008332:	d100      	bne.n	8008336 <memset+0xa>
 8008334:	4770      	bx	lr
 8008336:	7019      	strb	r1, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	e7f9      	b.n	8008330 <memset+0x4>

0800833c <_localeconv_r>:
 800833c:	4800      	ldr	r0, [pc, #0]	@ (8008340 <_localeconv_r+0x4>)
 800833e:	4770      	bx	lr
 8008340:	20000158 	.word	0x20000158

08008344 <_close_r>:
 8008344:	2300      	movs	r3, #0
 8008346:	b570      	push	{r4, r5, r6, lr}
 8008348:	4d06      	ldr	r5, [pc, #24]	@ (8008364 <_close_r+0x20>)
 800834a:	0004      	movs	r4, r0
 800834c:	0008      	movs	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7fc f8c6 	bl	80044e0 <_close>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d103      	bne.n	8008360 <_close_r+0x1c>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d000      	beq.n	8008360 <_close_r+0x1c>
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	46c0      	nop			@ (mov r8, r8)
 8008364:	200006ac 	.word	0x200006ac

08008368 <_lseek_r>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	0004      	movs	r4, r0
 800836c:	0008      	movs	r0, r1
 800836e:	0011      	movs	r1, r2
 8008370:	001a      	movs	r2, r3
 8008372:	2300      	movs	r3, #0
 8008374:	4d05      	ldr	r5, [pc, #20]	@ (800838c <_lseek_r+0x24>)
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	f7fc f8d3 	bl	8004522 <_lseek>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d103      	bne.n	8008388 <_lseek_r+0x20>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d000      	beq.n	8008388 <_lseek_r+0x20>
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	bd70      	pop	{r4, r5, r6, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	200006ac 	.word	0x200006ac

08008390 <_read_r>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	0004      	movs	r4, r0
 8008394:	0008      	movs	r0, r1
 8008396:	0011      	movs	r1, r2
 8008398:	001a      	movs	r2, r3
 800839a:	2300      	movs	r3, #0
 800839c:	4d05      	ldr	r5, [pc, #20]	@ (80083b4 <_read_r+0x24>)
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7fc f865 	bl	800446e <_read>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d103      	bne.n	80083b0 <_read_r+0x20>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d000      	beq.n	80083b0 <_read_r+0x20>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd70      	pop	{r4, r5, r6, pc}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	200006ac 	.word	0x200006ac

080083b8 <_write_r>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	0004      	movs	r4, r0
 80083bc:	0008      	movs	r0, r1
 80083be:	0011      	movs	r1, r2
 80083c0:	001a      	movs	r2, r3
 80083c2:	2300      	movs	r3, #0
 80083c4:	4d05      	ldr	r5, [pc, #20]	@ (80083dc <_write_r+0x24>)
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	f7fc f86e 	bl	80044a8 <_write>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d103      	bne.n	80083d8 <_write_r+0x20>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d000      	beq.n	80083d8 <_write_r+0x20>
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
 80083da:	46c0      	nop			@ (mov r8, r8)
 80083dc:	200006ac 	.word	0x200006ac

080083e0 <__errno>:
 80083e0:	4b01      	ldr	r3, [pc, #4]	@ (80083e8 <__errno+0x8>)
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	4770      	bx	lr
 80083e6:	46c0      	nop			@ (mov r8, r8)
 80083e8:	20000018 	.word	0x20000018

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	2600      	movs	r6, #0
 80083f0:	4c0c      	ldr	r4, [pc, #48]	@ (8008424 <__libc_init_array+0x38>)
 80083f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008428 <__libc_init_array+0x3c>)
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	2600      	movs	r6, #0
 80083fe:	f003 f837 	bl	800b470 <_init>
 8008402:	4c0a      	ldr	r4, [pc, #40]	@ (800842c <__libc_init_array+0x40>)
 8008404:	4d0a      	ldr	r5, [pc, #40]	@ (8008430 <__libc_init_array+0x44>)
 8008406:	1b64      	subs	r4, r4, r5
 8008408:	10a4      	asrs	r4, r4, #2
 800840a:	42a6      	cmp	r6, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	00b3      	lsls	r3, r6, #2
 8008412:	58eb      	ldr	r3, [r5, r3]
 8008414:	4798      	blx	r3
 8008416:	3601      	adds	r6, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	00b3      	lsls	r3, r6, #2
 800841c:	58eb      	ldr	r3, [r5, r3]
 800841e:	4798      	blx	r3
 8008420:	3601      	adds	r6, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	0800ba60 	.word	0x0800ba60
 8008428:	0800ba60 	.word	0x0800ba60
 800842c:	0800ba64 	.word	0x0800ba64
 8008430:	0800ba60 	.word	0x0800ba60

08008434 <__retarget_lock_init_recursive>:
 8008434:	4770      	bx	lr

08008436 <__retarget_lock_acquire_recursive>:
 8008436:	4770      	bx	lr

08008438 <__retarget_lock_release_recursive>:
 8008438:	4770      	bx	lr

0800843a <strcpy>:
 800843a:	0003      	movs	r3, r0
 800843c:	780a      	ldrb	r2, [r1, #0]
 800843e:	3101      	adds	r1, #1
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	2a00      	cmp	r2, #0
 8008446:	d1f9      	bne.n	800843c <strcpy+0x2>
 8008448:	4770      	bx	lr

0800844a <memchr>:
 800844a:	b2c9      	uxtb	r1, r1
 800844c:	1882      	adds	r2, r0, r2
 800844e:	4290      	cmp	r0, r2
 8008450:	d101      	bne.n	8008456 <memchr+0xc>
 8008452:	2000      	movs	r0, #0
 8008454:	4770      	bx	lr
 8008456:	7803      	ldrb	r3, [r0, #0]
 8008458:	428b      	cmp	r3, r1
 800845a:	d0fb      	beq.n	8008454 <memchr+0xa>
 800845c:	3001      	adds	r0, #1
 800845e:	e7f6      	b.n	800844e <memchr+0x4>

08008460 <memcpy>:
 8008460:	2300      	movs	r3, #0
 8008462:	b510      	push	{r4, lr}
 8008464:	429a      	cmp	r2, r3
 8008466:	d100      	bne.n	800846a <memcpy+0xa>
 8008468:	bd10      	pop	{r4, pc}
 800846a:	5ccc      	ldrb	r4, [r1, r3]
 800846c:	54c4      	strb	r4, [r0, r3]
 800846e:	3301      	adds	r3, #1
 8008470:	e7f8      	b.n	8008464 <memcpy+0x4>

08008472 <quorem>:
 8008472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008474:	6902      	ldr	r2, [r0, #16]
 8008476:	690f      	ldr	r7, [r1, #16]
 8008478:	b087      	sub	sp, #28
 800847a:	0006      	movs	r6, r0
 800847c:	000b      	movs	r3, r1
 800847e:	2000      	movs	r0, #0
 8008480:	9102      	str	r1, [sp, #8]
 8008482:	42ba      	cmp	r2, r7
 8008484:	db6d      	blt.n	8008562 <quorem+0xf0>
 8008486:	3f01      	subs	r7, #1
 8008488:	00bc      	lsls	r4, r7, #2
 800848a:	3314      	adds	r3, #20
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	191b      	adds	r3, r3, r4
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	0033      	movs	r3, r6
 8008494:	3314      	adds	r3, #20
 8008496:	191c      	adds	r4, r3, r4
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	9804      	ldr	r0, [sp, #16]
 80084a2:	681d      	ldr	r5, [r3, #0]
 80084a4:	3501      	adds	r5, #1
 80084a6:	0029      	movs	r1, r5
 80084a8:	f7f7 fe54 	bl	8000154 <__udivsi3>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	9000      	str	r0, [sp, #0]
 80084b0:	42ab      	cmp	r3, r5
 80084b2:	d32b      	bcc.n	800850c <quorem+0x9a>
 80084b4:	9b05      	ldr	r3, [sp, #20]
 80084b6:	9d01      	ldr	r5, [sp, #4]
 80084b8:	469c      	mov	ip, r3
 80084ba:	2300      	movs	r3, #0
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	4662      	mov	r2, ip
 80084c2:	ca08      	ldmia	r2!, {r3}
 80084c4:	6828      	ldr	r0, [r5, #0]
 80084c6:	4694      	mov	ip, r2
 80084c8:	9a00      	ldr	r2, [sp, #0]
 80084ca:	b299      	uxth	r1, r3
 80084cc:	4351      	muls	r1, r2
 80084ce:	9a05      	ldr	r2, [sp, #20]
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	1889      	adds	r1, r1, r2
 80084d4:	9a00      	ldr	r2, [sp, #0]
 80084d6:	4353      	muls	r3, r2
 80084d8:	0c0a      	lsrs	r2, r1, #16
 80084da:	189b      	adds	r3, r3, r2
 80084dc:	0c1a      	lsrs	r2, r3, #16
 80084de:	b289      	uxth	r1, r1
 80084e0:	9205      	str	r2, [sp, #20]
 80084e2:	b282      	uxth	r2, r0
 80084e4:	1a52      	subs	r2, r2, r1
 80084e6:	9904      	ldr	r1, [sp, #16]
 80084e8:	0c00      	lsrs	r0, r0, #16
 80084ea:	1852      	adds	r2, r2, r1
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	1411      	asrs	r1, r2, #16
 80084f0:	1ac3      	subs	r3, r0, r3
 80084f2:	185b      	adds	r3, r3, r1
 80084f4:	1419      	asrs	r1, r3, #16
 80084f6:	b292      	uxth	r2, r2
 80084f8:	041b      	lsls	r3, r3, #16
 80084fa:	431a      	orrs	r2, r3
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	9104      	str	r1, [sp, #16]
 8008500:	c504      	stmia	r5!, {r2}
 8008502:	4563      	cmp	r3, ip
 8008504:	d2dc      	bcs.n	80084c0 <quorem+0x4e>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d030      	beq.n	800856e <quorem+0xfc>
 800850c:	0030      	movs	r0, r6
 800850e:	9902      	ldr	r1, [sp, #8]
 8008510:	f001 f9c6 	bl	80098a0 <__mcmp>
 8008514:	2800      	cmp	r0, #0
 8008516:	db23      	blt.n	8008560 <quorem+0xee>
 8008518:	0034      	movs	r4, r6
 800851a:	2500      	movs	r5, #0
 800851c:	9902      	ldr	r1, [sp, #8]
 800851e:	3414      	adds	r4, #20
 8008520:	3114      	adds	r1, #20
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	c901      	ldmia	r1!, {r0}
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	466b      	mov	r3, sp
 800852a:	891b      	ldrh	r3, [r3, #8]
 800852c:	b282      	uxth	r2, r0
 800852e:	1a9a      	subs	r2, r3, r2
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	1952      	adds	r2, r2, r5
 8008534:	0c00      	lsrs	r0, r0, #16
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	1a1b      	subs	r3, r3, r0
 800853a:	1410      	asrs	r0, r2, #16
 800853c:	181b      	adds	r3, r3, r0
 800853e:	141d      	asrs	r5, r3, #16
 8008540:	b292      	uxth	r2, r2
 8008542:	041b      	lsls	r3, r3, #16
 8008544:	431a      	orrs	r2, r3
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	c404      	stmia	r4!, {r2}
 800854a:	428b      	cmp	r3, r1
 800854c:	d2e9      	bcs.n	8008522 <quorem+0xb0>
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	00bb      	lsls	r3, r7, #2
 8008552:	18d3      	adds	r3, r2, r3
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	2a00      	cmp	r2, #0
 8008558:	d013      	beq.n	8008582 <quorem+0x110>
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	3301      	adds	r3, #1
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	9800      	ldr	r0, [sp, #0]
 8008562:	b007      	add	sp, #28
 8008564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d104      	bne.n	8008576 <quorem+0x104>
 800856c:	3f01      	subs	r7, #1
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	3c04      	subs	r4, #4
 8008572:	42a3      	cmp	r3, r4
 8008574:	d3f7      	bcc.n	8008566 <quorem+0xf4>
 8008576:	6137      	str	r7, [r6, #16]
 8008578:	e7c8      	b.n	800850c <quorem+0x9a>
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	2a00      	cmp	r2, #0
 800857e:	d104      	bne.n	800858a <quorem+0x118>
 8008580:	3f01      	subs	r7, #1
 8008582:	9a01      	ldr	r2, [sp, #4]
 8008584:	3b04      	subs	r3, #4
 8008586:	429a      	cmp	r2, r3
 8008588:	d3f7      	bcc.n	800857a <quorem+0x108>
 800858a:	6137      	str	r7, [r6, #16]
 800858c:	e7e5      	b.n	800855a <quorem+0xe8>
	...

08008590 <_dtoa_r>:
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	0014      	movs	r4, r2
 8008594:	001d      	movs	r5, r3
 8008596:	69c6      	ldr	r6, [r0, #28]
 8008598:	b09d      	sub	sp, #116	@ 0x74
 800859a:	940a      	str	r4, [sp, #40]	@ 0x28
 800859c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800859e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80085a0:	9003      	str	r0, [sp, #12]
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d10f      	bne.n	80085c6 <_dtoa_r+0x36>
 80085a6:	2010      	movs	r0, #16
 80085a8:	f000 fe30 	bl	800920c <malloc>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	1e02      	subs	r2, r0, #0
 80085b0:	61d8      	str	r0, [r3, #28]
 80085b2:	d104      	bne.n	80085be <_dtoa_r+0x2e>
 80085b4:	21ef      	movs	r1, #239	@ 0xef
 80085b6:	4bc7      	ldr	r3, [pc, #796]	@ (80088d4 <_dtoa_r+0x344>)
 80085b8:	48c7      	ldr	r0, [pc, #796]	@ (80088d8 <_dtoa_r+0x348>)
 80085ba:	f001 fcbb 	bl	8009f34 <__assert_func>
 80085be:	6046      	str	r6, [r0, #4]
 80085c0:	6086      	str	r6, [r0, #8]
 80085c2:	6006      	str	r6, [r0, #0]
 80085c4:	60c6      	str	r6, [r0, #12]
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	6819      	ldr	r1, [r3, #0]
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d00b      	beq.n	80085e8 <_dtoa_r+0x58>
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	2301      	movs	r3, #1
 80085d4:	4093      	lsls	r3, r2
 80085d6:	604a      	str	r2, [r1, #4]
 80085d8:	608b      	str	r3, [r1, #8]
 80085da:	9803      	ldr	r0, [sp, #12]
 80085dc:	f000 ff16 	bl	800940c <_Bfree>
 80085e0:	2200      	movs	r2, #0
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	da1e      	bge.n	800862a <_dtoa_r+0x9a>
 80085ec:	2301      	movs	r3, #1
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	006b      	lsls	r3, r5, #1
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80085f8:	4bb8      	ldr	r3, [pc, #736]	@ (80088dc <_dtoa_r+0x34c>)
 80085fa:	4ab8      	ldr	r2, [pc, #736]	@ (80088dc <_dtoa_r+0x34c>)
 80085fc:	403b      	ands	r3, r7
 80085fe:	4293      	cmp	r3, r2
 8008600:	d116      	bne.n	8008630 <_dtoa_r+0xa0>
 8008602:	4bb7      	ldr	r3, [pc, #732]	@ (80088e0 <_dtoa_r+0x350>)
 8008604:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	033b      	lsls	r3, r7, #12
 800860a:	0b1b      	lsrs	r3, r3, #12
 800860c:	4323      	orrs	r3, r4
 800860e:	d101      	bne.n	8008614 <_dtoa_r+0x84>
 8008610:	f000 fd83 	bl	800911a <_dtoa_r+0xb8a>
 8008614:	4bb3      	ldr	r3, [pc, #716]	@ (80088e4 <_dtoa_r+0x354>)
 8008616:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008618:	9308      	str	r3, [sp, #32]
 800861a:	2a00      	cmp	r2, #0
 800861c:	d002      	beq.n	8008624 <_dtoa_r+0x94>
 800861e:	4bb2      	ldr	r3, [pc, #712]	@ (80088e8 <_dtoa_r+0x358>)
 8008620:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	9808      	ldr	r0, [sp, #32]
 8008626:	b01d      	add	sp, #116	@ 0x74
 8008628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862a:	2300      	movs	r3, #0
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	e7e2      	b.n	80085f6 <_dtoa_r+0x66>
 8008630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008634:	9212      	str	r2, [sp, #72]	@ 0x48
 8008636:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008638:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800863a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800863c:	2200      	movs	r2, #0
 800863e:	2300      	movs	r3, #0
 8008640:	f7f7 ff0e 	bl	8000460 <__aeabi_dcmpeq>
 8008644:	1e06      	subs	r6, r0, #0
 8008646:	d00b      	beq.n	8008660 <_dtoa_r+0xd0>
 8008648:	2301      	movs	r3, #1
 800864a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <_dtoa_r+0xca>
 8008654:	4ba5      	ldr	r3, [pc, #660]	@ (80088ec <_dtoa_r+0x35c>)
 8008656:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	4ba5      	ldr	r3, [pc, #660]	@ (80088f0 <_dtoa_r+0x360>)
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	e7e1      	b.n	8008624 <_dtoa_r+0x94>
 8008660:	ab1a      	add	r3, sp, #104	@ 0x68
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	9803      	ldr	r0, [sp, #12]
 800866a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800866c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800866e:	f001 f9cd 	bl	8009a0c <__d2b>
 8008672:	007a      	lsls	r2, r7, #1
 8008674:	9005      	str	r0, [sp, #20]
 8008676:	0d52      	lsrs	r2, r2, #21
 8008678:	d100      	bne.n	800867c <_dtoa_r+0xec>
 800867a:	e07b      	b.n	8008774 <_dtoa_r+0x1e4>
 800867c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800867e:	9618      	str	r6, [sp, #96]	@ 0x60
 8008680:	0319      	lsls	r1, r3, #12
 8008682:	4b9c      	ldr	r3, [pc, #624]	@ (80088f4 <_dtoa_r+0x364>)
 8008684:	0b09      	lsrs	r1, r1, #12
 8008686:	430b      	orrs	r3, r1
 8008688:	499b      	ldr	r1, [pc, #620]	@ (80088f8 <_dtoa_r+0x368>)
 800868a:	1857      	adds	r7, r2, r1
 800868c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800868e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008690:	0019      	movs	r1, r3
 8008692:	2200      	movs	r2, #0
 8008694:	4b99      	ldr	r3, [pc, #612]	@ (80088fc <_dtoa_r+0x36c>)
 8008696:	f7f9 fd77 	bl	8002188 <__aeabi_dsub>
 800869a:	4a99      	ldr	r2, [pc, #612]	@ (8008900 <_dtoa_r+0x370>)
 800869c:	4b99      	ldr	r3, [pc, #612]	@ (8008904 <_dtoa_r+0x374>)
 800869e:	f7f9 faab 	bl	8001bf8 <__aeabi_dmul>
 80086a2:	4a99      	ldr	r2, [pc, #612]	@ (8008908 <_dtoa_r+0x378>)
 80086a4:	4b99      	ldr	r3, [pc, #612]	@ (800890c <_dtoa_r+0x37c>)
 80086a6:	f7f8 faff 	bl	8000ca8 <__aeabi_dadd>
 80086aa:	0004      	movs	r4, r0
 80086ac:	0038      	movs	r0, r7
 80086ae:	000d      	movs	r5, r1
 80086b0:	f7fa f964 	bl	800297c <__aeabi_i2d>
 80086b4:	4a96      	ldr	r2, [pc, #600]	@ (8008910 <_dtoa_r+0x380>)
 80086b6:	4b97      	ldr	r3, [pc, #604]	@ (8008914 <_dtoa_r+0x384>)
 80086b8:	f7f9 fa9e 	bl	8001bf8 <__aeabi_dmul>
 80086bc:	0002      	movs	r2, r0
 80086be:	000b      	movs	r3, r1
 80086c0:	0020      	movs	r0, r4
 80086c2:	0029      	movs	r1, r5
 80086c4:	f7f8 faf0 	bl	8000ca8 <__aeabi_dadd>
 80086c8:	0004      	movs	r4, r0
 80086ca:	000d      	movs	r5, r1
 80086cc:	f7fa f91a 	bl	8002904 <__aeabi_d2iz>
 80086d0:	2200      	movs	r2, #0
 80086d2:	9004      	str	r0, [sp, #16]
 80086d4:	2300      	movs	r3, #0
 80086d6:	0020      	movs	r0, r4
 80086d8:	0029      	movs	r1, r5
 80086da:	f7f7 fec7 	bl	800046c <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d00b      	beq.n	80086fa <_dtoa_r+0x16a>
 80086e2:	9804      	ldr	r0, [sp, #16]
 80086e4:	f7fa f94a 	bl	800297c <__aeabi_i2d>
 80086e8:	002b      	movs	r3, r5
 80086ea:	0022      	movs	r2, r4
 80086ec:	f7f7 feb8 	bl	8000460 <__aeabi_dcmpeq>
 80086f0:	4243      	negs	r3, r0
 80086f2:	4158      	adcs	r0, r3
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	1a1b      	subs	r3, r3, r0
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	2301      	movs	r3, #1
 80086fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80086fe:	9b04      	ldr	r3, [sp, #16]
 8008700:	2b16      	cmp	r3, #22
 8008702:	d810      	bhi.n	8008726 <_dtoa_r+0x196>
 8008704:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008706:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008708:	9a04      	ldr	r2, [sp, #16]
 800870a:	4b83      	ldr	r3, [pc, #524]	@ (8008918 <_dtoa_r+0x388>)
 800870c:	00d2      	lsls	r2, r2, #3
 800870e:	189b      	adds	r3, r3, r2
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f7f7 feaa 	bl	800046c <__aeabi_dcmplt>
 8008718:	2800      	cmp	r0, #0
 800871a:	d047      	beq.n	80087ac <_dtoa_r+0x21c>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	3b01      	subs	r3, #1
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	9315      	str	r3, [sp, #84]	@ 0x54
 8008726:	2200      	movs	r2, #0
 8008728:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800872a:	9206      	str	r2, [sp, #24]
 800872c:	1bdb      	subs	r3, r3, r7
 800872e:	1e5a      	subs	r2, r3, #1
 8008730:	d53e      	bpl.n	80087b0 <_dtoa_r+0x220>
 8008732:	2201      	movs	r2, #1
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	9306      	str	r3, [sp, #24]
 8008738:	2300      	movs	r3, #0
 800873a:	930d      	str	r3, [sp, #52]	@ 0x34
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	db38      	blt.n	80087b4 <_dtoa_r+0x224>
 8008742:	9a04      	ldr	r2, [sp, #16]
 8008744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008746:	4694      	mov	ip, r2
 8008748:	4463      	add	r3, ip
 800874a:	930d      	str	r3, [sp, #52]	@ 0x34
 800874c:	2300      	movs	r3, #0
 800874e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008750:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008752:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008754:	2401      	movs	r4, #1
 8008756:	2b09      	cmp	r3, #9
 8008758:	d867      	bhi.n	800882a <_dtoa_r+0x29a>
 800875a:	2b05      	cmp	r3, #5
 800875c:	dd02      	ble.n	8008764 <_dtoa_r+0x1d4>
 800875e:	2400      	movs	r4, #0
 8008760:	3b04      	subs	r3, #4
 8008762:	9322      	str	r3, [sp, #136]	@ 0x88
 8008764:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008766:	1e98      	subs	r0, r3, #2
 8008768:	2803      	cmp	r0, #3
 800876a:	d867      	bhi.n	800883c <_dtoa_r+0x2ac>
 800876c:	f7f7 fcde 	bl	800012c <__gnu_thumb1_case_uqi>
 8008770:	5b383a2b 	.word	0x5b383a2b
 8008774:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008776:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008778:	18f6      	adds	r6, r6, r3
 800877a:	4b68      	ldr	r3, [pc, #416]	@ (800891c <_dtoa_r+0x38c>)
 800877c:	18f2      	adds	r2, r6, r3
 800877e:	2a20      	cmp	r2, #32
 8008780:	dd0f      	ble.n	80087a2 <_dtoa_r+0x212>
 8008782:	2340      	movs	r3, #64	@ 0x40
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	409f      	lsls	r7, r3
 8008788:	4b65      	ldr	r3, [pc, #404]	@ (8008920 <_dtoa_r+0x390>)
 800878a:	0038      	movs	r0, r7
 800878c:	18f3      	adds	r3, r6, r3
 800878e:	40dc      	lsrs	r4, r3
 8008790:	4320      	orrs	r0, r4
 8008792:	f7fa f921 	bl	80029d8 <__aeabi_ui2d>
 8008796:	2201      	movs	r2, #1
 8008798:	4b62      	ldr	r3, [pc, #392]	@ (8008924 <_dtoa_r+0x394>)
 800879a:	1e77      	subs	r7, r6, #1
 800879c:	18cb      	adds	r3, r1, r3
 800879e:	9218      	str	r2, [sp, #96]	@ 0x60
 80087a0:	e776      	b.n	8008690 <_dtoa_r+0x100>
 80087a2:	2320      	movs	r3, #32
 80087a4:	0020      	movs	r0, r4
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	4098      	lsls	r0, r3
 80087aa:	e7f2      	b.n	8008792 <_dtoa_r+0x202>
 80087ac:	9015      	str	r0, [sp, #84]	@ 0x54
 80087ae:	e7ba      	b.n	8008726 <_dtoa_r+0x196>
 80087b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80087b2:	e7c3      	b.n	800873c <_dtoa_r+0x1ac>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	9a04      	ldr	r2, [sp, #16]
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	9306      	str	r3, [sp, #24]
 80087bc:	4253      	negs	r3, r2
 80087be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087c0:	2300      	movs	r3, #0
 80087c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80087c4:	e7c5      	b.n	8008752 <_dtoa_r+0x1c2>
 80087c6:	2300      	movs	r3, #0
 80087c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80087ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80087ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc13      	bgt.n	80087fc <_dtoa_r+0x26c>
 80087d4:	2301      	movs	r3, #1
 80087d6:	001a      	movs	r2, r3
 80087d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80087da:	9309      	str	r3, [sp, #36]	@ 0x24
 80087dc:	9223      	str	r2, [sp, #140]	@ 0x8c
 80087de:	e00d      	b.n	80087fc <_dtoa_r+0x26c>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7f1      	b.n	80087c8 <_dtoa_r+0x238>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80087ea:	4694      	mov	ip, r2
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	4463      	add	r3, ip
 80087f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80087f2:	3301      	adds	r3, #1
 80087f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dc00      	bgt.n	80087fc <_dtoa_r+0x26c>
 80087fa:	2301      	movs	r3, #1
 80087fc:	9a03      	ldr	r2, [sp, #12]
 80087fe:	2100      	movs	r1, #0
 8008800:	69d0      	ldr	r0, [r2, #28]
 8008802:	2204      	movs	r2, #4
 8008804:	0015      	movs	r5, r2
 8008806:	3514      	adds	r5, #20
 8008808:	429d      	cmp	r5, r3
 800880a:	d91b      	bls.n	8008844 <_dtoa_r+0x2b4>
 800880c:	6041      	str	r1, [r0, #4]
 800880e:	9803      	ldr	r0, [sp, #12]
 8008810:	f000 fdb8 	bl	8009384 <_Balloc>
 8008814:	9008      	str	r0, [sp, #32]
 8008816:	2800      	cmp	r0, #0
 8008818:	d117      	bne.n	800884a <_dtoa_r+0x2ba>
 800881a:	21b0      	movs	r1, #176	@ 0xb0
 800881c:	4b42      	ldr	r3, [pc, #264]	@ (8008928 <_dtoa_r+0x398>)
 800881e:	482e      	ldr	r0, [pc, #184]	@ (80088d8 <_dtoa_r+0x348>)
 8008820:	9a08      	ldr	r2, [sp, #32]
 8008822:	31ff      	adds	r1, #255	@ 0xff
 8008824:	e6c9      	b.n	80085ba <_dtoa_r+0x2a>
 8008826:	2301      	movs	r3, #1
 8008828:	e7dd      	b.n	80087e6 <_dtoa_r+0x256>
 800882a:	2300      	movs	r3, #0
 800882c:	9410      	str	r4, [sp, #64]	@ 0x40
 800882e:	9322      	str	r3, [sp, #136]	@ 0x88
 8008830:	3b01      	subs	r3, #1
 8008832:	930e      	str	r3, [sp, #56]	@ 0x38
 8008834:	9309      	str	r3, [sp, #36]	@ 0x24
 8008836:	2200      	movs	r2, #0
 8008838:	3313      	adds	r3, #19
 800883a:	e7cf      	b.n	80087dc <_dtoa_r+0x24c>
 800883c:	2301      	movs	r3, #1
 800883e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008840:	3b02      	subs	r3, #2
 8008842:	e7f6      	b.n	8008832 <_dtoa_r+0x2a2>
 8008844:	3101      	adds	r1, #1
 8008846:	0052      	lsls	r2, r2, #1
 8008848:	e7dc      	b.n	8008804 <_dtoa_r+0x274>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	9a08      	ldr	r2, [sp, #32]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008854:	2b0e      	cmp	r3, #14
 8008856:	d900      	bls.n	800885a <_dtoa_r+0x2ca>
 8008858:	e0d9      	b.n	8008a0e <_dtoa_r+0x47e>
 800885a:	2c00      	cmp	r4, #0
 800885c:	d100      	bne.n	8008860 <_dtoa_r+0x2d0>
 800885e:	e0d6      	b.n	8008a0e <_dtoa_r+0x47e>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	dd64      	ble.n	8008930 <_dtoa_r+0x3a0>
 8008866:	210f      	movs	r1, #15
 8008868:	9a04      	ldr	r2, [sp, #16]
 800886a:	4b2b      	ldr	r3, [pc, #172]	@ (8008918 <_dtoa_r+0x388>)
 800886c:	400a      	ands	r2, r1
 800886e:	00d2      	lsls	r2, r2, #3
 8008870:	189b      	adds	r3, r3, r2
 8008872:	681e      	ldr	r6, [r3, #0]
 8008874:	685f      	ldr	r7, [r3, #4]
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	2402      	movs	r4, #2
 800887a:	111d      	asrs	r5, r3, #4
 800887c:	05db      	lsls	r3, r3, #23
 800887e:	d50a      	bpl.n	8008896 <_dtoa_r+0x306>
 8008880:	4b2a      	ldr	r3, [pc, #168]	@ (800892c <_dtoa_r+0x39c>)
 8008882:	400d      	ands	r5, r1
 8008884:	6a1a      	ldr	r2, [r3, #32]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800888a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800888c:	f7f8 fd70 	bl	8001370 <__aeabi_ddiv>
 8008890:	900a      	str	r0, [sp, #40]	@ 0x28
 8008892:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008894:	3401      	adds	r4, #1
 8008896:	4b25      	ldr	r3, [pc, #148]	@ (800892c <_dtoa_r+0x39c>)
 8008898:	930c      	str	r3, [sp, #48]	@ 0x30
 800889a:	2d00      	cmp	r5, #0
 800889c:	d108      	bne.n	80088b0 <_dtoa_r+0x320>
 800889e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088a2:	0032      	movs	r2, r6
 80088a4:	003b      	movs	r3, r7
 80088a6:	f7f8 fd63 	bl	8001370 <__aeabi_ddiv>
 80088aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80088ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088ae:	e05a      	b.n	8008966 <_dtoa_r+0x3d6>
 80088b0:	2301      	movs	r3, #1
 80088b2:	421d      	tst	r5, r3
 80088b4:	d009      	beq.n	80088ca <_dtoa_r+0x33a>
 80088b6:	18e4      	adds	r4, r4, r3
 80088b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088ba:	0030      	movs	r0, r6
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	0039      	movs	r1, r7
 80088c2:	f7f9 f999 	bl	8001bf8 <__aeabi_dmul>
 80088c6:	0006      	movs	r6, r0
 80088c8:	000f      	movs	r7, r1
 80088ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088cc:	106d      	asrs	r5, r5, #1
 80088ce:	3308      	adds	r3, #8
 80088d0:	e7e2      	b.n	8008898 <_dtoa_r+0x308>
 80088d2:	46c0      	nop			@ (mov r8, r8)
 80088d4:	0800b701 	.word	0x0800b701
 80088d8:	0800b718 	.word	0x0800b718
 80088dc:	7ff00000 	.word	0x7ff00000
 80088e0:	0000270f 	.word	0x0000270f
 80088e4:	0800b6fd 	.word	0x0800b6fd
 80088e8:	0800b700 	.word	0x0800b700
 80088ec:	0800b6d1 	.word	0x0800b6d1
 80088f0:	0800b6d0 	.word	0x0800b6d0
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	fffffc01 	.word	0xfffffc01
 80088fc:	3ff80000 	.word	0x3ff80000
 8008900:	636f4361 	.word	0x636f4361
 8008904:	3fd287a7 	.word	0x3fd287a7
 8008908:	8b60c8b3 	.word	0x8b60c8b3
 800890c:	3fc68a28 	.word	0x3fc68a28
 8008910:	509f79fb 	.word	0x509f79fb
 8008914:	3fd34413 	.word	0x3fd34413
 8008918:	0800b810 	.word	0x0800b810
 800891c:	00000432 	.word	0x00000432
 8008920:	00000412 	.word	0x00000412
 8008924:	fe100000 	.word	0xfe100000
 8008928:	0800b770 	.word	0x0800b770
 800892c:	0800b7e8 	.word	0x0800b7e8
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	2402      	movs	r4, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d016      	beq.n	8008966 <_dtoa_r+0x3d6>
 8008938:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800893a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800893c:	220f      	movs	r2, #15
 800893e:	425d      	negs	r5, r3
 8008940:	402a      	ands	r2, r5
 8008942:	4bd7      	ldr	r3, [pc, #860]	@ (8008ca0 <_dtoa_r+0x710>)
 8008944:	00d2      	lsls	r2, r2, #3
 8008946:	189b      	adds	r3, r3, r2
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f7f9 f954 	bl	8001bf8 <__aeabi_dmul>
 8008950:	2701      	movs	r7, #1
 8008952:	2300      	movs	r3, #0
 8008954:	900a      	str	r0, [sp, #40]	@ 0x28
 8008956:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008958:	4ed2      	ldr	r6, [pc, #840]	@ (8008ca4 <_dtoa_r+0x714>)
 800895a:	112d      	asrs	r5, r5, #4
 800895c:	2d00      	cmp	r5, #0
 800895e:	d000      	beq.n	8008962 <_dtoa_r+0x3d2>
 8008960:	e0ba      	b.n	8008ad8 <_dtoa_r+0x548>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1a1      	bne.n	80088aa <_dtoa_r+0x31a>
 8008966:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008968:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800896a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800896c:	2b00      	cmp	r3, #0
 800896e:	d100      	bne.n	8008972 <_dtoa_r+0x3e2>
 8008970:	e0bd      	b.n	8008aee <_dtoa_r+0x55e>
 8008972:	2200      	movs	r2, #0
 8008974:	0030      	movs	r0, r6
 8008976:	0039      	movs	r1, r7
 8008978:	4bcb      	ldr	r3, [pc, #812]	@ (8008ca8 <_dtoa_r+0x718>)
 800897a:	f7f7 fd77 	bl	800046c <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	d100      	bne.n	8008984 <_dtoa_r+0x3f4>
 8008982:	e0b4      	b.n	8008aee <_dtoa_r+0x55e>
 8008984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d100      	bne.n	800898c <_dtoa_r+0x3fc>
 800898a:	e0b0      	b.n	8008aee <_dtoa_r+0x55e>
 800898c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd39      	ble.n	8008a06 <_dtoa_r+0x476>
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	2200      	movs	r2, #0
 8008996:	3b01      	subs	r3, #1
 8008998:	930c      	str	r3, [sp, #48]	@ 0x30
 800899a:	0030      	movs	r0, r6
 800899c:	4bc3      	ldr	r3, [pc, #780]	@ (8008cac <_dtoa_r+0x71c>)
 800899e:	0039      	movs	r1, r7
 80089a0:	f7f9 f92a 	bl	8001bf8 <__aeabi_dmul>
 80089a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80089a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089aa:	3401      	adds	r4, #1
 80089ac:	0020      	movs	r0, r4
 80089ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80089b0:	f7f9 ffe4 	bl	800297c <__aeabi_i2d>
 80089b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b8:	f7f9 f91e 	bl	8001bf8 <__aeabi_dmul>
 80089bc:	4bbc      	ldr	r3, [pc, #752]	@ (8008cb0 <_dtoa_r+0x720>)
 80089be:	2200      	movs	r2, #0
 80089c0:	f7f8 f972 	bl	8000ca8 <__aeabi_dadd>
 80089c4:	4bbb      	ldr	r3, [pc, #748]	@ (8008cb4 <_dtoa_r+0x724>)
 80089c6:	0006      	movs	r6, r0
 80089c8:	18cf      	adds	r7, r1, r3
 80089ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d000      	beq.n	80089d2 <_dtoa_r+0x442>
 80089d0:	e091      	b.n	8008af6 <_dtoa_r+0x566>
 80089d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089d6:	2200      	movs	r2, #0
 80089d8:	4bb7      	ldr	r3, [pc, #732]	@ (8008cb8 <_dtoa_r+0x728>)
 80089da:	f7f9 fbd5 	bl	8002188 <__aeabi_dsub>
 80089de:	0032      	movs	r2, r6
 80089e0:	003b      	movs	r3, r7
 80089e2:	0004      	movs	r4, r0
 80089e4:	000d      	movs	r5, r1
 80089e6:	f7f7 fd55 	bl	8000494 <__aeabi_dcmpgt>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d000      	beq.n	80089f0 <_dtoa_r+0x460>
 80089ee:	e29d      	b.n	8008f2c <_dtoa_r+0x99c>
 80089f0:	2180      	movs	r1, #128	@ 0x80
 80089f2:	0609      	lsls	r1, r1, #24
 80089f4:	187b      	adds	r3, r7, r1
 80089f6:	0032      	movs	r2, r6
 80089f8:	0020      	movs	r0, r4
 80089fa:	0029      	movs	r1, r5
 80089fc:	f7f7 fd36 	bl	800046c <__aeabi_dcmplt>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d000      	beq.n	8008a06 <_dtoa_r+0x476>
 8008a04:	e130      	b.n	8008c68 <_dtoa_r+0x6d8>
 8008a06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da00      	bge.n	8008a16 <_dtoa_r+0x486>
 8008a14:	e177      	b.n	8008d06 <_dtoa_r+0x776>
 8008a16:	9a04      	ldr	r2, [sp, #16]
 8008a18:	2a0e      	cmp	r2, #14
 8008a1a:	dd00      	ble.n	8008a1e <_dtoa_r+0x48e>
 8008a1c:	e173      	b.n	8008d06 <_dtoa_r+0x776>
 8008a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8008ca0 <_dtoa_r+0x710>)
 8008a20:	00d2      	lsls	r2, r2, #3
 8008a22:	189b      	adds	r3, r3, r2
 8008a24:	685c      	ldr	r4, [r3, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	9306      	str	r3, [sp, #24]
 8008a2a:	9407      	str	r4, [sp, #28]
 8008a2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	da03      	bge.n	8008a3a <_dtoa_r+0x4aa>
 8008a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dc00      	bgt.n	8008a3a <_dtoa_r+0x4aa>
 8008a38:	e106      	b.n	8008c48 <_dtoa_r+0x6b8>
 8008a3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a40:	9d08      	ldr	r5, [sp, #32]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	195b      	adds	r3, r3, r5
 8008a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	9b07      	ldr	r3, [sp, #28]
 8008a4c:	0030      	movs	r0, r6
 8008a4e:	0039      	movs	r1, r7
 8008a50:	f7f8 fc8e 	bl	8001370 <__aeabi_ddiv>
 8008a54:	f7f9 ff56 	bl	8002904 <__aeabi_d2iz>
 8008a58:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a5a:	f7f9 ff8f 	bl	800297c <__aeabi_i2d>
 8008a5e:	9a06      	ldr	r2, [sp, #24]
 8008a60:	9b07      	ldr	r3, [sp, #28]
 8008a62:	f7f9 f8c9 	bl	8001bf8 <__aeabi_dmul>
 8008a66:	0002      	movs	r2, r0
 8008a68:	000b      	movs	r3, r1
 8008a6a:	0030      	movs	r0, r6
 8008a6c:	0039      	movs	r1, r7
 8008a6e:	f7f9 fb8b 	bl	8002188 <__aeabi_dsub>
 8008a72:	002b      	movs	r3, r5
 8008a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a76:	3501      	adds	r5, #1
 8008a78:	3230      	adds	r2, #48	@ 0x30
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a7e:	002c      	movs	r4, r5
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d000      	beq.n	8008a86 <_dtoa_r+0x4f6>
 8008a84:	e131      	b.n	8008cea <_dtoa_r+0x75a>
 8008a86:	0002      	movs	r2, r0
 8008a88:	000b      	movs	r3, r1
 8008a8a:	f7f8 f90d 	bl	8000ca8 <__aeabi_dadd>
 8008a8e:	9a06      	ldr	r2, [sp, #24]
 8008a90:	9b07      	ldr	r3, [sp, #28]
 8008a92:	0006      	movs	r6, r0
 8008a94:	000f      	movs	r7, r1
 8008a96:	f7f7 fcfd 	bl	8000494 <__aeabi_dcmpgt>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d000      	beq.n	8008aa0 <_dtoa_r+0x510>
 8008a9e:	e10f      	b.n	8008cc0 <_dtoa_r+0x730>
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	9b07      	ldr	r3, [sp, #28]
 8008aa4:	0030      	movs	r0, r6
 8008aa6:	0039      	movs	r1, r7
 8008aa8:	f7f7 fcda 	bl	8000460 <__aeabi_dcmpeq>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d003      	beq.n	8008ab8 <_dtoa_r+0x528>
 8008ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab2:	07dd      	lsls	r5, r3, #31
 8008ab4:	d500      	bpl.n	8008ab8 <_dtoa_r+0x528>
 8008ab6:	e103      	b.n	8008cc0 <_dtoa_r+0x730>
 8008ab8:	9905      	ldr	r1, [sp, #20]
 8008aba:	9803      	ldr	r0, [sp, #12]
 8008abc:	f000 fca6 	bl	800940c <_Bfree>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	7023      	strb	r3, [r4, #0]
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ac8:	3301      	adds	r3, #1
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d100      	bne.n	8008ad4 <_dtoa_r+0x544>
 8008ad2:	e5a7      	b.n	8008624 <_dtoa_r+0x94>
 8008ad4:	601c      	str	r4, [r3, #0]
 8008ad6:	e5a5      	b.n	8008624 <_dtoa_r+0x94>
 8008ad8:	423d      	tst	r5, r7
 8008ada:	d005      	beq.n	8008ae8 <_dtoa_r+0x558>
 8008adc:	6832      	ldr	r2, [r6, #0]
 8008ade:	6873      	ldr	r3, [r6, #4]
 8008ae0:	f7f9 f88a 	bl	8001bf8 <__aeabi_dmul>
 8008ae4:	003b      	movs	r3, r7
 8008ae6:	3401      	adds	r4, #1
 8008ae8:	106d      	asrs	r5, r5, #1
 8008aea:	3608      	adds	r6, #8
 8008aec:	e736      	b.n	800895c <_dtoa_r+0x3cc>
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af4:	e75a      	b.n	80089ac <_dtoa_r+0x41c>
 8008af6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008af8:	4b69      	ldr	r3, [pc, #420]	@ (8008ca0 <_dtoa_r+0x710>)
 8008afa:	3a01      	subs	r2, #1
 8008afc:	00d2      	lsls	r2, r2, #3
 8008afe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008b00:	189b      	adds	r3, r3, r2
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d04c      	beq.n	8008ba4 <_dtoa_r+0x614>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	496b      	ldr	r1, [pc, #428]	@ (8008cbc <_dtoa_r+0x72c>)
 8008b0e:	f7f8 fc2f 	bl	8001370 <__aeabi_ddiv>
 8008b12:	0032      	movs	r2, r6
 8008b14:	003b      	movs	r3, r7
 8008b16:	f7f9 fb37 	bl	8002188 <__aeabi_dsub>
 8008b1a:	9a08      	ldr	r2, [sp, #32]
 8008b1c:	0006      	movs	r6, r0
 8008b1e:	4694      	mov	ip, r2
 8008b20:	000f      	movs	r7, r1
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b28:	4463      	add	r3, ip
 8008b2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b30:	f7f9 fee8 	bl	8002904 <__aeabi_d2iz>
 8008b34:	0005      	movs	r5, r0
 8008b36:	f7f9 ff21 	bl	800297c <__aeabi_i2d>
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	000b      	movs	r3, r1
 8008b3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b42:	f7f9 fb21 	bl	8002188 <__aeabi_dsub>
 8008b46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b48:	3530      	adds	r5, #48	@ 0x30
 8008b4a:	1c5c      	adds	r4, r3, #1
 8008b4c:	701d      	strb	r5, [r3, #0]
 8008b4e:	0032      	movs	r2, r6
 8008b50:	003b      	movs	r3, r7
 8008b52:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b56:	f7f7 fc89 	bl	800046c <__aeabi_dcmplt>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d16a      	bne.n	8008c34 <_dtoa_r+0x6a4>
 8008b5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b62:	2000      	movs	r0, #0
 8008b64:	4950      	ldr	r1, [pc, #320]	@ (8008ca8 <_dtoa_r+0x718>)
 8008b66:	f7f9 fb0f 	bl	8002188 <__aeabi_dsub>
 8008b6a:	0032      	movs	r2, r6
 8008b6c:	003b      	movs	r3, r7
 8008b6e:	f7f7 fc7d 	bl	800046c <__aeabi_dcmplt>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d000      	beq.n	8008b78 <_dtoa_r+0x5e8>
 8008b76:	e0a5      	b.n	8008cc4 <_dtoa_r+0x734>
 8008b78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	d100      	bne.n	8008b80 <_dtoa_r+0x5f0>
 8008b7e:	e742      	b.n	8008a06 <_dtoa_r+0x476>
 8008b80:	2200      	movs	r2, #0
 8008b82:	0030      	movs	r0, r6
 8008b84:	0039      	movs	r1, r7
 8008b86:	4b49      	ldr	r3, [pc, #292]	@ (8008cac <_dtoa_r+0x71c>)
 8008b88:	f7f9 f836 	bl	8001bf8 <__aeabi_dmul>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	0006      	movs	r6, r0
 8008b90:	000f      	movs	r7, r1
 8008b92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b96:	4b45      	ldr	r3, [pc, #276]	@ (8008cac <_dtoa_r+0x71c>)
 8008b98:	f7f9 f82e 	bl	8001bf8 <__aeabi_dmul>
 8008b9c:	9416      	str	r4, [sp, #88]	@ 0x58
 8008b9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ba0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ba2:	e7c3      	b.n	8008b2c <_dtoa_r+0x59c>
 8008ba4:	0030      	movs	r0, r6
 8008ba6:	0039      	movs	r1, r7
 8008ba8:	f7f9 f826 	bl	8001bf8 <__aeabi_dmul>
 8008bac:	9d08      	ldr	r5, [sp, #32]
 8008bae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008bb0:	002b      	movs	r3, r5
 8008bb2:	4694      	mov	ip, r2
 8008bb4:	9016      	str	r0, [sp, #88]	@ 0x58
 8008bb6:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008bb8:	4463      	add	r3, ip
 8008bba:	9319      	str	r3, [sp, #100]	@ 0x64
 8008bbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bbe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bc0:	f7f9 fea0 	bl	8002904 <__aeabi_d2iz>
 8008bc4:	0004      	movs	r4, r0
 8008bc6:	f7f9 fed9 	bl	800297c <__aeabi_i2d>
 8008bca:	000b      	movs	r3, r1
 8008bcc:	0002      	movs	r2, r0
 8008bce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bd2:	f7f9 fad9 	bl	8002188 <__aeabi_dsub>
 8008bd6:	3430      	adds	r4, #48	@ 0x30
 8008bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bda:	702c      	strb	r4, [r5, #0]
 8008bdc:	3501      	adds	r5, #1
 8008bde:	0006      	movs	r6, r0
 8008be0:	000f      	movs	r7, r1
 8008be2:	42ab      	cmp	r3, r5
 8008be4:	d129      	bne.n	8008c3a <_dtoa_r+0x6aa>
 8008be6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008be8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008bee:	469c      	mov	ip, r3
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b32      	ldr	r3, [pc, #200]	@ (8008cbc <_dtoa_r+0x72c>)
 8008bf4:	4464      	add	r4, ip
 8008bf6:	f7f8 f857 	bl	8000ca8 <__aeabi_dadd>
 8008bfa:	0002      	movs	r2, r0
 8008bfc:	000b      	movs	r3, r1
 8008bfe:	0030      	movs	r0, r6
 8008c00:	0039      	movs	r1, r7
 8008c02:	f7f7 fc47 	bl	8000494 <__aeabi_dcmpgt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d15c      	bne.n	8008cc4 <_dtoa_r+0x734>
 8008c0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c0c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c0e:	2000      	movs	r0, #0
 8008c10:	492a      	ldr	r1, [pc, #168]	@ (8008cbc <_dtoa_r+0x72c>)
 8008c12:	f7f9 fab9 	bl	8002188 <__aeabi_dsub>
 8008c16:	0002      	movs	r2, r0
 8008c18:	000b      	movs	r3, r1
 8008c1a:	0030      	movs	r0, r6
 8008c1c:	0039      	movs	r1, r7
 8008c1e:	f7f7 fc25 	bl	800046c <__aeabi_dcmplt>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d100      	bne.n	8008c28 <_dtoa_r+0x698>
 8008c26:	e6ee      	b.n	8008a06 <_dtoa_r+0x476>
 8008c28:	0023      	movs	r3, r4
 8008c2a:	3c01      	subs	r4, #1
 8008c2c:	7822      	ldrb	r2, [r4, #0]
 8008c2e:	2a30      	cmp	r2, #48	@ 0x30
 8008c30:	d0fa      	beq.n	8008c28 <_dtoa_r+0x698>
 8008c32:	001c      	movs	r4, r3
 8008c34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	e73e      	b.n	8008ab8 <_dtoa_r+0x528>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cac <_dtoa_r+0x71c>)
 8008c3e:	f7f8 ffdb 	bl	8001bf8 <__aeabi_dmul>
 8008c42:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c46:	e7b9      	b.n	8008bbc <_dtoa_r+0x62c>
 8008c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10c      	bne.n	8008c68 <_dtoa_r+0x6d8>
 8008c4e:	9806      	ldr	r0, [sp, #24]
 8008c50:	9907      	ldr	r1, [sp, #28]
 8008c52:	2200      	movs	r2, #0
 8008c54:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <_dtoa_r+0x728>)
 8008c56:	f7f8 ffcf 	bl	8001bf8 <__aeabi_dmul>
 8008c5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c5e:	f7f7 fc23 	bl	80004a8 <__aeabi_dcmpge>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d100      	bne.n	8008c68 <_dtoa_r+0x6d8>
 8008c66:	e164      	b.n	8008f32 <_dtoa_r+0x9a2>
 8008c68:	2600      	movs	r6, #0
 8008c6a:	0037      	movs	r7, r6
 8008c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c6e:	9c08      	ldr	r4, [sp, #32]
 8008c70:	43db      	mvns	r3, r3
 8008c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c74:	2300      	movs	r3, #0
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	0031      	movs	r1, r6
 8008c7a:	9803      	ldr	r0, [sp, #12]
 8008c7c:	f000 fbc6 	bl	800940c <_Bfree>
 8008c80:	2f00      	cmp	r7, #0
 8008c82:	d0d7      	beq.n	8008c34 <_dtoa_r+0x6a4>
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <_dtoa_r+0x706>
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	d003      	beq.n	8008c96 <_dtoa_r+0x706>
 8008c8e:	0019      	movs	r1, r3
 8008c90:	9803      	ldr	r0, [sp, #12]
 8008c92:	f000 fbbb 	bl	800940c <_Bfree>
 8008c96:	0039      	movs	r1, r7
 8008c98:	9803      	ldr	r0, [sp, #12]
 8008c9a:	f000 fbb7 	bl	800940c <_Bfree>
 8008c9e:	e7c9      	b.n	8008c34 <_dtoa_r+0x6a4>
 8008ca0:	0800b810 	.word	0x0800b810
 8008ca4:	0800b7e8 	.word	0x0800b7e8
 8008ca8:	3ff00000 	.word	0x3ff00000
 8008cac:	40240000 	.word	0x40240000
 8008cb0:	401c0000 	.word	0x401c0000
 8008cb4:	fcc00000 	.word	0xfcc00000
 8008cb8:	40140000 	.word	0x40140000
 8008cbc:	3fe00000 	.word	0x3fe00000
 8008cc0:	9b04      	ldr	r3, [sp, #16]
 8008cc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cc4:	0023      	movs	r3, r4
 8008cc6:	001c      	movs	r4, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	2a39      	cmp	r2, #57	@ 0x39
 8008cce:	d108      	bne.n	8008ce2 <_dtoa_r+0x752>
 8008cd0:	9a08      	ldr	r2, [sp, #32]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d1f7      	bne.n	8008cc6 <_dtoa_r+0x736>
 8008cd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008cd8:	9908      	ldr	r1, [sp, #32]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	920c      	str	r2, [sp, #48]	@ 0x30
 8008cde:	2230      	movs	r2, #48	@ 0x30
 8008ce0:	700a      	strb	r2, [r1, #0]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	e7a4      	b.n	8008c34 <_dtoa_r+0x6a4>
 8008cea:	2200      	movs	r2, #0
 8008cec:	4bc6      	ldr	r3, [pc, #792]	@ (8009008 <_dtoa_r+0xa78>)
 8008cee:	f7f8 ff83 	bl	8001bf8 <__aeabi_dmul>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	0006      	movs	r6, r0
 8008cf8:	000f      	movs	r7, r1
 8008cfa:	f7f7 fbb1 	bl	8000460 <__aeabi_dcmpeq>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d100      	bne.n	8008d04 <_dtoa_r+0x774>
 8008d02:	e6a1      	b.n	8008a48 <_dtoa_r+0x4b8>
 8008d04:	e6d8      	b.n	8008ab8 <_dtoa_r+0x528>
 8008d06:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008d08:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008d0a:	9c06      	ldr	r4, [sp, #24]
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	d014      	beq.n	8008d3a <_dtoa_r+0x7aa>
 8008d10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008d12:	2a01      	cmp	r2, #1
 8008d14:	dd00      	ble.n	8008d18 <_dtoa_r+0x788>
 8008d16:	e0c8      	b.n	8008eaa <_dtoa_r+0x91a>
 8008d18:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008d1a:	2a00      	cmp	r2, #0
 8008d1c:	d100      	bne.n	8008d20 <_dtoa_r+0x790>
 8008d1e:	e0be      	b.n	8008e9e <_dtoa_r+0x90e>
 8008d20:	4aba      	ldr	r2, [pc, #744]	@ (800900c <_dtoa_r+0xa7c>)
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	9a06      	ldr	r2, [sp, #24]
 8008d26:	2101      	movs	r1, #1
 8008d28:	18d2      	adds	r2, r2, r3
 8008d2a:	9206      	str	r2, [sp, #24]
 8008d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d2e:	9803      	ldr	r0, [sp, #12]
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d34:	f000 fc22 	bl	800957c <__i2b>
 8008d38:	0007      	movs	r7, r0
 8008d3a:	2c00      	cmp	r4, #0
 8008d3c:	d00e      	beq.n	8008d5c <_dtoa_r+0x7cc>
 8008d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dd0b      	ble.n	8008d5c <_dtoa_r+0x7cc>
 8008d44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d46:	0023      	movs	r3, r4
 8008d48:	4294      	cmp	r4, r2
 8008d4a:	dd00      	ble.n	8008d4e <_dtoa_r+0x7be>
 8008d4c:	0013      	movs	r3, r2
 8008d4e:	9a06      	ldr	r2, [sp, #24]
 8008d50:	1ae4      	subs	r4, r4, r3
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	9206      	str	r2, [sp, #24]
 8008d56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01f      	beq.n	8008da2 <_dtoa_r+0x812>
 8008d62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d100      	bne.n	8008d6a <_dtoa_r+0x7da>
 8008d68:	e0b5      	b.n	8008ed6 <_dtoa_r+0x946>
 8008d6a:	2d00      	cmp	r5, #0
 8008d6c:	d010      	beq.n	8008d90 <_dtoa_r+0x800>
 8008d6e:	0039      	movs	r1, r7
 8008d70:	002a      	movs	r2, r5
 8008d72:	9803      	ldr	r0, [sp, #12]
 8008d74:	f000 fccc 	bl	8009710 <__pow5mult>
 8008d78:	9a05      	ldr	r2, [sp, #20]
 8008d7a:	0001      	movs	r1, r0
 8008d7c:	0007      	movs	r7, r0
 8008d7e:	9803      	ldr	r0, [sp, #12]
 8008d80:	f000 fc14 	bl	80095ac <__multiply>
 8008d84:	0006      	movs	r6, r0
 8008d86:	9905      	ldr	r1, [sp, #20]
 8008d88:	9803      	ldr	r0, [sp, #12]
 8008d8a:	f000 fb3f 	bl	800940c <_Bfree>
 8008d8e:	9605      	str	r6, [sp, #20]
 8008d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d92:	1b5a      	subs	r2, r3, r5
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	d004      	beq.n	8008da2 <_dtoa_r+0x812>
 8008d98:	9905      	ldr	r1, [sp, #20]
 8008d9a:	9803      	ldr	r0, [sp, #12]
 8008d9c:	f000 fcb8 	bl	8009710 <__pow5mult>
 8008da0:	9005      	str	r0, [sp, #20]
 8008da2:	2101      	movs	r1, #1
 8008da4:	9803      	ldr	r0, [sp, #12]
 8008da6:	f000 fbe9 	bl	800957c <__i2b>
 8008daa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dac:	0006      	movs	r6, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d100      	bne.n	8008db4 <_dtoa_r+0x824>
 8008db2:	e1bc      	b.n	800912e <_dtoa_r+0xb9e>
 8008db4:	001a      	movs	r2, r3
 8008db6:	0001      	movs	r1, r0
 8008db8:	9803      	ldr	r0, [sp, #12]
 8008dba:	f000 fca9 	bl	8009710 <__pow5mult>
 8008dbe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008dc0:	0006      	movs	r6, r0
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	dc16      	bgt.n	8008df6 <_dtoa_r+0x866>
 8008dc8:	2500      	movs	r5, #0
 8008dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dcc:	42ab      	cmp	r3, r5
 8008dce:	d10e      	bne.n	8008dee <_dtoa_r+0x85e>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd2:	031b      	lsls	r3, r3, #12
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	d10a      	bne.n	8008dee <_dtoa_r+0x85e>
 8008dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8009010 <_dtoa_r+0xa80>)
 8008dda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ddc:	4213      	tst	r3, r2
 8008dde:	d006      	beq.n	8008dee <_dtoa_r+0x85e>
 8008de0:	9b06      	ldr	r3, [sp, #24]
 8008de2:	3501      	adds	r5, #1
 8008de4:	3301      	adds	r3, #1
 8008de6:	9306      	str	r3, [sp, #24]
 8008de8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dea:	3301      	adds	r3, #1
 8008dec:	930d      	str	r3, [sp, #52]	@ 0x34
 8008dee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008df0:	2001      	movs	r0, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <_dtoa_r+0x878>
 8008df6:	6933      	ldr	r3, [r6, #16]
 8008df8:	3303      	adds	r3, #3
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	18f3      	adds	r3, r6, r3
 8008dfe:	6858      	ldr	r0, [r3, #4]
 8008e00:	f000 fb6c 	bl	80094dc <__hi0bits>
 8008e04:	2320      	movs	r3, #32
 8008e06:	1a18      	subs	r0, r3, r0
 8008e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e0a:	1818      	adds	r0, r3, r0
 8008e0c:	0002      	movs	r2, r0
 8008e0e:	231f      	movs	r3, #31
 8008e10:	401a      	ands	r2, r3
 8008e12:	4218      	tst	r0, r3
 8008e14:	d065      	beq.n	8008ee2 <_dtoa_r+0x952>
 8008e16:	3301      	adds	r3, #1
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	dd5d      	ble.n	8008eda <_dtoa_r+0x94a>
 8008e1e:	231c      	movs	r3, #28
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	9a06      	ldr	r2, [sp, #24]
 8008e24:	18e4      	adds	r4, r4, r3
 8008e26:	18d2      	adds	r2, r2, r3
 8008e28:	9206      	str	r2, [sp, #24]
 8008e2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e2c:	18d3      	adds	r3, r2, r3
 8008e2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e30:	9b06      	ldr	r3, [sp, #24]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd05      	ble.n	8008e42 <_dtoa_r+0x8b2>
 8008e36:	001a      	movs	r2, r3
 8008e38:	9905      	ldr	r1, [sp, #20]
 8008e3a:	9803      	ldr	r0, [sp, #12]
 8008e3c:	f000 fcc4 	bl	80097c8 <__lshift>
 8008e40:	9005      	str	r0, [sp, #20]
 8008e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dd05      	ble.n	8008e54 <_dtoa_r+0x8c4>
 8008e48:	0031      	movs	r1, r6
 8008e4a:	001a      	movs	r2, r3
 8008e4c:	9803      	ldr	r0, [sp, #12]
 8008e4e:	f000 fcbb 	bl	80097c8 <__lshift>
 8008e52:	0006      	movs	r6, r0
 8008e54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d045      	beq.n	8008ee6 <_dtoa_r+0x956>
 8008e5a:	0031      	movs	r1, r6
 8008e5c:	9805      	ldr	r0, [sp, #20]
 8008e5e:	f000 fd1f 	bl	80098a0 <__mcmp>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	da3f      	bge.n	8008ee6 <_dtoa_r+0x956>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	220a      	movs	r2, #10
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e6e:	9905      	ldr	r1, [sp, #20]
 8008e70:	2300      	movs	r3, #0
 8008e72:	9803      	ldr	r0, [sp, #12]
 8008e74:	f000 faee 	bl	8009454 <__multadd>
 8008e78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e7a:	9005      	str	r0, [sp, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d100      	bne.n	8008e82 <_dtoa_r+0x8f2>
 8008e80:	e15c      	b.n	800913c <_dtoa_r+0xbac>
 8008e82:	2300      	movs	r3, #0
 8008e84:	0039      	movs	r1, r7
 8008e86:	220a      	movs	r2, #10
 8008e88:	9803      	ldr	r0, [sp, #12]
 8008e8a:	f000 fae3 	bl	8009454 <__multadd>
 8008e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e90:	0007      	movs	r7, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dc55      	bgt.n	8008f42 <_dtoa_r+0x9b2>
 8008e96:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	dc2d      	bgt.n	8008ef8 <_dtoa_r+0x968>
 8008e9c:	e051      	b.n	8008f42 <_dtoa_r+0x9b2>
 8008e9e:	2336      	movs	r3, #54	@ 0x36
 8008ea0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ea2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008ea4:	9c06      	ldr	r4, [sp, #24]
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	e73c      	b.n	8008d24 <_dtoa_r+0x794>
 8008eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eac:	1e5d      	subs	r5, r3, #1
 8008eae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	db08      	blt.n	8008ec6 <_dtoa_r+0x936>
 8008eb4:	1b5d      	subs	r5, r3, r5
 8008eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb8:	9c06      	ldr	r4, [sp, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	db00      	blt.n	8008ec0 <_dtoa_r+0x930>
 8008ebe:	e731      	b.n	8008d24 <_dtoa_r+0x794>
 8008ec0:	1ae4      	subs	r4, r4, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e72e      	b.n	8008d24 <_dtoa_r+0x794>
 8008ec6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008eca:	1aeb      	subs	r3, r5, r3
 8008ecc:	18d3      	adds	r3, r2, r3
 8008ece:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008ed0:	9314      	str	r3, [sp, #80]	@ 0x50
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	e7ef      	b.n	8008eb6 <_dtoa_r+0x926>
 8008ed6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008ed8:	e75e      	b.n	8008d98 <_dtoa_r+0x808>
 8008eda:	2b04      	cmp	r3, #4
 8008edc:	d0a8      	beq.n	8008e30 <_dtoa_r+0x8a0>
 8008ede:	331c      	adds	r3, #28
 8008ee0:	e79f      	b.n	8008e22 <_dtoa_r+0x892>
 8008ee2:	0013      	movs	r3, r2
 8008ee4:	e7fb      	b.n	8008ede <_dtoa_r+0x94e>
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eec:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc23      	bgt.n	8008f3a <_dtoa_r+0x9aa>
 8008ef2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	dd20      	ble.n	8008f3a <_dtoa_r+0x9aa>
 8008ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d000      	beq.n	8008f00 <_dtoa_r+0x970>
 8008efe:	e6b5      	b.n	8008c6c <_dtoa_r+0x6dc>
 8008f00:	0031      	movs	r1, r6
 8008f02:	2205      	movs	r2, #5
 8008f04:	9803      	ldr	r0, [sp, #12]
 8008f06:	f000 faa5 	bl	8009454 <__multadd>
 8008f0a:	0006      	movs	r6, r0
 8008f0c:	0001      	movs	r1, r0
 8008f0e:	9805      	ldr	r0, [sp, #20]
 8008f10:	f000 fcc6 	bl	80098a0 <__mcmp>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	dc00      	bgt.n	8008f1a <_dtoa_r+0x98a>
 8008f18:	e6a8      	b.n	8008c6c <_dtoa_r+0x6dc>
 8008f1a:	9b08      	ldr	r3, [sp, #32]
 8008f1c:	9a08      	ldr	r2, [sp, #32]
 8008f1e:	1c5c      	adds	r4, r3, #1
 8008f20:	2331      	movs	r3, #49	@ 0x31
 8008f22:	7013      	strb	r3, [r2, #0]
 8008f24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f26:	3301      	adds	r3, #1
 8008f28:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f2a:	e6a3      	b.n	8008c74 <_dtoa_r+0x6e4>
 8008f2c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008f2e:	0037      	movs	r7, r6
 8008f30:	e7f3      	b.n	8008f1a <_dtoa_r+0x98a>
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008f36:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f38:	e7f9      	b.n	8008f2e <_dtoa_r+0x99e>
 8008f3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d100      	bne.n	8008f42 <_dtoa_r+0x9b2>
 8008f40:	e100      	b.n	8009144 <_dtoa_r+0xbb4>
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	dd05      	ble.n	8008f52 <_dtoa_r+0x9c2>
 8008f46:	0039      	movs	r1, r7
 8008f48:	0022      	movs	r2, r4
 8008f4a:	9803      	ldr	r0, [sp, #12]
 8008f4c:	f000 fc3c 	bl	80097c8 <__lshift>
 8008f50:	0007      	movs	r7, r0
 8008f52:	0038      	movs	r0, r7
 8008f54:	2d00      	cmp	r5, #0
 8008f56:	d018      	beq.n	8008f8a <_dtoa_r+0x9fa>
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	9803      	ldr	r0, [sp, #12]
 8008f5c:	f000 fa12 	bl	8009384 <_Balloc>
 8008f60:	1e04      	subs	r4, r0, #0
 8008f62:	d105      	bne.n	8008f70 <_dtoa_r+0x9e0>
 8008f64:	0022      	movs	r2, r4
 8008f66:	4b2b      	ldr	r3, [pc, #172]	@ (8009014 <_dtoa_r+0xa84>)
 8008f68:	482b      	ldr	r0, [pc, #172]	@ (8009018 <_dtoa_r+0xa88>)
 8008f6a:	492c      	ldr	r1, [pc, #176]	@ (800901c <_dtoa_r+0xa8c>)
 8008f6c:	f7ff fb25 	bl	80085ba <_dtoa_r+0x2a>
 8008f70:	0039      	movs	r1, r7
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	310c      	adds	r1, #12
 8008f76:	3202      	adds	r2, #2
 8008f78:	0092      	lsls	r2, r2, #2
 8008f7a:	300c      	adds	r0, #12
 8008f7c:	f7ff fa70 	bl	8008460 <memcpy>
 8008f80:	2201      	movs	r2, #1
 8008f82:	0021      	movs	r1, r4
 8008f84:	9803      	ldr	r0, [sp, #12]
 8008f86:	f000 fc1f 	bl	80097c8 <__lshift>
 8008f8a:	9b08      	ldr	r3, [sp, #32]
 8008f8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f8e:	9306      	str	r3, [sp, #24]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	189b      	adds	r3, r3, r2
 8008f94:	2201      	movs	r2, #1
 8008f96:	9704      	str	r7, [sp, #16]
 8008f98:	0007      	movs	r7, r0
 8008f9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008fa2:	0031      	movs	r1, r6
 8008fa4:	9805      	ldr	r0, [sp, #20]
 8008fa6:	f7ff fa64 	bl	8008472 <quorem>
 8008faa:	9904      	ldr	r1, [sp, #16]
 8008fac:	0005      	movs	r5, r0
 8008fae:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fb0:	9805      	ldr	r0, [sp, #20]
 8008fb2:	f000 fc75 	bl	80098a0 <__mcmp>
 8008fb6:	003a      	movs	r2, r7
 8008fb8:	900d      	str	r0, [sp, #52]	@ 0x34
 8008fba:	0031      	movs	r1, r6
 8008fbc:	9803      	ldr	r0, [sp, #12]
 8008fbe:	f000 fc8b 	bl	80098d8 <__mdiff>
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	68c3      	ldr	r3, [r0, #12]
 8008fc6:	0004      	movs	r4, r0
 8008fc8:	3530      	adds	r5, #48	@ 0x30
 8008fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <_dtoa_r+0xa4a>
 8008fd0:	0001      	movs	r1, r0
 8008fd2:	9805      	ldr	r0, [sp, #20]
 8008fd4:	f000 fc64 	bl	80098a0 <__mcmp>
 8008fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8008fda:	0021      	movs	r1, r4
 8008fdc:	9803      	ldr	r0, [sp, #12]
 8008fde:	f000 fa15 	bl	800940c <_Bfree>
 8008fe2:	9b06      	ldr	r3, [sp, #24]
 8008fe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fe6:	1c5c      	adds	r4, r3, #1
 8008fe8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008fea:	4313      	orrs	r3, r2
 8008fec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	d116      	bne.n	8009020 <_dtoa_r+0xa90>
 8008ff2:	2d39      	cmp	r5, #57	@ 0x39
 8008ff4:	d02f      	beq.n	8009056 <_dtoa_r+0xac6>
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dd01      	ble.n	8009000 <_dtoa_r+0xa70>
 8008ffc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008ffe:	3531      	adds	r5, #49	@ 0x31
 8009000:	9b06      	ldr	r3, [sp, #24]
 8009002:	701d      	strb	r5, [r3, #0]
 8009004:	e638      	b.n	8008c78 <_dtoa_r+0x6e8>
 8009006:	46c0      	nop			@ (mov r8, r8)
 8009008:	40240000 	.word	0x40240000
 800900c:	00000433 	.word	0x00000433
 8009010:	7ff00000 	.word	0x7ff00000
 8009014:	0800b770 	.word	0x0800b770
 8009018:	0800b718 	.word	0x0800b718
 800901c:	000002ef 	.word	0x000002ef
 8009020:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009022:	2b00      	cmp	r3, #0
 8009024:	db04      	blt.n	8009030 <_dtoa_r+0xaa0>
 8009026:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009028:	4313      	orrs	r3, r2
 800902a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800902c:	4313      	orrs	r3, r2
 800902e:	d11e      	bne.n	800906e <_dtoa_r+0xade>
 8009030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	dde4      	ble.n	8009000 <_dtoa_r+0xa70>
 8009036:	9905      	ldr	r1, [sp, #20]
 8009038:	2201      	movs	r2, #1
 800903a:	9803      	ldr	r0, [sp, #12]
 800903c:	f000 fbc4 	bl	80097c8 <__lshift>
 8009040:	0031      	movs	r1, r6
 8009042:	9005      	str	r0, [sp, #20]
 8009044:	f000 fc2c 	bl	80098a0 <__mcmp>
 8009048:	2800      	cmp	r0, #0
 800904a:	dc02      	bgt.n	8009052 <_dtoa_r+0xac2>
 800904c:	d1d8      	bne.n	8009000 <_dtoa_r+0xa70>
 800904e:	07eb      	lsls	r3, r5, #31
 8009050:	d5d6      	bpl.n	8009000 <_dtoa_r+0xa70>
 8009052:	2d39      	cmp	r5, #57	@ 0x39
 8009054:	d1d2      	bne.n	8008ffc <_dtoa_r+0xa6c>
 8009056:	2339      	movs	r3, #57	@ 0x39
 8009058:	9a06      	ldr	r2, [sp, #24]
 800905a:	7013      	strb	r3, [r2, #0]
 800905c:	0023      	movs	r3, r4
 800905e:	001c      	movs	r4, r3
 8009060:	3b01      	subs	r3, #1
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	2a39      	cmp	r2, #57	@ 0x39
 8009066:	d04f      	beq.n	8009108 <_dtoa_r+0xb78>
 8009068:	3201      	adds	r2, #1
 800906a:	701a      	strb	r2, [r3, #0]
 800906c:	e604      	b.n	8008c78 <_dtoa_r+0x6e8>
 800906e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	dd03      	ble.n	800907c <_dtoa_r+0xaec>
 8009074:	2d39      	cmp	r5, #57	@ 0x39
 8009076:	d0ee      	beq.n	8009056 <_dtoa_r+0xac6>
 8009078:	3501      	adds	r5, #1
 800907a:	e7c1      	b.n	8009000 <_dtoa_r+0xa70>
 800907c:	9b06      	ldr	r3, [sp, #24]
 800907e:	9a06      	ldr	r2, [sp, #24]
 8009080:	701d      	strb	r5, [r3, #0]
 8009082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009084:	4293      	cmp	r3, r2
 8009086:	d02a      	beq.n	80090de <_dtoa_r+0xb4e>
 8009088:	2300      	movs	r3, #0
 800908a:	220a      	movs	r2, #10
 800908c:	9905      	ldr	r1, [sp, #20]
 800908e:	9803      	ldr	r0, [sp, #12]
 8009090:	f000 f9e0 	bl	8009454 <__multadd>
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	9005      	str	r0, [sp, #20]
 8009098:	42bb      	cmp	r3, r7
 800909a:	d109      	bne.n	80090b0 <_dtoa_r+0xb20>
 800909c:	2300      	movs	r3, #0
 800909e:	220a      	movs	r2, #10
 80090a0:	9904      	ldr	r1, [sp, #16]
 80090a2:	9803      	ldr	r0, [sp, #12]
 80090a4:	f000 f9d6 	bl	8009454 <__multadd>
 80090a8:	9004      	str	r0, [sp, #16]
 80090aa:	0007      	movs	r7, r0
 80090ac:	9406      	str	r4, [sp, #24]
 80090ae:	e778      	b.n	8008fa2 <_dtoa_r+0xa12>
 80090b0:	9904      	ldr	r1, [sp, #16]
 80090b2:	2300      	movs	r3, #0
 80090b4:	220a      	movs	r2, #10
 80090b6:	9803      	ldr	r0, [sp, #12]
 80090b8:	f000 f9cc 	bl	8009454 <__multadd>
 80090bc:	2300      	movs	r3, #0
 80090be:	9004      	str	r0, [sp, #16]
 80090c0:	220a      	movs	r2, #10
 80090c2:	0039      	movs	r1, r7
 80090c4:	9803      	ldr	r0, [sp, #12]
 80090c6:	f000 f9c5 	bl	8009454 <__multadd>
 80090ca:	e7ee      	b.n	80090aa <_dtoa_r+0xb1a>
 80090cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ce:	2401      	movs	r4, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dd00      	ble.n	80090d6 <_dtoa_r+0xb46>
 80090d4:	001c      	movs	r4, r3
 80090d6:	9b08      	ldr	r3, [sp, #32]
 80090d8:	191c      	adds	r4, r3, r4
 80090da:	2300      	movs	r3, #0
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	9905      	ldr	r1, [sp, #20]
 80090e0:	2201      	movs	r2, #1
 80090e2:	9803      	ldr	r0, [sp, #12]
 80090e4:	f000 fb70 	bl	80097c8 <__lshift>
 80090e8:	0031      	movs	r1, r6
 80090ea:	9005      	str	r0, [sp, #20]
 80090ec:	f000 fbd8 	bl	80098a0 <__mcmp>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dcb3      	bgt.n	800905c <_dtoa_r+0xacc>
 80090f4:	d101      	bne.n	80090fa <_dtoa_r+0xb6a>
 80090f6:	07ed      	lsls	r5, r5, #31
 80090f8:	d4b0      	bmi.n	800905c <_dtoa_r+0xacc>
 80090fa:	0023      	movs	r3, r4
 80090fc:	001c      	movs	r4, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	2a30      	cmp	r2, #48	@ 0x30
 8009104:	d0fa      	beq.n	80090fc <_dtoa_r+0xb6c>
 8009106:	e5b7      	b.n	8008c78 <_dtoa_r+0x6e8>
 8009108:	9a08      	ldr	r2, [sp, #32]
 800910a:	429a      	cmp	r2, r3
 800910c:	d1a7      	bne.n	800905e <_dtoa_r+0xace>
 800910e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009110:	3301      	adds	r3, #1
 8009112:	930c      	str	r3, [sp, #48]	@ 0x30
 8009114:	2331      	movs	r3, #49	@ 0x31
 8009116:	7013      	strb	r3, [r2, #0]
 8009118:	e5ae      	b.n	8008c78 <_dtoa_r+0x6e8>
 800911a:	4b15      	ldr	r3, [pc, #84]	@ (8009170 <_dtoa_r+0xbe0>)
 800911c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800911e:	9308      	str	r3, [sp, #32]
 8009120:	4b14      	ldr	r3, [pc, #80]	@ (8009174 <_dtoa_r+0xbe4>)
 8009122:	2a00      	cmp	r2, #0
 8009124:	d001      	beq.n	800912a <_dtoa_r+0xb9a>
 8009126:	f7ff fa7b 	bl	8008620 <_dtoa_r+0x90>
 800912a:	f7ff fa7b 	bl	8008624 <_dtoa_r+0x94>
 800912e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009130:	2b01      	cmp	r3, #1
 8009132:	dc00      	bgt.n	8009136 <_dtoa_r+0xba6>
 8009134:	e648      	b.n	8008dc8 <_dtoa_r+0x838>
 8009136:	2001      	movs	r0, #1
 8009138:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800913a:	e665      	b.n	8008e08 <_dtoa_r+0x878>
 800913c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800913e:	2b00      	cmp	r3, #0
 8009140:	dc00      	bgt.n	8009144 <_dtoa_r+0xbb4>
 8009142:	e6d6      	b.n	8008ef2 <_dtoa_r+0x962>
 8009144:	2400      	movs	r4, #0
 8009146:	0031      	movs	r1, r6
 8009148:	9805      	ldr	r0, [sp, #20]
 800914a:	f7ff f992 	bl	8008472 <quorem>
 800914e:	9b08      	ldr	r3, [sp, #32]
 8009150:	3030      	adds	r0, #48	@ 0x30
 8009152:	5518      	strb	r0, [r3, r4]
 8009154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009156:	3401      	adds	r4, #1
 8009158:	0005      	movs	r5, r0
 800915a:	429c      	cmp	r4, r3
 800915c:	dab6      	bge.n	80090cc <_dtoa_r+0xb3c>
 800915e:	2300      	movs	r3, #0
 8009160:	220a      	movs	r2, #10
 8009162:	9905      	ldr	r1, [sp, #20]
 8009164:	9803      	ldr	r0, [sp, #12]
 8009166:	f000 f975 	bl	8009454 <__multadd>
 800916a:	9005      	str	r0, [sp, #20]
 800916c:	e7eb      	b.n	8009146 <_dtoa_r+0xbb6>
 800916e:	46c0      	nop			@ (mov r8, r8)
 8009170:	0800b6f4 	.word	0x0800b6f4
 8009174:	0800b6fc 	.word	0x0800b6fc

08009178 <_free_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	0005      	movs	r5, r0
 800917c:	1e0c      	subs	r4, r1, #0
 800917e:	d010      	beq.n	80091a2 <_free_r+0x2a>
 8009180:	3c04      	subs	r4, #4
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da00      	bge.n	800918a <_free_r+0x12>
 8009188:	18e4      	adds	r4, r4, r3
 800918a:	0028      	movs	r0, r5
 800918c:	f000 f8ea 	bl	8009364 <__malloc_lock>
 8009190:	4a1d      	ldr	r2, [pc, #116]	@ (8009208 <_free_r+0x90>)
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d105      	bne.n	80091a4 <_free_r+0x2c>
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	6014      	str	r4, [r2, #0]
 800919c:	0028      	movs	r0, r5
 800919e:	f000 f8e9 	bl	8009374 <__malloc_unlock>
 80091a2:	bd70      	pop	{r4, r5, r6, pc}
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d908      	bls.n	80091ba <_free_r+0x42>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	1821      	adds	r1, r4, r0
 80091ac:	428b      	cmp	r3, r1
 80091ae:	d1f3      	bne.n	8009198 <_free_r+0x20>
 80091b0:	6819      	ldr	r1, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	1809      	adds	r1, r1, r0
 80091b6:	6021      	str	r1, [r4, #0]
 80091b8:	e7ee      	b.n	8009198 <_free_r+0x20>
 80091ba:	001a      	movs	r2, r3
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <_free_r+0x4e>
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	d9f9      	bls.n	80091ba <_free_r+0x42>
 80091c6:	6811      	ldr	r1, [r2, #0]
 80091c8:	1850      	adds	r0, r2, r1
 80091ca:	42a0      	cmp	r0, r4
 80091cc:	d10b      	bne.n	80091e6 <_free_r+0x6e>
 80091ce:	6820      	ldr	r0, [r4, #0]
 80091d0:	1809      	adds	r1, r1, r0
 80091d2:	1850      	adds	r0, r2, r1
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	4283      	cmp	r3, r0
 80091d8:	d1e0      	bne.n	800919c <_free_r+0x24>
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	1841      	adds	r1, r0, r1
 80091e0:	6011      	str	r1, [r2, #0]
 80091e2:	6053      	str	r3, [r2, #4]
 80091e4:	e7da      	b.n	800919c <_free_r+0x24>
 80091e6:	42a0      	cmp	r0, r4
 80091e8:	d902      	bls.n	80091f0 <_free_r+0x78>
 80091ea:	230c      	movs	r3, #12
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	e7d5      	b.n	800919c <_free_r+0x24>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	1821      	adds	r1, r4, r0
 80091f4:	428b      	cmp	r3, r1
 80091f6:	d103      	bne.n	8009200 <_free_r+0x88>
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	1809      	adds	r1, r1, r0
 80091fe:	6021      	str	r1, [r4, #0]
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	6054      	str	r4, [r2, #4]
 8009204:	e7ca      	b.n	800919c <_free_r+0x24>
 8009206:	46c0      	nop			@ (mov r8, r8)
 8009208:	200006b8 	.word	0x200006b8

0800920c <malloc>:
 800920c:	b510      	push	{r4, lr}
 800920e:	4b03      	ldr	r3, [pc, #12]	@ (800921c <malloc+0x10>)
 8009210:	0001      	movs	r1, r0
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	f000 f826 	bl	8009264 <_malloc_r>
 8009218:	bd10      	pop	{r4, pc}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	20000018 	.word	0x20000018

08009220 <sbrk_aligned>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4e0f      	ldr	r6, [pc, #60]	@ (8009260 <sbrk_aligned+0x40>)
 8009224:	000d      	movs	r5, r1
 8009226:	6831      	ldr	r1, [r6, #0]
 8009228:	0004      	movs	r4, r0
 800922a:	2900      	cmp	r1, #0
 800922c:	d102      	bne.n	8009234 <sbrk_aligned+0x14>
 800922e:	f000 fe6f 	bl	8009f10 <_sbrk_r>
 8009232:	6030      	str	r0, [r6, #0]
 8009234:	0029      	movs	r1, r5
 8009236:	0020      	movs	r0, r4
 8009238:	f000 fe6a 	bl	8009f10 <_sbrk_r>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d103      	bne.n	8009248 <sbrk_aligned+0x28>
 8009240:	2501      	movs	r5, #1
 8009242:	426d      	negs	r5, r5
 8009244:	0028      	movs	r0, r5
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	2303      	movs	r3, #3
 800924a:	1cc5      	adds	r5, r0, #3
 800924c:	439d      	bics	r5, r3
 800924e:	42a8      	cmp	r0, r5
 8009250:	d0f8      	beq.n	8009244 <sbrk_aligned+0x24>
 8009252:	1a29      	subs	r1, r5, r0
 8009254:	0020      	movs	r0, r4
 8009256:	f000 fe5b 	bl	8009f10 <_sbrk_r>
 800925a:	3001      	adds	r0, #1
 800925c:	d1f2      	bne.n	8009244 <sbrk_aligned+0x24>
 800925e:	e7ef      	b.n	8009240 <sbrk_aligned+0x20>
 8009260:	200006b4 	.word	0x200006b4

08009264 <_malloc_r>:
 8009264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009266:	2203      	movs	r2, #3
 8009268:	1ccb      	adds	r3, r1, #3
 800926a:	4393      	bics	r3, r2
 800926c:	3308      	adds	r3, #8
 800926e:	0005      	movs	r5, r0
 8009270:	001f      	movs	r7, r3
 8009272:	2b0c      	cmp	r3, #12
 8009274:	d234      	bcs.n	80092e0 <_malloc_r+0x7c>
 8009276:	270c      	movs	r7, #12
 8009278:	42b9      	cmp	r1, r7
 800927a:	d833      	bhi.n	80092e4 <_malloc_r+0x80>
 800927c:	0028      	movs	r0, r5
 800927e:	f000 f871 	bl	8009364 <__malloc_lock>
 8009282:	4e37      	ldr	r6, [pc, #220]	@ (8009360 <_malloc_r+0xfc>)
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	001c      	movs	r4, r3
 8009288:	2c00      	cmp	r4, #0
 800928a:	d12f      	bne.n	80092ec <_malloc_r+0x88>
 800928c:	0039      	movs	r1, r7
 800928e:	0028      	movs	r0, r5
 8009290:	f7ff ffc6 	bl	8009220 <sbrk_aligned>
 8009294:	0004      	movs	r4, r0
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d15f      	bne.n	800935a <_malloc_r+0xf6>
 800929a:	6834      	ldr	r4, [r6, #0]
 800929c:	9400      	str	r4, [sp, #0]
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d14a      	bne.n	800933a <_malloc_r+0xd6>
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	d052      	beq.n	800934e <_malloc_r+0xea>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	0028      	movs	r0, r5
 80092ac:	18e3      	adds	r3, r4, r3
 80092ae:	9900      	ldr	r1, [sp, #0]
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	f000 fe2d 	bl	8009f10 <_sbrk_r>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	4283      	cmp	r3, r0
 80092ba:	d148      	bne.n	800934e <_malloc_r+0xea>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	0028      	movs	r0, r5
 80092c0:	1aff      	subs	r7, r7, r3
 80092c2:	0039      	movs	r1, r7
 80092c4:	f7ff ffac 	bl	8009220 <sbrk_aligned>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d040      	beq.n	800934e <_malloc_r+0xea>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	19db      	adds	r3, r3, r7
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	6833      	ldr	r3, [r6, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	2a00      	cmp	r2, #0
 80092d8:	d133      	bne.n	8009342 <_malloc_r+0xde>
 80092da:	9b00      	ldr	r3, [sp, #0]
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	e019      	b.n	8009314 <_malloc_r+0xb0>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dac9      	bge.n	8009278 <_malloc_r+0x14>
 80092e4:	230c      	movs	r3, #12
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	2000      	movs	r0, #0
 80092ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092ec:	6821      	ldr	r1, [r4, #0]
 80092ee:	1bc9      	subs	r1, r1, r7
 80092f0:	d420      	bmi.n	8009334 <_malloc_r+0xd0>
 80092f2:	290b      	cmp	r1, #11
 80092f4:	d90a      	bls.n	800930c <_malloc_r+0xa8>
 80092f6:	19e2      	adds	r2, r4, r7
 80092f8:	6027      	str	r7, [r4, #0]
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	d104      	bne.n	8009308 <_malloc_r+0xa4>
 80092fe:	6032      	str	r2, [r6, #0]
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	6011      	str	r1, [r2, #0]
 8009304:	6053      	str	r3, [r2, #4]
 8009306:	e005      	b.n	8009314 <_malloc_r+0xb0>
 8009308:	605a      	str	r2, [r3, #4]
 800930a:	e7f9      	b.n	8009300 <_malloc_r+0x9c>
 800930c:	6862      	ldr	r2, [r4, #4]
 800930e:	42a3      	cmp	r3, r4
 8009310:	d10e      	bne.n	8009330 <_malloc_r+0xcc>
 8009312:	6032      	str	r2, [r6, #0]
 8009314:	0028      	movs	r0, r5
 8009316:	f000 f82d 	bl	8009374 <__malloc_unlock>
 800931a:	0020      	movs	r0, r4
 800931c:	2207      	movs	r2, #7
 800931e:	300b      	adds	r0, #11
 8009320:	1d23      	adds	r3, r4, #4
 8009322:	4390      	bics	r0, r2
 8009324:	1ac2      	subs	r2, r0, r3
 8009326:	4298      	cmp	r0, r3
 8009328:	d0df      	beq.n	80092ea <_malloc_r+0x86>
 800932a:	1a1b      	subs	r3, r3, r0
 800932c:	50a3      	str	r3, [r4, r2]
 800932e:	e7dc      	b.n	80092ea <_malloc_r+0x86>
 8009330:	605a      	str	r2, [r3, #4]
 8009332:	e7ef      	b.n	8009314 <_malloc_r+0xb0>
 8009334:	0023      	movs	r3, r4
 8009336:	6864      	ldr	r4, [r4, #4]
 8009338:	e7a6      	b.n	8009288 <_malloc_r+0x24>
 800933a:	9c00      	ldr	r4, [sp, #0]
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	e7ad      	b.n	800929e <_malloc_r+0x3a>
 8009342:	001a      	movs	r2, r3
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	42a3      	cmp	r3, r4
 8009348:	d1fb      	bne.n	8009342 <_malloc_r+0xde>
 800934a:	2300      	movs	r3, #0
 800934c:	e7da      	b.n	8009304 <_malloc_r+0xa0>
 800934e:	230c      	movs	r3, #12
 8009350:	0028      	movs	r0, r5
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	f000 f80e 	bl	8009374 <__malloc_unlock>
 8009358:	e7c6      	b.n	80092e8 <_malloc_r+0x84>
 800935a:	6007      	str	r7, [r0, #0]
 800935c:	e7da      	b.n	8009314 <_malloc_r+0xb0>
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	200006b8 	.word	0x200006b8

08009364 <__malloc_lock>:
 8009364:	b510      	push	{r4, lr}
 8009366:	4802      	ldr	r0, [pc, #8]	@ (8009370 <__malloc_lock+0xc>)
 8009368:	f7ff f865 	bl	8008436 <__retarget_lock_acquire_recursive>
 800936c:	bd10      	pop	{r4, pc}
 800936e:	46c0      	nop			@ (mov r8, r8)
 8009370:	200006b0 	.word	0x200006b0

08009374 <__malloc_unlock>:
 8009374:	b510      	push	{r4, lr}
 8009376:	4802      	ldr	r0, [pc, #8]	@ (8009380 <__malloc_unlock+0xc>)
 8009378:	f7ff f85e 	bl	8008438 <__retarget_lock_release_recursive>
 800937c:	bd10      	pop	{r4, pc}
 800937e:	46c0      	nop			@ (mov r8, r8)
 8009380:	200006b0 	.word	0x200006b0

08009384 <_Balloc>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	69c5      	ldr	r5, [r0, #28]
 8009388:	0006      	movs	r6, r0
 800938a:	000c      	movs	r4, r1
 800938c:	2d00      	cmp	r5, #0
 800938e:	d10e      	bne.n	80093ae <_Balloc+0x2a>
 8009390:	2010      	movs	r0, #16
 8009392:	f7ff ff3b 	bl	800920c <malloc>
 8009396:	1e02      	subs	r2, r0, #0
 8009398:	61f0      	str	r0, [r6, #28]
 800939a:	d104      	bne.n	80093a6 <_Balloc+0x22>
 800939c:	216b      	movs	r1, #107	@ 0x6b
 800939e:	4b19      	ldr	r3, [pc, #100]	@ (8009404 <_Balloc+0x80>)
 80093a0:	4819      	ldr	r0, [pc, #100]	@ (8009408 <_Balloc+0x84>)
 80093a2:	f000 fdc7 	bl	8009f34 <__assert_func>
 80093a6:	6045      	str	r5, [r0, #4]
 80093a8:	6085      	str	r5, [r0, #8]
 80093aa:	6005      	str	r5, [r0, #0]
 80093ac:	60c5      	str	r5, [r0, #12]
 80093ae:	69f5      	ldr	r5, [r6, #28]
 80093b0:	68eb      	ldr	r3, [r5, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d013      	beq.n	80093de <_Balloc+0x5a>
 80093b6:	69f3      	ldr	r3, [r6, #28]
 80093b8:	00a2      	lsls	r2, r4, #2
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	189b      	adds	r3, r3, r2
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d118      	bne.n	80093f6 <_Balloc+0x72>
 80093c4:	2101      	movs	r1, #1
 80093c6:	000d      	movs	r5, r1
 80093c8:	40a5      	lsls	r5, r4
 80093ca:	1d6a      	adds	r2, r5, #5
 80093cc:	0030      	movs	r0, r6
 80093ce:	0092      	lsls	r2, r2, #2
 80093d0:	f000 fdce 	bl	8009f70 <_calloc_r>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d00c      	beq.n	80093f2 <_Balloc+0x6e>
 80093d8:	6044      	str	r4, [r0, #4]
 80093da:	6085      	str	r5, [r0, #8]
 80093dc:	e00d      	b.n	80093fa <_Balloc+0x76>
 80093de:	2221      	movs	r2, #33	@ 0x21
 80093e0:	2104      	movs	r1, #4
 80093e2:	0030      	movs	r0, r6
 80093e4:	f000 fdc4 	bl	8009f70 <_calloc_r>
 80093e8:	69f3      	ldr	r3, [r6, #28]
 80093ea:	60e8      	str	r0, [r5, #12]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e1      	bne.n	80093b6 <_Balloc+0x32>
 80093f2:	2000      	movs	r0, #0
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	6802      	ldr	r2, [r0, #0]
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	2300      	movs	r3, #0
 80093fc:	6103      	str	r3, [r0, #16]
 80093fe:	60c3      	str	r3, [r0, #12]
 8009400:	e7f8      	b.n	80093f4 <_Balloc+0x70>
 8009402:	46c0      	nop			@ (mov r8, r8)
 8009404:	0800b701 	.word	0x0800b701
 8009408:	0800b781 	.word	0x0800b781

0800940c <_Bfree>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	69c6      	ldr	r6, [r0, #28]
 8009410:	0005      	movs	r5, r0
 8009412:	000c      	movs	r4, r1
 8009414:	2e00      	cmp	r6, #0
 8009416:	d10e      	bne.n	8009436 <_Bfree+0x2a>
 8009418:	2010      	movs	r0, #16
 800941a:	f7ff fef7 	bl	800920c <malloc>
 800941e:	1e02      	subs	r2, r0, #0
 8009420:	61e8      	str	r0, [r5, #28]
 8009422:	d104      	bne.n	800942e <_Bfree+0x22>
 8009424:	218f      	movs	r1, #143	@ 0x8f
 8009426:	4b09      	ldr	r3, [pc, #36]	@ (800944c <_Bfree+0x40>)
 8009428:	4809      	ldr	r0, [pc, #36]	@ (8009450 <_Bfree+0x44>)
 800942a:	f000 fd83 	bl	8009f34 <__assert_func>
 800942e:	6046      	str	r6, [r0, #4]
 8009430:	6086      	str	r6, [r0, #8]
 8009432:	6006      	str	r6, [r0, #0]
 8009434:	60c6      	str	r6, [r0, #12]
 8009436:	2c00      	cmp	r4, #0
 8009438:	d007      	beq.n	800944a <_Bfree+0x3e>
 800943a:	69eb      	ldr	r3, [r5, #28]
 800943c:	6862      	ldr	r2, [r4, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	0092      	lsls	r2, r2, #2
 8009442:	189b      	adds	r3, r3, r2
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	6022      	str	r2, [r4, #0]
 8009448:	601c      	str	r4, [r3, #0]
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	0800b701 	.word	0x0800b701
 8009450:	0800b781 	.word	0x0800b781

08009454 <__multadd>:
 8009454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009456:	000f      	movs	r7, r1
 8009458:	9001      	str	r0, [sp, #4]
 800945a:	000c      	movs	r4, r1
 800945c:	001e      	movs	r6, r3
 800945e:	2000      	movs	r0, #0
 8009460:	690d      	ldr	r5, [r1, #16]
 8009462:	3714      	adds	r7, #20
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	3001      	adds	r0, #1
 8009468:	b299      	uxth	r1, r3
 800946a:	4351      	muls	r1, r2
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	4353      	muls	r3, r2
 8009470:	1989      	adds	r1, r1, r6
 8009472:	0c0e      	lsrs	r6, r1, #16
 8009474:	199b      	adds	r3, r3, r6
 8009476:	0c1e      	lsrs	r6, r3, #16
 8009478:	b289      	uxth	r1, r1
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	185b      	adds	r3, r3, r1
 800947e:	c708      	stmia	r7!, {r3}
 8009480:	4285      	cmp	r5, r0
 8009482:	dcef      	bgt.n	8009464 <__multadd+0x10>
 8009484:	2e00      	cmp	r6, #0
 8009486:	d022      	beq.n	80094ce <__multadd+0x7a>
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	42ab      	cmp	r3, r5
 800948c:	dc19      	bgt.n	80094c2 <__multadd+0x6e>
 800948e:	6861      	ldr	r1, [r4, #4]
 8009490:	9801      	ldr	r0, [sp, #4]
 8009492:	3101      	adds	r1, #1
 8009494:	f7ff ff76 	bl	8009384 <_Balloc>
 8009498:	1e07      	subs	r7, r0, #0
 800949a:	d105      	bne.n	80094a8 <__multadd+0x54>
 800949c:	003a      	movs	r2, r7
 800949e:	21ba      	movs	r1, #186	@ 0xba
 80094a0:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <__multadd+0x80>)
 80094a2:	480d      	ldr	r0, [pc, #52]	@ (80094d8 <__multadd+0x84>)
 80094a4:	f000 fd46 	bl	8009f34 <__assert_func>
 80094a8:	0021      	movs	r1, r4
 80094aa:	6922      	ldr	r2, [r4, #16]
 80094ac:	310c      	adds	r1, #12
 80094ae:	3202      	adds	r2, #2
 80094b0:	0092      	lsls	r2, r2, #2
 80094b2:	300c      	adds	r0, #12
 80094b4:	f7fe ffd4 	bl	8008460 <memcpy>
 80094b8:	0021      	movs	r1, r4
 80094ba:	9801      	ldr	r0, [sp, #4]
 80094bc:	f7ff ffa6 	bl	800940c <_Bfree>
 80094c0:	003c      	movs	r4, r7
 80094c2:	1d2b      	adds	r3, r5, #4
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	18e3      	adds	r3, r4, r3
 80094c8:	3501      	adds	r5, #1
 80094ca:	605e      	str	r6, [r3, #4]
 80094cc:	6125      	str	r5, [r4, #16]
 80094ce:	0020      	movs	r0, r4
 80094d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094d2:	46c0      	nop			@ (mov r8, r8)
 80094d4:	0800b770 	.word	0x0800b770
 80094d8:	0800b781 	.word	0x0800b781

080094dc <__hi0bits>:
 80094dc:	2280      	movs	r2, #128	@ 0x80
 80094de:	0003      	movs	r3, r0
 80094e0:	0252      	lsls	r2, r2, #9
 80094e2:	2000      	movs	r0, #0
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d201      	bcs.n	80094ec <__hi0bits+0x10>
 80094e8:	041b      	lsls	r3, r3, #16
 80094ea:	3010      	adds	r0, #16
 80094ec:	2280      	movs	r2, #128	@ 0x80
 80094ee:	0452      	lsls	r2, r2, #17
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d201      	bcs.n	80094f8 <__hi0bits+0x1c>
 80094f4:	3008      	adds	r0, #8
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	2280      	movs	r2, #128	@ 0x80
 80094fa:	0552      	lsls	r2, r2, #21
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d201      	bcs.n	8009504 <__hi0bits+0x28>
 8009500:	3004      	adds	r0, #4
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	2280      	movs	r2, #128	@ 0x80
 8009506:	05d2      	lsls	r2, r2, #23
 8009508:	4293      	cmp	r3, r2
 800950a:	d201      	bcs.n	8009510 <__hi0bits+0x34>
 800950c:	3002      	adds	r0, #2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	db03      	blt.n	800951c <__hi0bits+0x40>
 8009514:	3001      	adds	r0, #1
 8009516:	4213      	tst	r3, r2
 8009518:	d100      	bne.n	800951c <__hi0bits+0x40>
 800951a:	2020      	movs	r0, #32
 800951c:	4770      	bx	lr

0800951e <__lo0bits>:
 800951e:	6803      	ldr	r3, [r0, #0]
 8009520:	0001      	movs	r1, r0
 8009522:	2207      	movs	r2, #7
 8009524:	0018      	movs	r0, r3
 8009526:	4010      	ands	r0, r2
 8009528:	4213      	tst	r3, r2
 800952a:	d00d      	beq.n	8009548 <__lo0bits+0x2a>
 800952c:	3a06      	subs	r2, #6
 800952e:	2000      	movs	r0, #0
 8009530:	4213      	tst	r3, r2
 8009532:	d105      	bne.n	8009540 <__lo0bits+0x22>
 8009534:	3002      	adds	r0, #2
 8009536:	4203      	tst	r3, r0
 8009538:	d003      	beq.n	8009542 <__lo0bits+0x24>
 800953a:	40d3      	lsrs	r3, r2
 800953c:	0010      	movs	r0, r2
 800953e:	600b      	str	r3, [r1, #0]
 8009540:	4770      	bx	lr
 8009542:	089b      	lsrs	r3, r3, #2
 8009544:	600b      	str	r3, [r1, #0]
 8009546:	e7fb      	b.n	8009540 <__lo0bits+0x22>
 8009548:	b29a      	uxth	r2, r3
 800954a:	2a00      	cmp	r2, #0
 800954c:	d101      	bne.n	8009552 <__lo0bits+0x34>
 800954e:	2010      	movs	r0, #16
 8009550:	0c1b      	lsrs	r3, r3, #16
 8009552:	b2da      	uxtb	r2, r3
 8009554:	2a00      	cmp	r2, #0
 8009556:	d101      	bne.n	800955c <__lo0bits+0x3e>
 8009558:	3008      	adds	r0, #8
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	071a      	lsls	r2, r3, #28
 800955e:	d101      	bne.n	8009564 <__lo0bits+0x46>
 8009560:	3004      	adds	r0, #4
 8009562:	091b      	lsrs	r3, r3, #4
 8009564:	079a      	lsls	r2, r3, #30
 8009566:	d101      	bne.n	800956c <__lo0bits+0x4e>
 8009568:	3002      	adds	r0, #2
 800956a:	089b      	lsrs	r3, r3, #2
 800956c:	07da      	lsls	r2, r3, #31
 800956e:	d4e9      	bmi.n	8009544 <__lo0bits+0x26>
 8009570:	3001      	adds	r0, #1
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	d1e6      	bne.n	8009544 <__lo0bits+0x26>
 8009576:	2020      	movs	r0, #32
 8009578:	e7e2      	b.n	8009540 <__lo0bits+0x22>
	...

0800957c <__i2b>:
 800957c:	b510      	push	{r4, lr}
 800957e:	000c      	movs	r4, r1
 8009580:	2101      	movs	r1, #1
 8009582:	f7ff feff 	bl	8009384 <_Balloc>
 8009586:	2800      	cmp	r0, #0
 8009588:	d107      	bne.n	800959a <__i2b+0x1e>
 800958a:	2146      	movs	r1, #70	@ 0x46
 800958c:	4c05      	ldr	r4, [pc, #20]	@ (80095a4 <__i2b+0x28>)
 800958e:	0002      	movs	r2, r0
 8009590:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <__i2b+0x2c>)
 8009592:	0020      	movs	r0, r4
 8009594:	31ff      	adds	r1, #255	@ 0xff
 8009596:	f000 fccd 	bl	8009f34 <__assert_func>
 800959a:	2301      	movs	r3, #1
 800959c:	6144      	str	r4, [r0, #20]
 800959e:	6103      	str	r3, [r0, #16]
 80095a0:	bd10      	pop	{r4, pc}
 80095a2:	46c0      	nop			@ (mov r8, r8)
 80095a4:	0800b781 	.word	0x0800b781
 80095a8:	0800b770 	.word	0x0800b770

080095ac <__multiply>:
 80095ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ae:	0014      	movs	r4, r2
 80095b0:	690a      	ldr	r2, [r1, #16]
 80095b2:	6923      	ldr	r3, [r4, #16]
 80095b4:	000d      	movs	r5, r1
 80095b6:	b08b      	sub	sp, #44	@ 0x2c
 80095b8:	429a      	cmp	r2, r3
 80095ba:	db02      	blt.n	80095c2 <__multiply+0x16>
 80095bc:	0023      	movs	r3, r4
 80095be:	000c      	movs	r4, r1
 80095c0:	001d      	movs	r5, r3
 80095c2:	6927      	ldr	r7, [r4, #16]
 80095c4:	692e      	ldr	r6, [r5, #16]
 80095c6:	6861      	ldr	r1, [r4, #4]
 80095c8:	19bb      	adds	r3, r7, r6
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	68a3      	ldr	r3, [r4, #8]
 80095ce:	19ba      	adds	r2, r7, r6
 80095d0:	4293      	cmp	r3, r2
 80095d2:	da00      	bge.n	80095d6 <__multiply+0x2a>
 80095d4:	3101      	adds	r1, #1
 80095d6:	f7ff fed5 	bl	8009384 <_Balloc>
 80095da:	9002      	str	r0, [sp, #8]
 80095dc:	2800      	cmp	r0, #0
 80095de:	d106      	bne.n	80095ee <__multiply+0x42>
 80095e0:	21b1      	movs	r1, #177	@ 0xb1
 80095e2:	4b49      	ldr	r3, [pc, #292]	@ (8009708 <__multiply+0x15c>)
 80095e4:	4849      	ldr	r0, [pc, #292]	@ (800970c <__multiply+0x160>)
 80095e6:	9a02      	ldr	r2, [sp, #8]
 80095e8:	0049      	lsls	r1, r1, #1
 80095ea:	f000 fca3 	bl	8009f34 <__assert_func>
 80095ee:	9b02      	ldr	r3, [sp, #8]
 80095f0:	2200      	movs	r2, #0
 80095f2:	3314      	adds	r3, #20
 80095f4:	469c      	mov	ip, r3
 80095f6:	19bb      	adds	r3, r7, r6
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4463      	add	r3, ip
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	4663      	mov	r3, ip
 8009600:	9904      	ldr	r1, [sp, #16]
 8009602:	428b      	cmp	r3, r1
 8009604:	d32a      	bcc.n	800965c <__multiply+0xb0>
 8009606:	0023      	movs	r3, r4
 8009608:	00bf      	lsls	r7, r7, #2
 800960a:	3314      	adds	r3, #20
 800960c:	3514      	adds	r5, #20
 800960e:	9308      	str	r3, [sp, #32]
 8009610:	00b6      	lsls	r6, r6, #2
 8009612:	19db      	adds	r3, r3, r7
 8009614:	9305      	str	r3, [sp, #20]
 8009616:	19ab      	adds	r3, r5, r6
 8009618:	9309      	str	r3, [sp, #36]	@ 0x24
 800961a:	2304      	movs	r3, #4
 800961c:	9306      	str	r3, [sp, #24]
 800961e:	0023      	movs	r3, r4
 8009620:	9a05      	ldr	r2, [sp, #20]
 8009622:	3315      	adds	r3, #21
 8009624:	9501      	str	r5, [sp, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d305      	bcc.n	8009636 <__multiply+0x8a>
 800962a:	1b13      	subs	r3, r2, r4
 800962c:	3b15      	subs	r3, #21
 800962e:	089b      	lsrs	r3, r3, #2
 8009630:	3301      	adds	r3, #1
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	9306      	str	r3, [sp, #24]
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800963a:	4293      	cmp	r3, r2
 800963c:	d310      	bcc.n	8009660 <__multiply+0xb4>
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	dd05      	ble.n	8009650 <__multiply+0xa4>
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	3b04      	subs	r3, #4
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d056      	beq.n	80096fe <__multiply+0x152>
 8009650:	9b02      	ldr	r3, [sp, #8]
 8009652:	9a03      	ldr	r2, [sp, #12]
 8009654:	0018      	movs	r0, r3
 8009656:	611a      	str	r2, [r3, #16]
 8009658:	b00b      	add	sp, #44	@ 0x2c
 800965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965c:	c304      	stmia	r3!, {r2}
 800965e:	e7cf      	b.n	8009600 <__multiply+0x54>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	b280      	uxth	r0, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d01e      	beq.n	80096a8 <__multiply+0xfc>
 800966a:	4667      	mov	r7, ip
 800966c:	2500      	movs	r5, #0
 800966e:	9e08      	ldr	r6, [sp, #32]
 8009670:	ce02      	ldmia	r6!, {r1}
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	9307      	str	r3, [sp, #28]
 8009676:	b28b      	uxth	r3, r1
 8009678:	4343      	muls	r3, r0
 800967a:	001a      	movs	r2, r3
 800967c:	466b      	mov	r3, sp
 800967e:	0c09      	lsrs	r1, r1, #16
 8009680:	8b9b      	ldrh	r3, [r3, #28]
 8009682:	4341      	muls	r1, r0
 8009684:	18d3      	adds	r3, r2, r3
 8009686:	9a07      	ldr	r2, [sp, #28]
 8009688:	195b      	adds	r3, r3, r5
 800968a:	0c12      	lsrs	r2, r2, #16
 800968c:	1889      	adds	r1, r1, r2
 800968e:	0c1a      	lsrs	r2, r3, #16
 8009690:	188a      	adds	r2, r1, r2
 8009692:	b29b      	uxth	r3, r3
 8009694:	0c15      	lsrs	r5, r2, #16
 8009696:	0412      	lsls	r2, r2, #16
 8009698:	431a      	orrs	r2, r3
 800969a:	9b05      	ldr	r3, [sp, #20]
 800969c:	c704      	stmia	r7!, {r2}
 800969e:	42b3      	cmp	r3, r6
 80096a0:	d8e6      	bhi.n	8009670 <__multiply+0xc4>
 80096a2:	4663      	mov	r3, ip
 80096a4:	9a06      	ldr	r2, [sp, #24]
 80096a6:	509d      	str	r5, [r3, r2]
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	0c00      	lsrs	r0, r0, #16
 80096ae:	d020      	beq.n	80096f2 <__multiply+0x146>
 80096b0:	4663      	mov	r3, ip
 80096b2:	0025      	movs	r5, r4
 80096b4:	4661      	mov	r1, ip
 80096b6:	2700      	movs	r7, #0
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3514      	adds	r5, #20
 80096bc:	682a      	ldr	r2, [r5, #0]
 80096be:	680e      	ldr	r6, [r1, #0]
 80096c0:	b292      	uxth	r2, r2
 80096c2:	4342      	muls	r2, r0
 80096c4:	0c36      	lsrs	r6, r6, #16
 80096c6:	1992      	adds	r2, r2, r6
 80096c8:	19d2      	adds	r2, r2, r7
 80096ca:	0416      	lsls	r6, r2, #16
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	431e      	orrs	r6, r3
 80096d0:	600e      	str	r6, [r1, #0]
 80096d2:	cd40      	ldmia	r5!, {r6}
 80096d4:	684b      	ldr	r3, [r1, #4]
 80096d6:	0c36      	lsrs	r6, r6, #16
 80096d8:	4346      	muls	r6, r0
 80096da:	b29b      	uxth	r3, r3
 80096dc:	0c12      	lsrs	r2, r2, #16
 80096de:	18f3      	adds	r3, r6, r3
 80096e0:	189b      	adds	r3, r3, r2
 80096e2:	9a05      	ldr	r2, [sp, #20]
 80096e4:	0c1f      	lsrs	r7, r3, #16
 80096e6:	3104      	adds	r1, #4
 80096e8:	42aa      	cmp	r2, r5
 80096ea:	d8e7      	bhi.n	80096bc <__multiply+0x110>
 80096ec:	4662      	mov	r2, ip
 80096ee:	9906      	ldr	r1, [sp, #24]
 80096f0:	5053      	str	r3, [r2, r1]
 80096f2:	9b01      	ldr	r3, [sp, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	2304      	movs	r3, #4
 80096fa:	449c      	add	ip, r3
 80096fc:	e79b      	b.n	8009636 <__multiply+0x8a>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	3b01      	subs	r3, #1
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	e79b      	b.n	800963e <__multiply+0x92>
 8009706:	46c0      	nop			@ (mov r8, r8)
 8009708:	0800b770 	.word	0x0800b770
 800970c:	0800b781 	.word	0x0800b781

08009710 <__pow5mult>:
 8009710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009712:	2303      	movs	r3, #3
 8009714:	0015      	movs	r5, r2
 8009716:	0007      	movs	r7, r0
 8009718:	000e      	movs	r6, r1
 800971a:	401a      	ands	r2, r3
 800971c:	421d      	tst	r5, r3
 800971e:	d008      	beq.n	8009732 <__pow5mult+0x22>
 8009720:	4925      	ldr	r1, [pc, #148]	@ (80097b8 <__pow5mult+0xa8>)
 8009722:	3a01      	subs	r2, #1
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	5852      	ldr	r2, [r2, r1]
 8009728:	2300      	movs	r3, #0
 800972a:	0031      	movs	r1, r6
 800972c:	f7ff fe92 	bl	8009454 <__multadd>
 8009730:	0006      	movs	r6, r0
 8009732:	10ad      	asrs	r5, r5, #2
 8009734:	d03d      	beq.n	80097b2 <__pow5mult+0xa2>
 8009736:	69fc      	ldr	r4, [r7, #28]
 8009738:	2c00      	cmp	r4, #0
 800973a:	d10f      	bne.n	800975c <__pow5mult+0x4c>
 800973c:	2010      	movs	r0, #16
 800973e:	f7ff fd65 	bl	800920c <malloc>
 8009742:	1e02      	subs	r2, r0, #0
 8009744:	61f8      	str	r0, [r7, #28]
 8009746:	d105      	bne.n	8009754 <__pow5mult+0x44>
 8009748:	21b4      	movs	r1, #180	@ 0xb4
 800974a:	4b1c      	ldr	r3, [pc, #112]	@ (80097bc <__pow5mult+0xac>)
 800974c:	481c      	ldr	r0, [pc, #112]	@ (80097c0 <__pow5mult+0xb0>)
 800974e:	31ff      	adds	r1, #255	@ 0xff
 8009750:	f000 fbf0 	bl	8009f34 <__assert_func>
 8009754:	6044      	str	r4, [r0, #4]
 8009756:	6084      	str	r4, [r0, #8]
 8009758:	6004      	str	r4, [r0, #0]
 800975a:	60c4      	str	r4, [r0, #12]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	689c      	ldr	r4, [r3, #8]
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	2c00      	cmp	r4, #0
 8009764:	d108      	bne.n	8009778 <__pow5mult+0x68>
 8009766:	0038      	movs	r0, r7
 8009768:	4916      	ldr	r1, [pc, #88]	@ (80097c4 <__pow5mult+0xb4>)
 800976a:	f7ff ff07 	bl	800957c <__i2b>
 800976e:	9b01      	ldr	r3, [sp, #4]
 8009770:	0004      	movs	r4, r0
 8009772:	6098      	str	r0, [r3, #8]
 8009774:	2300      	movs	r3, #0
 8009776:	6003      	str	r3, [r0, #0]
 8009778:	2301      	movs	r3, #1
 800977a:	421d      	tst	r5, r3
 800977c:	d00a      	beq.n	8009794 <__pow5mult+0x84>
 800977e:	0031      	movs	r1, r6
 8009780:	0022      	movs	r2, r4
 8009782:	0038      	movs	r0, r7
 8009784:	f7ff ff12 	bl	80095ac <__multiply>
 8009788:	0031      	movs	r1, r6
 800978a:	9001      	str	r0, [sp, #4]
 800978c:	0038      	movs	r0, r7
 800978e:	f7ff fe3d 	bl	800940c <_Bfree>
 8009792:	9e01      	ldr	r6, [sp, #4]
 8009794:	106d      	asrs	r5, r5, #1
 8009796:	d00c      	beq.n	80097b2 <__pow5mult+0xa2>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	2800      	cmp	r0, #0
 800979c:	d107      	bne.n	80097ae <__pow5mult+0x9e>
 800979e:	0022      	movs	r2, r4
 80097a0:	0021      	movs	r1, r4
 80097a2:	0038      	movs	r0, r7
 80097a4:	f7ff ff02 	bl	80095ac <__multiply>
 80097a8:	2300      	movs	r3, #0
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	0004      	movs	r4, r0
 80097b0:	e7e2      	b.n	8009778 <__pow5mult+0x68>
 80097b2:	0030      	movs	r0, r6
 80097b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	0800b7dc 	.word	0x0800b7dc
 80097bc:	0800b701 	.word	0x0800b701
 80097c0:	0800b781 	.word	0x0800b781
 80097c4:	00000271 	.word	0x00000271

080097c8 <__lshift>:
 80097c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ca:	000c      	movs	r4, r1
 80097cc:	0016      	movs	r6, r2
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	1157      	asrs	r7, r2, #5
 80097d2:	b085      	sub	sp, #20
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	3301      	adds	r3, #1
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	6849      	ldr	r1, [r1, #4]
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	9002      	str	r0, [sp, #8]
 80097e2:	9a00      	ldr	r2, [sp, #0]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	db10      	blt.n	800980a <__lshift+0x42>
 80097e8:	9802      	ldr	r0, [sp, #8]
 80097ea:	f7ff fdcb 	bl	8009384 <_Balloc>
 80097ee:	2300      	movs	r3, #0
 80097f0:	0001      	movs	r1, r0
 80097f2:	0005      	movs	r5, r0
 80097f4:	001a      	movs	r2, r3
 80097f6:	3114      	adds	r1, #20
 80097f8:	4298      	cmp	r0, r3
 80097fa:	d10c      	bne.n	8009816 <__lshift+0x4e>
 80097fc:	21ef      	movs	r1, #239	@ 0xef
 80097fe:	002a      	movs	r2, r5
 8009800:	4b25      	ldr	r3, [pc, #148]	@ (8009898 <__lshift+0xd0>)
 8009802:	4826      	ldr	r0, [pc, #152]	@ (800989c <__lshift+0xd4>)
 8009804:	0049      	lsls	r1, r1, #1
 8009806:	f000 fb95 	bl	8009f34 <__assert_func>
 800980a:	3101      	adds	r1, #1
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	e7e8      	b.n	80097e2 <__lshift+0x1a>
 8009810:	0098      	lsls	r0, r3, #2
 8009812:	500a      	str	r2, [r1, r0]
 8009814:	3301      	adds	r3, #1
 8009816:	42bb      	cmp	r3, r7
 8009818:	dbfa      	blt.n	8009810 <__lshift+0x48>
 800981a:	43fb      	mvns	r3, r7
 800981c:	17db      	asrs	r3, r3, #31
 800981e:	401f      	ands	r7, r3
 8009820:	00bf      	lsls	r7, r7, #2
 8009822:	0023      	movs	r3, r4
 8009824:	201f      	movs	r0, #31
 8009826:	19c9      	adds	r1, r1, r7
 8009828:	0037      	movs	r7, r6
 800982a:	6922      	ldr	r2, [r4, #16]
 800982c:	3314      	adds	r3, #20
 800982e:	0092      	lsls	r2, r2, #2
 8009830:	189a      	adds	r2, r3, r2
 8009832:	4007      	ands	r7, r0
 8009834:	4206      	tst	r6, r0
 8009836:	d029      	beq.n	800988c <__lshift+0xc4>
 8009838:	3001      	adds	r0, #1
 800983a:	1bc0      	subs	r0, r0, r7
 800983c:	9003      	str	r0, [sp, #12]
 800983e:	468c      	mov	ip, r1
 8009840:	2000      	movs	r0, #0
 8009842:	681e      	ldr	r6, [r3, #0]
 8009844:	40be      	lsls	r6, r7
 8009846:	4306      	orrs	r6, r0
 8009848:	4660      	mov	r0, ip
 800984a:	c040      	stmia	r0!, {r6}
 800984c:	4684      	mov	ip, r0
 800984e:	9e03      	ldr	r6, [sp, #12]
 8009850:	cb01      	ldmia	r3!, {r0}
 8009852:	40f0      	lsrs	r0, r6
 8009854:	429a      	cmp	r2, r3
 8009856:	d8f4      	bhi.n	8009842 <__lshift+0x7a>
 8009858:	0026      	movs	r6, r4
 800985a:	3615      	adds	r6, #21
 800985c:	2304      	movs	r3, #4
 800985e:	42b2      	cmp	r2, r6
 8009860:	d304      	bcc.n	800986c <__lshift+0xa4>
 8009862:	1b13      	subs	r3, r2, r4
 8009864:	3b15      	subs	r3, #21
 8009866:	089b      	lsrs	r3, r3, #2
 8009868:	3301      	adds	r3, #1
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	50c8      	str	r0, [r1, r3]
 800986e:	2800      	cmp	r0, #0
 8009870:	d002      	beq.n	8009878 <__lshift+0xb0>
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	3302      	adds	r3, #2
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	9b00      	ldr	r3, [sp, #0]
 800987a:	9802      	ldr	r0, [sp, #8]
 800987c:	3b01      	subs	r3, #1
 800987e:	0021      	movs	r1, r4
 8009880:	612b      	str	r3, [r5, #16]
 8009882:	f7ff fdc3 	bl	800940c <_Bfree>
 8009886:	0028      	movs	r0, r5
 8009888:	b005      	add	sp, #20
 800988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988c:	cb01      	ldmia	r3!, {r0}
 800988e:	c101      	stmia	r1!, {r0}
 8009890:	429a      	cmp	r2, r3
 8009892:	d8fb      	bhi.n	800988c <__lshift+0xc4>
 8009894:	e7f0      	b.n	8009878 <__lshift+0xb0>
 8009896:	46c0      	nop			@ (mov r8, r8)
 8009898:	0800b770 	.word	0x0800b770
 800989c:	0800b781 	.word	0x0800b781

080098a0 <__mcmp>:
 80098a0:	b530      	push	{r4, r5, lr}
 80098a2:	690b      	ldr	r3, [r1, #16]
 80098a4:	6904      	ldr	r4, [r0, #16]
 80098a6:	0002      	movs	r2, r0
 80098a8:	1ae0      	subs	r0, r4, r3
 80098aa:	429c      	cmp	r4, r3
 80098ac:	d10f      	bne.n	80098ce <__mcmp+0x2e>
 80098ae:	3214      	adds	r2, #20
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	3114      	adds	r1, #20
 80098b4:	0014      	movs	r4, r2
 80098b6:	18c9      	adds	r1, r1, r3
 80098b8:	18d2      	adds	r2, r2, r3
 80098ba:	3a04      	subs	r2, #4
 80098bc:	3904      	subs	r1, #4
 80098be:	6815      	ldr	r5, [r2, #0]
 80098c0:	680b      	ldr	r3, [r1, #0]
 80098c2:	429d      	cmp	r5, r3
 80098c4:	d004      	beq.n	80098d0 <__mcmp+0x30>
 80098c6:	2001      	movs	r0, #1
 80098c8:	429d      	cmp	r5, r3
 80098ca:	d200      	bcs.n	80098ce <__mcmp+0x2e>
 80098cc:	3802      	subs	r0, #2
 80098ce:	bd30      	pop	{r4, r5, pc}
 80098d0:	4294      	cmp	r4, r2
 80098d2:	d3f2      	bcc.n	80098ba <__mcmp+0x1a>
 80098d4:	e7fb      	b.n	80098ce <__mcmp+0x2e>
	...

080098d8 <__mdiff>:
 80098d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098da:	000c      	movs	r4, r1
 80098dc:	b087      	sub	sp, #28
 80098de:	9000      	str	r0, [sp, #0]
 80098e0:	0011      	movs	r1, r2
 80098e2:	0020      	movs	r0, r4
 80098e4:	0017      	movs	r7, r2
 80098e6:	f7ff ffdb 	bl	80098a0 <__mcmp>
 80098ea:	1e05      	subs	r5, r0, #0
 80098ec:	d110      	bne.n	8009910 <__mdiff+0x38>
 80098ee:	0001      	movs	r1, r0
 80098f0:	9800      	ldr	r0, [sp, #0]
 80098f2:	f7ff fd47 	bl	8009384 <_Balloc>
 80098f6:	1e02      	subs	r2, r0, #0
 80098f8:	d104      	bne.n	8009904 <__mdiff+0x2c>
 80098fa:	4b40      	ldr	r3, [pc, #256]	@ (80099fc <__mdiff+0x124>)
 80098fc:	4840      	ldr	r0, [pc, #256]	@ (8009a00 <__mdiff+0x128>)
 80098fe:	4941      	ldr	r1, [pc, #260]	@ (8009a04 <__mdiff+0x12c>)
 8009900:	f000 fb18 	bl	8009f34 <__assert_func>
 8009904:	2301      	movs	r3, #1
 8009906:	6145      	str	r5, [r0, #20]
 8009908:	6103      	str	r3, [r0, #16]
 800990a:	0010      	movs	r0, r2
 800990c:	b007      	add	sp, #28
 800990e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009910:	2600      	movs	r6, #0
 8009912:	42b0      	cmp	r0, r6
 8009914:	da03      	bge.n	800991e <__mdiff+0x46>
 8009916:	0023      	movs	r3, r4
 8009918:	003c      	movs	r4, r7
 800991a:	001f      	movs	r7, r3
 800991c:	3601      	adds	r6, #1
 800991e:	6861      	ldr	r1, [r4, #4]
 8009920:	9800      	ldr	r0, [sp, #0]
 8009922:	f7ff fd2f 	bl	8009384 <_Balloc>
 8009926:	1e02      	subs	r2, r0, #0
 8009928:	d103      	bne.n	8009932 <__mdiff+0x5a>
 800992a:	4b34      	ldr	r3, [pc, #208]	@ (80099fc <__mdiff+0x124>)
 800992c:	4834      	ldr	r0, [pc, #208]	@ (8009a00 <__mdiff+0x128>)
 800992e:	4936      	ldr	r1, [pc, #216]	@ (8009a08 <__mdiff+0x130>)
 8009930:	e7e6      	b.n	8009900 <__mdiff+0x28>
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	3414      	adds	r4, #20
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	18e3      	adds	r3, r4, r3
 800993c:	0021      	movs	r1, r4
 800993e:	9401      	str	r4, [sp, #4]
 8009940:	003c      	movs	r4, r7
 8009942:	9302      	str	r3, [sp, #8]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3414      	adds	r4, #20
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	18e3      	adds	r3, r4, r3
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	0003      	movs	r3, r0
 8009950:	60c6      	str	r6, [r0, #12]
 8009952:	468c      	mov	ip, r1
 8009954:	2000      	movs	r0, #0
 8009956:	3314      	adds	r3, #20
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	9305      	str	r3, [sp, #20]
 800995c:	4663      	mov	r3, ip
 800995e:	cb20      	ldmia	r3!, {r5}
 8009960:	b2a9      	uxth	r1, r5
 8009962:	000e      	movs	r6, r1
 8009964:	469c      	mov	ip, r3
 8009966:	cc08      	ldmia	r4!, {r3}
 8009968:	0c2d      	lsrs	r5, r5, #16
 800996a:	b299      	uxth	r1, r3
 800996c:	1a71      	subs	r1, r6, r1
 800996e:	1809      	adds	r1, r1, r0
 8009970:	0c1b      	lsrs	r3, r3, #16
 8009972:	1408      	asrs	r0, r1, #16
 8009974:	1aeb      	subs	r3, r5, r3
 8009976:	181b      	adds	r3, r3, r0
 8009978:	1418      	asrs	r0, r3, #16
 800997a:	b289      	uxth	r1, r1
 800997c:	041b      	lsls	r3, r3, #16
 800997e:	4319      	orrs	r1, r3
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	c302      	stmia	r3!, {r1}
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	42a3      	cmp	r3, r4
 800998a:	d8e7      	bhi.n	800995c <__mdiff+0x84>
 800998c:	0039      	movs	r1, r7
 800998e:	9c03      	ldr	r4, [sp, #12]
 8009990:	3115      	adds	r1, #21
 8009992:	2304      	movs	r3, #4
 8009994:	428c      	cmp	r4, r1
 8009996:	d304      	bcc.n	80099a2 <__mdiff+0xca>
 8009998:	1be3      	subs	r3, r4, r7
 800999a:	3b15      	subs	r3, #21
 800999c:	089b      	lsrs	r3, r3, #2
 800999e:	3301      	adds	r3, #1
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	9901      	ldr	r1, [sp, #4]
 80099a4:	18cd      	adds	r5, r1, r3
 80099a6:	9904      	ldr	r1, [sp, #16]
 80099a8:	002e      	movs	r6, r5
 80099aa:	18cb      	adds	r3, r1, r3
 80099ac:	001f      	movs	r7, r3
 80099ae:	9902      	ldr	r1, [sp, #8]
 80099b0:	428e      	cmp	r6, r1
 80099b2:	d311      	bcc.n	80099d8 <__mdiff+0x100>
 80099b4:	9c02      	ldr	r4, [sp, #8]
 80099b6:	1ee9      	subs	r1, r5, #3
 80099b8:	2000      	movs	r0, #0
 80099ba:	428c      	cmp	r4, r1
 80099bc:	d304      	bcc.n	80099c8 <__mdiff+0xf0>
 80099be:	0021      	movs	r1, r4
 80099c0:	3103      	adds	r1, #3
 80099c2:	1b49      	subs	r1, r1, r5
 80099c4:	0889      	lsrs	r1, r1, #2
 80099c6:	0088      	lsls	r0, r1, #2
 80099c8:	181b      	adds	r3, r3, r0
 80099ca:	3b04      	subs	r3, #4
 80099cc:	6819      	ldr	r1, [r3, #0]
 80099ce:	2900      	cmp	r1, #0
 80099d0:	d010      	beq.n	80099f4 <__mdiff+0x11c>
 80099d2:	9b00      	ldr	r3, [sp, #0]
 80099d4:	6113      	str	r3, [r2, #16]
 80099d6:	e798      	b.n	800990a <__mdiff+0x32>
 80099d8:	4684      	mov	ip, r0
 80099da:	ce02      	ldmia	r6!, {r1}
 80099dc:	b288      	uxth	r0, r1
 80099de:	4460      	add	r0, ip
 80099e0:	1400      	asrs	r0, r0, #16
 80099e2:	0c0c      	lsrs	r4, r1, #16
 80099e4:	1904      	adds	r4, r0, r4
 80099e6:	4461      	add	r1, ip
 80099e8:	1420      	asrs	r0, r4, #16
 80099ea:	b289      	uxth	r1, r1
 80099ec:	0424      	lsls	r4, r4, #16
 80099ee:	4321      	orrs	r1, r4
 80099f0:	c702      	stmia	r7!, {r1}
 80099f2:	e7dc      	b.n	80099ae <__mdiff+0xd6>
 80099f4:	9900      	ldr	r1, [sp, #0]
 80099f6:	3901      	subs	r1, #1
 80099f8:	9100      	str	r1, [sp, #0]
 80099fa:	e7e6      	b.n	80099ca <__mdiff+0xf2>
 80099fc:	0800b770 	.word	0x0800b770
 8009a00:	0800b781 	.word	0x0800b781
 8009a04:	00000237 	.word	0x00000237
 8009a08:	00000245 	.word	0x00000245

08009a0c <__d2b>:
 8009a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a0e:	2101      	movs	r1, #1
 8009a10:	0016      	movs	r6, r2
 8009a12:	001f      	movs	r7, r3
 8009a14:	f7ff fcb6 	bl	8009384 <_Balloc>
 8009a18:	1e04      	subs	r4, r0, #0
 8009a1a:	d105      	bne.n	8009a28 <__d2b+0x1c>
 8009a1c:	0022      	movs	r2, r4
 8009a1e:	4b25      	ldr	r3, [pc, #148]	@ (8009ab4 <__d2b+0xa8>)
 8009a20:	4825      	ldr	r0, [pc, #148]	@ (8009ab8 <__d2b+0xac>)
 8009a22:	4926      	ldr	r1, [pc, #152]	@ (8009abc <__d2b+0xb0>)
 8009a24:	f000 fa86 	bl	8009f34 <__assert_func>
 8009a28:	033b      	lsls	r3, r7, #12
 8009a2a:	007d      	lsls	r5, r7, #1
 8009a2c:	0b1b      	lsrs	r3, r3, #12
 8009a2e:	0d6d      	lsrs	r5, r5, #21
 8009a30:	d002      	beq.n	8009a38 <__d2b+0x2c>
 8009a32:	2280      	movs	r2, #128	@ 0x80
 8009a34:	0352      	lsls	r2, r2, #13
 8009a36:	4313      	orrs	r3, r2
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d025      	beq.n	8009a8a <__d2b+0x7e>
 8009a3e:	4668      	mov	r0, sp
 8009a40:	9600      	str	r6, [sp, #0]
 8009a42:	f7ff fd6c 	bl	800951e <__lo0bits>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	9900      	ldr	r1, [sp, #0]
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d01b      	beq.n	8009a86 <__d2b+0x7a>
 8009a4e:	2220      	movs	r2, #32
 8009a50:	001e      	movs	r6, r3
 8009a52:	1a12      	subs	r2, r2, r0
 8009a54:	4096      	lsls	r6, r2
 8009a56:	0032      	movs	r2, r6
 8009a58:	40c3      	lsrs	r3, r0
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	6162      	str	r2, [r4, #20]
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	9e01      	ldr	r6, [sp, #4]
 8009a62:	61a6      	str	r6, [r4, #24]
 8009a64:	1e73      	subs	r3, r6, #1
 8009a66:	419e      	sbcs	r6, r3
 8009a68:	3601      	adds	r6, #1
 8009a6a:	6126      	str	r6, [r4, #16]
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	d014      	beq.n	8009a9a <__d2b+0x8e>
 8009a70:	2635      	movs	r6, #53	@ 0x35
 8009a72:	4b13      	ldr	r3, [pc, #76]	@ (8009ac0 <__d2b+0xb4>)
 8009a74:	18ed      	adds	r5, r5, r3
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	182d      	adds	r5, r5, r0
 8009a7a:	601d      	str	r5, [r3, #0]
 8009a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7e:	1a36      	subs	r6, r6, r0
 8009a80:	601e      	str	r6, [r3, #0]
 8009a82:	0020      	movs	r0, r4
 8009a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a86:	6161      	str	r1, [r4, #20]
 8009a88:	e7ea      	b.n	8009a60 <__d2b+0x54>
 8009a8a:	a801      	add	r0, sp, #4
 8009a8c:	f7ff fd47 	bl	800951e <__lo0bits>
 8009a90:	9b01      	ldr	r3, [sp, #4]
 8009a92:	2601      	movs	r6, #1
 8009a94:	6163      	str	r3, [r4, #20]
 8009a96:	3020      	adds	r0, #32
 8009a98:	e7e7      	b.n	8009a6a <__d2b+0x5e>
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <__d2b+0xb8>)
 8009a9c:	18c0      	adds	r0, r0, r3
 8009a9e:	9b08      	ldr	r3, [sp, #32]
 8009aa0:	6018      	str	r0, [r3, #0]
 8009aa2:	4b09      	ldr	r3, [pc, #36]	@ (8009ac8 <__d2b+0xbc>)
 8009aa4:	18f3      	adds	r3, r6, r3
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	18e3      	adds	r3, r4, r3
 8009aaa:	6958      	ldr	r0, [r3, #20]
 8009aac:	f7ff fd16 	bl	80094dc <__hi0bits>
 8009ab0:	0176      	lsls	r6, r6, #5
 8009ab2:	e7e3      	b.n	8009a7c <__d2b+0x70>
 8009ab4:	0800b770 	.word	0x0800b770
 8009ab8:	0800b781 	.word	0x0800b781
 8009abc:	0000030f 	.word	0x0000030f
 8009ac0:	fffffbcd 	.word	0xfffffbcd
 8009ac4:	fffffbce 	.word	0xfffffbce
 8009ac8:	3fffffff 	.word	0x3fffffff

08009acc <__ssputs_r>:
 8009acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ace:	688e      	ldr	r6, [r1, #8]
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	001f      	movs	r7, r3
 8009ad4:	000c      	movs	r4, r1
 8009ad6:	680b      	ldr	r3, [r1, #0]
 8009ad8:	9002      	str	r0, [sp, #8]
 8009ada:	9203      	str	r2, [sp, #12]
 8009adc:	42be      	cmp	r6, r7
 8009ade:	d830      	bhi.n	8009b42 <__ssputs_r+0x76>
 8009ae0:	210c      	movs	r1, #12
 8009ae2:	5e62      	ldrsh	r2, [r4, r1]
 8009ae4:	2190      	movs	r1, #144	@ 0x90
 8009ae6:	00c9      	lsls	r1, r1, #3
 8009ae8:	420a      	tst	r2, r1
 8009aea:	d028      	beq.n	8009b3e <__ssputs_r+0x72>
 8009aec:	2003      	movs	r0, #3
 8009aee:	6921      	ldr	r1, [r4, #16]
 8009af0:	1a5b      	subs	r3, r3, r1
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	6963      	ldr	r3, [r4, #20]
 8009af6:	4343      	muls	r3, r0
 8009af8:	9801      	ldr	r0, [sp, #4]
 8009afa:	0fdd      	lsrs	r5, r3, #31
 8009afc:	18ed      	adds	r5, r5, r3
 8009afe:	1c7b      	adds	r3, r7, #1
 8009b00:	181b      	adds	r3, r3, r0
 8009b02:	106d      	asrs	r5, r5, #1
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	d900      	bls.n	8009b0a <__ssputs_r+0x3e>
 8009b08:	001d      	movs	r5, r3
 8009b0a:	0552      	lsls	r2, r2, #21
 8009b0c:	d528      	bpl.n	8009b60 <__ssputs_r+0x94>
 8009b0e:	0029      	movs	r1, r5
 8009b10:	9802      	ldr	r0, [sp, #8]
 8009b12:	f7ff fba7 	bl	8009264 <_malloc_r>
 8009b16:	1e06      	subs	r6, r0, #0
 8009b18:	d02c      	beq.n	8009b74 <__ssputs_r+0xa8>
 8009b1a:	9a01      	ldr	r2, [sp, #4]
 8009b1c:	6921      	ldr	r1, [r4, #16]
 8009b1e:	f7fe fc9f 	bl	8008460 <memcpy>
 8009b22:	89a2      	ldrh	r2, [r4, #12]
 8009b24:	4b18      	ldr	r3, [pc, #96]	@ (8009b88 <__ssputs_r+0xbc>)
 8009b26:	401a      	ands	r2, r3
 8009b28:	2380      	movs	r3, #128	@ 0x80
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	9b01      	ldr	r3, [sp, #4]
 8009b30:	6126      	str	r6, [r4, #16]
 8009b32:	18f6      	adds	r6, r6, r3
 8009b34:	6026      	str	r6, [r4, #0]
 8009b36:	003e      	movs	r6, r7
 8009b38:	6165      	str	r5, [r4, #20]
 8009b3a:	1aed      	subs	r5, r5, r3
 8009b3c:	60a5      	str	r5, [r4, #8]
 8009b3e:	42be      	cmp	r6, r7
 8009b40:	d900      	bls.n	8009b44 <__ssputs_r+0x78>
 8009b42:	003e      	movs	r6, r7
 8009b44:	0032      	movs	r2, r6
 8009b46:	9903      	ldr	r1, [sp, #12]
 8009b48:	6820      	ldr	r0, [r4, #0]
 8009b4a:	f000 f9ce 	bl	8009eea <memmove>
 8009b4e:	2000      	movs	r0, #0
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	1b9b      	subs	r3, r3, r6
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	199b      	adds	r3, r3, r6
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	b005      	add	sp, #20
 8009b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b60:	002a      	movs	r2, r5
 8009b62:	9802      	ldr	r0, [sp, #8]
 8009b64:	f000 fa43 	bl	8009fee <_realloc_r>
 8009b68:	1e06      	subs	r6, r0, #0
 8009b6a:	d1e0      	bne.n	8009b2e <__ssputs_r+0x62>
 8009b6c:	6921      	ldr	r1, [r4, #16]
 8009b6e:	9802      	ldr	r0, [sp, #8]
 8009b70:	f7ff fb02 	bl	8009178 <_free_r>
 8009b74:	230c      	movs	r3, #12
 8009b76:	2001      	movs	r0, #1
 8009b78:	9a02      	ldr	r2, [sp, #8]
 8009b7a:	4240      	negs	r0, r0
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	89a2      	ldrh	r2, [r4, #12]
 8009b80:	3334      	adds	r3, #52	@ 0x34
 8009b82:	4313      	orrs	r3, r2
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	e7e9      	b.n	8009b5c <__ssputs_r+0x90>
 8009b88:	fffffb7f 	.word	0xfffffb7f

08009b8c <_svfiprintf_r>:
 8009b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8e:	b0a1      	sub	sp, #132	@ 0x84
 8009b90:	9003      	str	r0, [sp, #12]
 8009b92:	001d      	movs	r5, r3
 8009b94:	898b      	ldrh	r3, [r1, #12]
 8009b96:	000f      	movs	r7, r1
 8009b98:	0016      	movs	r6, r2
 8009b9a:	061b      	lsls	r3, r3, #24
 8009b9c:	d511      	bpl.n	8009bc2 <_svfiprintf_r+0x36>
 8009b9e:	690b      	ldr	r3, [r1, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10e      	bne.n	8009bc2 <_svfiprintf_r+0x36>
 8009ba4:	2140      	movs	r1, #64	@ 0x40
 8009ba6:	f7ff fb5d 	bl	8009264 <_malloc_r>
 8009baa:	6038      	str	r0, [r7, #0]
 8009bac:	6138      	str	r0, [r7, #16]
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d105      	bne.n	8009bbe <_svfiprintf_r+0x32>
 8009bb2:	230c      	movs	r3, #12
 8009bb4:	9a03      	ldr	r2, [sp, #12]
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	2001      	movs	r0, #1
 8009bba:	4240      	negs	r0, r0
 8009bbc:	e0cf      	b.n	8009d5e <_svfiprintf_r+0x1d2>
 8009bbe:	2340      	movs	r3, #64	@ 0x40
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	ac08      	add	r4, sp, #32
 8009bc6:	6163      	str	r3, [r4, #20]
 8009bc8:	3320      	adds	r3, #32
 8009bca:	7663      	strb	r3, [r4, #25]
 8009bcc:	3310      	adds	r3, #16
 8009bce:	76a3      	strb	r3, [r4, #26]
 8009bd0:	9507      	str	r5, [sp, #28]
 8009bd2:	0035      	movs	r5, r6
 8009bd4:	782b      	ldrb	r3, [r5, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <_svfiprintf_r+0x52>
 8009bda:	2b25      	cmp	r3, #37	@ 0x25
 8009bdc:	d148      	bne.n	8009c70 <_svfiprintf_r+0xe4>
 8009bde:	1bab      	subs	r3, r5, r6
 8009be0:	9305      	str	r3, [sp, #20]
 8009be2:	42b5      	cmp	r5, r6
 8009be4:	d00b      	beq.n	8009bfe <_svfiprintf_r+0x72>
 8009be6:	0032      	movs	r2, r6
 8009be8:	0039      	movs	r1, r7
 8009bea:	9803      	ldr	r0, [sp, #12]
 8009bec:	f7ff ff6e 	bl	8009acc <__ssputs_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d100      	bne.n	8009bf6 <_svfiprintf_r+0x6a>
 8009bf4:	e0ae      	b.n	8009d54 <_svfiprintf_r+0x1c8>
 8009bf6:	6963      	ldr	r3, [r4, #20]
 8009bf8:	9a05      	ldr	r2, [sp, #20]
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	782b      	ldrb	r3, [r5, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d100      	bne.n	8009c06 <_svfiprintf_r+0x7a>
 8009c04:	e0a6      	b.n	8009d54 <_svfiprintf_r+0x1c8>
 8009c06:	2201      	movs	r2, #1
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4252      	negs	r2, r2
 8009c0c:	6062      	str	r2, [r4, #4]
 8009c0e:	a904      	add	r1, sp, #16
 8009c10:	3254      	adds	r2, #84	@ 0x54
 8009c12:	1852      	adds	r2, r2, r1
 8009c14:	1c6e      	adds	r6, r5, #1
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	60e3      	str	r3, [r4, #12]
 8009c1a:	60a3      	str	r3, [r4, #8]
 8009c1c:	7013      	strb	r3, [r2, #0]
 8009c1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009c20:	4b54      	ldr	r3, [pc, #336]	@ (8009d74 <_svfiprintf_r+0x1e8>)
 8009c22:	2205      	movs	r2, #5
 8009c24:	0018      	movs	r0, r3
 8009c26:	7831      	ldrb	r1, [r6, #0]
 8009c28:	9305      	str	r3, [sp, #20]
 8009c2a:	f7fe fc0e 	bl	800844a <memchr>
 8009c2e:	1c75      	adds	r5, r6, #1
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d11f      	bne.n	8009c74 <_svfiprintf_r+0xe8>
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	06d3      	lsls	r3, r2, #27
 8009c38:	d504      	bpl.n	8009c44 <_svfiprintf_r+0xb8>
 8009c3a:	2353      	movs	r3, #83	@ 0x53
 8009c3c:	a904      	add	r1, sp, #16
 8009c3e:	185b      	adds	r3, r3, r1
 8009c40:	2120      	movs	r1, #32
 8009c42:	7019      	strb	r1, [r3, #0]
 8009c44:	0713      	lsls	r3, r2, #28
 8009c46:	d504      	bpl.n	8009c52 <_svfiprintf_r+0xc6>
 8009c48:	2353      	movs	r3, #83	@ 0x53
 8009c4a:	a904      	add	r1, sp, #16
 8009c4c:	185b      	adds	r3, r3, r1
 8009c4e:	212b      	movs	r1, #43	@ 0x2b
 8009c50:	7019      	strb	r1, [r3, #0]
 8009c52:	7833      	ldrb	r3, [r6, #0]
 8009c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c56:	d016      	beq.n	8009c86 <_svfiprintf_r+0xfa>
 8009c58:	0035      	movs	r5, r6
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	200a      	movs	r0, #10
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	782a      	ldrb	r2, [r5, #0]
 8009c62:	1c6e      	adds	r6, r5, #1
 8009c64:	3a30      	subs	r2, #48	@ 0x30
 8009c66:	2a09      	cmp	r2, #9
 8009c68:	d950      	bls.n	8009d0c <_svfiprintf_r+0x180>
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	d111      	bne.n	8009c92 <_svfiprintf_r+0x106>
 8009c6e:	e017      	b.n	8009ca0 <_svfiprintf_r+0x114>
 8009c70:	3501      	adds	r5, #1
 8009c72:	e7af      	b.n	8009bd4 <_svfiprintf_r+0x48>
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	6822      	ldr	r2, [r4, #0]
 8009c78:	1ac0      	subs	r0, r0, r3
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4083      	lsls	r3, r0
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	002e      	movs	r6, r5
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	e7cc      	b.n	8009c20 <_svfiprintf_r+0x94>
 8009c86:	9b07      	ldr	r3, [sp, #28]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	9107      	str	r1, [sp, #28]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	db01      	blt.n	8009c96 <_svfiprintf_r+0x10a>
 8009c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c94:	e004      	b.n	8009ca0 <_svfiprintf_r+0x114>
 8009c96:	425b      	negs	r3, r3
 8009c98:	60e3      	str	r3, [r4, #12]
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	782b      	ldrb	r3, [r5, #0]
 8009ca2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ca4:	d10c      	bne.n	8009cc0 <_svfiprintf_r+0x134>
 8009ca6:	786b      	ldrb	r3, [r5, #1]
 8009ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009caa:	d134      	bne.n	8009d16 <_svfiprintf_r+0x18a>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	3502      	adds	r5, #2
 8009cb0:	1d1a      	adds	r2, r3, #4
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	9207      	str	r2, [sp, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	da01      	bge.n	8009cbe <_svfiprintf_r+0x132>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	425b      	negs	r3, r3
 8009cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc0:	4e2d      	ldr	r6, [pc, #180]	@ (8009d78 <_svfiprintf_r+0x1ec>)
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	0030      	movs	r0, r6
 8009cc6:	7829      	ldrb	r1, [r5, #0]
 8009cc8:	f7fe fbbf 	bl	800844a <memchr>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d006      	beq.n	8009cde <_svfiprintf_r+0x152>
 8009cd0:	2340      	movs	r3, #64	@ 0x40
 8009cd2:	1b80      	subs	r0, r0, r6
 8009cd4:	4083      	lsls	r3, r0
 8009cd6:	6822      	ldr	r2, [r4, #0]
 8009cd8:	3501      	adds	r5, #1
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	7829      	ldrb	r1, [r5, #0]
 8009ce0:	2206      	movs	r2, #6
 8009ce2:	4826      	ldr	r0, [pc, #152]	@ (8009d7c <_svfiprintf_r+0x1f0>)
 8009ce4:	1c6e      	adds	r6, r5, #1
 8009ce6:	7621      	strb	r1, [r4, #24]
 8009ce8:	f7fe fbaf 	bl	800844a <memchr>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d038      	beq.n	8009d62 <_svfiprintf_r+0x1d6>
 8009cf0:	4b23      	ldr	r3, [pc, #140]	@ (8009d80 <_svfiprintf_r+0x1f4>)
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d122      	bne.n	8009d3c <_svfiprintf_r+0x1b0>
 8009cf6:	2207      	movs	r2, #7
 8009cf8:	9b07      	ldr	r3, [sp, #28]
 8009cfa:	3307      	adds	r3, #7
 8009cfc:	4393      	bics	r3, r2
 8009cfe:	3308      	adds	r3, #8
 8009d00:	9307      	str	r3, [sp, #28]
 8009d02:	6963      	ldr	r3, [r4, #20]
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	189b      	adds	r3, r3, r2
 8009d08:	6163      	str	r3, [r4, #20]
 8009d0a:	e762      	b.n	8009bd2 <_svfiprintf_r+0x46>
 8009d0c:	4343      	muls	r3, r0
 8009d0e:	0035      	movs	r5, r6
 8009d10:	2101      	movs	r1, #1
 8009d12:	189b      	adds	r3, r3, r2
 8009d14:	e7a4      	b.n	8009c60 <_svfiprintf_r+0xd4>
 8009d16:	2300      	movs	r3, #0
 8009d18:	200a      	movs	r0, #10
 8009d1a:	0019      	movs	r1, r3
 8009d1c:	3501      	adds	r5, #1
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	782a      	ldrb	r2, [r5, #0]
 8009d22:	1c6e      	adds	r6, r5, #1
 8009d24:	3a30      	subs	r2, #48	@ 0x30
 8009d26:	2a09      	cmp	r2, #9
 8009d28:	d903      	bls.n	8009d32 <_svfiprintf_r+0x1a6>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0c8      	beq.n	8009cc0 <_svfiprintf_r+0x134>
 8009d2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d30:	e7c6      	b.n	8009cc0 <_svfiprintf_r+0x134>
 8009d32:	4341      	muls	r1, r0
 8009d34:	0035      	movs	r5, r6
 8009d36:	2301      	movs	r3, #1
 8009d38:	1889      	adds	r1, r1, r2
 8009d3a:	e7f1      	b.n	8009d20 <_svfiprintf_r+0x194>
 8009d3c:	aa07      	add	r2, sp, #28
 8009d3e:	9200      	str	r2, [sp, #0]
 8009d40:	0021      	movs	r1, r4
 8009d42:	003a      	movs	r2, r7
 8009d44:	4b0f      	ldr	r3, [pc, #60]	@ (8009d84 <_svfiprintf_r+0x1f8>)
 8009d46:	9803      	ldr	r0, [sp, #12]
 8009d48:	f7fd fe04 	bl	8007954 <_printf_float>
 8009d4c:	9004      	str	r0, [sp, #16]
 8009d4e:	9b04      	ldr	r3, [sp, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	d1d6      	bne.n	8009d02 <_svfiprintf_r+0x176>
 8009d54:	89bb      	ldrh	r3, [r7, #12]
 8009d56:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009d58:	065b      	lsls	r3, r3, #25
 8009d5a:	d500      	bpl.n	8009d5e <_svfiprintf_r+0x1d2>
 8009d5c:	e72c      	b.n	8009bb8 <_svfiprintf_r+0x2c>
 8009d5e:	b021      	add	sp, #132	@ 0x84
 8009d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d62:	aa07      	add	r2, sp, #28
 8009d64:	9200      	str	r2, [sp, #0]
 8009d66:	0021      	movs	r1, r4
 8009d68:	003a      	movs	r2, r7
 8009d6a:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <_svfiprintf_r+0x1f8>)
 8009d6c:	9803      	ldr	r0, [sp, #12]
 8009d6e:	f7fe f89f 	bl	8007eb0 <_printf_i>
 8009d72:	e7eb      	b.n	8009d4c <_svfiprintf_r+0x1c0>
 8009d74:	0800b8d8 	.word	0x0800b8d8
 8009d78:	0800b8de 	.word	0x0800b8de
 8009d7c:	0800b8e2 	.word	0x0800b8e2
 8009d80:	08007955 	.word	0x08007955
 8009d84:	08009acd 	.word	0x08009acd

08009d88 <__sflush_r>:
 8009d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d8a:	220c      	movs	r2, #12
 8009d8c:	5e8b      	ldrsh	r3, [r1, r2]
 8009d8e:	0005      	movs	r5, r0
 8009d90:	000c      	movs	r4, r1
 8009d92:	071a      	lsls	r2, r3, #28
 8009d94:	d456      	bmi.n	8009e44 <__sflush_r+0xbc>
 8009d96:	684a      	ldr	r2, [r1, #4]
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	dc02      	bgt.n	8009da2 <__sflush_r+0x1a>
 8009d9c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	dd4e      	ble.n	8009e40 <__sflush_r+0xb8>
 8009da2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	d04b      	beq.n	8009e40 <__sflush_r+0xb8>
 8009da8:	2200      	movs	r2, #0
 8009daa:	2080      	movs	r0, #128	@ 0x80
 8009dac:	682e      	ldr	r6, [r5, #0]
 8009dae:	602a      	str	r2, [r5, #0]
 8009db0:	001a      	movs	r2, r3
 8009db2:	0140      	lsls	r0, r0, #5
 8009db4:	6a21      	ldr	r1, [r4, #32]
 8009db6:	4002      	ands	r2, r0
 8009db8:	4203      	tst	r3, r0
 8009dba:	d033      	beq.n	8009e24 <__sflush_r+0x9c>
 8009dbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	075b      	lsls	r3, r3, #29
 8009dc2:	d506      	bpl.n	8009dd2 <__sflush_r+0x4a>
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	1ad2      	subs	r2, r2, r3
 8009dc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <__sflush_r+0x4a>
 8009dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009dd0:	1ad2      	subs	r2, r2, r3
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	0028      	movs	r0, r5
 8009dd6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009dd8:	6a21      	ldr	r1, [r4, #32]
 8009dda:	47b8      	blx	r7
 8009ddc:	89a2      	ldrh	r2, [r4, #12]
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d106      	bne.n	8009df0 <__sflush_r+0x68>
 8009de2:	6829      	ldr	r1, [r5, #0]
 8009de4:	291d      	cmp	r1, #29
 8009de6:	d846      	bhi.n	8009e76 <__sflush_r+0xee>
 8009de8:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <__sflush_r+0x108>)
 8009dea:	410b      	asrs	r3, r1
 8009dec:	07db      	lsls	r3, r3, #31
 8009dee:	d442      	bmi.n	8009e76 <__sflush_r+0xee>
 8009df0:	2300      	movs	r3, #0
 8009df2:	6063      	str	r3, [r4, #4]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	04d2      	lsls	r2, r2, #19
 8009dfa:	d505      	bpl.n	8009e08 <__sflush_r+0x80>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <__sflush_r+0x7e>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d100      	bne.n	8009e08 <__sflush_r+0x80>
 8009e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e0a:	602e      	str	r6, [r5, #0]
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d017      	beq.n	8009e40 <__sflush_r+0xb8>
 8009e10:	0023      	movs	r3, r4
 8009e12:	3344      	adds	r3, #68	@ 0x44
 8009e14:	4299      	cmp	r1, r3
 8009e16:	d002      	beq.n	8009e1e <__sflush_r+0x96>
 8009e18:	0028      	movs	r0, r5
 8009e1a:	f7ff f9ad 	bl	8009178 <_free_r>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e22:	e00d      	b.n	8009e40 <__sflush_r+0xb8>
 8009e24:	2301      	movs	r3, #1
 8009e26:	0028      	movs	r0, r5
 8009e28:	47b8      	blx	r7
 8009e2a:	0002      	movs	r2, r0
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d1c6      	bne.n	8009dbe <__sflush_r+0x36>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0c3      	beq.n	8009dbe <__sflush_r+0x36>
 8009e36:	2b1d      	cmp	r3, #29
 8009e38:	d001      	beq.n	8009e3e <__sflush_r+0xb6>
 8009e3a:	2b16      	cmp	r3, #22
 8009e3c:	d11a      	bne.n	8009e74 <__sflush_r+0xec>
 8009e3e:	602e      	str	r6, [r5, #0]
 8009e40:	2000      	movs	r0, #0
 8009e42:	e01e      	b.n	8009e82 <__sflush_r+0xfa>
 8009e44:	690e      	ldr	r6, [r1, #16]
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d0fa      	beq.n	8009e40 <__sflush_r+0xb8>
 8009e4a:	680f      	ldr	r7, [r1, #0]
 8009e4c:	600e      	str	r6, [r1, #0]
 8009e4e:	1bba      	subs	r2, r7, r6
 8009e50:	9201      	str	r2, [sp, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	079b      	lsls	r3, r3, #30
 8009e56:	d100      	bne.n	8009e5a <__sflush_r+0xd2>
 8009e58:	694a      	ldr	r2, [r1, #20]
 8009e5a:	60a2      	str	r2, [r4, #8]
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	ddee      	ble.n	8009e40 <__sflush_r+0xb8>
 8009e62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009e64:	0032      	movs	r2, r6
 8009e66:	001f      	movs	r7, r3
 8009e68:	0028      	movs	r0, r5
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	47b8      	blx	r7
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dc07      	bgt.n	8009e84 <__sflush_r+0xfc>
 8009e74:	89a2      	ldrh	r2, [r4, #12]
 8009e76:	2340      	movs	r3, #64	@ 0x40
 8009e78:	2001      	movs	r0, #1
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	b21b      	sxth	r3, r3
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	4240      	negs	r0, r0
 8009e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	1836      	adds	r6, r6, r0
 8009e88:	1a1b      	subs	r3, r3, r0
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	e7e6      	b.n	8009e5c <__sflush_r+0xd4>
 8009e8e:	46c0      	nop			@ (mov r8, r8)
 8009e90:	dfbffffe 	.word	0xdfbffffe

08009e94 <_fflush_r>:
 8009e94:	690b      	ldr	r3, [r1, #16]
 8009e96:	b570      	push	{r4, r5, r6, lr}
 8009e98:	0005      	movs	r5, r0
 8009e9a:	000c      	movs	r4, r1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <_fflush_r+0x12>
 8009ea0:	2500      	movs	r5, #0
 8009ea2:	0028      	movs	r0, r5
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d004      	beq.n	8009eb4 <_fflush_r+0x20>
 8009eaa:	6a03      	ldr	r3, [r0, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <_fflush_r+0x20>
 8009eb0:	f7fe f99c 	bl	80081ec <__sinit>
 8009eb4:	220c      	movs	r2, #12
 8009eb6:	5ea3      	ldrsh	r3, [r4, r2]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f1      	beq.n	8009ea0 <_fflush_r+0xc>
 8009ebc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ebe:	07d2      	lsls	r2, r2, #31
 8009ec0:	d404      	bmi.n	8009ecc <_fflush_r+0x38>
 8009ec2:	059b      	lsls	r3, r3, #22
 8009ec4:	d402      	bmi.n	8009ecc <_fflush_r+0x38>
 8009ec6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ec8:	f7fe fab5 	bl	8008436 <__retarget_lock_acquire_recursive>
 8009ecc:	0028      	movs	r0, r5
 8009ece:	0021      	movs	r1, r4
 8009ed0:	f7ff ff5a 	bl	8009d88 <__sflush_r>
 8009ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ed6:	0005      	movs	r5, r0
 8009ed8:	07db      	lsls	r3, r3, #31
 8009eda:	d4e2      	bmi.n	8009ea2 <_fflush_r+0xe>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	059b      	lsls	r3, r3, #22
 8009ee0:	d4df      	bmi.n	8009ea2 <_fflush_r+0xe>
 8009ee2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ee4:	f7fe faa8 	bl	8008438 <__retarget_lock_release_recursive>
 8009ee8:	e7db      	b.n	8009ea2 <_fflush_r+0xe>

08009eea <memmove>:
 8009eea:	b510      	push	{r4, lr}
 8009eec:	4288      	cmp	r0, r1
 8009eee:	d806      	bhi.n	8009efe <memmove+0x14>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d008      	beq.n	8009f08 <memmove+0x1e>
 8009ef6:	5ccc      	ldrb	r4, [r1, r3]
 8009ef8:	54c4      	strb	r4, [r0, r3]
 8009efa:	3301      	adds	r3, #1
 8009efc:	e7f9      	b.n	8009ef2 <memmove+0x8>
 8009efe:	188b      	adds	r3, r1, r2
 8009f00:	4298      	cmp	r0, r3
 8009f02:	d2f5      	bcs.n	8009ef0 <memmove+0x6>
 8009f04:	3a01      	subs	r2, #1
 8009f06:	d200      	bcs.n	8009f0a <memmove+0x20>
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	5c8b      	ldrb	r3, [r1, r2]
 8009f0c:	5483      	strb	r3, [r0, r2]
 8009f0e:	e7f9      	b.n	8009f04 <memmove+0x1a>

08009f10 <_sbrk_r>:
 8009f10:	2300      	movs	r3, #0
 8009f12:	b570      	push	{r4, r5, r6, lr}
 8009f14:	4d06      	ldr	r5, [pc, #24]	@ (8009f30 <_sbrk_r+0x20>)
 8009f16:	0004      	movs	r4, r0
 8009f18:	0008      	movs	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7fa fb0c 	bl	8004538 <_sbrk>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d103      	bne.n	8009f2c <_sbrk_r+0x1c>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d000      	beq.n	8009f2c <_sbrk_r+0x1c>
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	bd70      	pop	{r4, r5, r6, pc}
 8009f2e:	46c0      	nop			@ (mov r8, r8)
 8009f30:	200006ac 	.word	0x200006ac

08009f34 <__assert_func>:
 8009f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f36:	0014      	movs	r4, r2
 8009f38:	001a      	movs	r2, r3
 8009f3a:	4b09      	ldr	r3, [pc, #36]	@ (8009f60 <__assert_func+0x2c>)
 8009f3c:	0005      	movs	r5, r0
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	000e      	movs	r6, r1
 8009f42:	68d8      	ldr	r0, [r3, #12]
 8009f44:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <__assert_func+0x30>)
 8009f46:	2c00      	cmp	r4, #0
 8009f48:	d101      	bne.n	8009f4e <__assert_func+0x1a>
 8009f4a:	4b07      	ldr	r3, [pc, #28]	@ (8009f68 <__assert_func+0x34>)
 8009f4c:	001c      	movs	r4, r3
 8009f4e:	4907      	ldr	r1, [pc, #28]	@ (8009f6c <__assert_func+0x38>)
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	9402      	str	r4, [sp, #8]
 8009f54:	002b      	movs	r3, r5
 8009f56:	9600      	str	r6, [sp, #0]
 8009f58:	f000 f886 	bl	800a068 <fiprintf>
 8009f5c:	f000 f894 	bl	800a088 <abort>
 8009f60:	20000018 	.word	0x20000018
 8009f64:	0800b8f3 	.word	0x0800b8f3
 8009f68:	0800b92e 	.word	0x0800b92e
 8009f6c:	0800b900 	.word	0x0800b900

08009f70 <_calloc_r>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	0c0b      	lsrs	r3, r1, #16
 8009f74:	0c15      	lsrs	r5, r2, #16
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d11e      	bne.n	8009fb8 <_calloc_r+0x48>
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	d10c      	bne.n	8009f98 <_calloc_r+0x28>
 8009f7e:	b289      	uxth	r1, r1
 8009f80:	b294      	uxth	r4, r2
 8009f82:	434c      	muls	r4, r1
 8009f84:	0021      	movs	r1, r4
 8009f86:	f7ff f96d 	bl	8009264 <_malloc_r>
 8009f8a:	1e05      	subs	r5, r0, #0
 8009f8c:	d01a      	beq.n	8009fc4 <_calloc_r+0x54>
 8009f8e:	0022      	movs	r2, r4
 8009f90:	2100      	movs	r1, #0
 8009f92:	f7fe f9cb 	bl	800832c <memset>
 8009f96:	e016      	b.n	8009fc6 <_calloc_r+0x56>
 8009f98:	1c2b      	adds	r3, r5, #0
 8009f9a:	1c0c      	adds	r4, r1, #0
 8009f9c:	b289      	uxth	r1, r1
 8009f9e:	b292      	uxth	r2, r2
 8009fa0:	434a      	muls	r2, r1
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	b2a1      	uxth	r1, r4
 8009fa6:	4359      	muls	r1, r3
 8009fa8:	0c14      	lsrs	r4, r2, #16
 8009faa:	190c      	adds	r4, r1, r4
 8009fac:	0c23      	lsrs	r3, r4, #16
 8009fae:	d107      	bne.n	8009fc0 <_calloc_r+0x50>
 8009fb0:	0424      	lsls	r4, r4, #16
 8009fb2:	b292      	uxth	r2, r2
 8009fb4:	4314      	orrs	r4, r2
 8009fb6:	e7e5      	b.n	8009f84 <_calloc_r+0x14>
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	d101      	bne.n	8009fc0 <_calloc_r+0x50>
 8009fbc:	1c14      	adds	r4, r2, #0
 8009fbe:	e7ed      	b.n	8009f9c <_calloc_r+0x2c>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	6003      	str	r3, [r0, #0]
 8009fc4:	2500      	movs	r5, #0
 8009fc6:	0028      	movs	r0, r5
 8009fc8:	bd70      	pop	{r4, r5, r6, pc}

08009fca <__ascii_mbtowc>:
 8009fca:	b082      	sub	sp, #8
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	d100      	bne.n	8009fd2 <__ascii_mbtowc+0x8>
 8009fd0:	a901      	add	r1, sp, #4
 8009fd2:	1e10      	subs	r0, r2, #0
 8009fd4:	d006      	beq.n	8009fe4 <__ascii_mbtowc+0x1a>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d006      	beq.n	8009fe8 <__ascii_mbtowc+0x1e>
 8009fda:	7813      	ldrb	r3, [r2, #0]
 8009fdc:	600b      	str	r3, [r1, #0]
 8009fde:	7810      	ldrb	r0, [r2, #0]
 8009fe0:	1e43      	subs	r3, r0, #1
 8009fe2:	4198      	sbcs	r0, r3
 8009fe4:	b002      	add	sp, #8
 8009fe6:	4770      	bx	lr
 8009fe8:	2002      	movs	r0, #2
 8009fea:	4240      	negs	r0, r0
 8009fec:	e7fa      	b.n	8009fe4 <__ascii_mbtowc+0x1a>

08009fee <_realloc_r>:
 8009fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ff0:	0006      	movs	r6, r0
 8009ff2:	000c      	movs	r4, r1
 8009ff4:	0015      	movs	r5, r2
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d105      	bne.n	800a006 <_realloc_r+0x18>
 8009ffa:	0011      	movs	r1, r2
 8009ffc:	f7ff f932 	bl	8009264 <_malloc_r>
 800a000:	0004      	movs	r4, r0
 800a002:	0020      	movs	r0, r4
 800a004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a006:	2a00      	cmp	r2, #0
 800a008:	d103      	bne.n	800a012 <_realloc_r+0x24>
 800a00a:	f7ff f8b5 	bl	8009178 <_free_r>
 800a00e:	2400      	movs	r4, #0
 800a010:	e7f7      	b.n	800a002 <_realloc_r+0x14>
 800a012:	f000 f840 	bl	800a096 <_malloc_usable_size_r>
 800a016:	0007      	movs	r7, r0
 800a018:	4285      	cmp	r5, r0
 800a01a:	d802      	bhi.n	800a022 <_realloc_r+0x34>
 800a01c:	0843      	lsrs	r3, r0, #1
 800a01e:	42ab      	cmp	r3, r5
 800a020:	d3ef      	bcc.n	800a002 <_realloc_r+0x14>
 800a022:	0029      	movs	r1, r5
 800a024:	0030      	movs	r0, r6
 800a026:	f7ff f91d 	bl	8009264 <_malloc_r>
 800a02a:	9001      	str	r0, [sp, #4]
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d0ee      	beq.n	800a00e <_realloc_r+0x20>
 800a030:	002a      	movs	r2, r5
 800a032:	42bd      	cmp	r5, r7
 800a034:	d900      	bls.n	800a038 <_realloc_r+0x4a>
 800a036:	003a      	movs	r2, r7
 800a038:	0021      	movs	r1, r4
 800a03a:	9801      	ldr	r0, [sp, #4]
 800a03c:	f7fe fa10 	bl	8008460 <memcpy>
 800a040:	0021      	movs	r1, r4
 800a042:	0030      	movs	r0, r6
 800a044:	f7ff f898 	bl	8009178 <_free_r>
 800a048:	9c01      	ldr	r4, [sp, #4]
 800a04a:	e7da      	b.n	800a002 <_realloc_r+0x14>

0800a04c <__ascii_wctomb>:
 800a04c:	0003      	movs	r3, r0
 800a04e:	1e08      	subs	r0, r1, #0
 800a050:	d005      	beq.n	800a05e <__ascii_wctomb+0x12>
 800a052:	2aff      	cmp	r2, #255	@ 0xff
 800a054:	d904      	bls.n	800a060 <__ascii_wctomb+0x14>
 800a056:	228a      	movs	r2, #138	@ 0x8a
 800a058:	2001      	movs	r0, #1
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	4240      	negs	r0, r0
 800a05e:	4770      	bx	lr
 800a060:	2001      	movs	r0, #1
 800a062:	700a      	strb	r2, [r1, #0]
 800a064:	e7fb      	b.n	800a05e <__ascii_wctomb+0x12>
	...

0800a068 <fiprintf>:
 800a068:	b40e      	push	{r1, r2, r3}
 800a06a:	b517      	push	{r0, r1, r2, r4, lr}
 800a06c:	4c05      	ldr	r4, [pc, #20]	@ (800a084 <fiprintf+0x1c>)
 800a06e:	ab05      	add	r3, sp, #20
 800a070:	cb04      	ldmia	r3!, {r2}
 800a072:	0001      	movs	r1, r0
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	f000 f83c 	bl	800a0f4 <_vfiprintf_r>
 800a07c:	bc1e      	pop	{r1, r2, r3, r4}
 800a07e:	bc08      	pop	{r3}
 800a080:	b003      	add	sp, #12
 800a082:	4718      	bx	r3
 800a084:	20000018 	.word	0x20000018

0800a088 <abort>:
 800a088:	2006      	movs	r0, #6
 800a08a:	b510      	push	{r4, lr}
 800a08c:	f000 fa18 	bl	800a4c0 <raise>
 800a090:	2001      	movs	r0, #1
 800a092:	f7fa f9df 	bl	8004454 <_exit>

0800a096 <_malloc_usable_size_r>:
 800a096:	1f0b      	subs	r3, r1, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	1f18      	subs	r0, r3, #4
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	da01      	bge.n	800a0a4 <_malloc_usable_size_r+0xe>
 800a0a0:	580b      	ldr	r3, [r1, r0]
 800a0a2:	18c0      	adds	r0, r0, r3
 800a0a4:	4770      	bx	lr

0800a0a6 <__sfputc_r>:
 800a0a6:	6893      	ldr	r3, [r2, #8]
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	6093      	str	r3, [r2, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	da04      	bge.n	800a0bc <__sfputc_r+0x16>
 800a0b2:	6994      	ldr	r4, [r2, #24]
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	db07      	blt.n	800a0c8 <__sfputc_r+0x22>
 800a0b8:	290a      	cmp	r1, #10
 800a0ba:	d005      	beq.n	800a0c8 <__sfputc_r+0x22>
 800a0bc:	6813      	ldr	r3, [r2, #0]
 800a0be:	1c58      	adds	r0, r3, #1
 800a0c0:	6010      	str	r0, [r2, #0]
 800a0c2:	7019      	strb	r1, [r3, #0]
 800a0c4:	0008      	movs	r0, r1
 800a0c6:	bd10      	pop	{r4, pc}
 800a0c8:	f000 f930 	bl	800a32c <__swbuf_r>
 800a0cc:	0001      	movs	r1, r0
 800a0ce:	e7f9      	b.n	800a0c4 <__sfputc_r+0x1e>

0800a0d0 <__sfputs_r>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	0006      	movs	r6, r0
 800a0d4:	000f      	movs	r7, r1
 800a0d6:	0014      	movs	r4, r2
 800a0d8:	18d5      	adds	r5, r2, r3
 800a0da:	42ac      	cmp	r4, r5
 800a0dc:	d101      	bne.n	800a0e2 <__sfputs_r+0x12>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e007      	b.n	800a0f2 <__sfputs_r+0x22>
 800a0e2:	7821      	ldrb	r1, [r4, #0]
 800a0e4:	003a      	movs	r2, r7
 800a0e6:	0030      	movs	r0, r6
 800a0e8:	f7ff ffdd 	bl	800a0a6 <__sfputc_r>
 800a0ec:	3401      	adds	r4, #1
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	d1f3      	bne.n	800a0da <__sfputs_r+0xa>
 800a0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0f4 <_vfiprintf_r>:
 800a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f6:	b0a1      	sub	sp, #132	@ 0x84
 800a0f8:	000f      	movs	r7, r1
 800a0fa:	0015      	movs	r5, r2
 800a0fc:	001e      	movs	r6, r3
 800a0fe:	9003      	str	r0, [sp, #12]
 800a100:	2800      	cmp	r0, #0
 800a102:	d004      	beq.n	800a10e <_vfiprintf_r+0x1a>
 800a104:	6a03      	ldr	r3, [r0, #32]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <_vfiprintf_r+0x1a>
 800a10a:	f7fe f86f 	bl	80081ec <__sinit>
 800a10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a110:	07db      	lsls	r3, r3, #31
 800a112:	d405      	bmi.n	800a120 <_vfiprintf_r+0x2c>
 800a114:	89bb      	ldrh	r3, [r7, #12]
 800a116:	059b      	lsls	r3, r3, #22
 800a118:	d402      	bmi.n	800a120 <_vfiprintf_r+0x2c>
 800a11a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a11c:	f7fe f98b 	bl	8008436 <__retarget_lock_acquire_recursive>
 800a120:	89bb      	ldrh	r3, [r7, #12]
 800a122:	071b      	lsls	r3, r3, #28
 800a124:	d502      	bpl.n	800a12c <_vfiprintf_r+0x38>
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d113      	bne.n	800a154 <_vfiprintf_r+0x60>
 800a12c:	0039      	movs	r1, r7
 800a12e:	9803      	ldr	r0, [sp, #12]
 800a130:	f000 f93e 	bl	800a3b0 <__swsetup_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	d00d      	beq.n	800a154 <_vfiprintf_r+0x60>
 800a138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a13a:	07db      	lsls	r3, r3, #31
 800a13c:	d503      	bpl.n	800a146 <_vfiprintf_r+0x52>
 800a13e:	2001      	movs	r0, #1
 800a140:	4240      	negs	r0, r0
 800a142:	b021      	add	sp, #132	@ 0x84
 800a144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a146:	89bb      	ldrh	r3, [r7, #12]
 800a148:	059b      	lsls	r3, r3, #22
 800a14a:	d4f8      	bmi.n	800a13e <_vfiprintf_r+0x4a>
 800a14c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a14e:	f7fe f973 	bl	8008438 <__retarget_lock_release_recursive>
 800a152:	e7f4      	b.n	800a13e <_vfiprintf_r+0x4a>
 800a154:	2300      	movs	r3, #0
 800a156:	ac08      	add	r4, sp, #32
 800a158:	6163      	str	r3, [r4, #20]
 800a15a:	3320      	adds	r3, #32
 800a15c:	7663      	strb	r3, [r4, #25]
 800a15e:	3310      	adds	r3, #16
 800a160:	76a3      	strb	r3, [r4, #26]
 800a162:	9607      	str	r6, [sp, #28]
 800a164:	002e      	movs	r6, r5
 800a166:	7833      	ldrb	r3, [r6, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <_vfiprintf_r+0x7c>
 800a16c:	2b25      	cmp	r3, #37	@ 0x25
 800a16e:	d148      	bne.n	800a202 <_vfiprintf_r+0x10e>
 800a170:	1b73      	subs	r3, r6, r5
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	42ae      	cmp	r6, r5
 800a176:	d00b      	beq.n	800a190 <_vfiprintf_r+0x9c>
 800a178:	002a      	movs	r2, r5
 800a17a:	0039      	movs	r1, r7
 800a17c:	9803      	ldr	r0, [sp, #12]
 800a17e:	f7ff ffa7 	bl	800a0d0 <__sfputs_r>
 800a182:	3001      	adds	r0, #1
 800a184:	d100      	bne.n	800a188 <_vfiprintf_r+0x94>
 800a186:	e0ae      	b.n	800a2e6 <_vfiprintf_r+0x1f2>
 800a188:	6963      	ldr	r3, [r4, #20]
 800a18a:	9a05      	ldr	r2, [sp, #20]
 800a18c:	189b      	adds	r3, r3, r2
 800a18e:	6163      	str	r3, [r4, #20]
 800a190:	7833      	ldrb	r3, [r6, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d100      	bne.n	800a198 <_vfiprintf_r+0xa4>
 800a196:	e0a6      	b.n	800a2e6 <_vfiprintf_r+0x1f2>
 800a198:	2201      	movs	r2, #1
 800a19a:	2300      	movs	r3, #0
 800a19c:	4252      	negs	r2, r2
 800a19e:	6062      	str	r2, [r4, #4]
 800a1a0:	a904      	add	r1, sp, #16
 800a1a2:	3254      	adds	r2, #84	@ 0x54
 800a1a4:	1852      	adds	r2, r2, r1
 800a1a6:	1c75      	adds	r5, r6, #1
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	60e3      	str	r3, [r4, #12]
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	7013      	strb	r3, [r2, #0]
 800a1b0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a1b2:	4b59      	ldr	r3, [pc, #356]	@ (800a318 <_vfiprintf_r+0x224>)
 800a1b4:	2205      	movs	r2, #5
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	7829      	ldrb	r1, [r5, #0]
 800a1ba:	9305      	str	r3, [sp, #20]
 800a1bc:	f7fe f945 	bl	800844a <memchr>
 800a1c0:	1c6e      	adds	r6, r5, #1
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d11f      	bne.n	800a206 <_vfiprintf_r+0x112>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	06d3      	lsls	r3, r2, #27
 800a1ca:	d504      	bpl.n	800a1d6 <_vfiprintf_r+0xe2>
 800a1cc:	2353      	movs	r3, #83	@ 0x53
 800a1ce:	a904      	add	r1, sp, #16
 800a1d0:	185b      	adds	r3, r3, r1
 800a1d2:	2120      	movs	r1, #32
 800a1d4:	7019      	strb	r1, [r3, #0]
 800a1d6:	0713      	lsls	r3, r2, #28
 800a1d8:	d504      	bpl.n	800a1e4 <_vfiprintf_r+0xf0>
 800a1da:	2353      	movs	r3, #83	@ 0x53
 800a1dc:	a904      	add	r1, sp, #16
 800a1de:	185b      	adds	r3, r3, r1
 800a1e0:	212b      	movs	r1, #43	@ 0x2b
 800a1e2:	7019      	strb	r1, [r3, #0]
 800a1e4:	782b      	ldrb	r3, [r5, #0]
 800a1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1e8:	d016      	beq.n	800a218 <_vfiprintf_r+0x124>
 800a1ea:	002e      	movs	r6, r5
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	200a      	movs	r0, #10
 800a1f0:	68e3      	ldr	r3, [r4, #12]
 800a1f2:	7832      	ldrb	r2, [r6, #0]
 800a1f4:	1c75      	adds	r5, r6, #1
 800a1f6:	3a30      	subs	r2, #48	@ 0x30
 800a1f8:	2a09      	cmp	r2, #9
 800a1fa:	d950      	bls.n	800a29e <_vfiprintf_r+0x1aa>
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d111      	bne.n	800a224 <_vfiprintf_r+0x130>
 800a200:	e017      	b.n	800a232 <_vfiprintf_r+0x13e>
 800a202:	3601      	adds	r6, #1
 800a204:	e7af      	b.n	800a166 <_vfiprintf_r+0x72>
 800a206:	9b05      	ldr	r3, [sp, #20]
 800a208:	6822      	ldr	r2, [r4, #0]
 800a20a:	1ac0      	subs	r0, r0, r3
 800a20c:	2301      	movs	r3, #1
 800a20e:	4083      	lsls	r3, r0
 800a210:	4313      	orrs	r3, r2
 800a212:	0035      	movs	r5, r6
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	e7cc      	b.n	800a1b2 <_vfiprintf_r+0xbe>
 800a218:	9b07      	ldr	r3, [sp, #28]
 800a21a:	1d19      	adds	r1, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	9107      	str	r1, [sp, #28]
 800a220:	2b00      	cmp	r3, #0
 800a222:	db01      	blt.n	800a228 <_vfiprintf_r+0x134>
 800a224:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a226:	e004      	b.n	800a232 <_vfiprintf_r+0x13e>
 800a228:	425b      	negs	r3, r3
 800a22a:	60e3      	str	r3, [r4, #12]
 800a22c:	2302      	movs	r3, #2
 800a22e:	4313      	orrs	r3, r2
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	7833      	ldrb	r3, [r6, #0]
 800a234:	2b2e      	cmp	r3, #46	@ 0x2e
 800a236:	d10c      	bne.n	800a252 <_vfiprintf_r+0x15e>
 800a238:	7873      	ldrb	r3, [r6, #1]
 800a23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a23c:	d134      	bne.n	800a2a8 <_vfiprintf_r+0x1b4>
 800a23e:	9b07      	ldr	r3, [sp, #28]
 800a240:	3602      	adds	r6, #2
 800a242:	1d1a      	adds	r2, r3, #4
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	9207      	str	r2, [sp, #28]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	da01      	bge.n	800a250 <_vfiprintf_r+0x15c>
 800a24c:	2301      	movs	r3, #1
 800a24e:	425b      	negs	r3, r3
 800a250:	9309      	str	r3, [sp, #36]	@ 0x24
 800a252:	4d32      	ldr	r5, [pc, #200]	@ (800a31c <_vfiprintf_r+0x228>)
 800a254:	2203      	movs	r2, #3
 800a256:	0028      	movs	r0, r5
 800a258:	7831      	ldrb	r1, [r6, #0]
 800a25a:	f7fe f8f6 	bl	800844a <memchr>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d006      	beq.n	800a270 <_vfiprintf_r+0x17c>
 800a262:	2340      	movs	r3, #64	@ 0x40
 800a264:	1b40      	subs	r0, r0, r5
 800a266:	4083      	lsls	r3, r0
 800a268:	6822      	ldr	r2, [r4, #0]
 800a26a:	3601      	adds	r6, #1
 800a26c:	4313      	orrs	r3, r2
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	7831      	ldrb	r1, [r6, #0]
 800a272:	2206      	movs	r2, #6
 800a274:	482a      	ldr	r0, [pc, #168]	@ (800a320 <_vfiprintf_r+0x22c>)
 800a276:	1c75      	adds	r5, r6, #1
 800a278:	7621      	strb	r1, [r4, #24]
 800a27a:	f7fe f8e6 	bl	800844a <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d040      	beq.n	800a304 <_vfiprintf_r+0x210>
 800a282:	4b28      	ldr	r3, [pc, #160]	@ (800a324 <_vfiprintf_r+0x230>)
 800a284:	2b00      	cmp	r3, #0
 800a286:	d122      	bne.n	800a2ce <_vfiprintf_r+0x1da>
 800a288:	2207      	movs	r2, #7
 800a28a:	9b07      	ldr	r3, [sp, #28]
 800a28c:	3307      	adds	r3, #7
 800a28e:	4393      	bics	r3, r2
 800a290:	3308      	adds	r3, #8
 800a292:	9307      	str	r3, [sp, #28]
 800a294:	6963      	ldr	r3, [r4, #20]
 800a296:	9a04      	ldr	r2, [sp, #16]
 800a298:	189b      	adds	r3, r3, r2
 800a29a:	6163      	str	r3, [r4, #20]
 800a29c:	e762      	b.n	800a164 <_vfiprintf_r+0x70>
 800a29e:	4343      	muls	r3, r0
 800a2a0:	002e      	movs	r6, r5
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	189b      	adds	r3, r3, r2
 800a2a6:	e7a4      	b.n	800a1f2 <_vfiprintf_r+0xfe>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	200a      	movs	r0, #10
 800a2ac:	0019      	movs	r1, r3
 800a2ae:	3601      	adds	r6, #1
 800a2b0:	6063      	str	r3, [r4, #4]
 800a2b2:	7832      	ldrb	r2, [r6, #0]
 800a2b4:	1c75      	adds	r5, r6, #1
 800a2b6:	3a30      	subs	r2, #48	@ 0x30
 800a2b8:	2a09      	cmp	r2, #9
 800a2ba:	d903      	bls.n	800a2c4 <_vfiprintf_r+0x1d0>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0c8      	beq.n	800a252 <_vfiprintf_r+0x15e>
 800a2c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2c2:	e7c6      	b.n	800a252 <_vfiprintf_r+0x15e>
 800a2c4:	4341      	muls	r1, r0
 800a2c6:	002e      	movs	r6, r5
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	1889      	adds	r1, r1, r2
 800a2cc:	e7f1      	b.n	800a2b2 <_vfiprintf_r+0x1be>
 800a2ce:	aa07      	add	r2, sp, #28
 800a2d0:	9200      	str	r2, [sp, #0]
 800a2d2:	0021      	movs	r1, r4
 800a2d4:	003a      	movs	r2, r7
 800a2d6:	4b14      	ldr	r3, [pc, #80]	@ (800a328 <_vfiprintf_r+0x234>)
 800a2d8:	9803      	ldr	r0, [sp, #12]
 800a2da:	f7fd fb3b 	bl	8007954 <_printf_float>
 800a2de:	9004      	str	r0, [sp, #16]
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	d1d6      	bne.n	800a294 <_vfiprintf_r+0x1a0>
 800a2e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2e8:	07db      	lsls	r3, r3, #31
 800a2ea:	d405      	bmi.n	800a2f8 <_vfiprintf_r+0x204>
 800a2ec:	89bb      	ldrh	r3, [r7, #12]
 800a2ee:	059b      	lsls	r3, r3, #22
 800a2f0:	d402      	bmi.n	800a2f8 <_vfiprintf_r+0x204>
 800a2f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a2f4:	f7fe f8a0 	bl	8008438 <__retarget_lock_release_recursive>
 800a2f8:	89bb      	ldrh	r3, [r7, #12]
 800a2fa:	065b      	lsls	r3, r3, #25
 800a2fc:	d500      	bpl.n	800a300 <_vfiprintf_r+0x20c>
 800a2fe:	e71e      	b.n	800a13e <_vfiprintf_r+0x4a>
 800a300:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a302:	e71e      	b.n	800a142 <_vfiprintf_r+0x4e>
 800a304:	aa07      	add	r2, sp, #28
 800a306:	9200      	str	r2, [sp, #0]
 800a308:	0021      	movs	r1, r4
 800a30a:	003a      	movs	r2, r7
 800a30c:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <_vfiprintf_r+0x234>)
 800a30e:	9803      	ldr	r0, [sp, #12]
 800a310:	f7fd fdce 	bl	8007eb0 <_printf_i>
 800a314:	e7e3      	b.n	800a2de <_vfiprintf_r+0x1ea>
 800a316:	46c0      	nop			@ (mov r8, r8)
 800a318:	0800b8d8 	.word	0x0800b8d8
 800a31c:	0800b8de 	.word	0x0800b8de
 800a320:	0800b8e2 	.word	0x0800b8e2
 800a324:	08007955 	.word	0x08007955
 800a328:	0800a0d1 	.word	0x0800a0d1

0800a32c <__swbuf_r>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	0006      	movs	r6, r0
 800a330:	000d      	movs	r5, r1
 800a332:	0014      	movs	r4, r2
 800a334:	2800      	cmp	r0, #0
 800a336:	d004      	beq.n	800a342 <__swbuf_r+0x16>
 800a338:	6a03      	ldr	r3, [r0, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <__swbuf_r+0x16>
 800a33e:	f7fd ff55 	bl	80081ec <__sinit>
 800a342:	69a3      	ldr	r3, [r4, #24]
 800a344:	60a3      	str	r3, [r4, #8]
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	071b      	lsls	r3, r3, #28
 800a34a:	d502      	bpl.n	800a352 <__swbuf_r+0x26>
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <__swbuf_r+0x3a>
 800a352:	0021      	movs	r1, r4
 800a354:	0030      	movs	r0, r6
 800a356:	f000 f82b 	bl	800a3b0 <__swsetup_r>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d003      	beq.n	800a366 <__swbuf_r+0x3a>
 800a35e:	2501      	movs	r5, #1
 800a360:	426d      	negs	r5, r5
 800a362:	0028      	movs	r0, r5
 800a364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	b2ef      	uxtb	r7, r5
 800a36c:	1ac0      	subs	r0, r0, r3
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	b2ed      	uxtb	r5, r5
 800a372:	4283      	cmp	r3, r0
 800a374:	dc05      	bgt.n	800a382 <__swbuf_r+0x56>
 800a376:	0021      	movs	r1, r4
 800a378:	0030      	movs	r0, r6
 800a37a:	f7ff fd8b 	bl	8009e94 <_fflush_r>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d1ed      	bne.n	800a35e <__swbuf_r+0x32>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	3001      	adds	r0, #1
 800a386:	3b01      	subs	r3, #1
 800a388:	60a3      	str	r3, [r4, #8]
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	6022      	str	r2, [r4, #0]
 800a390:	701f      	strb	r7, [r3, #0]
 800a392:	6963      	ldr	r3, [r4, #20]
 800a394:	4283      	cmp	r3, r0
 800a396:	d004      	beq.n	800a3a2 <__swbuf_r+0x76>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d5e1      	bpl.n	800a362 <__swbuf_r+0x36>
 800a39e:	2d0a      	cmp	r5, #10
 800a3a0:	d1df      	bne.n	800a362 <__swbuf_r+0x36>
 800a3a2:	0021      	movs	r1, r4
 800a3a4:	0030      	movs	r0, r6
 800a3a6:	f7ff fd75 	bl	8009e94 <_fflush_r>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d0d9      	beq.n	800a362 <__swbuf_r+0x36>
 800a3ae:	e7d6      	b.n	800a35e <__swbuf_r+0x32>

0800a3b0 <__swsetup_r>:
 800a3b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a468 <__swsetup_r+0xb8>)
 800a3b2:	b570      	push	{r4, r5, r6, lr}
 800a3b4:	0005      	movs	r5, r0
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	000c      	movs	r4, r1
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d004      	beq.n	800a3c8 <__swsetup_r+0x18>
 800a3be:	6a03      	ldr	r3, [r0, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <__swsetup_r+0x18>
 800a3c4:	f7fd ff12 	bl	80081ec <__sinit>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	5ee2      	ldrsh	r2, [r4, r3]
 800a3cc:	0713      	lsls	r3, r2, #28
 800a3ce:	d423      	bmi.n	800a418 <__swsetup_r+0x68>
 800a3d0:	06d3      	lsls	r3, r2, #27
 800a3d2:	d407      	bmi.n	800a3e4 <__swsetup_r+0x34>
 800a3d4:	2309      	movs	r3, #9
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	2340      	movs	r3, #64	@ 0x40
 800a3da:	2001      	movs	r0, #1
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	4240      	negs	r0, r0
 800a3e2:	e03a      	b.n	800a45a <__swsetup_r+0xaa>
 800a3e4:	0752      	lsls	r2, r2, #29
 800a3e6:	d513      	bpl.n	800a410 <__swsetup_r+0x60>
 800a3e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ea:	2900      	cmp	r1, #0
 800a3ec:	d008      	beq.n	800a400 <__swsetup_r+0x50>
 800a3ee:	0023      	movs	r3, r4
 800a3f0:	3344      	adds	r3, #68	@ 0x44
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	d002      	beq.n	800a3fc <__swsetup_r+0x4c>
 800a3f6:	0028      	movs	r0, r5
 800a3f8:	f7fe febe 	bl	8009178 <_free_r>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a400:	2224      	movs	r2, #36	@ 0x24
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	4393      	bics	r3, r2
 800a406:	81a3      	strh	r3, [r4, #12]
 800a408:	2300      	movs	r3, #0
 800a40a:	6063      	str	r3, [r4, #4]
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	2308      	movs	r3, #8
 800a412:	89a2      	ldrh	r2, [r4, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	81a3      	strh	r3, [r4, #12]
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <__swsetup_r+0x86>
 800a41e:	21a0      	movs	r1, #160	@ 0xa0
 800a420:	2280      	movs	r2, #128	@ 0x80
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	0089      	lsls	r1, r1, #2
 800a426:	0092      	lsls	r2, r2, #2
 800a428:	400b      	ands	r3, r1
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <__swsetup_r+0x86>
 800a42e:	0021      	movs	r1, r4
 800a430:	0028      	movs	r0, r5
 800a432:	f000 f88f 	bl	800a554 <__smakebuf_r>
 800a436:	230c      	movs	r3, #12
 800a438:	5ee2      	ldrsh	r2, [r4, r3]
 800a43a:	2101      	movs	r1, #1
 800a43c:	0013      	movs	r3, r2
 800a43e:	400b      	ands	r3, r1
 800a440:	420a      	tst	r2, r1
 800a442:	d00b      	beq.n	800a45c <__swsetup_r+0xac>
 800a444:	2300      	movs	r3, #0
 800a446:	60a3      	str	r3, [r4, #8]
 800a448:	6963      	ldr	r3, [r4, #20]
 800a44a:	425b      	negs	r3, r3
 800a44c:	61a3      	str	r3, [r4, #24]
 800a44e:	2000      	movs	r0, #0
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	4283      	cmp	r3, r0
 800a454:	d101      	bne.n	800a45a <__swsetup_r+0xaa>
 800a456:	0613      	lsls	r3, r2, #24
 800a458:	d4be      	bmi.n	800a3d8 <__swsetup_r+0x28>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	0791      	lsls	r1, r2, #30
 800a45e:	d400      	bmi.n	800a462 <__swsetup_r+0xb2>
 800a460:	6963      	ldr	r3, [r4, #20]
 800a462:	60a3      	str	r3, [r4, #8]
 800a464:	e7f3      	b.n	800a44e <__swsetup_r+0x9e>
 800a466:	46c0      	nop			@ (mov r8, r8)
 800a468:	20000018 	.word	0x20000018

0800a46c <_raise_r>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	0004      	movs	r4, r0
 800a470:	000d      	movs	r5, r1
 800a472:	291f      	cmp	r1, #31
 800a474:	d904      	bls.n	800a480 <_raise_r+0x14>
 800a476:	2316      	movs	r3, #22
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	2001      	movs	r0, #1
 800a47c:	4240      	negs	r0, r0
 800a47e:	bd70      	pop	{r4, r5, r6, pc}
 800a480:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a482:	2b00      	cmp	r3, #0
 800a484:	d004      	beq.n	800a490 <_raise_r+0x24>
 800a486:	008a      	lsls	r2, r1, #2
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	2a00      	cmp	r2, #0
 800a48e:	d108      	bne.n	800a4a2 <_raise_r+0x36>
 800a490:	0020      	movs	r0, r4
 800a492:	f000 f831 	bl	800a4f8 <_getpid_r>
 800a496:	002a      	movs	r2, r5
 800a498:	0001      	movs	r1, r0
 800a49a:	0020      	movs	r0, r4
 800a49c:	f000 f81a 	bl	800a4d4 <_kill_r>
 800a4a0:	e7ed      	b.n	800a47e <_raise_r+0x12>
 800a4a2:	2a01      	cmp	r2, #1
 800a4a4:	d009      	beq.n	800a4ba <_raise_r+0x4e>
 800a4a6:	1c51      	adds	r1, r2, #1
 800a4a8:	d103      	bne.n	800a4b2 <_raise_r+0x46>
 800a4aa:	2316      	movs	r3, #22
 800a4ac:	6003      	str	r3, [r0, #0]
 800a4ae:	2001      	movs	r0, #1
 800a4b0:	e7e5      	b.n	800a47e <_raise_r+0x12>
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	0028      	movs	r0, r5
 800a4b6:	6019      	str	r1, [r3, #0]
 800a4b8:	4790      	blx	r2
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e7df      	b.n	800a47e <_raise_r+0x12>
	...

0800a4c0 <raise>:
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	4b03      	ldr	r3, [pc, #12]	@ (800a4d0 <raise+0x10>)
 800a4c4:	0001      	movs	r1, r0
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	f7ff ffd0 	bl	800a46c <_raise_r>
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	46c0      	nop			@ (mov r8, r8)
 800a4d0:	20000018 	.word	0x20000018

0800a4d4 <_kill_r>:
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	4d06      	ldr	r5, [pc, #24]	@ (800a4f4 <_kill_r+0x20>)
 800a4da:	0004      	movs	r4, r0
 800a4dc:	0008      	movs	r0, r1
 800a4de:	0011      	movs	r1, r2
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	f7f9 ffa7 	bl	8004434 <_kill>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	d103      	bne.n	800a4f2 <_kill_r+0x1e>
 800a4ea:	682b      	ldr	r3, [r5, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d000      	beq.n	800a4f2 <_kill_r+0x1e>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	200006ac 	.word	0x200006ac

0800a4f8 <_getpid_r>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	f7f9 ff95 	bl	8004428 <_getpid>
 800a4fe:	bd10      	pop	{r4, pc}

0800a500 <__swhatbuf_r>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	000e      	movs	r6, r1
 800a504:	001d      	movs	r5, r3
 800a506:	230e      	movs	r3, #14
 800a508:	5ec9      	ldrsh	r1, [r1, r3]
 800a50a:	0014      	movs	r4, r2
 800a50c:	b096      	sub	sp, #88	@ 0x58
 800a50e:	2900      	cmp	r1, #0
 800a510:	da0c      	bge.n	800a52c <__swhatbuf_r+0x2c>
 800a512:	89b2      	ldrh	r2, [r6, #12]
 800a514:	2380      	movs	r3, #128	@ 0x80
 800a516:	0011      	movs	r1, r2
 800a518:	4019      	ands	r1, r3
 800a51a:	421a      	tst	r2, r3
 800a51c:	d114      	bne.n	800a548 <__swhatbuf_r+0x48>
 800a51e:	2380      	movs	r3, #128	@ 0x80
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	2000      	movs	r0, #0
 800a524:	6029      	str	r1, [r5, #0]
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	b016      	add	sp, #88	@ 0x58
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	466a      	mov	r2, sp
 800a52e:	f000 f853 	bl	800a5d8 <_fstat_r>
 800a532:	2800      	cmp	r0, #0
 800a534:	dbed      	blt.n	800a512 <__swhatbuf_r+0x12>
 800a536:	23f0      	movs	r3, #240	@ 0xf0
 800a538:	9901      	ldr	r1, [sp, #4]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	4019      	ands	r1, r3
 800a53e:	4b04      	ldr	r3, [pc, #16]	@ (800a550 <__swhatbuf_r+0x50>)
 800a540:	18c9      	adds	r1, r1, r3
 800a542:	424b      	negs	r3, r1
 800a544:	4159      	adcs	r1, r3
 800a546:	e7ea      	b.n	800a51e <__swhatbuf_r+0x1e>
 800a548:	2100      	movs	r1, #0
 800a54a:	2340      	movs	r3, #64	@ 0x40
 800a54c:	e7e9      	b.n	800a522 <__swhatbuf_r+0x22>
 800a54e:	46c0      	nop			@ (mov r8, r8)
 800a550:	ffffe000 	.word	0xffffe000

0800a554 <__smakebuf_r>:
 800a554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a556:	2602      	movs	r6, #2
 800a558:	898b      	ldrh	r3, [r1, #12]
 800a55a:	0005      	movs	r5, r0
 800a55c:	000c      	movs	r4, r1
 800a55e:	b085      	sub	sp, #20
 800a560:	4233      	tst	r3, r6
 800a562:	d007      	beq.n	800a574 <__smakebuf_r+0x20>
 800a564:	0023      	movs	r3, r4
 800a566:	3347      	adds	r3, #71	@ 0x47
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	6123      	str	r3, [r4, #16]
 800a56c:	2301      	movs	r3, #1
 800a56e:	6163      	str	r3, [r4, #20]
 800a570:	b005      	add	sp, #20
 800a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a574:	ab03      	add	r3, sp, #12
 800a576:	aa02      	add	r2, sp, #8
 800a578:	f7ff ffc2 	bl	800a500 <__swhatbuf_r>
 800a57c:	9f02      	ldr	r7, [sp, #8]
 800a57e:	9001      	str	r0, [sp, #4]
 800a580:	0039      	movs	r1, r7
 800a582:	0028      	movs	r0, r5
 800a584:	f7fe fe6e 	bl	8009264 <_malloc_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d108      	bne.n	800a59e <__smakebuf_r+0x4a>
 800a58c:	220c      	movs	r2, #12
 800a58e:	5ea3      	ldrsh	r3, [r4, r2]
 800a590:	059a      	lsls	r2, r3, #22
 800a592:	d4ed      	bmi.n	800a570 <__smakebuf_r+0x1c>
 800a594:	2203      	movs	r2, #3
 800a596:	4393      	bics	r3, r2
 800a598:	431e      	orrs	r6, r3
 800a59a:	81a6      	strh	r6, [r4, #12]
 800a59c:	e7e2      	b.n	800a564 <__smakebuf_r+0x10>
 800a59e:	2380      	movs	r3, #128	@ 0x80
 800a5a0:	89a2      	ldrh	r2, [r4, #12]
 800a5a2:	6020      	str	r0, [r4, #0]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	6120      	str	r0, [r4, #16]
 800a5ac:	6167      	str	r7, [r4, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00c      	beq.n	800a5cc <__smakebuf_r+0x78>
 800a5b2:	0028      	movs	r0, r5
 800a5b4:	230e      	movs	r3, #14
 800a5b6:	5ee1      	ldrsh	r1, [r4, r3]
 800a5b8:	f000 f820 	bl	800a5fc <_isatty_r>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d005      	beq.n	800a5cc <__smakebuf_r+0x78>
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	89a2      	ldrh	r2, [r4, #12]
 800a5c4:	439a      	bics	r2, r3
 800a5c6:	3b02      	subs	r3, #2
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	9a01      	ldr	r2, [sp, #4]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	e7cc      	b.n	800a570 <__smakebuf_r+0x1c>
	...

0800a5d8 <_fstat_r>:
 800a5d8:	2300      	movs	r3, #0
 800a5da:	b570      	push	{r4, r5, r6, lr}
 800a5dc:	4d06      	ldr	r5, [pc, #24]	@ (800a5f8 <_fstat_r+0x20>)
 800a5de:	0004      	movs	r4, r0
 800a5e0:	0008      	movs	r0, r1
 800a5e2:	0011      	movs	r1, r2
 800a5e4:	602b      	str	r3, [r5, #0]
 800a5e6:	f7f9 ff85 	bl	80044f4 <_fstat>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d103      	bne.n	800a5f6 <_fstat_r+0x1e>
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d000      	beq.n	800a5f6 <_fstat_r+0x1e>
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	200006ac 	.word	0x200006ac

0800a5fc <_isatty_r>:
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	b570      	push	{r4, r5, r6, lr}
 800a600:	4d06      	ldr	r5, [pc, #24]	@ (800a61c <_isatty_r+0x20>)
 800a602:	0004      	movs	r4, r0
 800a604:	0008      	movs	r0, r1
 800a606:	602b      	str	r3, [r5, #0]
 800a608:	f7f9 ff82 	bl	8004510 <_isatty>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d103      	bne.n	800a618 <_isatty_r+0x1c>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d000      	beq.n	800a618 <_isatty_r+0x1c>
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	bd70      	pop	{r4, r5, r6, pc}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	200006ac 	.word	0x200006ac

0800a620 <pow>:
 800a620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a622:	0014      	movs	r4, r2
 800a624:	001d      	movs	r5, r3
 800a626:	9000      	str	r0, [sp, #0]
 800a628:	9101      	str	r1, [sp, #4]
 800a62a:	f000 f86f 	bl	800a70c <__ieee754_pow>
 800a62e:	0022      	movs	r2, r4
 800a630:	0006      	movs	r6, r0
 800a632:	000f      	movs	r7, r1
 800a634:	002b      	movs	r3, r5
 800a636:	0020      	movs	r0, r4
 800a638:	0029      	movs	r1, r5
 800a63a:	f7f8 f941 	bl	80028c0 <__aeabi_dcmpun>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d13f      	bne.n	800a6c2 <pow+0xa2>
 800a642:	9800      	ldr	r0, [sp, #0]
 800a644:	9901      	ldr	r1, [sp, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	f7f5 ff09 	bl	8000460 <__aeabi_dcmpeq>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d019      	beq.n	800a686 <pow+0x66>
 800a652:	2200      	movs	r2, #0
 800a654:	2300      	movs	r3, #0
 800a656:	0020      	movs	r0, r4
 800a658:	0029      	movs	r1, r5
 800a65a:	f7f5 ff01 	bl	8000460 <__aeabi_dcmpeq>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d146      	bne.n	800a6f0 <pow+0xd0>
 800a662:	0020      	movs	r0, r4
 800a664:	0029      	movs	r1, r5
 800a666:	f000 f849 	bl	800a6fc <finite>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d029      	beq.n	800a6c2 <pow+0xa2>
 800a66e:	2200      	movs	r2, #0
 800a670:	2300      	movs	r3, #0
 800a672:	0020      	movs	r0, r4
 800a674:	0029      	movs	r1, r5
 800a676:	f7f5 fef9 	bl	800046c <__aeabi_dcmplt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d021      	beq.n	800a6c2 <pow+0xa2>
 800a67e:	f7fd feaf 	bl	80083e0 <__errno>
 800a682:	2322      	movs	r3, #34	@ 0x22
 800a684:	e01c      	b.n	800a6c0 <pow+0xa0>
 800a686:	0030      	movs	r0, r6
 800a688:	0039      	movs	r1, r7
 800a68a:	f000 f837 	bl	800a6fc <finite>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d11b      	bne.n	800a6ca <pow+0xaa>
 800a692:	9800      	ldr	r0, [sp, #0]
 800a694:	9901      	ldr	r1, [sp, #4]
 800a696:	f000 f831 	bl	800a6fc <finite>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d015      	beq.n	800a6ca <pow+0xaa>
 800a69e:	0020      	movs	r0, r4
 800a6a0:	0029      	movs	r1, r5
 800a6a2:	f000 f82b 	bl	800a6fc <finite>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d00f      	beq.n	800a6ca <pow+0xaa>
 800a6aa:	0032      	movs	r2, r6
 800a6ac:	003b      	movs	r3, r7
 800a6ae:	0030      	movs	r0, r6
 800a6b0:	0039      	movs	r1, r7
 800a6b2:	f7f8 f905 	bl	80028c0 <__aeabi_dcmpun>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d0e1      	beq.n	800a67e <pow+0x5e>
 800a6ba:	f7fd fe91 	bl	80083e0 <__errno>
 800a6be:	2321      	movs	r3, #33	@ 0x21
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	0039      	movs	r1, r7
 800a6c6:	b003      	add	sp, #12
 800a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	0030      	movs	r0, r6
 800a6d0:	0039      	movs	r1, r7
 800a6d2:	f7f5 fec5 	bl	8000460 <__aeabi_dcmpeq>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d0f3      	beq.n	800a6c2 <pow+0xa2>
 800a6da:	9800      	ldr	r0, [sp, #0]
 800a6dc:	9901      	ldr	r1, [sp, #4]
 800a6de:	f000 f80d 	bl	800a6fc <finite>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d0ed      	beq.n	800a6c2 <pow+0xa2>
 800a6e6:	0020      	movs	r0, r4
 800a6e8:	0029      	movs	r1, r5
 800a6ea:	f000 f807 	bl	800a6fc <finite>
 800a6ee:	e7c4      	b.n	800a67a <pow+0x5a>
 800a6f0:	2600      	movs	r6, #0
 800a6f2:	4f01      	ldr	r7, [pc, #4]	@ (800a6f8 <pow+0xd8>)
 800a6f4:	e7e5      	b.n	800a6c2 <pow+0xa2>
 800a6f6:	46c0      	nop			@ (mov r8, r8)
 800a6f8:	3ff00000 	.word	0x3ff00000

0800a6fc <finite>:
 800a6fc:	4b02      	ldr	r3, [pc, #8]	@ (800a708 <finite+0xc>)
 800a6fe:	0048      	lsls	r0, r1, #1
 800a700:	0840      	lsrs	r0, r0, #1
 800a702:	18c0      	adds	r0, r0, r3
 800a704:	0fc0      	lsrs	r0, r0, #31
 800a706:	4770      	bx	lr
 800a708:	80100000 	.word	0x80100000

0800a70c <__ieee754_pow>:
 800a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70e:	b095      	sub	sp, #84	@ 0x54
 800a710:	9202      	str	r2, [sp, #8]
 800a712:	9303      	str	r3, [sp, #12]
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	9a03      	ldr	r2, [sp, #12]
 800a718:	9306      	str	r3, [sp, #24]
 800a71a:	0052      	lsls	r2, r2, #1
 800a71c:	9b02      	ldr	r3, [sp, #8]
 800a71e:	0852      	lsrs	r2, r2, #1
 800a720:	9204      	str	r2, [sp, #16]
 800a722:	001a      	movs	r2, r3
 800a724:	000f      	movs	r7, r1
 800a726:	9904      	ldr	r1, [sp, #16]
 800a728:	0006      	movs	r6, r0
 800a72a:	430a      	orrs	r2, r1
 800a72c:	d119      	bne.n	800a762 <__ieee754_pow+0x56>
 800a72e:	2180      	movs	r1, #128	@ 0x80
 800a730:	0309      	lsls	r1, r1, #12
 800a732:	4079      	eors	r1, r7
 800a734:	0002      	movs	r2, r0
 800a736:	000b      	movs	r3, r1
 800a738:	1892      	adds	r2, r2, r2
 800a73a:	415b      	adcs	r3, r3
 800a73c:	499b      	ldr	r1, [pc, #620]	@ (800a9ac <__ieee754_pow+0x2a0>)
 800a73e:	428b      	cmp	r3, r1
 800a740:	d806      	bhi.n	800a750 <__ieee754_pow+0x44>
 800a742:	d001      	beq.n	800a748 <__ieee754_pow+0x3c>
 800a744:	f000 fcde 	bl	800b104 <__ieee754_pow+0x9f8>
 800a748:	2a00      	cmp	r2, #0
 800a74a:	d101      	bne.n	800a750 <__ieee754_pow+0x44>
 800a74c:	f000 fcda 	bl	800b104 <__ieee754_pow+0x9f8>
 800a750:	9a02      	ldr	r2, [sp, #8]
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	0030      	movs	r0, r6
 800a756:	0039      	movs	r1, r7
 800a758:	f7f6 faa6 	bl	8000ca8 <__aeabi_dadd>
 800a75c:	9000      	str	r0, [sp, #0]
 800a75e:	9101      	str	r1, [sp, #4]
 800a760:	e0af      	b.n	800a8c2 <__ieee754_pow+0x1b6>
 800a762:	4a93      	ldr	r2, [pc, #588]	@ (800a9b0 <__ieee754_pow+0x2a4>)
 800a764:	007c      	lsls	r4, r7, #1
 800a766:	9708      	str	r7, [sp, #32]
 800a768:	900e      	str	r0, [sp, #56]	@ 0x38
 800a76a:	0864      	lsrs	r4, r4, #1
 800a76c:	4294      	cmp	r4, r2
 800a76e:	d809      	bhi.n	800a784 <__ieee754_pow+0x78>
 800a770:	d101      	bne.n	800a776 <__ieee754_pow+0x6a>
 800a772:	2800      	cmp	r0, #0
 800a774:	d1ec      	bne.n	800a750 <__ieee754_pow+0x44>
 800a776:	9904      	ldr	r1, [sp, #16]
 800a778:	4a8d      	ldr	r2, [pc, #564]	@ (800a9b0 <__ieee754_pow+0x2a4>)
 800a77a:	4291      	cmp	r1, r2
 800a77c:	d802      	bhi.n	800a784 <__ieee754_pow+0x78>
 800a77e:	d10c      	bne.n	800a79a <__ieee754_pow+0x8e>
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00a      	beq.n	800a79a <__ieee754_pow+0x8e>
 800a784:	4b8b      	ldr	r3, [pc, #556]	@ (800a9b4 <__ieee754_pow+0x2a8>)
 800a786:	18fb      	adds	r3, r7, r3
 800a788:	4333      	orrs	r3, r6
 800a78a:	d1e1      	bne.n	800a750 <__ieee754_pow+0x44>
 800a78c:	2180      	movs	r1, #128	@ 0x80
 800a78e:	9803      	ldr	r0, [sp, #12]
 800a790:	0309      	lsls	r1, r1, #12
 800a792:	4048      	eors	r0, r1
 800a794:	0003      	movs	r3, r0
 800a796:	9a02      	ldr	r2, [sp, #8]
 800a798:	e7ce      	b.n	800a738 <__ieee754_pow+0x2c>
 800a79a:	2500      	movs	r5, #0
 800a79c:	9a08      	ldr	r2, [sp, #32]
 800a79e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a7a0:	42aa      	cmp	r2, r5
 800a7a2:	da68      	bge.n	800a876 <__ieee754_pow+0x16a>
 800a7a4:	4a84      	ldr	r2, [pc, #528]	@ (800a9b8 <__ieee754_pow+0x2ac>)
 800a7a6:	9904      	ldr	r1, [sp, #16]
 800a7a8:	4291      	cmp	r1, r2
 800a7aa:	d863      	bhi.n	800a874 <__ieee754_pow+0x168>
 800a7ac:	4a83      	ldr	r2, [pc, #524]	@ (800a9bc <__ieee754_pow+0x2b0>)
 800a7ae:	4291      	cmp	r1, r2
 800a7b0:	d910      	bls.n	800a7d4 <__ieee754_pow+0xc8>
 800a7b2:	150a      	asrs	r2, r1, #20
 800a7b4:	4982      	ldr	r1, [pc, #520]	@ (800a9c0 <__ieee754_pow+0x2b4>)
 800a7b6:	1852      	adds	r2, r2, r1
 800a7b8:	2a14      	cmp	r2, #20
 800a7ba:	dd3b      	ble.n	800a834 <__ieee754_pow+0x128>
 800a7bc:	2134      	movs	r1, #52	@ 0x34
 800a7be:	1a89      	subs	r1, r1, r2
 800a7c0:	9a02      	ldr	r2, [sp, #8]
 800a7c2:	40ca      	lsrs	r2, r1
 800a7c4:	0010      	movs	r0, r2
 800a7c6:	4088      	lsls	r0, r1
 800a7c8:	4298      	cmp	r0, r3
 800a7ca:	d103      	bne.n	800a7d4 <__ieee754_pow+0xc8>
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	3502      	adds	r5, #2
 800a7d0:	400a      	ands	r2, r1
 800a7d2:	1aad      	subs	r5, r5, r2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d03d      	beq.n	800a854 <__ieee754_pow+0x148>
 800a7d8:	0030      	movs	r0, r6
 800a7da:	0039      	movs	r1, r7
 800a7dc:	f000 fcc2 	bl	800b164 <fabs>
 800a7e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e2:	9000      	str	r0, [sp, #0]
 800a7e4:	9101      	str	r1, [sp, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d000      	beq.n	800a7ec <__ieee754_pow+0xe0>
 800a7ea:	e093      	b.n	800a914 <__ieee754_pow+0x208>
 800a7ec:	4a75      	ldr	r2, [pc, #468]	@ (800a9c4 <__ieee754_pow+0x2b8>)
 800a7ee:	00bb      	lsls	r3, r7, #2
 800a7f0:	089b      	lsrs	r3, r3, #2
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d002      	beq.n	800a7fc <__ieee754_pow+0xf0>
 800a7f6:	2c00      	cmp	r4, #0
 800a7f8:	d000      	beq.n	800a7fc <__ieee754_pow+0xf0>
 800a7fa:	e08b      	b.n	800a914 <__ieee754_pow+0x208>
 800a7fc:	9b06      	ldr	r3, [sp, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da07      	bge.n	800a812 <__ieee754_pow+0x106>
 800a802:	9a00      	ldr	r2, [sp, #0]
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	2000      	movs	r0, #0
 800a808:	496e      	ldr	r1, [pc, #440]	@ (800a9c4 <__ieee754_pow+0x2b8>)
 800a80a:	f7f6 fdb1 	bl	8001370 <__aeabi_ddiv>
 800a80e:	9000      	str	r0, [sp, #0]
 800a810:	9101      	str	r1, [sp, #4]
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	2b00      	cmp	r3, #0
 800a816:	da54      	bge.n	800a8c2 <__ieee754_pow+0x1b6>
 800a818:	4b66      	ldr	r3, [pc, #408]	@ (800a9b4 <__ieee754_pow+0x2a8>)
 800a81a:	18e4      	adds	r4, r4, r3
 800a81c:	432c      	orrs	r4, r5
 800a81e:	d000      	beq.n	800a822 <__ieee754_pow+0x116>
 800a820:	e06d      	b.n	800a8fe <__ieee754_pow+0x1f2>
 800a822:	9a00      	ldr	r2, [sp, #0]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	0010      	movs	r0, r2
 800a828:	0019      	movs	r1, r3
 800a82a:	f7f7 fcad 	bl	8002188 <__aeabi_dsub>
 800a82e:	0002      	movs	r2, r0
 800a830:	000b      	movs	r3, r1
 800a832:	e01c      	b.n	800a86e <__ieee754_pow+0x162>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1cf      	bne.n	800a7d8 <__ieee754_pow+0xcc>
 800a838:	3314      	adds	r3, #20
 800a83a:	1a9a      	subs	r2, r3, r2
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	4113      	asrs	r3, r2
 800a840:	0019      	movs	r1, r3
 800a842:	4091      	lsls	r1, r2
 800a844:	000a      	movs	r2, r1
 800a846:	9904      	ldr	r1, [sp, #16]
 800a848:	428a      	cmp	r2, r1
 800a84a:	d103      	bne.n	800a854 <__ieee754_pow+0x148>
 800a84c:	2201      	movs	r2, #1
 800a84e:	2502      	movs	r5, #2
 800a850:	4013      	ands	r3, r2
 800a852:	1aed      	subs	r5, r5, r3
 800a854:	4b5b      	ldr	r3, [pc, #364]	@ (800a9c4 <__ieee754_pow+0x2b8>)
 800a856:	9a04      	ldr	r2, [sp, #16]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d136      	bne.n	800a8ca <__ieee754_pow+0x1be>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	9600      	str	r6, [sp, #0]
 800a860:	9701      	str	r7, [sp, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	da2d      	bge.n	800a8c2 <__ieee754_pow+0x1b6>
 800a866:	0032      	movs	r2, r6
 800a868:	003b      	movs	r3, r7
 800a86a:	2000      	movs	r0, #0
 800a86c:	4955      	ldr	r1, [pc, #340]	@ (800a9c4 <__ieee754_pow+0x2b8>)
 800a86e:	f7f6 fd7f 	bl	8001370 <__aeabi_ddiv>
 800a872:	e773      	b.n	800a75c <__ieee754_pow+0x50>
 800a874:	2502      	movs	r5, #2
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1ae      	bne.n	800a7d8 <__ieee754_pow+0xcc>
 800a87a:	9b04      	ldr	r3, [sp, #16]
 800a87c:	4a4c      	ldr	r2, [pc, #304]	@ (800a9b0 <__ieee754_pow+0x2a4>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d1e8      	bne.n	800a854 <__ieee754_pow+0x148>
 800a882:	4b4c      	ldr	r3, [pc, #304]	@ (800a9b4 <__ieee754_pow+0x2a8>)
 800a884:	18e3      	adds	r3, r4, r3
 800a886:	4333      	orrs	r3, r6
 800a888:	d101      	bne.n	800a88e <__ieee754_pow+0x182>
 800a88a:	f000 fc3b 	bl	800b104 <__ieee754_pow+0x9f8>
 800a88e:	4b4b      	ldr	r3, [pc, #300]	@ (800a9bc <__ieee754_pow+0x2b0>)
 800a890:	429c      	cmp	r4, r3
 800a892:	d909      	bls.n	800a8a8 <__ieee754_pow+0x19c>
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	2b00      	cmp	r3, #0
 800a898:	da01      	bge.n	800a89e <__ieee754_pow+0x192>
 800a89a:	f000 fc37 	bl	800b10c <__ieee754_pow+0xa00>
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	9c03      	ldr	r4, [sp, #12]
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	9401      	str	r4, [sp, #4]
 800a8a6:	e00c      	b.n	800a8c2 <__ieee754_pow+0x1b6>
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	db01      	blt.n	800a8b2 <__ieee754_pow+0x1a6>
 800a8ae:	f000 fc2d 	bl	800b10c <__ieee754_pow+0xa00>
 800a8b2:	2280      	movs	r2, #128	@ 0x80
 800a8b4:	0612      	lsls	r2, r2, #24
 800a8b6:	4694      	mov	ip, r2
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	4463      	add	r3, ip
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	9800      	ldr	r0, [sp, #0]
 800a8c4:	9901      	ldr	r1, [sp, #4]
 800a8c6:	b015      	add	sp, #84	@ 0x54
 800a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ca:	2380      	movs	r3, #128	@ 0x80
 800a8cc:	9a06      	ldr	r2, [sp, #24]
 800a8ce:	05db      	lsls	r3, r3, #23
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d106      	bne.n	800a8e2 <__ieee754_pow+0x1d6>
 800a8d4:	0032      	movs	r2, r6
 800a8d6:	003b      	movs	r3, r7
 800a8d8:	0030      	movs	r0, r6
 800a8da:	0039      	movs	r1, r7
 800a8dc:	f7f7 f98c 	bl	8001bf8 <__aeabi_dmul>
 800a8e0:	e73c      	b.n	800a75c <__ieee754_pow+0x50>
 800a8e2:	4b39      	ldr	r3, [pc, #228]	@ (800a9c8 <__ieee754_pow+0x2bc>)
 800a8e4:	9a06      	ldr	r2, [sp, #24]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d000      	beq.n	800a8ec <__ieee754_pow+0x1e0>
 800a8ea:	e775      	b.n	800a7d8 <__ieee754_pow+0xcc>
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da00      	bge.n	800a8f4 <__ieee754_pow+0x1e8>
 800a8f2:	e771      	b.n	800a7d8 <__ieee754_pow+0xcc>
 800a8f4:	0030      	movs	r0, r6
 800a8f6:	0039      	movs	r1, r7
 800a8f8:	f000 fcd2 	bl	800b2a0 <__ieee754_sqrt>
 800a8fc:	e72e      	b.n	800a75c <__ieee754_pow+0x50>
 800a8fe:	2d01      	cmp	r5, #1
 800a900:	d1df      	bne.n	800a8c2 <__ieee754_pow+0x1b6>
 800a902:	9800      	ldr	r0, [sp, #0]
 800a904:	2180      	movs	r1, #128	@ 0x80
 800a906:	0002      	movs	r2, r0
 800a908:	9801      	ldr	r0, [sp, #4]
 800a90a:	0609      	lsls	r1, r1, #24
 800a90c:	1843      	adds	r3, r0, r1
 800a90e:	9200      	str	r2, [sp, #0]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	e7d6      	b.n	800a8c2 <__ieee754_pow+0x1b6>
 800a914:	0ffb      	lsrs	r3, r7, #31
 800a916:	3b01      	subs	r3, #1
 800a918:	001a      	movs	r2, r3
 800a91a:	432a      	orrs	r2, r5
 800a91c:	d104      	bne.n	800a928 <__ieee754_pow+0x21c>
 800a91e:	0032      	movs	r2, r6
 800a920:	003b      	movs	r3, r7
 800a922:	0030      	movs	r0, r6
 800a924:	0039      	movs	r1, r7
 800a926:	e780      	b.n	800a82a <__ieee754_pow+0x11e>
 800a928:	3d01      	subs	r5, #1
 800a92a:	2200      	movs	r2, #0
 800a92c:	431d      	orrs	r5, r3
 800a92e:	d015      	beq.n	800a95c <__ieee754_pow+0x250>
 800a930:	4b24      	ldr	r3, [pc, #144]	@ (800a9c4 <__ieee754_pow+0x2b8>)
 800a932:	9208      	str	r2, [sp, #32]
 800a934:	9309      	str	r3, [sp, #36]	@ 0x24
 800a936:	2384      	movs	r3, #132	@ 0x84
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	05db      	lsls	r3, r3, #23
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d800      	bhi.n	800a942 <__ieee754_pow+0x236>
 800a940:	e102      	b.n	800ab48 <__ieee754_pow+0x43c>
 800a942:	4b22      	ldr	r3, [pc, #136]	@ (800a9cc <__ieee754_pow+0x2c0>)
 800a944:	429a      	cmp	r2, r3
 800a946:	d912      	bls.n	800a96e <__ieee754_pow+0x262>
 800a948:	4b1c      	ldr	r3, [pc, #112]	@ (800a9bc <__ieee754_pow+0x2b0>)
 800a94a:	429c      	cmp	r4, r3
 800a94c:	d808      	bhi.n	800a960 <__ieee754_pow+0x254>
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	da08      	bge.n	800a966 <__ieee754_pow+0x25a>
 800a954:	2000      	movs	r0, #0
 800a956:	f000 fc9b 	bl	800b290 <__math_oflow>
 800a95a:	e6ff      	b.n	800a75c <__ieee754_pow+0x50>
 800a95c:	4b1c      	ldr	r3, [pc, #112]	@ (800a9d0 <__ieee754_pow+0x2c4>)
 800a95e:	e7e8      	b.n	800a932 <__ieee754_pow+0x226>
 800a960:	9b06      	ldr	r3, [sp, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	dcf6      	bgt.n	800a954 <__ieee754_pow+0x248>
 800a966:	2000      	movs	r0, #0
 800a968:	f000 fc8b 	bl	800b282 <__math_uflow>
 800a96c:	e6f6      	b.n	800a75c <__ieee754_pow+0x50>
 800a96e:	4b19      	ldr	r3, [pc, #100]	@ (800a9d4 <__ieee754_pow+0x2c8>)
 800a970:	429c      	cmp	r4, r3
 800a972:	d80b      	bhi.n	800a98c <__ieee754_pow+0x280>
 800a974:	9808      	ldr	r0, [sp, #32]
 800a976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a978:	2300      	movs	r3, #0
 800a97a:	2200      	movs	r2, #0
 800a97c:	f7f5 fd76 	bl	800046c <__aeabi_dcmplt>
 800a980:	1e43      	subs	r3, r0, #1
 800a982:	4198      	sbcs	r0, r3
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	daee      	bge.n	800a968 <__ieee754_pow+0x25c>
 800a98a:	e7e4      	b.n	800a956 <__ieee754_pow+0x24a>
 800a98c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c4 <__ieee754_pow+0x2b8>)
 800a98e:	2200      	movs	r2, #0
 800a990:	429c      	cmp	r4, r3
 800a992:	d921      	bls.n	800a9d8 <__ieee754_pow+0x2cc>
 800a994:	9808      	ldr	r0, [sp, #32]
 800a996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a998:	2300      	movs	r3, #0
 800a99a:	f7f5 fd67 	bl	800046c <__aeabi_dcmplt>
 800a99e:	1e43      	subs	r3, r0, #1
 800a9a0:	4198      	sbcs	r0, r3
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dcd6      	bgt.n	800a956 <__ieee754_pow+0x24a>
 800a9a8:	e7de      	b.n	800a968 <__ieee754_pow+0x25c>
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	fff00000 	.word	0xfff00000
 800a9b0:	7ff00000 	.word	0x7ff00000
 800a9b4:	c0100000 	.word	0xc0100000
 800a9b8:	433fffff 	.word	0x433fffff
 800a9bc:	3fefffff 	.word	0x3fefffff
 800a9c0:	fffffc01 	.word	0xfffffc01
 800a9c4:	3ff00000 	.word	0x3ff00000
 800a9c8:	3fe00000 	.word	0x3fe00000
 800a9cc:	43f00000 	.word	0x43f00000
 800a9d0:	bff00000 	.word	0xbff00000
 800a9d4:	3feffffe 	.word	0x3feffffe
 800a9d8:	9800      	ldr	r0, [sp, #0]
 800a9da:	9901      	ldr	r1, [sp, #4]
 800a9dc:	4b4f      	ldr	r3, [pc, #316]	@ (800ab1c <__ieee754_pow+0x410>)
 800a9de:	f7f7 fbd3 	bl	8002188 <__aeabi_dsub>
 800a9e2:	22c0      	movs	r2, #192	@ 0xc0
 800a9e4:	4b4e      	ldr	r3, [pc, #312]	@ (800ab20 <__ieee754_pow+0x414>)
 800a9e6:	05d2      	lsls	r2, r2, #23
 800a9e8:	0006      	movs	r6, r0
 800a9ea:	000f      	movs	r7, r1
 800a9ec:	f7f7 f904 	bl	8001bf8 <__aeabi_dmul>
 800a9f0:	4a4c      	ldr	r2, [pc, #304]	@ (800ab24 <__ieee754_pow+0x418>)
 800a9f2:	9004      	str	r0, [sp, #16]
 800a9f4:	9105      	str	r1, [sp, #20]
 800a9f6:	4b4c      	ldr	r3, [pc, #304]	@ (800ab28 <__ieee754_pow+0x41c>)
 800a9f8:	0030      	movs	r0, r6
 800a9fa:	0039      	movs	r1, r7
 800a9fc:	f7f7 f8fc 	bl	8001bf8 <__aeabi_dmul>
 800aa00:	2200      	movs	r2, #0
 800aa02:	9000      	str	r0, [sp, #0]
 800aa04:	9101      	str	r1, [sp, #4]
 800aa06:	4b49      	ldr	r3, [pc, #292]	@ (800ab2c <__ieee754_pow+0x420>)
 800aa08:	0030      	movs	r0, r6
 800aa0a:	0039      	movs	r1, r7
 800aa0c:	f7f7 f8f4 	bl	8001bf8 <__aeabi_dmul>
 800aa10:	0002      	movs	r2, r0
 800aa12:	000b      	movs	r3, r1
 800aa14:	4846      	ldr	r0, [pc, #280]	@ (800ab30 <__ieee754_pow+0x424>)
 800aa16:	4947      	ldr	r1, [pc, #284]	@ (800ab34 <__ieee754_pow+0x428>)
 800aa18:	f7f7 fbb6 	bl	8002188 <__aeabi_dsub>
 800aa1c:	0032      	movs	r2, r6
 800aa1e:	003b      	movs	r3, r7
 800aa20:	f7f7 f8ea 	bl	8001bf8 <__aeabi_dmul>
 800aa24:	0002      	movs	r2, r0
 800aa26:	000b      	movs	r3, r1
 800aa28:	2000      	movs	r0, #0
 800aa2a:	4943      	ldr	r1, [pc, #268]	@ (800ab38 <__ieee754_pow+0x42c>)
 800aa2c:	f7f7 fbac 	bl	8002188 <__aeabi_dsub>
 800aa30:	0032      	movs	r2, r6
 800aa32:	0004      	movs	r4, r0
 800aa34:	000d      	movs	r5, r1
 800aa36:	003b      	movs	r3, r7
 800aa38:	0030      	movs	r0, r6
 800aa3a:	0039      	movs	r1, r7
 800aa3c:	f7f7 f8dc 	bl	8001bf8 <__aeabi_dmul>
 800aa40:	0002      	movs	r2, r0
 800aa42:	000b      	movs	r3, r1
 800aa44:	0020      	movs	r0, r4
 800aa46:	0029      	movs	r1, r5
 800aa48:	f7f7 f8d6 	bl	8001bf8 <__aeabi_dmul>
 800aa4c:	4a3b      	ldr	r2, [pc, #236]	@ (800ab3c <__ieee754_pow+0x430>)
 800aa4e:	4b34      	ldr	r3, [pc, #208]	@ (800ab20 <__ieee754_pow+0x414>)
 800aa50:	f7f7 f8d2 	bl	8001bf8 <__aeabi_dmul>
 800aa54:	0002      	movs	r2, r0
 800aa56:	000b      	movs	r3, r1
 800aa58:	9800      	ldr	r0, [sp, #0]
 800aa5a:	9901      	ldr	r1, [sp, #4]
 800aa5c:	f7f7 fb94 	bl	8002188 <__aeabi_dsub>
 800aa60:	0002      	movs	r2, r0
 800aa62:	000b      	movs	r3, r1
 800aa64:	0004      	movs	r4, r0
 800aa66:	000d      	movs	r5, r1
 800aa68:	9804      	ldr	r0, [sp, #16]
 800aa6a:	9905      	ldr	r1, [sp, #20]
 800aa6c:	f7f6 f91c 	bl	8000ca8 <__aeabi_dadd>
 800aa70:	9a04      	ldr	r2, [sp, #16]
 800aa72:	9b05      	ldr	r3, [sp, #20]
 800aa74:	2000      	movs	r0, #0
 800aa76:	9000      	str	r0, [sp, #0]
 800aa78:	9101      	str	r1, [sp, #4]
 800aa7a:	f7f7 fb85 	bl	8002188 <__aeabi_dsub>
 800aa7e:	0002      	movs	r2, r0
 800aa80:	000b      	movs	r3, r1
 800aa82:	0020      	movs	r0, r4
 800aa84:	0029      	movs	r1, r5
 800aa86:	f7f7 fb7f 	bl	8002188 <__aeabi_dsub>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	9c03      	ldr	r4, [sp, #12]
 800aa8e:	9304      	str	r3, [sp, #16]
 800aa90:	9405      	str	r4, [sp, #20]
 800aa92:	2300      	movs	r3, #0
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	9c04      	ldr	r4, [sp, #16]
 800aa98:	9d05      	ldr	r5, [sp, #20]
 800aa9a:	0006      	movs	r6, r0
 800aa9c:	000f      	movs	r7, r1
 800aa9e:	9802      	ldr	r0, [sp, #8]
 800aaa0:	9903      	ldr	r1, [sp, #12]
 800aaa2:	0022      	movs	r2, r4
 800aaa4:	002b      	movs	r3, r5
 800aaa6:	f7f7 fb6f 	bl	8002188 <__aeabi_dsub>
 800aaaa:	9a00      	ldr	r2, [sp, #0]
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	f7f7 f8a3 	bl	8001bf8 <__aeabi_dmul>
 800aab2:	9a02      	ldr	r2, [sp, #8]
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	9006      	str	r0, [sp, #24]
 800aab8:	9107      	str	r1, [sp, #28]
 800aaba:	0030      	movs	r0, r6
 800aabc:	0039      	movs	r1, r7
 800aabe:	f7f7 f89b 	bl	8001bf8 <__aeabi_dmul>
 800aac2:	0002      	movs	r2, r0
 800aac4:	000b      	movs	r3, r1
 800aac6:	9806      	ldr	r0, [sp, #24]
 800aac8:	9907      	ldr	r1, [sp, #28]
 800aaca:	f7f6 f8ed 	bl	8000ca8 <__aeabi_dadd>
 800aace:	0022      	movs	r2, r4
 800aad0:	002b      	movs	r3, r5
 800aad2:	9002      	str	r0, [sp, #8]
 800aad4:	9103      	str	r1, [sp, #12]
 800aad6:	9800      	ldr	r0, [sp, #0]
 800aad8:	9901      	ldr	r1, [sp, #4]
 800aada:	f7f7 f88d 	bl	8001bf8 <__aeabi_dmul>
 800aade:	000b      	movs	r3, r1
 800aae0:	0002      	movs	r2, r0
 800aae2:	0006      	movs	r6, r0
 800aae4:	000f      	movs	r7, r1
 800aae6:	9802      	ldr	r0, [sp, #8]
 800aae8:	9903      	ldr	r1, [sp, #12]
 800aaea:	f7f6 f8dd 	bl	8000ca8 <__aeabi_dadd>
 800aaee:	9000      	str	r0, [sp, #0]
 800aaf0:	9101      	str	r1, [sp, #4]
 800aaf2:	9c01      	ldr	r4, [sp, #4]
 800aaf4:	4b12      	ldr	r3, [pc, #72]	@ (800ab40 <__ieee754_pow+0x434>)
 800aaf6:	9406      	str	r4, [sp, #24]
 800aaf8:	429c      	cmp	r4, r3
 800aafa:	dc00      	bgt.n	800aafe <__ieee754_pow+0x3f2>
 800aafc:	e222      	b.n	800af44 <__ieee754_pow+0x838>
 800aafe:	4a11      	ldr	r2, [pc, #68]	@ (800ab44 <__ieee754_pow+0x438>)
 800ab00:	18a3      	adds	r3, r4, r2
 800ab02:	9a00      	ldr	r2, [sp, #0]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	d100      	bne.n	800ab0a <__ieee754_pow+0x3fe>
 800ab08:	e1a0      	b.n	800ae4c <__ieee754_pow+0x740>
 800ab0a:	9808      	ldr	r0, [sp, #32]
 800ab0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab0e:	2300      	movs	r3, #0
 800ab10:	2200      	movs	r2, #0
 800ab12:	f7f5 fcab 	bl	800046c <__aeabi_dcmplt>
 800ab16:	1e43      	subs	r3, r0, #1
 800ab18:	4198      	sbcs	r0, r3
 800ab1a:	e71c      	b.n	800a956 <__ieee754_pow+0x24a>
 800ab1c:	3ff00000 	.word	0x3ff00000
 800ab20:	3ff71547 	.word	0x3ff71547
 800ab24:	f85ddf44 	.word	0xf85ddf44
 800ab28:	3e54ae0b 	.word	0x3e54ae0b
 800ab2c:	3fd00000 	.word	0x3fd00000
 800ab30:	55555555 	.word	0x55555555
 800ab34:	3fd55555 	.word	0x3fd55555
 800ab38:	3fe00000 	.word	0x3fe00000
 800ab3c:	652b82fe 	.word	0x652b82fe
 800ab40:	408fffff 	.word	0x408fffff
 800ab44:	bf700000 	.word	0xbf700000
 800ab48:	4be0      	ldr	r3, [pc, #896]	@ (800aecc <__ieee754_pow+0x7c0>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	423b      	tst	r3, r7
 800ab4e:	d10b      	bne.n	800ab68 <__ieee754_pow+0x45c>
 800ab50:	9800      	ldr	r0, [sp, #0]
 800ab52:	9901      	ldr	r1, [sp, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	4bde      	ldr	r3, [pc, #888]	@ (800aed0 <__ieee754_pow+0x7c4>)
 800ab58:	f7f7 f84e 	bl	8001bf8 <__aeabi_dmul>
 800ab5c:	2235      	movs	r2, #53	@ 0x35
 800ab5e:	9000      	str	r0, [sp, #0]
 800ab60:	9101      	str	r1, [sp, #4]
 800ab62:	9b01      	ldr	r3, [sp, #4]
 800ab64:	4252      	negs	r2, r2
 800ab66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab6a:	49da      	ldr	r1, [pc, #872]	@ (800aed4 <__ieee754_pow+0x7c8>)
 800ab6c:	151b      	asrs	r3, r3, #20
 800ab6e:	185b      	adds	r3, r3, r1
 800ab70:	189b      	adds	r3, r3, r2
 800ab72:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab76:	4dd8      	ldr	r5, [pc, #864]	@ (800aed8 <__ieee754_pow+0x7cc>)
 800ab78:	031b      	lsls	r3, r3, #12
 800ab7a:	4ad8      	ldr	r2, [pc, #864]	@ (800aedc <__ieee754_pow+0x7d0>)
 800ab7c:	0b1b      	lsrs	r3, r3, #12
 800ab7e:	2600      	movs	r6, #0
 800ab80:	431d      	orrs	r5, r3
 800ab82:	4293      	cmp	r3, r2
 800ab84:	dd09      	ble.n	800ab9a <__ieee754_pow+0x48e>
 800ab86:	4ad6      	ldr	r2, [pc, #856]	@ (800aee0 <__ieee754_pow+0x7d4>)
 800ab88:	3601      	adds	r6, #1
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	dd05      	ble.n	800ab9a <__ieee754_pow+0x48e>
 800ab8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab90:	199b      	adds	r3, r3, r6
 800ab92:	2600      	movs	r6, #0
 800ab94:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab96:	4bd3      	ldr	r3, [pc, #844]	@ (800aee4 <__ieee754_pow+0x7d8>)
 800ab98:	18ed      	adds	r5, r5, r3
 800ab9a:	9800      	ldr	r0, [sp, #0]
 800ab9c:	9901      	ldr	r1, [sp, #4]
 800ab9e:	0029      	movs	r1, r5
 800aba0:	4bd1      	ldr	r3, [pc, #836]	@ (800aee8 <__ieee754_pow+0x7dc>)
 800aba2:	00f2      	lsls	r2, r6, #3
 800aba4:	189b      	adds	r3, r3, r2
 800aba6:	685c      	ldr	r4, [r3, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	920f      	str	r2, [sp, #60]	@ 0x3c
 800abac:	930a      	str	r3, [sp, #40]	@ 0x28
 800abae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abb0:	001a      	movs	r2, r3
 800abb2:	0023      	movs	r3, r4
 800abb4:	900c      	str	r0, [sp, #48]	@ 0x30
 800abb6:	910d      	str	r1, [sp, #52]	@ 0x34
 800abb8:	f7f7 fae6 	bl	8002188 <__aeabi_dsub>
 800abbc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800abbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abc0:	9010      	str	r0, [sp, #64]	@ 0x40
 800abc2:	9111      	str	r1, [sp, #68]	@ 0x44
 800abc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abc6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abc8:	f7f6 f86e 	bl	8000ca8 <__aeabi_dadd>
 800abcc:	0002      	movs	r2, r0
 800abce:	000b      	movs	r3, r1
 800abd0:	2000      	movs	r0, #0
 800abd2:	49c1      	ldr	r1, [pc, #772]	@ (800aed8 <__ieee754_pow+0x7cc>)
 800abd4:	f7f6 fbcc 	bl	8001370 <__aeabi_ddiv>
 800abd8:	0002      	movs	r2, r0
 800abda:	000b      	movs	r3, r1
 800abdc:	9012      	str	r0, [sp, #72]	@ 0x48
 800abde:	9113      	str	r1, [sp, #76]	@ 0x4c
 800abe0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800abe2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800abe4:	f7f7 f808 	bl	8001bf8 <__aeabi_dmul>
 800abe8:	9006      	str	r0, [sp, #24]
 800abea:	9107      	str	r1, [sp, #28]
 800abec:	9b06      	ldr	r3, [sp, #24]
 800abee:	9c07      	ldr	r4, [sp, #28]
 800abf0:	2180      	movs	r1, #128	@ 0x80
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	9405      	str	r4, [sp, #20]
 800abf6:	2080      	movs	r0, #128	@ 0x80
 800abf8:	2300      	movs	r3, #0
 800abfa:	2200      	movs	r2, #0
 800abfc:	106d      	asrs	r5, r5, #1
 800abfe:	0589      	lsls	r1, r1, #22
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	4329      	orrs	r1, r5
 800ac04:	0300      	lsls	r0, r0, #12
 800ac06:	9b04      	ldr	r3, [sp, #16]
 800ac08:	9c05      	ldr	r4, [sp, #20]
 800ac0a:	1809      	adds	r1, r1, r0
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	9401      	str	r4, [sp, #4]
 800ac10:	04b6      	lsls	r6, r6, #18
 800ac12:	198b      	adds	r3, r1, r6
 800ac14:	9800      	ldr	r0, [sp, #0]
 800ac16:	9901      	ldr	r1, [sp, #4]
 800ac18:	0014      	movs	r4, r2
 800ac1a:	001d      	movs	r5, r3
 800ac1c:	f7f6 ffec 	bl	8001bf8 <__aeabi_dmul>
 800ac20:	0002      	movs	r2, r0
 800ac22:	000b      	movs	r3, r1
 800ac24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ac26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ac28:	f7f7 faae 	bl	8002188 <__aeabi_dsub>
 800ac2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac30:	0006      	movs	r6, r0
 800ac32:	000f      	movs	r7, r1
 800ac34:	0020      	movs	r0, r4
 800ac36:	0029      	movs	r1, r5
 800ac38:	f7f7 faa6 	bl	8002188 <__aeabi_dsub>
 800ac3c:	0002      	movs	r2, r0
 800ac3e:	000b      	movs	r3, r1
 800ac40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ac42:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ac44:	f7f7 faa0 	bl	8002188 <__aeabi_dsub>
 800ac48:	9a00      	ldr	r2, [sp, #0]
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	f7f6 ffd4 	bl	8001bf8 <__aeabi_dmul>
 800ac50:	0002      	movs	r2, r0
 800ac52:	000b      	movs	r3, r1
 800ac54:	0030      	movs	r0, r6
 800ac56:	0039      	movs	r1, r7
 800ac58:	f7f7 fa96 	bl	8002188 <__aeabi_dsub>
 800ac5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac60:	f7f6 ffca 	bl	8001bf8 <__aeabi_dmul>
 800ac64:	9a06      	ldr	r2, [sp, #24]
 800ac66:	9b07      	ldr	r3, [sp, #28]
 800ac68:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac6c:	0010      	movs	r0, r2
 800ac6e:	0019      	movs	r1, r3
 800ac70:	f7f6 ffc2 	bl	8001bf8 <__aeabi_dmul>
 800ac74:	0006      	movs	r6, r0
 800ac76:	000f      	movs	r7, r1
 800ac78:	4a9c      	ldr	r2, [pc, #624]	@ (800aeec <__ieee754_pow+0x7e0>)
 800ac7a:	4b9d      	ldr	r3, [pc, #628]	@ (800aef0 <__ieee754_pow+0x7e4>)
 800ac7c:	f7f6 ffbc 	bl	8001bf8 <__aeabi_dmul>
 800ac80:	4a9c      	ldr	r2, [pc, #624]	@ (800aef4 <__ieee754_pow+0x7e8>)
 800ac82:	4b9d      	ldr	r3, [pc, #628]	@ (800aef8 <__ieee754_pow+0x7ec>)
 800ac84:	f7f6 f810 	bl	8000ca8 <__aeabi_dadd>
 800ac88:	0032      	movs	r2, r6
 800ac8a:	003b      	movs	r3, r7
 800ac8c:	f7f6 ffb4 	bl	8001bf8 <__aeabi_dmul>
 800ac90:	4a9a      	ldr	r2, [pc, #616]	@ (800aefc <__ieee754_pow+0x7f0>)
 800ac92:	4b9b      	ldr	r3, [pc, #620]	@ (800af00 <__ieee754_pow+0x7f4>)
 800ac94:	f7f6 f808 	bl	8000ca8 <__aeabi_dadd>
 800ac98:	0032      	movs	r2, r6
 800ac9a:	003b      	movs	r3, r7
 800ac9c:	f7f6 ffac 	bl	8001bf8 <__aeabi_dmul>
 800aca0:	4a98      	ldr	r2, [pc, #608]	@ (800af04 <__ieee754_pow+0x7f8>)
 800aca2:	4b99      	ldr	r3, [pc, #612]	@ (800af08 <__ieee754_pow+0x7fc>)
 800aca4:	f7f6 f800 	bl	8000ca8 <__aeabi_dadd>
 800aca8:	0032      	movs	r2, r6
 800acaa:	003b      	movs	r3, r7
 800acac:	f7f6 ffa4 	bl	8001bf8 <__aeabi_dmul>
 800acb0:	4a96      	ldr	r2, [pc, #600]	@ (800af0c <__ieee754_pow+0x800>)
 800acb2:	4b97      	ldr	r3, [pc, #604]	@ (800af10 <__ieee754_pow+0x804>)
 800acb4:	f7f5 fff8 	bl	8000ca8 <__aeabi_dadd>
 800acb8:	0032      	movs	r2, r6
 800acba:	003b      	movs	r3, r7
 800acbc:	f7f6 ff9c 	bl	8001bf8 <__aeabi_dmul>
 800acc0:	4a94      	ldr	r2, [pc, #592]	@ (800af14 <__ieee754_pow+0x808>)
 800acc2:	4b95      	ldr	r3, [pc, #596]	@ (800af18 <__ieee754_pow+0x80c>)
 800acc4:	f7f5 fff0 	bl	8000ca8 <__aeabi_dadd>
 800acc8:	0032      	movs	r2, r6
 800acca:	0004      	movs	r4, r0
 800accc:	000d      	movs	r5, r1
 800acce:	003b      	movs	r3, r7
 800acd0:	0030      	movs	r0, r6
 800acd2:	0039      	movs	r1, r7
 800acd4:	f7f6 ff90 	bl	8001bf8 <__aeabi_dmul>
 800acd8:	0002      	movs	r2, r0
 800acda:	000b      	movs	r3, r1
 800acdc:	0020      	movs	r0, r4
 800acde:	0029      	movs	r1, r5
 800ace0:	f7f6 ff8a 	bl	8001bf8 <__aeabi_dmul>
 800ace4:	9a00      	ldr	r2, [sp, #0]
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	0004      	movs	r4, r0
 800acea:	000d      	movs	r5, r1
 800acec:	9806      	ldr	r0, [sp, #24]
 800acee:	9907      	ldr	r1, [sp, #28]
 800acf0:	f7f5 ffda 	bl	8000ca8 <__aeabi_dadd>
 800acf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acf8:	f7f6 ff7e 	bl	8001bf8 <__aeabi_dmul>
 800acfc:	0022      	movs	r2, r4
 800acfe:	002b      	movs	r3, r5
 800ad00:	f7f5 ffd2 	bl	8000ca8 <__aeabi_dadd>
 800ad04:	9a00      	ldr	r2, [sp, #0]
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	900c      	str	r0, [sp, #48]	@ 0x30
 800ad0a:	910d      	str	r1, [sp, #52]	@ 0x34
 800ad0c:	0010      	movs	r0, r2
 800ad0e:	0019      	movs	r1, r3
 800ad10:	f7f6 ff72 	bl	8001bf8 <__aeabi_dmul>
 800ad14:	2200      	movs	r2, #0
 800ad16:	4b81      	ldr	r3, [pc, #516]	@ (800af1c <__ieee754_pow+0x810>)
 800ad18:	0004      	movs	r4, r0
 800ad1a:	000d      	movs	r5, r1
 800ad1c:	f7f5 ffc4 	bl	8000ca8 <__aeabi_dadd>
 800ad20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad24:	f7f5 ffc0 	bl	8000ca8 <__aeabi_dadd>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	000f      	movs	r7, r1
 800ad2c:	0006      	movs	r6, r0
 800ad2e:	0002      	movs	r2, r0
 800ad30:	000b      	movs	r3, r1
 800ad32:	9800      	ldr	r0, [sp, #0]
 800ad34:	9901      	ldr	r1, [sp, #4]
 800ad36:	f7f6 ff5f 	bl	8001bf8 <__aeabi_dmul>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	9000      	str	r0, [sp, #0]
 800ad3e:	9101      	str	r1, [sp, #4]
 800ad40:	4b76      	ldr	r3, [pc, #472]	@ (800af1c <__ieee754_pow+0x810>)
 800ad42:	0030      	movs	r0, r6
 800ad44:	0039      	movs	r1, r7
 800ad46:	f7f7 fa1f 	bl	8002188 <__aeabi_dsub>
 800ad4a:	0022      	movs	r2, r4
 800ad4c:	002b      	movs	r3, r5
 800ad4e:	f7f7 fa1b 	bl	8002188 <__aeabi_dsub>
 800ad52:	0002      	movs	r2, r0
 800ad54:	000b      	movs	r3, r1
 800ad56:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ad58:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ad5a:	f7f7 fa15 	bl	8002188 <__aeabi_dsub>
 800ad5e:	9a06      	ldr	r2, [sp, #24]
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	f7f6 ff49 	bl	8001bf8 <__aeabi_dmul>
 800ad66:	0032      	movs	r2, r6
 800ad68:	0004      	movs	r4, r0
 800ad6a:	000d      	movs	r5, r1
 800ad6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad70:	003b      	movs	r3, r7
 800ad72:	f7f6 ff41 	bl	8001bf8 <__aeabi_dmul>
 800ad76:	0002      	movs	r2, r0
 800ad78:	000b      	movs	r3, r1
 800ad7a:	0020      	movs	r0, r4
 800ad7c:	0029      	movs	r1, r5
 800ad7e:	f7f5 ff93 	bl	8000ca8 <__aeabi_dadd>
 800ad82:	0004      	movs	r4, r0
 800ad84:	000d      	movs	r5, r1
 800ad86:	0002      	movs	r2, r0
 800ad88:	000b      	movs	r3, r1
 800ad8a:	9800      	ldr	r0, [sp, #0]
 800ad8c:	9901      	ldr	r1, [sp, #4]
 800ad8e:	f7f5 ff8b 	bl	8000ca8 <__aeabi_dadd>
 800ad92:	22e0      	movs	r2, #224	@ 0xe0
 800ad94:	2000      	movs	r0, #0
 800ad96:	4b62      	ldr	r3, [pc, #392]	@ (800af20 <__ieee754_pow+0x814>)
 800ad98:	0612      	lsls	r2, r2, #24
 800ad9a:	0006      	movs	r6, r0
 800ad9c:	000f      	movs	r7, r1
 800ad9e:	f7f6 ff2b 	bl	8001bf8 <__aeabi_dmul>
 800ada2:	9006      	str	r0, [sp, #24]
 800ada4:	9107      	str	r1, [sp, #28]
 800ada6:	9a00      	ldr	r2, [sp, #0]
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	0030      	movs	r0, r6
 800adac:	0039      	movs	r1, r7
 800adae:	f7f7 f9eb 	bl	8002188 <__aeabi_dsub>
 800adb2:	0002      	movs	r2, r0
 800adb4:	000b      	movs	r3, r1
 800adb6:	0020      	movs	r0, r4
 800adb8:	0029      	movs	r1, r5
 800adba:	f7f7 f9e5 	bl	8002188 <__aeabi_dsub>
 800adbe:	4a59      	ldr	r2, [pc, #356]	@ (800af24 <__ieee754_pow+0x818>)
 800adc0:	4b57      	ldr	r3, [pc, #348]	@ (800af20 <__ieee754_pow+0x814>)
 800adc2:	f7f6 ff19 	bl	8001bf8 <__aeabi_dmul>
 800adc6:	4a58      	ldr	r2, [pc, #352]	@ (800af28 <__ieee754_pow+0x81c>)
 800adc8:	0004      	movs	r4, r0
 800adca:	000d      	movs	r5, r1
 800adcc:	0030      	movs	r0, r6
 800adce:	0039      	movs	r1, r7
 800add0:	4b56      	ldr	r3, [pc, #344]	@ (800af2c <__ieee754_pow+0x820>)
 800add2:	f7f6 ff11 	bl	8001bf8 <__aeabi_dmul>
 800add6:	0002      	movs	r2, r0
 800add8:	000b      	movs	r3, r1
 800adda:	0020      	movs	r0, r4
 800addc:	0029      	movs	r1, r5
 800adde:	f7f5 ff63 	bl	8000ca8 <__aeabi_dadd>
 800ade2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ade4:	4b52      	ldr	r3, [pc, #328]	@ (800af30 <__ieee754_pow+0x824>)
 800ade6:	189b      	adds	r3, r3, r2
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f7f5 ff5c 	bl	8000ca8 <__aeabi_dadd>
 800adf0:	900a      	str	r0, [sp, #40]	@ 0x28
 800adf2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800adf4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800adf6:	f7f7 fdc1 	bl	800297c <__aeabi_i2d>
 800adfa:	0004      	movs	r4, r0
 800adfc:	000d      	movs	r5, r1
 800adfe:	9806      	ldr	r0, [sp, #24]
 800ae00:	9907      	ldr	r1, [sp, #28]
 800ae02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae04:	4b4b      	ldr	r3, [pc, #300]	@ (800af34 <__ieee754_pow+0x828>)
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	681e      	ldr	r6, [r3, #0]
 800ae0a:	685f      	ldr	r7, [r3, #4]
 800ae0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae10:	f7f5 ff4a 	bl	8000ca8 <__aeabi_dadd>
 800ae14:	0032      	movs	r2, r6
 800ae16:	003b      	movs	r3, r7
 800ae18:	f7f5 ff46 	bl	8000ca8 <__aeabi_dadd>
 800ae1c:	0022      	movs	r2, r4
 800ae1e:	002b      	movs	r3, r5
 800ae20:	f7f5 ff42 	bl	8000ca8 <__aeabi_dadd>
 800ae24:	2000      	movs	r0, #0
 800ae26:	0022      	movs	r2, r4
 800ae28:	002b      	movs	r3, r5
 800ae2a:	9000      	str	r0, [sp, #0]
 800ae2c:	9101      	str	r1, [sp, #4]
 800ae2e:	f7f7 f9ab 	bl	8002188 <__aeabi_dsub>
 800ae32:	0032      	movs	r2, r6
 800ae34:	003b      	movs	r3, r7
 800ae36:	f7f7 f9a7 	bl	8002188 <__aeabi_dsub>
 800ae3a:	9a06      	ldr	r2, [sp, #24]
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	f7f7 f9a3 	bl	8002188 <__aeabi_dsub>
 800ae42:	0002      	movs	r2, r0
 800ae44:	000b      	movs	r3, r1
 800ae46:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae4a:	e61c      	b.n	800aa86 <__ieee754_pow+0x37a>
 800ae4c:	4a3a      	ldr	r2, [pc, #232]	@ (800af38 <__ieee754_pow+0x82c>)
 800ae4e:	4b3b      	ldr	r3, [pc, #236]	@ (800af3c <__ieee754_pow+0x830>)
 800ae50:	9802      	ldr	r0, [sp, #8]
 800ae52:	9903      	ldr	r1, [sp, #12]
 800ae54:	f7f5 ff28 	bl	8000ca8 <__aeabi_dadd>
 800ae58:	0032      	movs	r2, r6
 800ae5a:	003b      	movs	r3, r7
 800ae5c:	9004      	str	r0, [sp, #16]
 800ae5e:	9105      	str	r1, [sp, #20]
 800ae60:	9800      	ldr	r0, [sp, #0]
 800ae62:	9901      	ldr	r1, [sp, #4]
 800ae64:	f7f7 f990 	bl	8002188 <__aeabi_dsub>
 800ae68:	0002      	movs	r2, r0
 800ae6a:	000b      	movs	r3, r1
 800ae6c:	9804      	ldr	r0, [sp, #16]
 800ae6e:	9905      	ldr	r1, [sp, #20]
 800ae70:	f7f5 fb10 	bl	8000494 <__aeabi_dcmpgt>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d000      	beq.n	800ae7a <__ieee754_pow+0x76e>
 800ae78:	e647      	b.n	800ab0a <__ieee754_pow+0x3fe>
 800ae7a:	2580      	movs	r5, #128	@ 0x80
 800ae7c:	4b30      	ldr	r3, [pc, #192]	@ (800af40 <__ieee754_pow+0x834>)
 800ae7e:	036d      	lsls	r5, r5, #13
 800ae80:	1524      	asrs	r4, r4, #20
 800ae82:	18e4      	adds	r4, r4, r3
 800ae84:	002b      	movs	r3, r5
 800ae86:	4123      	asrs	r3, r4
 800ae88:	9a06      	ldr	r2, [sp, #24]
 800ae8a:	4912      	ldr	r1, [pc, #72]	@ (800aed4 <__ieee754_pow+0x7c8>)
 800ae8c:	189b      	adds	r3, r3, r2
 800ae8e:	005a      	lsls	r2, r3, #1
 800ae90:	4c14      	ldr	r4, [pc, #80]	@ (800aee4 <__ieee754_pow+0x7d8>)
 800ae92:	0d52      	lsrs	r2, r2, #21
 800ae94:	1852      	adds	r2, r2, r1
 800ae96:	4114      	asrs	r4, r2
 800ae98:	401c      	ands	r4, r3
 800ae9a:	0021      	movs	r1, r4
 800ae9c:	2414      	movs	r4, #20
 800ae9e:	031b      	lsls	r3, r3, #12
 800aea0:	0b1b      	lsrs	r3, r3, #12
 800aea2:	432b      	orrs	r3, r5
 800aea4:	1aa2      	subs	r2, r4, r2
 800aea6:	4113      	asrs	r3, r2
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	9b06      	ldr	r3, [sp, #24]
 800aeac:	2000      	movs	r0, #0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da02      	bge.n	800aeb8 <__ieee754_pow+0x7ac>
 800aeb2:	9b00      	ldr	r3, [sp, #0]
 800aeb4:	425b      	negs	r3, r3
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	0002      	movs	r2, r0
 800aeba:	000b      	movs	r3, r1
 800aebc:	0030      	movs	r0, r6
 800aebe:	0039      	movs	r1, r7
 800aec0:	f7f7 f962 	bl	8002188 <__aeabi_dsub>
 800aec4:	0006      	movs	r6, r0
 800aec6:	000f      	movs	r7, r1
 800aec8:	e065      	b.n	800af96 <__ieee754_pow+0x88a>
 800aeca:	46c0      	nop			@ (mov r8, r8)
 800aecc:	7ff00000 	.word	0x7ff00000
 800aed0:	43400000 	.word	0x43400000
 800aed4:	fffffc01 	.word	0xfffffc01
 800aed8:	3ff00000 	.word	0x3ff00000
 800aedc:	0003988e 	.word	0x0003988e
 800aee0:	000bb679 	.word	0x000bb679
 800aee4:	fff00000 	.word	0xfff00000
 800aee8:	0800ba50 	.word	0x0800ba50
 800aeec:	4a454eef 	.word	0x4a454eef
 800aef0:	3fca7e28 	.word	0x3fca7e28
 800aef4:	93c9db65 	.word	0x93c9db65
 800aef8:	3fcd864a 	.word	0x3fcd864a
 800aefc:	a91d4101 	.word	0xa91d4101
 800af00:	3fd17460 	.word	0x3fd17460
 800af04:	518f264d 	.word	0x518f264d
 800af08:	3fd55555 	.word	0x3fd55555
 800af0c:	db6fabff 	.word	0xdb6fabff
 800af10:	3fdb6db6 	.word	0x3fdb6db6
 800af14:	33333303 	.word	0x33333303
 800af18:	3fe33333 	.word	0x3fe33333
 800af1c:	40080000 	.word	0x40080000
 800af20:	3feec709 	.word	0x3feec709
 800af24:	dc3a03fd 	.word	0xdc3a03fd
 800af28:	145b01f5 	.word	0x145b01f5
 800af2c:	be3e2fe0 	.word	0xbe3e2fe0
 800af30:	0800ba30 	.word	0x0800ba30
 800af34:	0800ba40 	.word	0x0800ba40
 800af38:	652b82fe 	.word	0x652b82fe
 800af3c:	3c971547 	.word	0x3c971547
 800af40:	fffffc02 	.word	0xfffffc02
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	005c      	lsls	r4, r3, #1
 800af48:	4b72      	ldr	r3, [pc, #456]	@ (800b114 <__ieee754_pow+0xa08>)
 800af4a:	0864      	lsrs	r4, r4, #1
 800af4c:	429c      	cmp	r4, r3
 800af4e:	d91c      	bls.n	800af8a <__ieee754_pow+0x87e>
 800af50:	4a71      	ldr	r2, [pc, #452]	@ (800b118 <__ieee754_pow+0xa0c>)
 800af52:	9b01      	ldr	r3, [sp, #4]
 800af54:	189b      	adds	r3, r3, r2
 800af56:	9a00      	ldr	r2, [sp, #0]
 800af58:	4313      	orrs	r3, r2
 800af5a:	d008      	beq.n	800af6e <__ieee754_pow+0x862>
 800af5c:	9808      	ldr	r0, [sp, #32]
 800af5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af60:	2300      	movs	r3, #0
 800af62:	2200      	movs	r2, #0
 800af64:	f7f5 fa82 	bl	800046c <__aeabi_dcmplt>
 800af68:	1e43      	subs	r3, r0, #1
 800af6a:	4198      	sbcs	r0, r3
 800af6c:	e4fc      	b.n	800a968 <__ieee754_pow+0x25c>
 800af6e:	0032      	movs	r2, r6
 800af70:	9800      	ldr	r0, [sp, #0]
 800af72:	9901      	ldr	r1, [sp, #4]
 800af74:	003b      	movs	r3, r7
 800af76:	f7f7 f907 	bl	8002188 <__aeabi_dsub>
 800af7a:	9a02      	ldr	r2, [sp, #8]
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	f7f5 fa93 	bl	80004a8 <__aeabi_dcmpge>
 800af82:	2800      	cmp	r0, #0
 800af84:	d1ea      	bne.n	800af5c <__ieee754_pow+0x850>
 800af86:	4c65      	ldr	r4, [pc, #404]	@ (800b11c <__ieee754_pow+0xa10>)
 800af88:	e777      	b.n	800ae7a <__ieee754_pow+0x76e>
 800af8a:	9a04      	ldr	r2, [sp, #16]
 800af8c:	4b64      	ldr	r3, [pc, #400]	@ (800b120 <__ieee754_pow+0xa14>)
 800af8e:	9200      	str	r2, [sp, #0]
 800af90:	429c      	cmp	r4, r3
 800af92:	d900      	bls.n	800af96 <__ieee754_pow+0x88a>
 800af94:	e771      	b.n	800ae7a <__ieee754_pow+0x76e>
 800af96:	9a02      	ldr	r2, [sp, #8]
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	0030      	movs	r0, r6
 800af9c:	0039      	movs	r1, r7
 800af9e:	f7f5 fe83 	bl	8000ca8 <__aeabi_dadd>
 800afa2:	2000      	movs	r0, #0
 800afa4:	2200      	movs	r2, #0
 800afa6:	4b5f      	ldr	r3, [pc, #380]	@ (800b124 <__ieee754_pow+0xa18>)
 800afa8:	9004      	str	r0, [sp, #16]
 800afaa:	9105      	str	r1, [sp, #20]
 800afac:	f7f6 fe24 	bl	8001bf8 <__aeabi_dmul>
 800afb0:	0032      	movs	r2, r6
 800afb2:	003b      	movs	r3, r7
 800afb4:	9006      	str	r0, [sp, #24]
 800afb6:	9107      	str	r1, [sp, #28]
 800afb8:	9804      	ldr	r0, [sp, #16]
 800afba:	9905      	ldr	r1, [sp, #20]
 800afbc:	f7f7 f8e4 	bl	8002188 <__aeabi_dsub>
 800afc0:	0002      	movs	r2, r0
 800afc2:	000b      	movs	r3, r1
 800afc4:	9802      	ldr	r0, [sp, #8]
 800afc6:	9903      	ldr	r1, [sp, #12]
 800afc8:	f7f7 f8de 	bl	8002188 <__aeabi_dsub>
 800afcc:	4a56      	ldr	r2, [pc, #344]	@ (800b128 <__ieee754_pow+0xa1c>)
 800afce:	4b57      	ldr	r3, [pc, #348]	@ (800b12c <__ieee754_pow+0xa20>)
 800afd0:	f7f6 fe12 	bl	8001bf8 <__aeabi_dmul>
 800afd4:	4a56      	ldr	r2, [pc, #344]	@ (800b130 <__ieee754_pow+0xa24>)
 800afd6:	0004      	movs	r4, r0
 800afd8:	000d      	movs	r5, r1
 800afda:	9804      	ldr	r0, [sp, #16]
 800afdc:	9905      	ldr	r1, [sp, #20]
 800afde:	4b55      	ldr	r3, [pc, #340]	@ (800b134 <__ieee754_pow+0xa28>)
 800afe0:	f7f6 fe0a 	bl	8001bf8 <__aeabi_dmul>
 800afe4:	0002      	movs	r2, r0
 800afe6:	000b      	movs	r3, r1
 800afe8:	0020      	movs	r0, r4
 800afea:	0029      	movs	r1, r5
 800afec:	f7f5 fe5c 	bl	8000ca8 <__aeabi_dadd>
 800aff0:	0004      	movs	r4, r0
 800aff2:	000d      	movs	r5, r1
 800aff4:	0002      	movs	r2, r0
 800aff6:	000b      	movs	r3, r1
 800aff8:	9806      	ldr	r0, [sp, #24]
 800affa:	9907      	ldr	r1, [sp, #28]
 800affc:	f7f5 fe54 	bl	8000ca8 <__aeabi_dadd>
 800b000:	9a06      	ldr	r2, [sp, #24]
 800b002:	9b07      	ldr	r3, [sp, #28]
 800b004:	0006      	movs	r6, r0
 800b006:	000f      	movs	r7, r1
 800b008:	f7f7 f8be 	bl	8002188 <__aeabi_dsub>
 800b00c:	0002      	movs	r2, r0
 800b00e:	000b      	movs	r3, r1
 800b010:	0020      	movs	r0, r4
 800b012:	0029      	movs	r1, r5
 800b014:	f7f7 f8b8 	bl	8002188 <__aeabi_dsub>
 800b018:	0032      	movs	r2, r6
 800b01a:	9002      	str	r0, [sp, #8]
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	003b      	movs	r3, r7
 800b020:	0030      	movs	r0, r6
 800b022:	0039      	movs	r1, r7
 800b024:	f7f6 fde8 	bl	8001bf8 <__aeabi_dmul>
 800b028:	0004      	movs	r4, r0
 800b02a:	000d      	movs	r5, r1
 800b02c:	4a42      	ldr	r2, [pc, #264]	@ (800b138 <__ieee754_pow+0xa2c>)
 800b02e:	4b43      	ldr	r3, [pc, #268]	@ (800b13c <__ieee754_pow+0xa30>)
 800b030:	f7f6 fde2 	bl	8001bf8 <__aeabi_dmul>
 800b034:	4a42      	ldr	r2, [pc, #264]	@ (800b140 <__ieee754_pow+0xa34>)
 800b036:	4b43      	ldr	r3, [pc, #268]	@ (800b144 <__ieee754_pow+0xa38>)
 800b038:	f7f7 f8a6 	bl	8002188 <__aeabi_dsub>
 800b03c:	0022      	movs	r2, r4
 800b03e:	002b      	movs	r3, r5
 800b040:	f7f6 fdda 	bl	8001bf8 <__aeabi_dmul>
 800b044:	4a40      	ldr	r2, [pc, #256]	@ (800b148 <__ieee754_pow+0xa3c>)
 800b046:	4b41      	ldr	r3, [pc, #260]	@ (800b14c <__ieee754_pow+0xa40>)
 800b048:	f7f5 fe2e 	bl	8000ca8 <__aeabi_dadd>
 800b04c:	0022      	movs	r2, r4
 800b04e:	002b      	movs	r3, r5
 800b050:	f7f6 fdd2 	bl	8001bf8 <__aeabi_dmul>
 800b054:	4a3e      	ldr	r2, [pc, #248]	@ (800b150 <__ieee754_pow+0xa44>)
 800b056:	4b3f      	ldr	r3, [pc, #252]	@ (800b154 <__ieee754_pow+0xa48>)
 800b058:	f7f7 f896 	bl	8002188 <__aeabi_dsub>
 800b05c:	0022      	movs	r2, r4
 800b05e:	002b      	movs	r3, r5
 800b060:	f7f6 fdca 	bl	8001bf8 <__aeabi_dmul>
 800b064:	4a3c      	ldr	r2, [pc, #240]	@ (800b158 <__ieee754_pow+0xa4c>)
 800b066:	4b3d      	ldr	r3, [pc, #244]	@ (800b15c <__ieee754_pow+0xa50>)
 800b068:	f7f5 fe1e 	bl	8000ca8 <__aeabi_dadd>
 800b06c:	0022      	movs	r2, r4
 800b06e:	002b      	movs	r3, r5
 800b070:	f7f6 fdc2 	bl	8001bf8 <__aeabi_dmul>
 800b074:	0002      	movs	r2, r0
 800b076:	000b      	movs	r3, r1
 800b078:	0030      	movs	r0, r6
 800b07a:	0039      	movs	r1, r7
 800b07c:	f7f7 f884 	bl	8002188 <__aeabi_dsub>
 800b080:	0004      	movs	r4, r0
 800b082:	000d      	movs	r5, r1
 800b084:	0002      	movs	r2, r0
 800b086:	000b      	movs	r3, r1
 800b088:	0030      	movs	r0, r6
 800b08a:	0039      	movs	r1, r7
 800b08c:	f7f6 fdb4 	bl	8001bf8 <__aeabi_dmul>
 800b090:	2380      	movs	r3, #128	@ 0x80
 800b092:	9004      	str	r0, [sp, #16]
 800b094:	9105      	str	r1, [sp, #20]
 800b096:	2200      	movs	r2, #0
 800b098:	0020      	movs	r0, r4
 800b09a:	0029      	movs	r1, r5
 800b09c:	05db      	lsls	r3, r3, #23
 800b09e:	f7f7 f873 	bl	8002188 <__aeabi_dsub>
 800b0a2:	0002      	movs	r2, r0
 800b0a4:	000b      	movs	r3, r1
 800b0a6:	9804      	ldr	r0, [sp, #16]
 800b0a8:	9905      	ldr	r1, [sp, #20]
 800b0aa:	f7f6 f961 	bl	8001370 <__aeabi_ddiv>
 800b0ae:	9a02      	ldr	r2, [sp, #8]
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	000d      	movs	r5, r1
 800b0b6:	0030      	movs	r0, r6
 800b0b8:	0039      	movs	r1, r7
 800b0ba:	f7f6 fd9d 	bl	8001bf8 <__aeabi_dmul>
 800b0be:	9a02      	ldr	r2, [sp, #8]
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	f7f5 fdf1 	bl	8000ca8 <__aeabi_dadd>
 800b0c6:	0002      	movs	r2, r0
 800b0c8:	000b      	movs	r3, r1
 800b0ca:	0020      	movs	r0, r4
 800b0cc:	0029      	movs	r1, r5
 800b0ce:	f7f7 f85b 	bl	8002188 <__aeabi_dsub>
 800b0d2:	0032      	movs	r2, r6
 800b0d4:	003b      	movs	r3, r7
 800b0d6:	f7f7 f857 	bl	8002188 <__aeabi_dsub>
 800b0da:	0002      	movs	r2, r0
 800b0dc:	000b      	movs	r3, r1
 800b0de:	2000      	movs	r0, #0
 800b0e0:	491f      	ldr	r1, [pc, #124]	@ (800b160 <__ieee754_pow+0xa54>)
 800b0e2:	f7f7 f851 	bl	8002188 <__aeabi_dsub>
 800b0e6:	9b00      	ldr	r3, [sp, #0]
 800b0e8:	051b      	lsls	r3, r3, #20
 800b0ea:	185b      	adds	r3, r3, r1
 800b0ec:	151a      	asrs	r2, r3, #20
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	dc06      	bgt.n	800b100 <__ieee754_pow+0x9f4>
 800b0f2:	9a00      	ldr	r2, [sp, #0]
 800b0f4:	f000 f83a 	bl	800b16c <scalbn>
 800b0f8:	9a08      	ldr	r2, [sp, #32]
 800b0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fc:	f7ff fbee 	bl	800a8dc <__ieee754_pow+0x1d0>
 800b100:	0019      	movs	r1, r3
 800b102:	e7f9      	b.n	800b0f8 <__ieee754_pow+0x9ec>
 800b104:	2300      	movs	r3, #0
 800b106:	4c16      	ldr	r4, [pc, #88]	@ (800b160 <__ieee754_pow+0xa54>)
 800b108:	f7ff fbcb 	bl	800a8a2 <__ieee754_pow+0x196>
 800b10c:	2300      	movs	r3, #0
 800b10e:	2400      	movs	r4, #0
 800b110:	f7ff fbc7 	bl	800a8a2 <__ieee754_pow+0x196>
 800b114:	4090cbff 	.word	0x4090cbff
 800b118:	3f6f3400 	.word	0x3f6f3400
 800b11c:	4090cc00 	.word	0x4090cc00
 800b120:	3fe00000 	.word	0x3fe00000
 800b124:	3fe62e43 	.word	0x3fe62e43
 800b128:	fefa39ef 	.word	0xfefa39ef
 800b12c:	3fe62e42 	.word	0x3fe62e42
 800b130:	0ca86c39 	.word	0x0ca86c39
 800b134:	be205c61 	.word	0xbe205c61
 800b138:	72bea4d0 	.word	0x72bea4d0
 800b13c:	3e663769 	.word	0x3e663769
 800b140:	c5d26bf1 	.word	0xc5d26bf1
 800b144:	3ebbbd41 	.word	0x3ebbbd41
 800b148:	af25de2c 	.word	0xaf25de2c
 800b14c:	3f11566a 	.word	0x3f11566a
 800b150:	16bebd93 	.word	0x16bebd93
 800b154:	3f66c16c 	.word	0x3f66c16c
 800b158:	5555553e 	.word	0x5555553e
 800b15c:	3fc55555 	.word	0x3fc55555
 800b160:	3ff00000 	.word	0x3ff00000

0800b164 <fabs>:
 800b164:	0049      	lsls	r1, r1, #1
 800b166:	084b      	lsrs	r3, r1, #1
 800b168:	0019      	movs	r1, r3
 800b16a:	4770      	bx	lr

0800b16c <scalbn>:
 800b16c:	004b      	lsls	r3, r1, #1
 800b16e:	b570      	push	{r4, r5, r6, lr}
 800b170:	0d5b      	lsrs	r3, r3, #21
 800b172:	0014      	movs	r4, r2
 800b174:	000d      	movs	r5, r1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10f      	bne.n	800b19a <scalbn+0x2e>
 800b17a:	004b      	lsls	r3, r1, #1
 800b17c:	085b      	lsrs	r3, r3, #1
 800b17e:	4303      	orrs	r3, r0
 800b180:	d012      	beq.n	800b1a8 <scalbn+0x3c>
 800b182:	4b23      	ldr	r3, [pc, #140]	@ (800b210 <scalbn+0xa4>)
 800b184:	2200      	movs	r2, #0
 800b186:	f7f6 fd37 	bl	8001bf8 <__aeabi_dmul>
 800b18a:	4b22      	ldr	r3, [pc, #136]	@ (800b214 <scalbn+0xa8>)
 800b18c:	429c      	cmp	r4, r3
 800b18e:	da0c      	bge.n	800b1aa <scalbn+0x3e>
 800b190:	4a21      	ldr	r2, [pc, #132]	@ (800b218 <scalbn+0xac>)
 800b192:	4b22      	ldr	r3, [pc, #136]	@ (800b21c <scalbn+0xb0>)
 800b194:	f7f6 fd30 	bl	8001bf8 <__aeabi_dmul>
 800b198:	e006      	b.n	800b1a8 <scalbn+0x3c>
 800b19a:	4a21      	ldr	r2, [pc, #132]	@ (800b220 <scalbn+0xb4>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d108      	bne.n	800b1b2 <scalbn+0x46>
 800b1a0:	0002      	movs	r2, r0
 800b1a2:	000b      	movs	r3, r1
 800b1a4:	f7f5 fd80 	bl	8000ca8 <__aeabi_dadd>
 800b1a8:	bd70      	pop	{r4, r5, r6, pc}
 800b1aa:	000d      	movs	r5, r1
 800b1ac:	004b      	lsls	r3, r1, #1
 800b1ae:	0d5b      	lsrs	r3, r3, #21
 800b1b0:	3b36      	subs	r3, #54	@ 0x36
 800b1b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b224 <scalbn+0xb8>)
 800b1b4:	4294      	cmp	r4, r2
 800b1b6:	dd0a      	ble.n	800b1ce <scalbn+0x62>
 800b1b8:	4c1b      	ldr	r4, [pc, #108]	@ (800b228 <scalbn+0xbc>)
 800b1ba:	4d1c      	ldr	r5, [pc, #112]	@ (800b22c <scalbn+0xc0>)
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	da01      	bge.n	800b1c4 <scalbn+0x58>
 800b1c0:	4c19      	ldr	r4, [pc, #100]	@ (800b228 <scalbn+0xbc>)
 800b1c2:	4d1b      	ldr	r5, [pc, #108]	@ (800b230 <scalbn+0xc4>)
 800b1c4:	4a18      	ldr	r2, [pc, #96]	@ (800b228 <scalbn+0xbc>)
 800b1c6:	4b19      	ldr	r3, [pc, #100]	@ (800b22c <scalbn+0xc0>)
 800b1c8:	0020      	movs	r0, r4
 800b1ca:	0029      	movs	r1, r5
 800b1cc:	e7e2      	b.n	800b194 <scalbn+0x28>
 800b1ce:	18e2      	adds	r2, r4, r3
 800b1d0:	4b18      	ldr	r3, [pc, #96]	@ (800b234 <scalbn+0xc8>)
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	dcf0      	bgt.n	800b1b8 <scalbn+0x4c>
 800b1d6:	2a00      	cmp	r2, #0
 800b1d8:	dd05      	ble.n	800b1e6 <scalbn+0x7a>
 800b1da:	4b17      	ldr	r3, [pc, #92]	@ (800b238 <scalbn+0xcc>)
 800b1dc:	0512      	lsls	r2, r2, #20
 800b1de:	402b      	ands	r3, r5
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	0011      	movs	r1, r2
 800b1e4:	e7e0      	b.n	800b1a8 <scalbn+0x3c>
 800b1e6:	0013      	movs	r3, r2
 800b1e8:	3335      	adds	r3, #53	@ 0x35
 800b1ea:	da08      	bge.n	800b1fe <scalbn+0x92>
 800b1ec:	4c0a      	ldr	r4, [pc, #40]	@ (800b218 <scalbn+0xac>)
 800b1ee:	4d0b      	ldr	r5, [pc, #44]	@ (800b21c <scalbn+0xb0>)
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	da01      	bge.n	800b1f8 <scalbn+0x8c>
 800b1f4:	4c08      	ldr	r4, [pc, #32]	@ (800b218 <scalbn+0xac>)
 800b1f6:	4d11      	ldr	r5, [pc, #68]	@ (800b23c <scalbn+0xd0>)
 800b1f8:	4a07      	ldr	r2, [pc, #28]	@ (800b218 <scalbn+0xac>)
 800b1fa:	4b08      	ldr	r3, [pc, #32]	@ (800b21c <scalbn+0xb0>)
 800b1fc:	e7e4      	b.n	800b1c8 <scalbn+0x5c>
 800b1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b238 <scalbn+0xcc>)
 800b200:	3236      	adds	r2, #54	@ 0x36
 800b202:	401d      	ands	r5, r3
 800b204:	0512      	lsls	r2, r2, #20
 800b206:	432a      	orrs	r2, r5
 800b208:	0011      	movs	r1, r2
 800b20a:	4b0d      	ldr	r3, [pc, #52]	@ (800b240 <scalbn+0xd4>)
 800b20c:	2200      	movs	r2, #0
 800b20e:	e7c1      	b.n	800b194 <scalbn+0x28>
 800b210:	43500000 	.word	0x43500000
 800b214:	ffff3cb0 	.word	0xffff3cb0
 800b218:	c2f8f359 	.word	0xc2f8f359
 800b21c:	01a56e1f 	.word	0x01a56e1f
 800b220:	000007ff 	.word	0x000007ff
 800b224:	0000c350 	.word	0x0000c350
 800b228:	8800759c 	.word	0x8800759c
 800b22c:	7e37e43c 	.word	0x7e37e43c
 800b230:	fe37e43c 	.word	0xfe37e43c
 800b234:	000007fe 	.word	0x000007fe
 800b238:	800fffff 	.word	0x800fffff
 800b23c:	81a56e1f 	.word	0x81a56e1f
 800b240:	3c900000 	.word	0x3c900000

0800b244 <with_errno>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	000d      	movs	r5, r1
 800b248:	0016      	movs	r6, r2
 800b24a:	0004      	movs	r4, r0
 800b24c:	f7fd f8c8 	bl	80083e0 <__errno>
 800b250:	0029      	movs	r1, r5
 800b252:	6006      	str	r6, [r0, #0]
 800b254:	0020      	movs	r0, r4
 800b256:	bd70      	pop	{r4, r5, r6, pc}

0800b258 <xflow>:
 800b258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b25a:	0014      	movs	r4, r2
 800b25c:	001d      	movs	r5, r3
 800b25e:	2800      	cmp	r0, #0
 800b260:	d002      	beq.n	800b268 <xflow+0x10>
 800b262:	2180      	movs	r1, #128	@ 0x80
 800b264:	0609      	lsls	r1, r1, #24
 800b266:	185b      	adds	r3, r3, r1
 800b268:	9200      	str	r2, [sp, #0]
 800b26a:	9301      	str	r3, [sp, #4]
 800b26c:	9a00      	ldr	r2, [sp, #0]
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	0020      	movs	r0, r4
 800b272:	0029      	movs	r1, r5
 800b274:	f7f6 fcc0 	bl	8001bf8 <__aeabi_dmul>
 800b278:	2222      	movs	r2, #34	@ 0x22
 800b27a:	f7ff ffe3 	bl	800b244 <with_errno>
 800b27e:	b003      	add	sp, #12
 800b280:	bd30      	pop	{r4, r5, pc}

0800b282 <__math_uflow>:
 800b282:	2380      	movs	r3, #128	@ 0x80
 800b284:	b510      	push	{r4, lr}
 800b286:	2200      	movs	r2, #0
 800b288:	055b      	lsls	r3, r3, #21
 800b28a:	f7ff ffe5 	bl	800b258 <xflow>
 800b28e:	bd10      	pop	{r4, pc}

0800b290 <__math_oflow>:
 800b290:	23e0      	movs	r3, #224	@ 0xe0
 800b292:	b510      	push	{r4, lr}
 800b294:	2200      	movs	r2, #0
 800b296:	05db      	lsls	r3, r3, #23
 800b298:	f7ff ffde 	bl	800b258 <xflow>
 800b29c:	bd10      	pop	{r4, pc}
	...

0800b2a0 <__ieee754_sqrt>:
 800b2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a2:	000a      	movs	r2, r1
 800b2a4:	000d      	movs	r5, r1
 800b2a6:	496d      	ldr	r1, [pc, #436]	@ (800b45c <__ieee754_sqrt+0x1bc>)
 800b2a8:	0004      	movs	r4, r0
 800b2aa:	0003      	movs	r3, r0
 800b2ac:	0008      	movs	r0, r1
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	4028      	ands	r0, r5
 800b2b2:	4288      	cmp	r0, r1
 800b2b4:	d111      	bne.n	800b2da <__ieee754_sqrt+0x3a>
 800b2b6:	0022      	movs	r2, r4
 800b2b8:	002b      	movs	r3, r5
 800b2ba:	0020      	movs	r0, r4
 800b2bc:	0029      	movs	r1, r5
 800b2be:	f7f6 fc9b 	bl	8001bf8 <__aeabi_dmul>
 800b2c2:	0002      	movs	r2, r0
 800b2c4:	000b      	movs	r3, r1
 800b2c6:	0020      	movs	r0, r4
 800b2c8:	0029      	movs	r1, r5
 800b2ca:	f7f5 fced 	bl	8000ca8 <__aeabi_dadd>
 800b2ce:	0004      	movs	r4, r0
 800b2d0:	000d      	movs	r5, r1
 800b2d2:	0020      	movs	r0, r4
 800b2d4:	0029      	movs	r1, r5
 800b2d6:	b007      	add	sp, #28
 800b2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2da:	2d00      	cmp	r5, #0
 800b2dc:	dc11      	bgt.n	800b302 <__ieee754_sqrt+0x62>
 800b2de:	0069      	lsls	r1, r5, #1
 800b2e0:	0849      	lsrs	r1, r1, #1
 800b2e2:	4321      	orrs	r1, r4
 800b2e4:	d0f5      	beq.n	800b2d2 <__ieee754_sqrt+0x32>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	4285      	cmp	r5, r0
 800b2ea:	d010      	beq.n	800b30e <__ieee754_sqrt+0x6e>
 800b2ec:	0022      	movs	r2, r4
 800b2ee:	002b      	movs	r3, r5
 800b2f0:	0020      	movs	r0, r4
 800b2f2:	0029      	movs	r1, r5
 800b2f4:	f7f6 ff48 	bl	8002188 <__aeabi_dsub>
 800b2f8:	0002      	movs	r2, r0
 800b2fa:	000b      	movs	r3, r1
 800b2fc:	f7f6 f838 	bl	8001370 <__aeabi_ddiv>
 800b300:	e7e5      	b.n	800b2ce <__ieee754_sqrt+0x2e>
 800b302:	1528      	asrs	r0, r5, #20
 800b304:	d115      	bne.n	800b332 <__ieee754_sqrt+0x92>
 800b306:	2480      	movs	r4, #128	@ 0x80
 800b308:	2100      	movs	r1, #0
 800b30a:	0364      	lsls	r4, r4, #13
 800b30c:	e007      	b.n	800b31e <__ieee754_sqrt+0x7e>
 800b30e:	0ada      	lsrs	r2, r3, #11
 800b310:	3815      	subs	r0, #21
 800b312:	055b      	lsls	r3, r3, #21
 800b314:	2a00      	cmp	r2, #0
 800b316:	d0fa      	beq.n	800b30e <__ieee754_sqrt+0x6e>
 800b318:	e7f5      	b.n	800b306 <__ieee754_sqrt+0x66>
 800b31a:	0052      	lsls	r2, r2, #1
 800b31c:	3101      	adds	r1, #1
 800b31e:	4222      	tst	r2, r4
 800b320:	d0fb      	beq.n	800b31a <__ieee754_sqrt+0x7a>
 800b322:	1e4c      	subs	r4, r1, #1
 800b324:	1b00      	subs	r0, r0, r4
 800b326:	2420      	movs	r4, #32
 800b328:	001d      	movs	r5, r3
 800b32a:	1a64      	subs	r4, r4, r1
 800b32c:	40e5      	lsrs	r5, r4
 800b32e:	408b      	lsls	r3, r1
 800b330:	432a      	orrs	r2, r5
 800b332:	494b      	ldr	r1, [pc, #300]	@ (800b460 <__ieee754_sqrt+0x1c0>)
 800b334:	0312      	lsls	r2, r2, #12
 800b336:	1844      	adds	r4, r0, r1
 800b338:	2180      	movs	r1, #128	@ 0x80
 800b33a:	0b12      	lsrs	r2, r2, #12
 800b33c:	0349      	lsls	r1, r1, #13
 800b33e:	4311      	orrs	r1, r2
 800b340:	07c0      	lsls	r0, r0, #31
 800b342:	d403      	bmi.n	800b34c <__ieee754_sqrt+0xac>
 800b344:	0fda      	lsrs	r2, r3, #31
 800b346:	0049      	lsls	r1, r1, #1
 800b348:	1851      	adds	r1, r2, r1
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	2500      	movs	r5, #0
 800b34e:	1062      	asrs	r2, r4, #1
 800b350:	0049      	lsls	r1, r1, #1
 800b352:	2480      	movs	r4, #128	@ 0x80
 800b354:	9205      	str	r2, [sp, #20]
 800b356:	0fda      	lsrs	r2, r3, #31
 800b358:	1852      	adds	r2, r2, r1
 800b35a:	2016      	movs	r0, #22
 800b35c:	0029      	movs	r1, r5
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	03a4      	lsls	r4, r4, #14
 800b362:	190e      	adds	r6, r1, r4
 800b364:	4296      	cmp	r6, r2
 800b366:	dc02      	bgt.n	800b36e <__ieee754_sqrt+0xce>
 800b368:	1931      	adds	r1, r6, r4
 800b36a:	1b92      	subs	r2, r2, r6
 800b36c:	192d      	adds	r5, r5, r4
 800b36e:	0fde      	lsrs	r6, r3, #31
 800b370:	0052      	lsls	r2, r2, #1
 800b372:	3801      	subs	r0, #1
 800b374:	1992      	adds	r2, r2, r6
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	0864      	lsrs	r4, r4, #1
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d1f1      	bne.n	800b362 <__ieee754_sqrt+0xc2>
 800b37e:	2620      	movs	r6, #32
 800b380:	2780      	movs	r7, #128	@ 0x80
 800b382:	0004      	movs	r4, r0
 800b384:	9604      	str	r6, [sp, #16]
 800b386:	063f      	lsls	r7, r7, #24
 800b388:	19c6      	adds	r6, r0, r7
 800b38a:	46b4      	mov	ip, r6
 800b38c:	4291      	cmp	r1, r2
 800b38e:	db02      	blt.n	800b396 <__ieee754_sqrt+0xf6>
 800b390:	d114      	bne.n	800b3bc <__ieee754_sqrt+0x11c>
 800b392:	429e      	cmp	r6, r3
 800b394:	d812      	bhi.n	800b3bc <__ieee754_sqrt+0x11c>
 800b396:	4660      	mov	r0, ip
 800b398:	4666      	mov	r6, ip
 800b39a:	19c0      	adds	r0, r0, r7
 800b39c:	9100      	str	r1, [sp, #0]
 800b39e:	2e00      	cmp	r6, #0
 800b3a0:	da03      	bge.n	800b3aa <__ieee754_sqrt+0x10a>
 800b3a2:	43c6      	mvns	r6, r0
 800b3a4:	0ff6      	lsrs	r6, r6, #31
 800b3a6:	198e      	adds	r6, r1, r6
 800b3a8:	9600      	str	r6, [sp, #0]
 800b3aa:	1a52      	subs	r2, r2, r1
 800b3ac:	4563      	cmp	r3, ip
 800b3ae:	4189      	sbcs	r1, r1
 800b3b0:	4249      	negs	r1, r1
 800b3b2:	1a52      	subs	r2, r2, r1
 800b3b4:	4661      	mov	r1, ip
 800b3b6:	1a5b      	subs	r3, r3, r1
 800b3b8:	9900      	ldr	r1, [sp, #0]
 800b3ba:	19e4      	adds	r4, r4, r7
 800b3bc:	0fde      	lsrs	r6, r3, #31
 800b3be:	0052      	lsls	r2, r2, #1
 800b3c0:	1992      	adds	r2, r2, r6
 800b3c2:	9e04      	ldr	r6, [sp, #16]
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	3e01      	subs	r6, #1
 800b3c8:	087f      	lsrs	r7, r7, #1
 800b3ca:	9604      	str	r6, [sp, #16]
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	d1db      	bne.n	800b388 <__ieee754_sqrt+0xe8>
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	d01f      	beq.n	800b414 <__ieee754_sqrt+0x174>
 800b3d4:	4e23      	ldr	r6, [pc, #140]	@ (800b464 <__ieee754_sqrt+0x1c4>)
 800b3d6:	4f24      	ldr	r7, [pc, #144]	@ (800b468 <__ieee754_sqrt+0x1c8>)
 800b3d8:	6830      	ldr	r0, [r6, #0]
 800b3da:	6871      	ldr	r1, [r6, #4]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	9200      	str	r2, [sp, #0]
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	6832      	ldr	r2, [r6, #0]
 800b3e6:	6873      	ldr	r3, [r6, #4]
 800b3e8:	9202      	str	r2, [sp, #8]
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	9a00      	ldr	r2, [sp, #0]
 800b3ee:	9b01      	ldr	r3, [sp, #4]
 800b3f0:	f7f6 feca 	bl	8002188 <__aeabi_dsub>
 800b3f4:	0002      	movs	r2, r0
 800b3f6:	000b      	movs	r3, r1
 800b3f8:	9802      	ldr	r0, [sp, #8]
 800b3fa:	9903      	ldr	r1, [sp, #12]
 800b3fc:	f7f5 f840 	bl	8000480 <__aeabi_dcmple>
 800b400:	2800      	cmp	r0, #0
 800b402:	d007      	beq.n	800b414 <__ieee754_sqrt+0x174>
 800b404:	6830      	ldr	r0, [r6, #0]
 800b406:	6871      	ldr	r1, [r6, #4]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	1c67      	adds	r7, r4, #1
 800b40e:	d10f      	bne.n	800b430 <__ieee754_sqrt+0x190>
 800b410:	9c04      	ldr	r4, [sp, #16]
 800b412:	3501      	adds	r5, #1
 800b414:	4b15      	ldr	r3, [pc, #84]	@ (800b46c <__ieee754_sqrt+0x1cc>)
 800b416:	106a      	asrs	r2, r5, #1
 800b418:	18d2      	adds	r2, r2, r3
 800b41a:	0863      	lsrs	r3, r4, #1
 800b41c:	07ed      	lsls	r5, r5, #31
 800b41e:	d502      	bpl.n	800b426 <__ieee754_sqrt+0x186>
 800b420:	2180      	movs	r1, #128	@ 0x80
 800b422:	0609      	lsls	r1, r1, #24
 800b424:	430b      	orrs	r3, r1
 800b426:	9905      	ldr	r1, [sp, #20]
 800b428:	001c      	movs	r4, r3
 800b42a:	0509      	lsls	r1, r1, #20
 800b42c:	188d      	adds	r5, r1, r2
 800b42e:	e750      	b.n	800b2d2 <__ieee754_sqrt+0x32>
 800b430:	f7f5 fc3a 	bl	8000ca8 <__aeabi_dadd>
 800b434:	6877      	ldr	r7, [r6, #4]
 800b436:	6836      	ldr	r6, [r6, #0]
 800b438:	0002      	movs	r2, r0
 800b43a:	000b      	movs	r3, r1
 800b43c:	0030      	movs	r0, r6
 800b43e:	0039      	movs	r1, r7
 800b440:	f7f5 f814 	bl	800046c <__aeabi_dcmplt>
 800b444:	2800      	cmp	r0, #0
 800b446:	d004      	beq.n	800b452 <__ieee754_sqrt+0x1b2>
 800b448:	3402      	adds	r4, #2
 800b44a:	4263      	negs	r3, r4
 800b44c:	4163      	adcs	r3, r4
 800b44e:	18ed      	adds	r5, r5, r3
 800b450:	e7e0      	b.n	800b414 <__ieee754_sqrt+0x174>
 800b452:	2301      	movs	r3, #1
 800b454:	3401      	adds	r4, #1
 800b456:	439c      	bics	r4, r3
 800b458:	e7dc      	b.n	800b414 <__ieee754_sqrt+0x174>
 800b45a:	46c0      	nop			@ (mov r8, r8)
 800b45c:	7ff00000 	.word	0x7ff00000
 800b460:	fffffc01 	.word	0xfffffc01
 800b464:	200001e0 	.word	0x200001e0
 800b468:	200001d8 	.word	0x200001d8
 800b46c:	3fe00000 	.word	0x3fe00000

0800b470 <_init>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	46c0      	nop			@ (mov r8, r8)
 800b474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b476:	bc08      	pop	{r3}
 800b478:	469e      	mov	lr, r3
 800b47a:	4770      	bx	lr

0800b47c <_fini>:
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47e:	46c0      	nop			@ (mov r8, r8)
 800b480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b482:	bc08      	pop	{r3}
 800b484:	469e      	mov	lr, r3
 800b486:	4770      	bx	lr
