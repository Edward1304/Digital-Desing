
Prueba_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003a9c  08003a9c  00004a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b24  08003b24  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b24  08003b24  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b24  08003b24  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b24  08003b24  00004b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b28  08003b28  00004b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  2000005c  08003b88  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08003b88  000054c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b0  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2d  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00012168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096a  00000000  00000000  00012d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000108d7  00000000  00000000  000136fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f8  00000000  00000000  00023fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063783  00000000  00000000  000326c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000307c  00000000  00000000  00095e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00098f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a84 	.word	0x08003a84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003a84 	.word	0x08003a84

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <DS18B20_Init>:
 *@param	Port_DS18B20	Port used for the DS18B20 sensor
 *@param	Pin_DS18B20		Pin used for the DS18B20 sensor
 *@retval	None
 */
void DS18B20_Init(TIM_HandleTypeDef Timer_DS18B20, GPIO_TypeDef* Port_DS18B20, uint16_t Pin_DS18B20)
{
 8000234:	b084      	sub	sp, #16
 8000236:	b5b0      	push	{r4, r5, r7, lr}
 8000238:	af00      	add	r7, sp, #0
 800023a:	2510      	movs	r5, #16
 800023c:	197c      	adds	r4, r7, r5
 800023e:	6020      	str	r0, [r4, #0]
 8000240:	6061      	str	r1, [r4, #4]
 8000242:	60a2      	str	r2, [r4, #8]
 8000244:	60e3      	str	r3, [r4, #12]
	timer = Timer_DS18B20;
 8000246:	4a0c      	ldr	r2, [pc, #48]	@ (8000278 <DS18B20_Init+0x44>)
 8000248:	002c      	movs	r4, r5
 800024a:	193b      	adds	r3, r7, r4
 800024c:	0010      	movs	r0, r2
 800024e:	0019      	movs	r1, r3
 8000250:	2348      	movs	r3, #72	@ 0x48
 8000252:	001a      	movs	r2, r3
 8000254:	f002 ffcc 	bl	80031f0 <memcpy>
	Port = Port_DS18B20;
 8000258:	4b08      	ldr	r3, [pc, #32]	@ (800027c <DS18B20_Init+0x48>)
 800025a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800025c:	601a      	str	r2, [r3, #0]
	Pin = Pin_DS18B20;
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <DS18B20_Init+0x4c>)
 8000260:	224c      	movs	r2, #76	@ 0x4c
 8000262:	1912      	adds	r2, r2, r4
 8000264:	19d2      	adds	r2, r2, r7
 8000266:	8812      	ldrh	r2, [r2, #0]
 8000268:	801a      	strh	r2, [r3, #0]
}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	bcb0      	pop	{r4, r5, r7}
 8000270:	bc08      	pop	{r3}
 8000272:	b004      	add	sp, #16
 8000274:	4718      	bx	r3
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	20000078 	.word	0x20000078
 800027c:	200000c0 	.word	0x200000c0
 8000280:	200000c4 	.word	0x200000c4

08000284 <Flash_read_identification_id>:
extern SPI_HandleTypeDef hspi1;



void Flash_read_identification_id()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint8_t spiBuf[5];

	spiBuf[0] = READ_ID;
 800028a:	003b      	movs	r3, r7
 800028c:	224b      	movs	r2, #75	@ 0x4b
 800028e:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = 0;
 8000290:	003b      	movs	r3, r7
 8000292:	2200      	movs	r2, #0
 8000294:	705a      	strb	r2, [r3, #1]
	spiBuf[2] = 0;
 8000296:	003b      	movs	r3, r7
 8000298:	2200      	movs	r2, #0
 800029a:	709a      	strb	r2, [r3, #2]
	spiBuf[3] = 0;
 800029c:	003b      	movs	r3, r7
 800029e:	2200      	movs	r2, #0
 80002a0:	70da      	strb	r2, [r3, #3]
	spiBuf[4] = 0;
 80002a2:	003b      	movs	r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	711a      	strb	r2, [r3, #4]

	//Put CSN low

	flash_csn(0);
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 f819 	bl	80002e0 <flash_csn>
	//Transmit register address

	HAL_SPI_Transmit(&hspi1, &spiBuf[0], 5, 1000);
 80002ae:	23fa      	movs	r3, #250	@ 0xfa
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	0039      	movs	r1, r7
 80002b4:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <Flash_read_identification_id+0x54>)
 80002b6:	2205      	movs	r2, #5
 80002b8:	f001 fcdc 	bl	8001c74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi1, &read_flash_Byte[0], 8, 1000);
 80002bc:	23fa      	movs	r3, #250	@ 0xfa
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	4906      	ldr	r1, [pc, #24]	@ (80002dc <Flash_read_identification_id+0x58>)
 80002c2:	4805      	ldr	r0, [pc, #20]	@ (80002d8 <Flash_read_identification_id+0x54>)
 80002c4:	2208      	movs	r2, #8
 80002c6:	f001 fe35 	bl	8001f34 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 f808 	bl	80002e0 <flash_csn>
}
 80002d0:	46c0      	nop			@ (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200001c8 	.word	0x200001c8
 80002dc:	200000c8 	.word	0x200000c8

080002e0 <flash_csn>:


void flash_csn( uint8_t val){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
	if ( val == 0 )
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d108      	bne.n	8000306 <flash_csn+0x26>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80002f4:	2380      	movs	r3, #128	@ 0x80
 80002f6:	0219      	lsls	r1, r3, #8
 80002f8:	2390      	movs	r3, #144	@ 0x90
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	2200      	movs	r2, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 ffa4 	bl	800124c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);

}
 8000304:	e007      	b.n	8000316 <flash_csn+0x36>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000306:	2380      	movs	r3, #128	@ 0x80
 8000308:	0219      	lsls	r1, r3, #8
 800030a:	2390      	movs	r3, #144	@ 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2201      	movs	r2, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 ff9b 	bl	800124c <HAL_GPIO_WritePin>
}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <Flash_read_status1_register>:


void Flash_read_status1_register( uint8_t *reg_to_save)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[1];
	//Put CSN low
	spiBuf[0] = READ_STATUS_REG_1;
 8000328:	240c      	movs	r4, #12
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2205      	movs	r2, #5
 800032e:	701a      	strb	r2, [r3, #0]

	flash_csn(0);
 8000330:	2000      	movs	r0, #0
 8000332:	f7ff ffd5 	bl	80002e0 <flash_csn>

	HAL_SPI_Transmit(&hspi1, &spiBuf[0], 1, 1000);
 8000336:	23fa      	movs	r3, #250	@ 0xfa
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	1939      	adds	r1, r7, r4
 800033c:	4808      	ldr	r0, [pc, #32]	@ (8000360 <Flash_read_status1_register+0x40>)
 800033e:	2201      	movs	r2, #1
 8000340:	f001 fc98 	bl	8001c74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi1, reg_to_save, 1, 1000);
 8000344:	23fa      	movs	r3, #250	@ 0xfa
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	4805      	ldr	r0, [pc, #20]	@ (8000360 <Flash_read_status1_register+0x40>)
 800034c:	2201      	movs	r2, #1
 800034e:	f001 fdf1 	bl	8001f34 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 8000352:	2001      	movs	r0, #1
 8000354:	f7ff ffc4 	bl	80002e0 <flash_csn>
}
 8000358:	46c0      	nop			@ (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b005      	add	sp, #20
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	200001c8 	.word	0x200001c8

08000364 <Flash_read_status2_register>:

void Flash_read_status2_register( uint8_t *reg_to_save)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[1];
	//Put CSN low
	spiBuf[0] = READ_STATUS_REG_2;
 800036c:	240c      	movs	r4, #12
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2235      	movs	r2, #53	@ 0x35
 8000372:	701a      	strb	r2, [r3, #0]

	flash_csn(0);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ffb3 	bl	80002e0 <flash_csn>

	HAL_SPI_Transmit(&hspi1, &spiBuf[0], 1, 1000);
 800037a:	23fa      	movs	r3, #250	@ 0xfa
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	1939      	adds	r1, r7, r4
 8000380:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <Flash_read_status2_register+0x40>)
 8000382:	2201      	movs	r2, #1
 8000384:	f001 fc76 	bl	8001c74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi1, reg_to_save, 1, 1000);
 8000388:	23fa      	movs	r3, #250	@ 0xfa
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	6879      	ldr	r1, [r7, #4]
 800038e:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <Flash_read_status2_register+0x40>)
 8000390:	2201      	movs	r2, #1
 8000392:	f001 fdcf 	bl	8001f34 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ffa2 	bl	80002e0 <flash_csn>
}
 800039c:	46c0      	nop			@ (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b005      	add	sp, #20
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	200001c8 	.word	0x200001c8

080003a8 <Flash_read_status3_register>:

void Flash_read_status3_register( uint8_t *reg_to_save)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[1];
	//Put CSN low
	spiBuf[0] = READ_STATUS_REG_3;
 80003b0:	240c      	movs	r4, #12
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	2215      	movs	r2, #21
 80003b6:	701a      	strb	r2, [r3, #0]

	flash_csn(0);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f7ff ff91 	bl	80002e0 <flash_csn>

	HAL_SPI_Transmit(&hspi1, &spiBuf[0], 1, 1000);
 80003be:	23fa      	movs	r3, #250	@ 0xfa
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	1939      	adds	r1, r7, r4
 80003c4:	4808      	ldr	r0, [pc, #32]	@ (80003e8 <Flash_read_status3_register+0x40>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	f001 fc54 	bl	8001c74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi1, reg_to_save, 1, 1000);
 80003cc:	23fa      	movs	r3, #250	@ 0xfa
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	6879      	ldr	r1, [r7, #4]
 80003d2:	4805      	ldr	r0, [pc, #20]	@ (80003e8 <Flash_read_status3_register+0x40>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	f001 fdad 	bl	8001f34 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 80003da:	2001      	movs	r0, #1
 80003dc:	f7ff ff80 	bl	80002e0 <flash_csn>
}
 80003e0:	46c0      	nop			@ (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b005      	add	sp, #20
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	200001c8 	.word	0x200001c8

080003ec <Flash_activate_deactivate_block_protect>:

void Flash_activate_deactivate_block_protect()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	Write_flash_enable();
 80003f2:	f000 f819 	bl	8000428 <Write_flash_enable>
	uint8_t spiBuf[2];
	spiBuf[0] = WRITE_STATUS_REG_1;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = 0b01100000;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2260      	movs	r2, #96	@ 0x60
 8000400:	705a      	strb	r2, [r3, #1]
	flash_csn(0);
 8000402:	2000      	movs	r0, #0
 8000404:	f7ff ff6c 	bl	80002e0 <flash_csn>
	//Transmit register address and data
	HAL_SPI_Transmit(&hspi1, &spiBuf[0], 2 , 100);
 8000408:	1d39      	adds	r1, r7, #4
 800040a:	4806      	ldr	r0, [pc, #24]	@ (8000424 <Flash_activate_deactivate_block_protect+0x38>)
 800040c:	2364      	movs	r3, #100	@ 0x64
 800040e:	2202      	movs	r2, #2
 8000410:	f001 fc30 	bl	8001c74 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f7ff ff63 	bl	80002e0 <flash_csn>
}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	200001c8 	.word	0x200001c8

08000428 <Write_flash_enable>:

void Write_flash_enable(){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	uint8_t spiBuf = WREN;
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	2206      	movs	r2, #6
 8000432:	701a      	strb	r2, [r3, #0]
	//Put CSN low
	flash_csn(0);
 8000434:	2000      	movs	r0, #0
 8000436:	f7ff ff53 	bl	80002e0 <flash_csn>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, &spiBuf, 1, 1000);
 800043a:	23fa      	movs	r3, #250	@ 0xfa
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	1df9      	adds	r1, r7, #7
 8000440:	4805      	ldr	r0, [pc, #20]	@ (8000458 <Write_flash_enable+0x30>)
 8000442:	2201      	movs	r2, #1
 8000444:	f001 fc16 	bl	8001c74 <HAL_SPI_Transmit>
	flash_csn(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ff49 	bl	80002e0 <flash_csn>
}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	200001c8 	.word	0x200001c8

0800045c <Flash_verificate_status>:


void Flash_verificate_status()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	uint8_t spiBuf[1];
	//Put CSN low
	spiBuf[0] = READ_STATUS_REG_1;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2205      	movs	r2, #5
 8000466:	701a      	strb	r2, [r3, #0]
	uint8_t bussy = 1;
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	2201      	movs	r2, #1
 800046c:	701a      	strb	r2, [r3, #0]
	while (bussy == 1){
 800046e:	e019      	b.n	80004a4 <Flash_verificate_status+0x48>
		flash_csn(0);
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ff35 	bl	80002e0 <flash_csn>
		//Transmit register address
		HAL_SPI_Transmit(&hspi1, &spiBuf[0], 1, 1000);
 8000476:	23fa      	movs	r3, #250	@ 0xfa
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	1d39      	adds	r1, r7, #4
 800047c:	480e      	ldr	r0, [pc, #56]	@ (80004b8 <Flash_verificate_status+0x5c>)
 800047e:	2201      	movs	r2, #1
 8000480:	f001 fbf8 	bl	8001c74 <HAL_SPI_Transmit>
		//Receive data
		HAL_SPI_Receive(&hspi1, &read_flash_Byte[0], 1, 1000);
 8000484:	23fa      	movs	r3, #250	@ 0xfa
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	490c      	ldr	r1, [pc, #48]	@ (80004bc <Flash_verificate_status+0x60>)
 800048a:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <Flash_verificate_status+0x5c>)
 800048c:	2201      	movs	r2, #1
 800048e:	f001 fd51 	bl	8001f34 <HAL_SPI_Receive>
		//Bring CSN high
		flash_csn(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff ff24 	bl	80002e0 <flash_csn>
		bussy = read_flash_Byte[0] & 0X01;
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <Flash_verificate_status+0x60>)
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	2101      	movs	r1, #1
 80004a0:	400a      	ands	r2, r1
 80004a2:	701a      	strb	r2, [r3, #0]
	while (bussy == 1){
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d0e1      	beq.n	8000470 <Flash_verificate_status+0x14>
	}
}
 80004ac:	46c0      	nop			@ (mov r8, r8)
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	200001c8 	.word	0x200001c8
 80004bc:	200000c8 	.word	0x200000c8

080004c0 <Flash_write_page>:



void Flash_write_page(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t *value_to_write, uint8_t length)
{
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	46c6      	mov	lr, r8
 80004c4:	b500      	push	{lr}
 80004c6:	b08c      	sub	sp, #48	@ 0x30
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	0006      	movs	r6, r0
 80004cc:	0008      	movs	r0, r1
 80004ce:	0011      	movs	r1, r2
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	231f      	movs	r3, #31
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	1c32      	adds	r2, r6, #0
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	231e      	movs	r3, #30
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	1c02      	adds	r2, r0, #0
 80004e0:	701a      	strb	r2, [r3, #0]
 80004e2:	231d      	movs	r3, #29
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	1c0a      	adds	r2, r1, #0
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	466b      	mov	r3, sp
 80004ec:	4698      	mov	r8, r3
	Flash_verificate_status();
 80004ee:	f7ff ffb5 	bl	800045c <Flash_verificate_status>

	Write_flash_enable();
 80004f2:	f7ff ff99 	bl	8000428 <Write_flash_enable>

	char spiBuf[length + 4];
 80004f6:	2328      	movs	r3, #40	@ 0x28
 80004f8:	2218      	movs	r2, #24
 80004fa:	1898      	adds	r0, r3, r2
 80004fc:	19c3      	adds	r3, r0, r7
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	3304      	adds	r3, #4
 8000502:	1e5a      	subs	r2, r3, #1
 8000504:	627a      	str	r2, [r7, #36]	@ 0x24
 8000506:	001a      	movs	r2, r3
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	2200      	movs	r2, #0
 800050c:	60fa      	str	r2, [r7, #12]
 800050e:	68b8      	ldr	r0, [r7, #8]
 8000510:	68f9      	ldr	r1, [r7, #12]
 8000512:	0002      	movs	r2, r0
 8000514:	0f52      	lsrs	r2, r2, #29
 8000516:	000e      	movs	r6, r1
 8000518:	00f6      	lsls	r6, r6, #3
 800051a:	617e      	str	r6, [r7, #20]
 800051c:	697e      	ldr	r6, [r7, #20]
 800051e:	4316      	orrs	r6, r2
 8000520:	617e      	str	r6, [r7, #20]
 8000522:	0002      	movs	r2, r0
 8000524:	00d2      	lsls	r2, r2, #3
 8000526:	613a      	str	r2, [r7, #16]
 8000528:	001a      	movs	r2, r3
 800052a:	603a      	str	r2, [r7, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	6838      	ldr	r0, [r7, #0]
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	0002      	movs	r2, r0
 8000536:	0f52      	lsrs	r2, r2, #29
 8000538:	000e      	movs	r6, r1
 800053a:	00f5      	lsls	r5, r6, #3
 800053c:	4315      	orrs	r5, r2
 800053e:	0002      	movs	r2, r0
 8000540:	00d4      	lsls	r4, r2, #3
 8000542:	3307      	adds	r3, #7
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	466a      	mov	r2, sp
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	4695      	mov	sp, r2
 800054e:	ab02      	add	r3, sp, #8
 8000550:	3300      	adds	r3, #0
 8000552:	623b      	str	r3, [r7, #32]

	spiBuf[0] = PAGE_PROGRAM;
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	2202      	movs	r2, #2
 8000558:	701a      	strb	r2, [r3, #0]
	// concatenate all the data to be sent
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	1c58      	adds	r0, r3, #1
 800055e:	241f      	movs	r4, #31
 8000560:	193b      	adds	r3, r7, r4
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	211e      	movs	r1, #30
 8000566:	187b      	adds	r3, r7, r1
 8000568:	781c      	ldrb	r4, [r3, #0]
 800056a:	231d      	movs	r3, #29
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4913      	ldr	r1, [pc, #76]	@ (80005c0 <Flash_write_page+0x100>)
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	0023      	movs	r3, r4
 8000576:	f002 fdd3 	bl	8003120 <siprintf>
	strncpy( &spiBuf[4], (char *)value_to_write, length );
 800057a:	6a3b      	ldr	r3, [r7, #32]
 800057c:	1d18      	adds	r0, r3, #4
 800057e:	2428      	movs	r4, #40	@ 0x28
 8000580:	2518      	movs	r5, #24
 8000582:	1963      	adds	r3, r4, r5
 8000584:	19db      	adds	r3, r3, r7
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	0019      	movs	r1, r3
 800058c:	f002 fdf0 	bl	8003170 <strncpy>
	//Put CSN low
	flash_csn(0);
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff fea5 	bl	80002e0 <flash_csn>
	//Transmit register address and data
	HAL_SPI_Transmit(&hspi1, &spiBuf[0], length+4 , 100);
 8000596:	6a39      	ldr	r1, [r7, #32]
 8000598:	1963      	adds	r3, r4, r5
 800059a:	19db      	adds	r3, r3, r7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	3304      	adds	r3, #4
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <Flash_write_page+0x104>)
 80005a6:	2364      	movs	r3, #100	@ 0x64
 80005a8:	f001 fb64 	bl	8001c74 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff fe97 	bl	80002e0 <flash_csn>
 80005b2:	46c5      	mov	sp, r8
}
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b00a      	add	sp, #40	@ 0x28
 80005ba:	bc80      	pop	{r7}
 80005bc:	46b8      	mov	r8, r7
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	08003a9c 	.word	0x08003a9c
 80005c4:	200001c8 	.word	0x200001c8

080005c8 <Flash_read_page>:


void Flash_read_page(uint8_t address_1, uint8_t address_2, uint8_t address_3, uint8_t aux_length)
{
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	0005      	movs	r5, r0
 80005d0:	000c      	movs	r4, r1
 80005d2:	0010      	movs	r0, r2
 80005d4:	0019      	movs	r1, r3
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	1c2a      	adds	r2, r5, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	1dbb      	adds	r3, r7, #6
 80005de:	1c22      	adds	r2, r4, #0
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	1d7b      	adds	r3, r7, #5
 80005e4:	1c02      	adds	r2, r0, #0
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	1c0a      	adds	r2, r1, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[4];
	Flash_verificate_status();
 80005ee:	f7ff ff35 	bl	800045c <Flash_verificate_status>
	//Put CSN low
	flash_csn(0);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fe74 	bl	80002e0 <flash_csn>
	// concatenate all the data to be sent
	spiBuf[0] = READ_PAGE;
 80005f8:	200c      	movs	r0, #12
 80005fa:	183b      	adds	r3, r7, r0
 80005fc:	2203      	movs	r2, #3
 80005fe:	701a      	strb	r2, [r3, #0]
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781c      	ldrb	r4, [r3, #0]
 8000604:	1dbb      	adds	r3, r7, #6
 8000606:	781d      	ldrb	r5, [r3, #0]
 8000608:	1d7b      	adds	r3, r7, #5
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	490f      	ldr	r1, [pc, #60]	@ (800064c <Flash_read_page+0x84>)
 800060e:	0006      	movs	r6, r0
 8000610:	183a      	adds	r2, r7, r0
 8000612:	1c50      	adds	r0, r2, #1
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	002b      	movs	r3, r5
 8000618:	0022      	movs	r2, r4
 800061a:	f002 fd81 	bl	8003120 <siprintf>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, &spiBuf, 4, 1000);
 800061e:	23fa      	movs	r3, #250	@ 0xfa
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	19b9      	adds	r1, r7, r6
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <Flash_read_page+0x88>)
 8000626:	2204      	movs	r2, #4
 8000628:	f001 fb24 	bl	8001c74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi1, &read_flash_Byte[0], aux_length, 1000);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b29a      	uxth	r2, r3
 8000632:	23fa      	movs	r3, #250	@ 0xfa
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4907      	ldr	r1, [pc, #28]	@ (8000654 <Flash_read_page+0x8c>)
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <Flash_read_page+0x88>)
 800063a:	f001 fc7b 	bl	8001f34 <HAL_SPI_Receive>
	//Bring CSN high
	flash_csn(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff fe4e 	bl	80002e0 <flash_csn>
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b005      	add	sp, #20
 800064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064c:	08003a9c 	.word	0x08003a9c
 8000650:	200001c8 	.word	0x200001c8
 8000654:	200000c8 	.word	0x200000c8

08000658 <Flash_sector_erase>:
	flash_csn(1);
}


void Flash_sector_erase(uint8_t address_1, uint8_t address_2, uint8_t address_3)
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b087      	sub	sp, #28
 800065c:	af02      	add	r7, sp, #8
 800065e:	0004      	movs	r4, r0
 8000660:	0008      	movs	r0, r1
 8000662:	0011      	movs	r1, r2
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	1c22      	adds	r2, r4, #0
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	1dbb      	adds	r3, r7, #6
 800066c:	1c02      	adds	r2, r0, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	1d7b      	adds	r3, r7, #5
 8000672:	1c0a      	adds	r2, r1, #0
 8000674:	701a      	strb	r2, [r3, #0]
	Flash_verificate_status();
 8000676:	f7ff fef1 	bl	800045c <Flash_verificate_status>
	// Activate WREN
	Write_flash_enable();
 800067a:	f7ff fed5 	bl	8000428 <Write_flash_enable>
	uint8_t spiBuf[4];

	//Put CSN low
	flash_csn(0);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fe2e 	bl	80002e0 <flash_csn>
	// concatenate all the data to be sent
	spiBuf[0] = SECTOR_ERASE;
 8000684:	200c      	movs	r0, #12
 8000686:	183b      	adds	r3, r7, r0
 8000688:	2220      	movs	r2, #32
 800068a:	701a      	strb	r2, [r3, #0]
	sprintf( &spiBuf[1], "%c%c%c", address_1, address_2, address_3 );
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781c      	ldrb	r4, [r3, #0]
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	781d      	ldrb	r5, [r3, #0]
 8000694:	1d7b      	adds	r3, r7, #5
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	490b      	ldr	r1, [pc, #44]	@ (80006c8 <Flash_sector_erase+0x70>)
 800069a:	0006      	movs	r6, r0
 800069c:	183a      	adds	r2, r7, r0
 800069e:	1c50      	adds	r0, r2, #1
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	002b      	movs	r3, r5
 80006a4:	0022      	movs	r2, r4
 80006a6:	f002 fd3b 	bl	8003120 <siprintf>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, &spiBuf, 4, 1000);
 80006aa:	23fa      	movs	r3, #250	@ 0xfa
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	19b9      	adds	r1, r7, r6
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <Flash_sector_erase+0x74>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	f001 fade 	bl	8001c74 <HAL_SPI_Transmit>
	//Bring CSN high
	flash_csn(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fe11 	bl	80002e0 <flash_csn>
}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b005      	add	sp, #20
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	08003a9c 	.word	0x08003a9c
 80006cc:	200001c8 	.word	0x200001c8

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b093      	sub	sp, #76	@ 0x4c
 80006d4:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fac1 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f865 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 f941 	bl	8000964 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006e2:	f000 f8ab 	bl	800083c <MX_SPI1_Init>
  MX_TIM3_Init();
 80006e6:	f000 f8e7 	bl	80008b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim2);
  //flash_csn(1);

  HAL_TIM_Base_Start_IT(&htim3);
 80006ea:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <main+0xcc>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 fa81 	bl	8002bf4 <HAL_TIM_Base_Start_IT>
  DS18B20_Init(htim3, DS18B20_GPIO_Port, DS18B20_Pin);
 80006f2:	4c2a      	ldr	r4, [pc, #168]	@ (800079c <main+0xcc>)
 80006f4:	2304      	movs	r3, #4
 80006f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80006f8:	2390      	movs	r3, #144	@ 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80006fe:	466b      	mov	r3, sp
 8000700:	0018      	movs	r0, r3
 8000702:	0023      	movs	r3, r4
 8000704:	3310      	adds	r3, #16
 8000706:	2238      	movs	r2, #56	@ 0x38
 8000708:	0019      	movs	r1, r3
 800070a:	f002 fd71 	bl	80031f0 <memcpy>
 800070e:	6820      	ldr	r0, [r4, #0]
 8000710:	6861      	ldr	r1, [r4, #4]
 8000712:	68a2      	ldr	r2, [r4, #8]
 8000714:	68e3      	ldr	r3, [r4, #12]
 8000716:	f7ff fd8d 	bl	8000234 <DS18B20_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Flash_read_identification_id();
 800071a:	f7ff fdb3 	bl	8000284 <Flash_read_identification_id>
  Flash_activate_deactivate_block_protect();
 800071e:	f7ff fe65 	bl	80003ec <Flash_activate_deactivate_block_protect>
  uint8_t status_reg1;
  uint8_t status_reg2;
  uint8_t status_reg3;

  Flash_read_status1_register( &status_reg1 );
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff fdfb 	bl	8000320 <Flash_read_status1_register>
  Flash_read_status2_register( &status_reg2 );
 800072a:	1d7b      	adds	r3, r7, #5
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff fe19 	bl	8000364 <Flash_read_status2_register>
  Flash_read_status3_register( &status_reg3 );
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff fe37 	bl	80003a8 <Flash_read_status3_register>

  Flash_read_page(0x00, 0x01, 0x00, 255);
 800073a:	23ff      	movs	r3, #255	@ 0xff
 800073c:	2200      	movs	r2, #0
 800073e:	2101      	movs	r1, #1
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff41 	bl	80005c8 <Flash_read_page>
  Flash_sector_erase(0x00, 0x01, 0x02);
 8000746:	2202      	movs	r2, #2
 8000748:	2101      	movs	r1, #1
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff84 	bl	8000658 <Flash_sector_erase>
  Flash_read_page(0x00, 0x01, 0x00, 255);
 8000750:	23ff      	movs	r3, #255	@ 0xff
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff36 	bl	80005c8 <Flash_read_page>
  uint8_t size_to_send;
  size_to_send = sprintf( &things_to_write, "the temperature is: %d \r\n", 30 );
 800075c:	4910      	ldr	r1, [pc, #64]	@ (80007a0 <main+0xd0>)
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <main+0xd4>)
 8000760:	221e      	movs	r2, #30
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fcdc 	bl	8003120 <siprintf>
 8000768:	0002      	movs	r2, r0
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	701a      	strb	r2, [r3, #0]
  Flash_write_page( 0x00, 0x01, 0x02 , &things_to_write[0] , 255 );
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <main+0xd4>)
 8000770:	22ff      	movs	r2, #255	@ 0xff
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	2202      	movs	r2, #2
 8000776:	2101      	movs	r1, #1
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff fea1 	bl	80004c0 <Flash_write_page>
  Flash_read_page(0x00, 0x01, 0x02, 255);
 800077e:	23ff      	movs	r3, #255	@ 0xff
 8000780:	2202      	movs	r2, #2
 8000782:	2101      	movs	r1, #1
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff1f 	bl	80005c8 <Flash_read_page>
  Flash_read_page(0x00, 0x01, 0x02, 255);
 800078a:	23ff      	movs	r3, #255	@ 0xff
 800078c:	2202      	movs	r2, #2
 800078e:	2101      	movs	r1, #1
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff19 	bl	80005c8 <Flash_read_page>
  size_to_send = sprintf( &transmit_text, "value read: %c \r\n", read_flash_Byte[0] );
  HAL_UART_Transmit(&huart2, &transmit_text, size_to_send, 1000);
  HAL_Delay(1000);
*/

  while (1)
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	e7fd      	b.n	8000796 <main+0xc6>
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	2000022c 	.word	0x2000022c
 80007a0:	08003aa4 	.word	0x08003aa4
 80007a4:	20000274 	.word	0x20000274

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b091      	sub	sp, #68	@ 0x44
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	2410      	movs	r4, #16
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2330      	movs	r3, #48	@ 0x30
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 fcd1 	bl	8003160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007be:	003b      	movs	r3, r7
 80007c0:	0018      	movs	r0, r3
 80007c2:	2310      	movs	r3, #16
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f002 fcca 	bl	8003160 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2210      	movs	r2, #16
 80007de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2202      	movs	r2, #2
 80007e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	22a0      	movs	r2, #160	@ 0xa0
 80007f0:	0392      	lsls	r2, r2, #14
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fd43 	bl	8001288 <HAL_RCC_OscConfig>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000806:	f000 f8ff 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	003b      	movs	r3, r7
 800080c:	2207      	movs	r2, #7
 800080e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	003b      	movs	r3, r7
 8000812:	2202      	movs	r2, #2
 8000814:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000822:	003b      	movs	r3, r7
 8000824:	2101      	movs	r1, #1
 8000826:	0018      	movs	r0, r3
 8000828:	f001 f848 	bl	80018bc <HAL_RCC_ClockConfig>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000830:	f000 f8ea 	bl	8000a08 <Error_Handler>
  }
}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b011      	add	sp, #68	@ 0x44
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_SPI1_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000848:	2282      	movs	r2, #130	@ 0x82
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000856:	22e0      	movs	r2, #224	@ 0xe0
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_SPI1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_SPI1_Init+0x74>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000872:	2220      	movs	r2, #32
 8000874:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_SPI1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_SPI1_Init+0x74>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_SPI1_Init+0x74>)
 8000896:	2208      	movs	r2, #8
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <MX_SPI1_Init+0x74>)
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f931 	bl	8001b04 <HAL_SPI_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f8af 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001c8 	.word	0x200001c8
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	2308      	movs	r3, #8
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2310      	movs	r3, #16
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f002 fc49 	bl	8003160 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2308      	movs	r3, #8
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fc42 	bl	8003160 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_TIM3_Init+0xa0>)
 80008de:	4a1f      	ldr	r2, [pc, #124]	@ (800095c <MX_TIM3_Init+0xa4>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_TIM3_Init+0xa0>)
 80008e4:	222f      	movs	r2, #47	@ 0x2f
 80008e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_TIM3_Init+0xa0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_TIM3_Init+0xa0>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <MX_TIM3_Init+0xa8>)
 80008f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_TIM3_Init+0xa0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_TIM3_Init+0xa0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_TIM3_Init+0xa0>)
 8000902:	0018      	movs	r0, r3
 8000904:	f002 f926 	bl	8002b54 <HAL_TIM_Base_Init>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f87c 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	2108      	movs	r1, #8
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	0152      	lsls	r2, r2, #5
 8000918:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091a:	187a      	adds	r2, r7, r1
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_TIM3_Init+0xa0>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f002 f9b3 	bl	8002c8c <HAL_TIM_ConfigClockSource>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800092a:	f000 f86d 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092e:	003b      	movs	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	003b      	movs	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	003a      	movs	r2, r7
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_TIM3_Init+0xa0>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f002 fb95 	bl	8003070 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800094a:	f000 f85d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b006      	add	sp, #24
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	2000022c 	.word	0x2000022c
 800095c:	40000400 	.word	0x40000400
 8000960:	0000ffff 	.word	0x0000ffff

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b089      	sub	sp, #36	@ 0x24
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	240c      	movs	r4, #12
 800096c:	193b      	adds	r3, r7, r4
 800096e:	0018      	movs	r0, r3
 8000970:	2314      	movs	r3, #20
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f002 fbf3 	bl	8003160 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_GPIO_Init+0x9c>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_GPIO_Init+0x9c>)
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0289      	lsls	r1, r1, #10
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_GPIO_Init+0x9c>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_GPIO_Init+0x9c>)
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0x9c>)
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	02c9      	lsls	r1, r1, #11
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_GPIO_Init+0x9c>)
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	02db      	lsls	r3, r3, #11
 80009ac:	4013      	ands	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80009b2:	2390      	movs	r3, #144	@ 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2200      	movs	r2, #0
 80009b8:	2104      	movs	r1, #4
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fc46 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	0219      	lsls	r1, r3, #8
 80009c4:	2390      	movs	r3, #144	@ 0x90
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	2201      	movs	r2, #1
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fc3e 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DS18B20_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin|SPI_CS_Pin;
 80009d0:	0021      	movs	r1, r4
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <MX_GPIO_Init+0xa0>)
 80009d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	187a      	adds	r2, r7, r1
 80009ec:	2390      	movs	r3, #144	@ 0x90
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 faba 	bl	8000f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b009      	add	sp, #36	@ 0x24
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	00008004 	.word	0x00008004

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	619a      	str	r2, [r3, #24]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a34:	69da      	ldr	r2, [r3, #28]
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0549      	lsls	r1, r1, #21
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	61da      	str	r2, [r3, #28]
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a42:	69da      	ldr	r2, [r3, #28]
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	055b      	lsls	r3, r3, #21
 8000a48:	4013      	ands	r3, r2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	@ 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f002 fb76 	bl	8003160 <memset>
  if(hspi->Instance==SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a20      	ldr	r2, [pc, #128]	@ (8000afc <HAL_SPI_MspInit+0xa0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d139      	bne.n	8000af2 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <HAL_SPI_MspInit+0xa4>)
 8000a80:	699a      	ldr	r2, [r3, #24]
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <HAL_SPI_MspInit+0xa4>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	0149      	lsls	r1, r1, #5
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	619a      	str	r2, [r3, #24]
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <HAL_SPI_MspInit+0xa4>)
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	015b      	lsls	r3, r3, #5
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_SPI_MspInit+0xa4>)
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <HAL_SPI_MspInit+0xa4>)
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	02c9      	lsls	r1, r1, #11
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_SPI_MspInit+0xa4>)
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	02db      	lsls	r3, r3, #11
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ab6:	0021      	movs	r1, r4
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2238      	movs	r2, #56	@ 0x38
 8000abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2203      	movs	r2, #3
 8000ace:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_SPI_MspInit+0xa8>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f000 fa45 	bl	8000f6c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2019      	movs	r0, #25
 8000ae8:	f000 f9c8 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000aec:	2019      	movs	r0, #25
 8000aee:	f000 f9da 	bl	8000ea6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b00b      	add	sp, #44	@ 0x2c
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	40013000 	.word	0x40013000
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000400 	.word	0x48000400

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <HAL_TIM_Base_MspInit+0x34>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10b      	bne.n	8000b32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_TIM_Base_MspInit+0x38>)
 8000b1c:	69da      	ldr	r2, [r3, #28]
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_TIM_Base_MspInit+0x38>)
 8000b20:	2102      	movs	r1, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	61da      	str	r2, [r3, #28]
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_Base_MspInit+0x38>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	40000400 	.word	0x40000400
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8be 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <SPI1_IRQHandler+0x14>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fd0c 	bl	800259c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	200001c8 	.word	0x200001c8

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	18d3      	adds	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 faea 	bl	8003198 <__errno>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	425b      	negs	r3, r3
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	18d2      	adds	r2, r2, r3
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b006      	add	sp, #24
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20002000 	.word	0x20002000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000374 	.word	0x20000374
 8000bf8:	200004c8 	.word	0x200004c8

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f7ff fff6 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c36:	f002 fab5 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fd49 	bl	80006d0 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c4c:	08003b2c 	.word	0x08003b2c
  ldr r2, =_sbss
 8000c50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c54:	200004c4 	.word	0x200004c4

08000c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_IRQHandler>
	...

08000c5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <HAL_Init+0x24>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_Init+0x24>)
 8000c66:	2110      	movs	r1, #16
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f809 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c72:	f7ff fecf 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <HAL_InitTick+0x5c>)
 8000c8e:	681c      	ldr	r4, [r3, #0]
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <HAL_InitTick+0x60>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0019      	movs	r1, r3
 8000c96:	23fa      	movs	r3, #250	@ 0xfa
 8000c98:	0098      	lsls	r0, r3, #2
 8000c9a:	f7ff fa3f 	bl	800011c <__udivsi3>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fa3a 	bl	800011c <__udivsi3>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 f90b 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e00f      	b.n	8000cd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d80b      	bhi.n	8000cd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f8d8 	bl	8000e7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_InitTick+0x64>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b003      	add	sp, #12
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	18d2      	adds	r2, r2, r3
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000378 	.word	0x20000378

08000d10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b02      	ldr	r3, [pc, #8]	@ (8000d20 <HAL_GetTick+0x10>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	20000378 	.word	0x20000378

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	@ 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	@ 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	@ 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	@ 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	@ 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	@ 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	045b      	lsls	r3, r3, #17
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d301      	bcc.n	8000e4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e010      	b.n	8000e6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <SysTick_Config+0x44>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	3a01      	subs	r2, #1
 8000e52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e54:	2301      	movs	r3, #1
 8000e56:	425b      	negs	r3, r3
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ff7c 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x44>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ffaf 	bl	8000e34 <SysTick_Config>
 8000ed6:	0003      	movs	r3, r0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee8:	210f      	movs	r1, #15
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2221      	movs	r2, #33	@ 0x21
 8000ef4:	5c9b      	ldrb	r3, [r3, r2]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d006      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2204      	movs	r2, #4
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e028      	b.n	8000f5c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	210e      	movs	r1, #14
 8000f16:	438a      	bics	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	438a      	bics	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f32:	2101      	movs	r1, #1
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2221      	movs	r2, #33	@ 0x21
 8000f3e:	2101      	movs	r1, #1
 8000f40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2220      	movs	r2, #32
 8000f46:	2100      	movs	r1, #0
 8000f48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	0010      	movs	r0, r2
 8000f5a:	4798      	blx	r3
    }
  }
  return status;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	781b      	ldrb	r3, [r3, #0]
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e14f      	b.n	800121c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <HAL_GPIO_Init+0x28>
 8000f92:	e140      	b.n	8001216 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	4013      	ands	r3, r2
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	4013      	ands	r3, r2
 8001052:	2b02      	cmp	r3, #2
 8001054:	d123      	bne.n	800109e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	58d3      	ldr	r3, [r2, r3]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2207      	movs	r2, #7
 8001068:	4013      	ands	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2107      	movs	r1, #7
 8001082:	400b      	ands	r3, r1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	401a      	ands	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	23c0      	movs	r3, #192	@ 0xc0
 80010d8:	029b      	lsls	r3, r3, #10
 80010da:	4013      	ands	r3, r2
 80010dc:	d100      	bne.n	80010e0 <HAL_GPIO_Init+0x174>
 80010de:	e09a      	b.n	8001216 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b54      	ldr	r3, [pc, #336]	@ (8001234 <HAL_GPIO_Init+0x2c8>)
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	4b53      	ldr	r3, [pc, #332]	@ (8001234 <HAL_GPIO_Init+0x2c8>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	4b51      	ldr	r3, [pc, #324]	@ (8001234 <HAL_GPIO_Init+0x2c8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4013      	ands	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001238 <HAL_GPIO_Init+0x2cc>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	589b      	ldr	r3, [r3, r2]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	409a      	lsls	r2, r3
 8001112:	0013      	movs	r3, r2
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	2390      	movs	r3, #144	@ 0x90
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	429a      	cmp	r2, r3
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x1e2>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a44      	ldr	r2, [pc, #272]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x1de>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <HAL_GPIO_Init+0x2d4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x1da>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a42      	ldr	r2, [pc, #264]	@ (8001244 <HAL_GPIO_Init+0x2d8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x1d6>
 800113e:	2303      	movs	r3, #3
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x1e4>
 8001142:	2305      	movs	r3, #5
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x1e4>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x1e4>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x1e4>
 800114e:	2300      	movs	r3, #0
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	2103      	movs	r1, #3
 8001154:	400a      	ands	r2, r1
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001160:	4935      	ldr	r1, [pc, #212]	@ (8001238 <HAL_GPIO_Init+0x2cc>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	035b      	lsls	r3, r3, #13
 8001186:	4013      	ands	r3, r2
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001192:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001198:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	039b      	lsls	r3, r3, #14
 80011b0:	4013      	ands	r3, r2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	029b      	lsls	r3, r3, #10
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	025b      	lsls	r3, r3, #9
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_GPIO_Init+0x2dc>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	40da      	lsrs	r2, r3
 8001224:	1e13      	subs	r3, r2, #0
 8001226:	d000      	beq.n	800122a <HAL_GPIO_Init+0x2be>
 8001228:	e6a8      	b.n	8000f7c <HAL_GPIO_Init+0x10>
  } 
}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b006      	add	sp, #24
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	0008      	movs	r0, r1
 8001256:	0011      	movs	r1, r2
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	1c02      	adds	r2, r0, #0
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	1c7b      	adds	r3, r7, #1
 8001260:	1c0a      	adds	r2, r1, #0
 8001262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	1c7b      	adds	r3, r7, #1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126c:	1cbb      	adds	r3, r7, #2
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	1cbb      	adds	r3, r7, #2
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e301      	b.n	800189e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2201      	movs	r2, #1
 80012a0:	4013      	ands	r3, r2
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x1e>
 80012a4:	e08d      	b.n	80013c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012a6:	4bc3      	ldr	r3, [pc, #780]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	220c      	movs	r2, #12
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00e      	beq.n	80012d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b2:	4bc0      	ldr	r3, [pc, #768]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	220c      	movs	r2, #12
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x64>
 80012be:	4bbd      	ldr	r3, [pc, #756]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	025b      	lsls	r3, r3, #9
 80012c6:	401a      	ands	r2, r3
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d10d      	bne.n	80012ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4bb8      	ldr	r3, [pc, #736]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d100      	bne.n	80012de <HAL_RCC_OscConfig+0x56>
 80012dc:	e070      	b.n	80013c0 <HAL_RCC_OscConfig+0x138>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d000      	beq.n	80012e8 <HAL_RCC_OscConfig+0x60>
 80012e6:	e06b      	b.n	80013c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e2d8      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x7c>
 80012f4:	4baf      	ldr	r3, [pc, #700]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4bae      	ldr	r3, [pc, #696]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	0249      	lsls	r1, r1, #9
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e02f      	b.n	8001364 <HAL_RCC_OscConfig+0xdc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10c      	bne.n	8001326 <HAL_RCC_OscConfig+0x9e>
 800130c:	4ba9      	ldr	r3, [pc, #676]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4ba8      	ldr	r3, [pc, #672]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001312:	49a9      	ldr	r1, [pc, #676]	@ (80015b8 <HAL_RCC_OscConfig+0x330>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	4ba6      	ldr	r3, [pc, #664]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4ba5      	ldr	r3, [pc, #660]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800131e:	49a7      	ldr	r1, [pc, #668]	@ (80015bc <HAL_RCC_OscConfig+0x334>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e01e      	b.n	8001364 <HAL_RCC_OscConfig+0xdc>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b05      	cmp	r3, #5
 800132c:	d10e      	bne.n	800134c <HAL_RCC_OscConfig+0xc4>
 800132e:	4ba1      	ldr	r3, [pc, #644]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4ba0      	ldr	r3, [pc, #640]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001334:	2180      	movs	r1, #128	@ 0x80
 8001336:	02c9      	lsls	r1, r1, #11
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	4b9d      	ldr	r3, [pc, #628]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b9c      	ldr	r3, [pc, #624]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001342:	2180      	movs	r1, #128	@ 0x80
 8001344:	0249      	lsls	r1, r1, #9
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xdc>
 800134c:	4b99      	ldr	r3, [pc, #612]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b98      	ldr	r3, [pc, #608]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001352:	4999      	ldr	r1, [pc, #612]	@ (80015b8 <HAL_RCC_OscConfig+0x330>)
 8001354:	400a      	ands	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	4b96      	ldr	r3, [pc, #600]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b95      	ldr	r3, [pc, #596]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800135e:	4997      	ldr	r1, [pc, #604]	@ (80015bc <HAL_RCC_OscConfig+0x334>)
 8001360:	400a      	ands	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d014      	beq.n	8001396 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcd0 	bl	8000d10 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fccb 	bl	8000d10 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	@ 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e28a      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001388:	4b8a      	ldr	r3, [pc, #552]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	029b      	lsls	r3, r3, #10
 8001390:	4013      	ands	r3, r2
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0xee>
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fcbb 	bl	8000d10 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fcb6 	bl	8000d10 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e275      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b80      	ldr	r3, [pc, #512]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	029b      	lsls	r3, r3, #10
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x118>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x146>
 80013cc:	e069      	b.n	80014a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ce:	4b79      	ldr	r3, [pc, #484]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	220c      	movs	r2, #12
 80013d4:	4013      	ands	r3, r2
 80013d6:	d00b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013d8:	4b76      	ldr	r3, [pc, #472]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	220c      	movs	r2, #12
 80013de:	4013      	ands	r3, r2
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d11c      	bne.n	800141e <HAL_RCC_OscConfig+0x196>
 80013e4:	4b73      	ldr	r3, [pc, #460]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	025b      	lsls	r3, r3, #9
 80013ec:	4013      	ands	r3, r2
 80013ee:	d116      	bne.n	800141e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f0:	4b70      	ldr	r3, [pc, #448]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2202      	movs	r2, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e24b      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b6b      	ldr	r3, [pc, #428]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	22f8      	movs	r2, #248	@ 0xf8
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00da      	lsls	r2, r3, #3
 8001416:	4b67      	ldr	r3, [pc, #412]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141c:	e041      	b.n	80014a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d024      	beq.n	8001470 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4b63      	ldr	r3, [pc, #396]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800142c:	2101      	movs	r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc6d 	bl	8000d10 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc68 	bl	8000d10 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e227      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b59      	ldr	r3, [pc, #356]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d0f1      	beq.n	800143c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b56      	ldr	r3, [pc, #344]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	22f8      	movs	r2, #248	@ 0xf8
 800145e:	4393      	bics	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00da      	lsls	r2, r3, #3
 8001468:	4b52      	ldr	r3, [pc, #328]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e018      	b.n	80014a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b50      	ldr	r3, [pc, #320]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b4f      	ldr	r3, [pc, #316]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc48 	bl	8000d10 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff fc43 	bl	8000d10 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e202      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001498:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2202      	movs	r2, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d1f1      	bne.n	8001486 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2208      	movs	r2, #8
 80014a8:	4013      	ands	r3, r2
 80014aa:	d036      	beq.n	800151a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d019      	beq.n	80014e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b4:	4b3f      	ldr	r3, [pc, #252]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b8:	4b3e      	ldr	r3, [pc, #248]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fc26 	bl	8000d10 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc21 	bl	8000d10 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1e0      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x242>
 80014e6:	e018      	b.n	800151a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fc0c 	bl	8000d10 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc07 	bl	8000d10 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1c6      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d1f1      	bne.n	80014fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2204      	movs	r2, #4
 8001520:	4013      	ands	r3, r2
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x29e>
 8001524:	e0b4      	b.n	8001690 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	201f      	movs	r0, #31
 8001528:	183b      	adds	r3, r7, r0
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	055b      	lsls	r3, r3, #21
 8001536:	4013      	ands	r3, r2
 8001538:	d110      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 8001540:	2180      	movs	r1, #128	@ 0x80
 8001542:	0549      	lsls	r1, r1, #21
 8001544:	430a      	orrs	r2, r1
 8001546:	61da      	str	r2, [r3, #28]
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	055b      	lsls	r3, r3, #21
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001556:	183b      	adds	r3, r7, r0
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_RCC_OscConfig+0x338>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d11a      	bne.n	800159e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_RCC_OscConfig+0x338>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_RCC_OscConfig+0x338>)
 800156e:	2180      	movs	r1, #128	@ 0x80
 8001570:	0049      	lsls	r1, r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbcb 	bl	8000d10 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fbc6 	bl	8000d10 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e185      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_RCC_OscConfig+0x338>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4013      	ands	r3, r2
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10e      	bne.n	80015c4 <HAL_RCC_OscConfig+0x33c>
 80015a6:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	6a1a      	ldr	r2, [r3, #32]
 80015aa:	4b02      	ldr	r3, [pc, #8]	@ (80015b4 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	621a      	str	r2, [r3, #32]
 80015b2:	e035      	b.n	8001620 <HAL_RCC_OscConfig+0x398>
 80015b4:	40021000 	.word	0x40021000
 80015b8:	fffeffff 	.word	0xfffeffff
 80015bc:	fffbffff 	.word	0xfffbffff
 80015c0:	40007000 	.word	0x40007000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x35e>
 80015cc:	4bb6      	ldr	r3, [pc, #728]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	4bb5      	ldr	r3, [pc, #724]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	621a      	str	r2, [r3, #32]
 80015d8:	4bb3      	ldr	r3, [pc, #716]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	4bb2      	ldr	r3, [pc, #712]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015de:	2104      	movs	r1, #4
 80015e0:	438a      	bics	r2, r1
 80015e2:	621a      	str	r2, [r3, #32]
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0x398>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x380>
 80015ee:	4bae      	ldr	r3, [pc, #696]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015f0:	6a1a      	ldr	r2, [r3, #32]
 80015f2:	4bad      	ldr	r3, [pc, #692]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015f4:	2104      	movs	r1, #4
 80015f6:	430a      	orrs	r2, r1
 80015f8:	621a      	str	r2, [r3, #32]
 80015fa:	4bab      	ldr	r3, [pc, #684]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	4baa      	ldr	r3, [pc, #680]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	621a      	str	r2, [r3, #32]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x398>
 8001608:	4ba7      	ldr	r3, [pc, #668]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4ba6      	ldr	r3, [pc, #664]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800160e:	2101      	movs	r1, #1
 8001610:	438a      	bics	r2, r1
 8001612:	621a      	str	r2, [r3, #32]
 8001614:	4ba4      	ldr	r3, [pc, #656]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4ba3      	ldr	r3, [pc, #652]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800161a:	2104      	movs	r1, #4
 800161c:	438a      	bics	r2, r1
 800161e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d014      	beq.n	8001652 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fb72 	bl	8000d10 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	e009      	b.n	8001646 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb6d 	bl	8000d10 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a9b      	ldr	r2, [pc, #620]	@ (80018ac <HAL_RCC_OscConfig+0x624>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e12b      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	4b98      	ldr	r3, [pc, #608]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x3aa>
 8001650:	e013      	b.n	800167a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb5d 	bl	8000d10 <HAL_GetTick>
 8001656:	0003      	movs	r3, r0
 8001658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	e009      	b.n	8001670 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fb58 	bl	8000d10 <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4a91      	ldr	r2, [pc, #580]	@ (80018ac <HAL_RCC_OscConfig+0x624>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e116      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	4b8d      	ldr	r3, [pc, #564]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	2202      	movs	r2, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800167a:	231f      	movs	r3, #31
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b88      	ldr	r3, [pc, #544]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	4b87      	ldr	r3, [pc, #540]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800168a:	4989      	ldr	r1, [pc, #548]	@ (80018b0 <HAL_RCC_OscConfig+0x628>)
 800168c:	400a      	ands	r2, r1
 800168e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2210      	movs	r2, #16
 8001696:	4013      	ands	r3, r2
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d12a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016a2:	4b81      	ldr	r3, [pc, #516]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a6:	4b80      	ldr	r3, [pc, #512]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016a8:	2104      	movs	r1, #4
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016ae:	4b7e      	ldr	r3, [pc, #504]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016b2:	4b7d      	ldr	r3, [pc, #500]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb29 	bl	8000d10 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c4:	f7ff fb24 	bl	8000d10 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0e3      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d6:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f1      	beq.n	80016c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016e0:	4b71      	ldr	r3, [pc, #452]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e4:	22f8      	movs	r2, #248	@ 0xf8
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	00da      	lsls	r2, r3, #3
 80016f0:	4b6d      	ldr	r3, [pc, #436]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016f6:	e034      	b.n	8001762 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	3305      	adds	r3, #5
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001700:	4b69      	ldr	r3, [pc, #420]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001704:	4b68      	ldr	r3, [pc, #416]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001706:	2104      	movs	r1, #4
 8001708:	438a      	bics	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001710:	22f8      	movs	r2, #248	@ 0xf8
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	00da      	lsls	r2, r3, #3
 800171c:	4b62      	ldr	r3, [pc, #392]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
 8001722:	e01e      	b.n	8001762 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001724:	4b60      	ldr	r3, [pc, #384]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001728:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800172a:	2104      	movs	r1, #4
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001730:	4b5d      	ldr	r3, [pc, #372]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001734:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001736:	2101      	movs	r1, #1
 8001738:	438a      	bics	r2, r1
 800173a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fae8 	bl	8000d10 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001746:	f7ff fae3 	bl	8000d10 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0a2      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001758:	4b53      	ldr	r3, [pc, #332]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800175a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d1f1      	bne.n	8001746 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d100      	bne.n	800176c <HAL_RCC_OscConfig+0x4e4>
 800176a:	e097      	b.n	800189c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	220c      	movs	r2, #12
 8001772:	4013      	ands	r3, r2
 8001774:	2b08      	cmp	r3, #8
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x4f2>
 8001778:	e06b      	b.n	8001852 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d14c      	bne.n	800181c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b49      	ldr	r3, [pc, #292]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001788:	494a      	ldr	r1, [pc, #296]	@ (80018b4 <HAL_RCC_OscConfig+0x62c>)
 800178a:	400a      	ands	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fabf 	bl	8000d10 <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff faba 	bl	8000d10 <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e079      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017aa:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	220f      	movs	r2, #15
 80017bc:	4393      	bics	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c4:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a3a      	ldr	r2, [pc, #232]	@ (80018b8 <HAL_RCC_OscConfig+0x630>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	431a      	orrs	r2, r3
 80017de:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 80017ea:	2180      	movs	r1, #128	@ 0x80
 80017ec:	0449      	lsls	r1, r1, #17
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa8d 	bl	8000d10 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fa88 	bl	8000d10 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e047      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800180e:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	4013      	ands	r3, r2
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x574>
 800181a:	e03f      	b.n	800189c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001822:	4924      	ldr	r1, [pc, #144]	@ (80018b4 <HAL_RCC_OscConfig+0x62c>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fa72 	bl	8000d10 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa6d 	bl	8000d10 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e02c      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	049b      	lsls	r3, r3, #18
 800184c:	4013      	ands	r3, r2
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x5aa>
 8001850:	e024      	b.n	800189c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e01f      	b.n	800189e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001864:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <HAL_RCC_OscConfig+0x620>)
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	429a      	cmp	r2, r3
 8001878:	d10e      	bne.n	8001898 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	220f      	movs	r2, #15
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	23f0      	movs	r3, #240	@ 0xf0
 800188c:	039b      	lsls	r3, r3, #14
 800188e:	401a      	ands	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b008      	add	sp, #32
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	feffffff 	.word	0xfeffffff
 80018b8:	ffc2ffff 	.word	0xffc2ffff

080018bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b3      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d911      	bls.n	8001902 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	4b55      	ldr	r3, [pc, #340]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f0:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e09a      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d015      	beq.n	8001938 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	d006      	beq.n	8001924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001916:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 800191c:	21e0      	movs	r1, #224	@ 0xe0
 800191e:	00c9      	lsls	r1, r1, #3
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	22f0      	movs	r2, #240	@ 0xf0
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d040      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	@ 0x80
 8001950:	029b      	lsls	r3, r3, #10
 8001952:	4013      	ands	r3, r2
 8001954:	d114      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06e      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	049b      	lsls	r3, r3, #18
 800196a:	4013      	ands	r3, r2
 800196c:	d108      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e062      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e05b      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001980:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff f9bc 	bl	8000d10 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199c:	e009      	b.n	80019b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199e:	f7ff f9b7 	bl	8000d10 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_RCC_ClockConfig+0x18c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e042      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	220c      	movs	r2, #12
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1ec      	bne.n	800199e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d211      	bcs.n	80019f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2201      	movs	r2, #1
 80019d8:	4393      	bics	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <HAL_RCC_ClockConfig+0x184>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e020      	b.n	8001a38 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2204      	movs	r2, #4
 80019fc:	4013      	ands	r3, r2
 80019fe:	d009      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_RCC_ClockConfig+0x190>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a14:	f000 f820 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_RCC_ClockConfig+0x188>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	220f      	movs	r2, #15
 8001a22:	4013      	ands	r3, r2
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_RCC_ClockConfig+0x194>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	000a      	movs	r2, r1
 8001a2a:	40da      	lsrs	r2, r3
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x198>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f7ff f927 	bl	8000c84 <HAL_InitTick>
  
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b004      	add	sp, #16
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	00001388 	.word	0x00001388
 8001a4c:	fffff8ff 	.word	0xfffff8ff
 8001a50:	08003ac0 	.word	0x08003ac0
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x30>
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x36>
 8001a86:	e02c      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a8a:	613b      	str	r3, [r7, #16]
      break;
 8001a8c:	e02c      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	220f      	movs	r2, #15
 8001a94:	4013      	ands	r3, r2
 8001a96:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	4810      	ldr	r0, [pc, #64]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ab8:	f7fe fb30 	bl	800011c <__udivsi3>
 8001abc:	0003      	movs	r3, r0
 8001abe:	001a      	movs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4353      	muls	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	000a      	movs	r2, r1
 8001acc:	0152      	lsls	r2, r2, #5
 8001ace:	1a52      	subs	r2, r2, r1
 8001ad0:	0193      	lsls	r3, r2, #6
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	185b      	adds	r3, r3, r1
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
      break;
 8001ae0:	e002      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ae4:	613b      	str	r3, [r7, #16]
      break;
 8001ae6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ae8:	693b      	ldr	r3, [r7, #16]
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b006      	add	sp, #24
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	40021000 	.word	0x40021000
 8001af8:	007a1200 	.word	0x007a1200
 8001afc:	08003ad0 	.word	0x08003ad0
 8001b00:	08003ae0 	.word	0x08003ae0

08001b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0a8      	b.n	8001c68 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	2382      	movs	r3, #130	@ 0x82
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d009      	beq.n	8001b3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
 8001b30:	e005      	b.n	8001b3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	225d      	movs	r2, #93	@ 0x5d
 8001b48:	5c9b      	ldrb	r3, [r3, r2]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	225c      	movs	r2, #92	@ 0x5c
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe ff7e 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	225d      	movs	r2, #93	@ 0x5d
 8001b64:	2102      	movs	r1, #2
 8001b66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2140      	movs	r1, #64	@ 0x40
 8001b74:	438a      	bics	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	23e0      	movs	r3, #224	@ 0xe0
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d902      	bls.n	8001b8a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e002      	b.n	8001b90 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	015b      	lsls	r3, r3, #5
 8001b8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	23f0      	movs	r3, #240	@ 0xf0
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d008      	beq.n	8001bae <HAL_SPI_Init+0xaa>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	23e0      	movs	r3, #224	@ 0xe0
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d002      	beq.n	8001bae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	2382      	movs	r3, #130	@ 0x82
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6899      	ldr	r1, [r3, #8]
 8001bbc:	2384      	movs	r3, #132	@ 0x84
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2102      	movs	r1, #2
 8001bca:	400b      	ands	r3, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6999      	ldr	r1, [r3, #24]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	400b      	ands	r3, r1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2138      	movs	r1, #56	@ 0x38
 8001bea:	400b      	ands	r3, r1
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	2180      	movs	r1, #128	@ 0x80
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	0011      	movs	r1, r2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	2204      	movs	r2, #4
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	2108      	movs	r1, #8
 8001c26:	400b      	ands	r3, r1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68d9      	ldr	r1, [r3, #12]
 8001c2e:	23f0      	movs	r3, #240	@ 0xf0
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	400b      	ands	r3, r1
 8001c34:	431a      	orrs	r2, r3
 8001c36:	0011      	movs	r1, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	401a      	ands	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4907      	ldr	r1, [pc, #28]	@ (8001c70 <HAL_SPI_Init+0x16c>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	225d      	movs	r2, #93	@ 0x5d
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b004      	add	sp, #16
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	fffff7ff 	.word	0xfffff7ff

08001c74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	1dbb      	adds	r3, r7, #6
 8001c82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c84:	231f      	movs	r3, #31
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	225c      	movs	r2, #92	@ 0x5c
 8001c90:	5c9b      	ldrb	r3, [r3, r2]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_SPI_Transmit+0x26>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e147      	b.n	8001f2a <HAL_SPI_Transmit+0x2b6>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	225c      	movs	r2, #92	@ 0x5c
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ca2:	f7ff f835 	bl	8000d10 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001caa:	2316      	movs	r3, #22
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	1dba      	adds	r2, r7, #6
 8001cb0:	8812      	ldrh	r2, [r2, #0]
 8001cb2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	225d      	movs	r2, #93	@ 0x5d
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d004      	beq.n	8001cca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001cc0:	231f      	movs	r3, #31
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cc8:	e128      	b.n	8001f1c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_SPI_Transmit+0x64>
 8001cd0:	1dbb      	adds	r3, r7, #6
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001cd8:	231f      	movs	r3, #31
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ce0:	e11c      	b.n	8001f1c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	225d      	movs	r2, #93	@ 0x5d
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1dba      	adds	r2, r7, #6
 8001cfa:	8812      	ldrh	r2, [r2, #0]
 8001cfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1dba      	adds	r2, r7, #6
 8001d02:	8812      	ldrh	r2, [r2, #0]
 8001d04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2244      	movs	r2, #68	@ 0x44
 8001d10:	2100      	movs	r1, #0
 8001d12:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2246      	movs	r2, #70	@ 0x46
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d110      	bne.n	8001d56 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2140      	movs	r1, #64	@ 0x40
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2180      	movs	r1, #128	@ 0x80
 8001d50:	01c9      	lsls	r1, r1, #7
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b40      	cmp	r3, #64	@ 0x40
 8001d62:	d007      	beq.n	8001d74 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2140      	movs	r1, #64	@ 0x40
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	23e0      	movs	r3, #224	@ 0xe0
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d952      	bls.n	8001e26 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_SPI_Transmit+0x11e>
 8001d88:	2316      	movs	r3, #22
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d143      	bne.n	8001e1a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da2:	1c9a      	adds	r2, r3, #2
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001db6:	e030      	b.n	8001e1a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d112      	bne.n	8001dec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd6:	1c9a      	adds	r2, r3, #2
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001dea:	e016      	b.n	8001e1a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dec:	f7fe ff90 	bl	8000d10 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d802      	bhi.n	8001e02 <HAL_SPI_Transmit+0x18e>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_SPI_Transmit+0x194>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001e08:	231f      	movs	r3, #31
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	225d      	movs	r2, #93	@ 0x5d
 8001e14:	2101      	movs	r1, #1
 8001e16:	5499      	strb	r1, [r3, r2]
          goto error;
 8001e18:	e080      	b.n	8001f1c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1c9      	bne.n	8001db8 <HAL_SPI_Transmit+0x144>
 8001e24:	e053      	b.n	8001ece <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_SPI_Transmit+0x1c4>
 8001e2e:	2316      	movs	r3, #22
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d145      	bne.n	8001ec4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	330c      	adds	r3, #12
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001e5e:	e031      	b.n	8001ec4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d113      	bne.n	8001e96 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e94:	e016      	b.n	8001ec4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e96:	f7fe ff3b 	bl	8000d10 <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d802      	bhi.n	8001eac <HAL_SPI_Transmit+0x238>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_SPI_Transmit+0x23e>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001eb2:	231f      	movs	r3, #31
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	225d      	movs	r2, #93	@ 0x5d
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
          goto error;
 8001ec2:	e02b      	b.n	8001f1c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1c8      	bne.n	8001e60 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f000 fdf7 	bl	8002ac8 <SPI_EndRxTxTransaction>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001f0a:	231f      	movs	r3, #31
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	225d      	movs	r2, #93	@ 0x5d
 8001f18:	2101      	movs	r1, #1
 8001f1a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	225c      	movs	r2, #92	@ 0x5c
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	781b      	ldrb	r3, [r3, #0]
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b008      	add	sp, #32
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	1dbb      	adds	r3, r7, #6
 8001f42:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f44:	2117      	movs	r1, #23
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	225d      	movs	r2, #93	@ 0x5d
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d003      	beq.n	8001f60 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f5e:	e12b      	b.n	80021b8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2382      	movs	r3, #130	@ 0x82
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d113      	bne.n	8001f94 <HAL_SPI_Receive+0x60>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	225d      	movs	r2, #93	@ 0x5d
 8001f78:	2104      	movs	r1, #4
 8001f7a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	881c      	ldrh	r4, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	0023      	movs	r3, r4
 8001f8c:	f000 f924 	bl	80021d8 <HAL_SPI_TransmitReceive>
 8001f90:	0003      	movs	r3, r0
 8001f92:	e118      	b.n	80021c6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	225c      	movs	r2, #92	@ 0x5c
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_SPI_Receive+0x6e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e111      	b.n	80021c6 <HAL_SPI_Receive+0x292>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	225c      	movs	r2, #92	@ 0x5c
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001faa:	f7fe feb1 	bl	8000d10 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_SPI_Receive+0x8c>
 8001fb8:	1dbb      	adds	r3, r7, #6
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001fc0:	2317      	movs	r3, #23
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fc8:	e0f6      	b.n	80021b8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	225d      	movs	r2, #93	@ 0x5d
 8001fce:	2104      	movs	r1, #4
 8001fd0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1dba      	adds	r2, r7, #6
 8001fe2:	2144      	movs	r1, #68	@ 0x44
 8001fe4:	8812      	ldrh	r2, [r2, #0]
 8001fe6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1dba      	adds	r2, r7, #6
 8001fec:	2146      	movs	r1, #70	@ 0x46
 8001fee:	8812      	ldrh	r2, [r2, #0]
 8001ff0:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	23e0      	movs	r3, #224	@ 0xe0
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	429a      	cmp	r2, r3
 800201a:	d908      	bls.n	800202e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	496a      	ldr	r1, [pc, #424]	@ (80021d0 <HAL_SPI_Receive+0x29c>)
 8002028:	400a      	ands	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e008      	b.n	8002040 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0149      	lsls	r1, r1, #5
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	429a      	cmp	r2, r3
 800204a:	d10f      	bne.n	800206c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2140      	movs	r1, #64	@ 0x40
 8002058:	438a      	bics	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	495b      	ldr	r1, [pc, #364]	@ (80021d4 <HAL_SPI_Receive+0x2a0>)
 8002068:	400a      	ands	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	4013      	ands	r3, r2
 8002076:	2b40      	cmp	r3, #64	@ 0x40
 8002078:	d007      	beq.n	800208a <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2140      	movs	r1, #64	@ 0x40
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	23e0      	movs	r3, #224	@ 0xe0
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	429a      	cmp	r2, r3
 8002094:	d900      	bls.n	8002098 <HAL_SPI_Receive+0x164>
 8002096:	e071      	b.n	800217c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002098:	e035      	b.n	8002106 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d117      	bne.n	80020d8 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	330c      	adds	r3, #12
 80020ae:	001a      	movs	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2246      	movs	r2, #70	@ 0x46
 80020c8:	5a9b      	ldrh	r3, [r3, r2]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b299      	uxth	r1, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2246      	movs	r2, #70	@ 0x46
 80020d4:	5299      	strh	r1, [r3, r2]
 80020d6:	e016      	b.n	8002106 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d8:	f7fe fe1a 	bl	8000d10 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d802      	bhi.n	80020ee <HAL_SPI_Receive+0x1ba>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_SPI_Receive+0x1c0>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d108      	bne.n	8002106 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80020f4:	2317      	movs	r3, #23
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2203      	movs	r2, #3
 80020fa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	225d      	movs	r2, #93	@ 0x5d
 8002100:	2101      	movs	r1, #1
 8002102:	5499      	strb	r1, [r3, r2]
          goto error;
 8002104:	e058      	b.n	80021b8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2246      	movs	r2, #70	@ 0x46
 800210a:	5a9b      	ldrh	r3, [r3, r2]
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1c3      	bne.n	800209a <HAL_SPI_Receive+0x166>
 8002112:	e039      	b.n	8002188 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	4013      	ands	r3, r2
 800211e:	2b01      	cmp	r3, #1
 8002120:	d115      	bne.n	800214e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	b292      	uxth	r2, r2
 800212e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	1c9a      	adds	r2, r3, #2
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2246      	movs	r2, #70	@ 0x46
 800213e:	5a9b      	ldrh	r3, [r3, r2]
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b299      	uxth	r1, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2246      	movs	r2, #70	@ 0x46
 800214a:	5299      	strh	r1, [r3, r2]
 800214c:	e016      	b.n	800217c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800214e:	f7fe fddf 	bl	8000d10 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d802      	bhi.n	8002164 <HAL_SPI_Receive+0x230>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	d102      	bne.n	800216a <HAL_SPI_Receive+0x236>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800216a:	2317      	movs	r3, #23
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	225d      	movs	r2, #93	@ 0x5d
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
          goto error;
 800217a:	e01d      	b.n	80021b8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2246      	movs	r2, #70	@ 0x46
 8002180:	5a9b      	ldrh	r3, [r3, r2]
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1c5      	bne.n	8002114 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fc3c 	bl	8002a0c <SPI_EndRxTransaction>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d002      	beq.n	800219e <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80021a6:	2317      	movs	r3, #23
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e003      	b.n	80021b8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	225d      	movs	r2, #93	@ 0x5d
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	225c      	movs	r2, #92	@ 0x5c
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021c0:	2317      	movs	r3, #23
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b007      	add	sp, #28
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	ffffefff 	.word	0xffffefff
 80021d4:	ffffbfff 	.word	0xffffbfff

080021d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	001a      	movs	r2, r3
 80021e6:	1cbb      	adds	r3, r7, #2
 80021e8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021ea:	2301      	movs	r3, #1
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021ee:	2323      	movs	r3, #35	@ 0x23
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	225c      	movs	r2, #92	@ 0x5c
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x2c>
 8002200:	2302      	movs	r3, #2
 8002202:	e1c4      	b.n	800258e <HAL_SPI_TransmitReceive+0x3b6>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	225c      	movs	r2, #92	@ 0x5c
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800220c:	f7fe fd80 	bl	8000d10 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002214:	201b      	movs	r0, #27
 8002216:	183b      	adds	r3, r7, r0
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	215d      	movs	r1, #93	@ 0x5d
 800221c:	5c52      	ldrb	r2, [r2, r1]
 800221e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002226:	2312      	movs	r3, #18
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	1cba      	adds	r2, r7, #2
 800222c:	8812      	ldrh	r2, [r2, #0]
 800222e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002230:	183b      	adds	r3, r7, r0
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d011      	beq.n	800225c <HAL_SPI_TransmitReceive+0x84>
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	2382      	movs	r3, #130	@ 0x82
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	429a      	cmp	r2, r3
 8002240:	d107      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x7a>
 800224a:	183b      	adds	r3, r7, r0
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d004      	beq.n	800225c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002252:	2323      	movs	r3, #35	@ 0x23
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
    goto error;
 800225a:	e191      	b.n	8002580 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x98>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x98>
 8002268:	1cbb      	adds	r3, r7, #2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d104      	bne.n	800227a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002270:	2323      	movs	r3, #35	@ 0x23
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    goto error;
 8002278:	e182      	b.n	8002580 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	225d      	movs	r2, #93	@ 0x5d
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b04      	cmp	r3, #4
 8002284:	d003      	beq.n	800228e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	225d      	movs	r2, #93	@ 0x5d
 800228a:	2105      	movs	r1, #5
 800228c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1cba      	adds	r2, r7, #2
 800229e:	2146      	movs	r1, #70	@ 0x46
 80022a0:	8812      	ldrh	r2, [r2, #0]
 80022a2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1cba      	adds	r2, r7, #2
 80022a8:	2144      	movs	r1, #68	@ 0x44
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1cba      	adds	r2, r7, #2
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1cba      	adds	r2, r7, #2
 80022c0:	8812      	ldrh	r2, [r2, #0]
 80022c2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	23e0      	movs	r3, #224	@ 0xe0
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	429a      	cmp	r2, r3
 80022da:	d908      	bls.n	80022ee <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	49ac      	ldr	r1, [pc, #688]	@ (8002598 <HAL_SPI_TransmitReceive+0x3c0>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	e008      	b.n	8002300 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2180      	movs	r1, #128	@ 0x80
 80022fa:	0149      	lsls	r1, r1, #5
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	4013      	ands	r3, r2
 800230a:	2b40      	cmp	r3, #64	@ 0x40
 800230c:	d007      	beq.n	800231e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2140      	movs	r1, #64	@ 0x40
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	23e0      	movs	r3, #224	@ 0xe0
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	429a      	cmp	r2, r3
 8002328:	d800      	bhi.n	800232c <HAL_SPI_TransmitReceive+0x154>
 800232a:	e083      	b.n	8002434 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_SPI_TransmitReceive+0x168>
 8002334:	2312      	movs	r3, #18
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d000      	beq.n	8002340 <HAL_SPI_TransmitReceive+0x168>
 800233e:	e06d      	b.n	800241c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	881a      	ldrh	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	1c9a      	adds	r2, r3, #2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002364:	e05a      	b.n	800241c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d11b      	bne.n	80023ac <HAL_SPI_TransmitReceive+0x1d4>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x1d4>
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	2b01      	cmp	r3, #1
 8002382:	d113      	bne.n	80023ac <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d11c      	bne.n	80023f4 <HAL_SPI_TransmitReceive+0x21c>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2246      	movs	r2, #70	@ 0x46
 80023be:	5a9b      	ldrh	r3, [r3, r2]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	b292      	uxth	r2, r2
 80023d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	1c9a      	adds	r2, r3, #2
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2246      	movs	r2, #70	@ 0x46
 80023e2:	5a9b      	ldrh	r3, [r3, r2]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b299      	uxth	r1, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2246      	movs	r2, #70	@ 0x46
 80023ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023f0:	2301      	movs	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023f4:	f7fe fc8c 	bl	8000d10 <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002400:	429a      	cmp	r2, r3
 8002402:	d80b      	bhi.n	800241c <HAL_SPI_TransmitReceive+0x244>
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	3301      	adds	r3, #1
 8002408:	d008      	beq.n	800241c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800240a:	2323      	movs	r3, #35	@ 0x23
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2203      	movs	r2, #3
 8002410:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	225d      	movs	r2, #93	@ 0x5d
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
        goto error;
 800241a:	e0b1      	b.n	8002580 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d19f      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x18e>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2246      	movs	r2, #70	@ 0x46
 800242a:	5a9b      	ldrh	r3, [r3, r2]
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d199      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x18e>
 8002432:	e089      	b.n	8002548 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x270>
 800243c:	2312      	movs	r3, #18
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d000      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x270>
 8002446:	e074      	b.n	8002532 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	330c      	adds	r3, #12
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246e:	e060      	b.n	8002532 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d11c      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x2e0>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x2e0>
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	2b01      	cmp	r3, #1
 800248c:	d114      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d11e      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x32c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2246      	movs	r2, #70	@ 0x46
 80024ca:	5a9b      	ldrh	r3, [r3, r2]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d018      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	001a      	movs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2246      	movs	r2, #70	@ 0x46
 80024f2:	5a9b      	ldrh	r3, [r3, r2]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b299      	uxth	r1, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2246      	movs	r2, #70	@ 0x46
 80024fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002504:	f7fe fc04 	bl	8000d10 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002510:	429a      	cmp	r2, r3
 8002512:	d802      	bhi.n	800251a <HAL_SPI_TransmitReceive+0x342>
 8002514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002516:	3301      	adds	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_SPI_TransmitReceive+0x348>
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002520:	2323      	movs	r3, #35	@ 0x23
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2203      	movs	r2, #3
 8002526:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	225d      	movs	r2, #93	@ 0x5d
 800252c:	2101      	movs	r1, #1
 800252e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002530:	e026      	b.n	8002580 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d199      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x298>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2246      	movs	r2, #70	@ 0x46
 8002540:	5a9b      	ldrh	r3, [r3, r2]
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d193      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 faba 	bl	8002ac8 <SPI_EndRxTxTransaction>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d006      	beq.n	8002566 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002558:	2323      	movs	r3, #35	@ 0x23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800256e:	2323      	movs	r3, #35	@ 0x23
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e003      	b.n	8002580 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	225d      	movs	r2, #93	@ 0x5d
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	225c      	movs	r2, #92	@ 0x5c
 8002584:	2100      	movs	r1, #0
 8002586:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002588:	2323      	movs	r3, #35	@ 0x23
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b00a      	add	sp, #40	@ 0x28
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	ffffefff 	.word	0xffffefff

0800259c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	4013      	ands	r3, r2
 80025ba:	d10d      	bne.n	80025d8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025c2:	d009      	beq.n	80025d8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	4013      	ands	r3, r2
 80025ca:	d005      	beq.n	80025d8 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	0010      	movs	r0, r2
 80025d4:	4798      	blx	r3
    return;
 80025d6:	e0c5      	b.n	8002764 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_SPI_IRQHandler+0x58>
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	4013      	ands	r3, r2
 80025e6:	d005      	beq.n	80025f4 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	0010      	movs	r0, r2
 80025f0:	4798      	blx	r3
    return;
 80025f2:	e0b7      	b.n	8002764 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2220      	movs	r2, #32
 80025f8:	4013      	ands	r3, r2
 80025fa:	d109      	bne.n	8002610 <HAL_SPI_IRQHandler+0x74>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2240      	movs	r2, #64	@ 0x40
 8002600:	4013      	ands	r3, r2
 8002602:	d105      	bne.n	8002610 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4013      	ands	r3, r2
 800260c:	d100      	bne.n	8002610 <HAL_SPI_IRQHandler+0x74>
 800260e:	e0a9      	b.n	8002764 <HAL_SPI_IRQHandler+0x1c8>
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2220      	movs	r2, #32
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_SPI_IRQHandler+0x7e>
 8002618:	e0a4      	b.n	8002764 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2240      	movs	r2, #64	@ 0x40
 800261e:	4013      	ands	r3, r2
 8002620:	d023      	beq.n	800266a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	225d      	movs	r2, #93	@ 0x5d
 8002626:	5c9b      	ldrb	r3, [r3, r2]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b03      	cmp	r3, #3
 800262c:	d011      	beq.n	8002652 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	2204      	movs	r2, #4
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	e00b      	b.n	800266a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
        return;
 8002668:	e07c      	b.n	8002764 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2220      	movs	r2, #32
 800266e:	4013      	ands	r3, r2
 8002670:	d014      	beq.n	800269c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	2201      	movs	r2, #1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2140      	movs	r1, #64	@ 0x40
 8002696:	438a      	bics	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	d00c      	beq.n	80026c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026aa:	2208      	movs	r2, #8
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d04c      	beq.n	8002762 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	21e0      	movs	r1, #224	@ 0xe0
 80026d4:	438a      	bics	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	225d      	movs	r2, #93	@ 0x5d
 80026dc:	2101      	movs	r1, #1
 80026de:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d103      	bne.n	80026f0 <HAL_SPI_IRQHandler+0x154>
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d032      	beq.n	8002756 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2103      	movs	r1, #3
 80026fc:	438a      	bics	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_SPI_IRQHandler+0x1d0>)
 800270e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	0018      	movs	r0, r3
 8002716:	f7fe fbe3 	bl	8000ee0 <HAL_DMA_Abort_IT>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d005      	beq.n	800272a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	2240      	movs	r2, #64	@ 0x40
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <HAL_SPI_IRQHandler+0x1d0>)
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	0018      	movs	r0, r3
 8002740:	f7fe fbce 	bl	8000ee0 <HAL_DMA_Abort_IT>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d00b      	beq.n	8002760 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274c:	2240      	movs	r2, #64	@ 0x40
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002754:	e004      	b.n	8002760 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f809 	bl	8002770 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800275e:	e000      	b.n	8002762 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002760:	46c0      	nop			@ (mov r8, r8)
    return;
 8002762:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002764:	46bd      	mov	sp, r7
 8002766:	b008      	add	sp, #32
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	08002781 	.word	0x08002781

08002770 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2246      	movs	r2, #70	@ 0x46
 8002792:	2100      	movs	r1, #0
 8002794:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff ffe6 	bl	8002770 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}

080027ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027bc:	f7fe faa8 	bl	8000d10 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	18d3      	adds	r3, r2, r3
 80027ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027cc:	f7fe faa0 	bl	8000d10 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027d4:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	015b      	lsls	r3, r3, #5
 80027da:	0d1b      	lsrs	r3, r3, #20
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	4353      	muls	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e2:	e058      	b.n	8002896 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	d055      	beq.n	8002896 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027ea:	f7fe fa91 	bl	8000d10 <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d902      	bls.n	8002800 <SPI_WaitFlagStateUntilTimeout+0x54>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d142      	bne.n	8002886 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	21e0      	movs	r1, #224	@ 0xe0
 800280c:	438a      	bics	r2, r1
 800280e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	2382      	movs	r3, #130	@ 0x82
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	429a      	cmp	r2, r3
 800281a:	d113      	bne.n	8002844 <SPI_WaitFlagStateUntilTimeout+0x98>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	429a      	cmp	r2, r3
 8002826:	d005      	beq.n	8002834 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2140      	movs	r1, #64	@ 0x40
 8002840:	438a      	bics	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	019b      	lsls	r3, r3, #6
 800284c:	429a      	cmp	r2, r3
 800284e:	d110      	bne.n	8002872 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	491a      	ldr	r1, [pc, #104]	@ (80028c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	0189      	lsls	r1, r1, #6
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	225d      	movs	r2, #93	@ 0x5d
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	225c      	movs	r2, #92	@ 0x5c
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e017      	b.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3b01      	subs	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	425a      	negs	r2, r3
 80028a6:	4153      	adcs	r3, r2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	001a      	movs	r2, r3
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d197      	bne.n	80027e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b008      	add	sp, #32
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	20000000 	.word	0x20000000
 80028c4:	ffffdfff 	.word	0xffffdfff

080028c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028d6:	2317      	movs	r3, #23
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028de:	f7fe fa17 	bl	8000d10 <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	18d3      	adds	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028ee:	f7fe fa0f 	bl	8000d10 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	0013      	movs	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	189b      	adds	r3, r3, r2
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	0d1b      	lsrs	r3, r3, #20
 800290e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002910:	4353      	muls	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002914:	e068      	b.n	80029e8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	23c0      	movs	r3, #192	@ 0xc0
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	429a      	cmp	r2, r3
 800291e:	d10a      	bne.n	8002936 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	2117      	movs	r1, #23
 800292e:	187b      	adds	r3, r7, r1
 8002930:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002932:	187b      	adds	r3, r7, r1
 8002934:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	d055      	beq.n	80029e8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800293c:	f7fe f9e8 	bl	8000d10 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	429a      	cmp	r2, r3
 800294a:	d902      	bls.n	8002952 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d142      	bne.n	80029d8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	21e0      	movs	r1, #224	@ 0xe0
 800295e:	438a      	bics	r2, r1
 8002960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	2382      	movs	r3, #130	@ 0x82
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	429a      	cmp	r2, r3
 800296c:	d113      	bne.n	8002996 <SPI_WaitFifoStateUntilTimeout+0xce>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	429a      	cmp	r2, r3
 8002978:	d005      	beq.n	8002986 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	429a      	cmp	r2, r3
 8002984:	d107      	bne.n	8002996 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2140      	movs	r1, #64	@ 0x40
 8002992:	438a      	bics	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	429a      	cmp	r2, r3
 80029a0:	d110      	bne.n	80029c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4916      	ldr	r1, [pc, #88]	@ (8002a08 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0189      	lsls	r1, r1, #6
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	225d      	movs	r2, #93	@ 0x5d
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	225c      	movs	r2, #92	@ 0x5c
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e010      	b.n	80029fa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d18e      	bne.n	8002916 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b00a      	add	sp, #40	@ 0x28
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	20000000 	.word	0x20000000
 8002a08:	ffffdfff 	.word	0xffffdfff

08002a0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	2382      	movs	r3, #130	@ 0x82
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d113      	bne.n	8002a4c <SPI_EndRxTransaction+0x40>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d005      	beq.n	8002a3c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	438a      	bics	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2180      	movs	r1, #128	@ 0x80
 8002a5a:	f7ff fea7 	bl	80027ac <SPI_WaitFlagStateUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d007      	beq.n	8002a72 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	2220      	movs	r2, #32
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e026      	b.n	8002ac0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	2382      	movs	r3, #130	@ 0x82
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11f      	bne.n	8002abe <SPI_EndRxTransaction+0xb2>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d005      	beq.n	8002a96 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d113      	bne.n	8002abe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	23c0      	movs	r3, #192	@ 0xc0
 8002a9a:	00d9      	lsls	r1, r3, #3
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f7ff ff0f 	bl	80028c8 <SPI_WaitFifoStateUntilTimeout>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d007      	beq.n	8002abe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e000      	b.n	8002ac0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	23c0      	movs	r3, #192	@ 0xc0
 8002ad8:	0159      	lsls	r1, r3, #5
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f7ff fef0 	bl	80028c8 <SPI_WaitFifoStateUntilTimeout>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d007      	beq.n	8002afc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af0:	2220      	movs	r2, #32
 8002af2:	431a      	orrs	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e027      	b.n	8002b4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	0013      	movs	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	f7ff fe4f 	bl	80027ac <SPI_WaitFlagStateUntilTimeout>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d007      	beq.n	8002b22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b16:	2220      	movs	r2, #32
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e014      	b.n	8002b4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	23c0      	movs	r3, #192	@ 0xc0
 8002b26:	00d9      	lsls	r1, r3, #3
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	0013      	movs	r3, r2
 8002b30:	2200      	movs	r2, #0
 8002b32:	f7ff fec9 	bl	80028c8 <SPI_WaitFifoStateUntilTimeout>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d007      	beq.n	8002b4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3e:	2220      	movs	r2, #32
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e000      	b.n	8002b4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e042      	b.n	8002bec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223d      	movs	r2, #61	@ 0x3d
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	223c      	movs	r2, #60	@ 0x3c
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fd ffc3 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	223d      	movs	r2, #61	@ 0x3d
 8002b86:	2102      	movs	r1, #2
 8002b88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	0019      	movs	r1, r3
 8002b94:	0010      	movs	r0, r2
 8002b96:	f000 f94d 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2246      	movs	r2, #70	@ 0x46
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	223e      	movs	r2, #62	@ 0x3e
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223f      	movs	r2, #63	@ 0x3f
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2240      	movs	r2, #64	@ 0x40
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2241      	movs	r2, #65	@ 0x41
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2242      	movs	r2, #66	@ 0x42
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2243      	movs	r2, #67	@ 0x43
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2244      	movs	r2, #68	@ 0x44
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2245      	movs	r2, #69	@ 0x45
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223d      	movs	r2, #61	@ 0x3d
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	223d      	movs	r2, #61	@ 0x3d
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e035      	b.n	8002c78 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	223d      	movs	r2, #61	@ 0x3d
 8002c10:	2102      	movs	r1, #2
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <HAL_TIM_Base_Start_IT+0x8c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x4e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <HAL_TIM_Base_Start_IT+0x90>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x4e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <HAL_TIM_Base_Start_IT+0x94>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d111      	bne.n	8002c66 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2207      	movs	r2, #7
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d010      	beq.n	8002c76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c64:	e007      	b.n	8002c76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40014000 	.word	0x40014000

08002c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	230f      	movs	r3, #15
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223c      	movs	r2, #60	@ 0x3c
 8002ca2:	5c9b      	ldrb	r3, [r3, r2]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_TIM_ConfigClockSource+0x20>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0bc      	b.n	8002e26 <HAL_TIM_ConfigClockSource+0x19a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	223c      	movs	r2, #60	@ 0x3c
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	223d      	movs	r2, #61	@ 0x3d
 8002cb8:	2102      	movs	r1, #2
 8002cba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2277      	movs	r2, #119	@ 0x77
 8002cc8:	4393      	bics	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	0192      	lsls	r2, r2, #6
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d040      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xde>
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	0192      	lsls	r2, r2, #6
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d900      	bls.n	8002cf2 <HAL_TIM_ConfigClockSource+0x66>
 8002cf0:	e088      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002cf2:	2280      	movs	r2, #128	@ 0x80
 8002cf4:	0152      	lsls	r2, r2, #5
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d100      	bne.n	8002cfc <HAL_TIM_ConfigClockSource+0x70>
 8002cfa:	e088      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x182>
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	0152      	lsls	r2, r2, #5
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d900      	bls.n	8002d06 <HAL_TIM_ConfigClockSource+0x7a>
 8002d04:	e07e      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d06:	2b70      	cmp	r3, #112	@ 0x70
 8002d08:	d018      	beq.n	8002d3c <HAL_TIM_ConfigClockSource+0xb0>
 8002d0a:	d900      	bls.n	8002d0e <HAL_TIM_ConfigClockSource+0x82>
 8002d0c:	e07a      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d0e:	2b60      	cmp	r3, #96	@ 0x60
 8002d10:	d04f      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x126>
 8002d12:	d900      	bls.n	8002d16 <HAL_TIM_ConfigClockSource+0x8a>
 8002d14:	e076      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d16:	2b50      	cmp	r3, #80	@ 0x50
 8002d18:	d03b      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x106>
 8002d1a:	d900      	bls.n	8002d1e <HAL_TIM_ConfigClockSource+0x92>
 8002d1c:	e072      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d1e:	2b40      	cmp	r3, #64	@ 0x40
 8002d20:	d057      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x146>
 8002d22:	d900      	bls.n	8002d26 <HAL_TIM_ConfigClockSource+0x9a>
 8002d24:	e06e      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d26:	2b30      	cmp	r3, #48	@ 0x30
 8002d28:	d063      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x166>
 8002d2a:	d86b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d060      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x166>
 8002d30:	d868      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d05d      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x166>
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d05b      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x166>
 8002d3a:	e063      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	f000 f970 	bl	8003030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2277      	movs	r2, #119	@ 0x77
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e052      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	f000 f959 	bl	8003030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	01c9      	lsls	r1, r1, #7
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
      break;
 8002d90:	e03e      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	001a      	movs	r2, r3
 8002da0:	f000 f8cc 	bl	8002f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2150      	movs	r1, #80	@ 0x50
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f926 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002db0:	e02e      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	f000 f8ea 	bl	8002f98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2160      	movs	r1, #96	@ 0x60
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 f916 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e01e      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	001a      	movs	r2, r3
 8002de0:	f000 f8ac 	bl	8002f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2140      	movs	r1, #64	@ 0x40
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f906 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002df0:	e00e      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f000 f8fd 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002e02:	e005      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002e04:	230f      	movs	r3, #15
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
      break;
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002e0e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	223d      	movs	r2, #61	@ 0x3d
 8002e14:	2101      	movs	r1, #1
 8002e16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	223c      	movs	r2, #60	@ 0x3c
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]

  return status;
 8002e20:	230f      	movs	r3, #15
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	ffff00ff 	.word	0xffff00ff

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a36      	ldr	r2, [pc, #216]	@ (8002f20 <TIM_Base_SetConfig+0xec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0x20>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a35      	ldr	r2, [pc, #212]	@ (8002f24 <TIM_Base_SetConfig+0xf0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2270      	movs	r2, #112	@ 0x70
 8002e58:	4393      	bics	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2d      	ldr	r2, [pc, #180]	@ (8002f20 <TIM_Base_SetConfig+0xec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2c      	ldr	r2, [pc, #176]	@ (8002f24 <TIM_Base_SetConfig+0xf0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00f      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <TIM_Base_SetConfig+0xf4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	@ (8002f2c <TIM_Base_SetConfig+0xf8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a29      	ldr	r2, [pc, #164]	@ (8002f30 <TIM_Base_SetConfig+0xfc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a28      	ldr	r2, [pc, #160]	@ (8002f34 <TIM_Base_SetConfig+0x100>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <TIM_Base_SetConfig+0x104>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2280      	movs	r2, #128	@ 0x80
 8002eac:	4393      	bics	r3, r2
 8002eae:	001a      	movs	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <TIM_Base_SetConfig+0xec>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <TIM_Base_SetConfig+0xba>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <TIM_Base_SetConfig+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0xba>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	@ (8002f30 <TIM_Base_SetConfig+0xfc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0xba>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a12      	ldr	r2, [pc, #72]	@ (8002f34 <TIM_Base_SetConfig+0x100>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d103      	bne.n	8002ef6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4393      	bics	r3, r2
 8002f10:	001a      	movs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]
  }
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40002000 	.word	0x40002000
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40014800 	.word	0x40014800
 8002f38:	fffffcff 	.word	0xfffffcff

08002f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4393      	bics	r3, r2
 8002f56:	001a      	movs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	22f0      	movs	r2, #240	@ 0xf0
 8002f66:	4393      	bics	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	220a      	movs	r2, #10
 8002f78:	4393      	bics	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b006      	add	sp, #24
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2210      	movs	r2, #16
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff8 <TIM_TI2_ConfigInputStage+0x60>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	031b      	lsls	r3, r3, #12
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	22a0      	movs	r2, #160	@ 0xa0
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	ffff0fff 	.word	0xffff0fff

08002ffc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2270      	movs	r2, #112	@ 0x70
 8003010:	4393      	bics	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	2207      	movs	r2, #7
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b004      	add	sp, #16
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <TIM_ETR_SetConfig+0x3c>)
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	431a      	orrs	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}
 800306c:	ffff00ff 	.word	0xffff00ff

08003070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	223c      	movs	r2, #60	@ 0x3c
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003084:	2302      	movs	r3, #2
 8003086:	e041      	b.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	223c      	movs	r2, #60	@ 0x3c
 800308c:	2101      	movs	r1, #1
 800308e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	223d      	movs	r2, #61	@ 0x3d
 8003094:	2102      	movs	r1, #2
 8003096:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2270      	movs	r2, #112	@ 0x70
 80030ac:	4393      	bics	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a13      	ldr	r2, [pc, #76]	@ (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a11      	ldr	r2, [pc, #68]	@ (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a10      	ldr	r2, [pc, #64]	@ (800311c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10c      	bne.n	80030fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	4393      	bics	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	223d      	movs	r2, #61	@ 0x3d
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	223c      	movs	r2, #60	@ 0x3c
 8003106:	2100      	movs	r1, #0
 8003108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40000400 	.word	0x40000400
 800311c:	40014000 	.word	0x40014000

08003120 <siprintf>:
 8003120:	b40e      	push	{r1, r2, r3}
 8003122:	b500      	push	{lr}
 8003124:	490b      	ldr	r1, [pc, #44]	@ (8003154 <siprintf+0x34>)
 8003126:	b09c      	sub	sp, #112	@ 0x70
 8003128:	ab1d      	add	r3, sp, #116	@ 0x74
 800312a:	9002      	str	r0, [sp, #8]
 800312c:	9006      	str	r0, [sp, #24]
 800312e:	9107      	str	r1, [sp, #28]
 8003130:	9104      	str	r1, [sp, #16]
 8003132:	4809      	ldr	r0, [pc, #36]	@ (8003158 <siprintf+0x38>)
 8003134:	4909      	ldr	r1, [pc, #36]	@ (800315c <siprintf+0x3c>)
 8003136:	cb04      	ldmia	r3!, {r2}
 8003138:	9105      	str	r1, [sp, #20]
 800313a:	6800      	ldr	r0, [r0, #0]
 800313c:	a902      	add	r1, sp, #8
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	f000 f9bc 	bl	80034bc <_svfiprintf_r>
 8003144:	2200      	movs	r2, #0
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	b01c      	add	sp, #112	@ 0x70
 800314c:	bc08      	pop	{r3}
 800314e:	b003      	add	sp, #12
 8003150:	4718      	bx	r3
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	7fffffff 	.word	0x7fffffff
 8003158:	2000000c 	.word	0x2000000c
 800315c:	ffff0208 	.word	0xffff0208

08003160 <memset>:
 8003160:	0003      	movs	r3, r0
 8003162:	1882      	adds	r2, r0, r2
 8003164:	4293      	cmp	r3, r2
 8003166:	d100      	bne.n	800316a <memset+0xa>
 8003168:	4770      	bx	lr
 800316a:	7019      	strb	r1, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	e7f9      	b.n	8003164 <memset+0x4>

08003170 <strncpy>:
 8003170:	0003      	movs	r3, r0
 8003172:	b530      	push	{r4, r5, lr}
 8003174:	001d      	movs	r5, r3
 8003176:	2a00      	cmp	r2, #0
 8003178:	d006      	beq.n	8003188 <strncpy+0x18>
 800317a:	780c      	ldrb	r4, [r1, #0]
 800317c:	3a01      	subs	r2, #1
 800317e:	3301      	adds	r3, #1
 8003180:	702c      	strb	r4, [r5, #0]
 8003182:	3101      	adds	r1, #1
 8003184:	2c00      	cmp	r4, #0
 8003186:	d1f5      	bne.n	8003174 <strncpy+0x4>
 8003188:	2100      	movs	r1, #0
 800318a:	189a      	adds	r2, r3, r2
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <strncpy+0x22>
 8003190:	bd30      	pop	{r4, r5, pc}
 8003192:	7019      	strb	r1, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	e7f9      	b.n	800318c <strncpy+0x1c>

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	@ (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2600      	movs	r6, #0
 80031a8:	4c0c      	ldr	r4, [pc, #48]	@ (80031dc <__libc_init_array+0x38>)
 80031aa:	4d0d      	ldr	r5, [pc, #52]	@ (80031e0 <__libc_init_array+0x3c>)
 80031ac:	1b64      	subs	r4, r4, r5
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	2600      	movs	r6, #0
 80031b6:	f000 fc65 	bl	8003a84 <_init>
 80031ba:	4c0a      	ldr	r4, [pc, #40]	@ (80031e4 <__libc_init_array+0x40>)
 80031bc:	4d0a      	ldr	r5, [pc, #40]	@ (80031e8 <__libc_init_array+0x44>)
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	42a6      	cmp	r6, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	00b3      	lsls	r3, r6, #2
 80031ca:	58eb      	ldr	r3, [r5, r3]
 80031cc:	4798      	blx	r3
 80031ce:	3601      	adds	r6, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	00b3      	lsls	r3, r6, #2
 80031d4:	58eb      	ldr	r3, [r5, r3]
 80031d6:	4798      	blx	r3
 80031d8:	3601      	adds	r6, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003b24 	.word	0x08003b24
 80031e0:	08003b24 	.word	0x08003b24
 80031e4:	08003b28 	.word	0x08003b28
 80031e8:	08003b24 	.word	0x08003b24

080031ec <__retarget_lock_acquire_recursive>:
 80031ec:	4770      	bx	lr

080031ee <__retarget_lock_release_recursive>:
 80031ee:	4770      	bx	lr

080031f0 <memcpy>:
 80031f0:	2300      	movs	r3, #0
 80031f2:	b510      	push	{r4, lr}
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d100      	bne.n	80031fa <memcpy+0xa>
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	5ccc      	ldrb	r4, [r1, r3]
 80031fc:	54c4      	strb	r4, [r0, r3]
 80031fe:	3301      	adds	r3, #1
 8003200:	e7f8      	b.n	80031f4 <memcpy+0x4>
	...

08003204 <_free_r>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	0005      	movs	r5, r0
 8003208:	1e0c      	subs	r4, r1, #0
 800320a:	d010      	beq.n	800322e <_free_r+0x2a>
 800320c:	3c04      	subs	r4, #4
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da00      	bge.n	8003216 <_free_r+0x12>
 8003214:	18e4      	adds	r4, r4, r3
 8003216:	0028      	movs	r0, r5
 8003218:	f000 f8e0 	bl	80033dc <__malloc_lock>
 800321c:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <_free_r+0x90>)
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <_free_r+0x2c>
 8003224:	6063      	str	r3, [r4, #4]
 8003226:	6014      	str	r4, [r2, #0]
 8003228:	0028      	movs	r0, r5
 800322a:	f000 f8df 	bl	80033ec <__malloc_unlock>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	42a3      	cmp	r3, r4
 8003232:	d908      	bls.n	8003246 <_free_r+0x42>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	1821      	adds	r1, r4, r0
 8003238:	428b      	cmp	r3, r1
 800323a:	d1f3      	bne.n	8003224 <_free_r+0x20>
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	1809      	adds	r1, r1, r0
 8003242:	6021      	str	r1, [r4, #0]
 8003244:	e7ee      	b.n	8003224 <_free_r+0x20>
 8003246:	001a      	movs	r2, r3
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <_free_r+0x4e>
 800324e:	42a3      	cmp	r3, r4
 8003250:	d9f9      	bls.n	8003246 <_free_r+0x42>
 8003252:	6811      	ldr	r1, [r2, #0]
 8003254:	1850      	adds	r0, r2, r1
 8003256:	42a0      	cmp	r0, r4
 8003258:	d10b      	bne.n	8003272 <_free_r+0x6e>
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	1809      	adds	r1, r1, r0
 800325e:	1850      	adds	r0, r2, r1
 8003260:	6011      	str	r1, [r2, #0]
 8003262:	4283      	cmp	r3, r0
 8003264:	d1e0      	bne.n	8003228 <_free_r+0x24>
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	1841      	adds	r1, r0, r1
 800326c:	6011      	str	r1, [r2, #0]
 800326e:	6053      	str	r3, [r2, #4]
 8003270:	e7da      	b.n	8003228 <_free_r+0x24>
 8003272:	42a0      	cmp	r0, r4
 8003274:	d902      	bls.n	800327c <_free_r+0x78>
 8003276:	230c      	movs	r3, #12
 8003278:	602b      	str	r3, [r5, #0]
 800327a:	e7d5      	b.n	8003228 <_free_r+0x24>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	1821      	adds	r1, r4, r0
 8003280:	428b      	cmp	r3, r1
 8003282:	d103      	bne.n	800328c <_free_r+0x88>
 8003284:	6819      	ldr	r1, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	1809      	adds	r1, r1, r0
 800328a:	6021      	str	r1, [r4, #0]
 800328c:	6063      	str	r3, [r4, #4]
 800328e:	6054      	str	r4, [r2, #4]
 8003290:	e7ca      	b.n	8003228 <_free_r+0x24>
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	200004c0 	.word	0x200004c0

08003298 <sbrk_aligned>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	4e0f      	ldr	r6, [pc, #60]	@ (80032d8 <sbrk_aligned+0x40>)
 800329c:	000d      	movs	r5, r1
 800329e:	6831      	ldr	r1, [r6, #0]
 80032a0:	0004      	movs	r4, r0
 80032a2:	2900      	cmp	r1, #0
 80032a4:	d102      	bne.n	80032ac <sbrk_aligned+0x14>
 80032a6:	f000 fb99 	bl	80039dc <_sbrk_r>
 80032aa:	6030      	str	r0, [r6, #0]
 80032ac:	0029      	movs	r1, r5
 80032ae:	0020      	movs	r0, r4
 80032b0:	f000 fb94 	bl	80039dc <_sbrk_r>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d103      	bne.n	80032c0 <sbrk_aligned+0x28>
 80032b8:	2501      	movs	r5, #1
 80032ba:	426d      	negs	r5, r5
 80032bc:	0028      	movs	r0, r5
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	2303      	movs	r3, #3
 80032c2:	1cc5      	adds	r5, r0, #3
 80032c4:	439d      	bics	r5, r3
 80032c6:	42a8      	cmp	r0, r5
 80032c8:	d0f8      	beq.n	80032bc <sbrk_aligned+0x24>
 80032ca:	1a29      	subs	r1, r5, r0
 80032cc:	0020      	movs	r0, r4
 80032ce:	f000 fb85 	bl	80039dc <_sbrk_r>
 80032d2:	3001      	adds	r0, #1
 80032d4:	d1f2      	bne.n	80032bc <sbrk_aligned+0x24>
 80032d6:	e7ef      	b.n	80032b8 <sbrk_aligned+0x20>
 80032d8:	200004bc 	.word	0x200004bc

080032dc <_malloc_r>:
 80032dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032de:	2203      	movs	r2, #3
 80032e0:	1ccb      	adds	r3, r1, #3
 80032e2:	4393      	bics	r3, r2
 80032e4:	3308      	adds	r3, #8
 80032e6:	0005      	movs	r5, r0
 80032e8:	001f      	movs	r7, r3
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d234      	bcs.n	8003358 <_malloc_r+0x7c>
 80032ee:	270c      	movs	r7, #12
 80032f0:	42b9      	cmp	r1, r7
 80032f2:	d833      	bhi.n	800335c <_malloc_r+0x80>
 80032f4:	0028      	movs	r0, r5
 80032f6:	f000 f871 	bl	80033dc <__malloc_lock>
 80032fa:	4e37      	ldr	r6, [pc, #220]	@ (80033d8 <_malloc_r+0xfc>)
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	001c      	movs	r4, r3
 8003300:	2c00      	cmp	r4, #0
 8003302:	d12f      	bne.n	8003364 <_malloc_r+0x88>
 8003304:	0039      	movs	r1, r7
 8003306:	0028      	movs	r0, r5
 8003308:	f7ff ffc6 	bl	8003298 <sbrk_aligned>
 800330c:	0004      	movs	r4, r0
 800330e:	1c43      	adds	r3, r0, #1
 8003310:	d15f      	bne.n	80033d2 <_malloc_r+0xf6>
 8003312:	6834      	ldr	r4, [r6, #0]
 8003314:	9400      	str	r4, [sp, #0]
 8003316:	9b00      	ldr	r3, [sp, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d14a      	bne.n	80033b2 <_malloc_r+0xd6>
 800331c:	2c00      	cmp	r4, #0
 800331e:	d052      	beq.n	80033c6 <_malloc_r+0xea>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	0028      	movs	r0, r5
 8003324:	18e3      	adds	r3, r4, r3
 8003326:	9900      	ldr	r1, [sp, #0]
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	f000 fb57 	bl	80039dc <_sbrk_r>
 800332e:	9b01      	ldr	r3, [sp, #4]
 8003330:	4283      	cmp	r3, r0
 8003332:	d148      	bne.n	80033c6 <_malloc_r+0xea>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	0028      	movs	r0, r5
 8003338:	1aff      	subs	r7, r7, r3
 800333a:	0039      	movs	r1, r7
 800333c:	f7ff ffac 	bl	8003298 <sbrk_aligned>
 8003340:	3001      	adds	r0, #1
 8003342:	d040      	beq.n	80033c6 <_malloc_r+0xea>
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	19db      	adds	r3, r3, r7
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	6833      	ldr	r3, [r6, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	2a00      	cmp	r2, #0
 8003350:	d133      	bne.n	80033ba <_malloc_r+0xde>
 8003352:	9b00      	ldr	r3, [sp, #0]
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	e019      	b.n	800338c <_malloc_r+0xb0>
 8003358:	2b00      	cmp	r3, #0
 800335a:	dac9      	bge.n	80032f0 <_malloc_r+0x14>
 800335c:	230c      	movs	r3, #12
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	2000      	movs	r0, #0
 8003362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003364:	6821      	ldr	r1, [r4, #0]
 8003366:	1bc9      	subs	r1, r1, r7
 8003368:	d420      	bmi.n	80033ac <_malloc_r+0xd0>
 800336a:	290b      	cmp	r1, #11
 800336c:	d90a      	bls.n	8003384 <_malloc_r+0xa8>
 800336e:	19e2      	adds	r2, r4, r7
 8003370:	6027      	str	r7, [r4, #0]
 8003372:	42a3      	cmp	r3, r4
 8003374:	d104      	bne.n	8003380 <_malloc_r+0xa4>
 8003376:	6032      	str	r2, [r6, #0]
 8003378:	6863      	ldr	r3, [r4, #4]
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	6053      	str	r3, [r2, #4]
 800337e:	e005      	b.n	800338c <_malloc_r+0xb0>
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e7f9      	b.n	8003378 <_malloc_r+0x9c>
 8003384:	6862      	ldr	r2, [r4, #4]
 8003386:	42a3      	cmp	r3, r4
 8003388:	d10e      	bne.n	80033a8 <_malloc_r+0xcc>
 800338a:	6032      	str	r2, [r6, #0]
 800338c:	0028      	movs	r0, r5
 800338e:	f000 f82d 	bl	80033ec <__malloc_unlock>
 8003392:	0020      	movs	r0, r4
 8003394:	2207      	movs	r2, #7
 8003396:	300b      	adds	r0, #11
 8003398:	1d23      	adds	r3, r4, #4
 800339a:	4390      	bics	r0, r2
 800339c:	1ac2      	subs	r2, r0, r3
 800339e:	4298      	cmp	r0, r3
 80033a0:	d0df      	beq.n	8003362 <_malloc_r+0x86>
 80033a2:	1a1b      	subs	r3, r3, r0
 80033a4:	50a3      	str	r3, [r4, r2]
 80033a6:	e7dc      	b.n	8003362 <_malloc_r+0x86>
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	e7ef      	b.n	800338c <_malloc_r+0xb0>
 80033ac:	0023      	movs	r3, r4
 80033ae:	6864      	ldr	r4, [r4, #4]
 80033b0:	e7a6      	b.n	8003300 <_malloc_r+0x24>
 80033b2:	9c00      	ldr	r4, [sp, #0]
 80033b4:	6863      	ldr	r3, [r4, #4]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	e7ad      	b.n	8003316 <_malloc_r+0x3a>
 80033ba:	001a      	movs	r2, r3
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	42a3      	cmp	r3, r4
 80033c0:	d1fb      	bne.n	80033ba <_malloc_r+0xde>
 80033c2:	2300      	movs	r3, #0
 80033c4:	e7da      	b.n	800337c <_malloc_r+0xa0>
 80033c6:	230c      	movs	r3, #12
 80033c8:	0028      	movs	r0, r5
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	f000 f80e 	bl	80033ec <__malloc_unlock>
 80033d0:	e7c6      	b.n	8003360 <_malloc_r+0x84>
 80033d2:	6007      	str	r7, [r0, #0]
 80033d4:	e7da      	b.n	800338c <_malloc_r+0xb0>
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	200004c0 	.word	0x200004c0

080033dc <__malloc_lock>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	4802      	ldr	r0, [pc, #8]	@ (80033e8 <__malloc_lock+0xc>)
 80033e0:	f7ff ff04 	bl	80031ec <__retarget_lock_acquire_recursive>
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	200004b8 	.word	0x200004b8

080033ec <__malloc_unlock>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <__malloc_unlock+0xc>)
 80033f0:	f7ff fefd 	bl	80031ee <__retarget_lock_release_recursive>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	200004b8 	.word	0x200004b8

080033fc <__ssputs_r>:
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	688e      	ldr	r6, [r1, #8]
 8003400:	b085      	sub	sp, #20
 8003402:	001f      	movs	r7, r3
 8003404:	000c      	movs	r4, r1
 8003406:	680b      	ldr	r3, [r1, #0]
 8003408:	9002      	str	r0, [sp, #8]
 800340a:	9203      	str	r2, [sp, #12]
 800340c:	42be      	cmp	r6, r7
 800340e:	d830      	bhi.n	8003472 <__ssputs_r+0x76>
 8003410:	210c      	movs	r1, #12
 8003412:	5e62      	ldrsh	r2, [r4, r1]
 8003414:	2190      	movs	r1, #144	@ 0x90
 8003416:	00c9      	lsls	r1, r1, #3
 8003418:	420a      	tst	r2, r1
 800341a:	d028      	beq.n	800346e <__ssputs_r+0x72>
 800341c:	2003      	movs	r0, #3
 800341e:	6921      	ldr	r1, [r4, #16]
 8003420:	1a5b      	subs	r3, r3, r1
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	6963      	ldr	r3, [r4, #20]
 8003426:	4343      	muls	r3, r0
 8003428:	9801      	ldr	r0, [sp, #4]
 800342a:	0fdd      	lsrs	r5, r3, #31
 800342c:	18ed      	adds	r5, r5, r3
 800342e:	1c7b      	adds	r3, r7, #1
 8003430:	181b      	adds	r3, r3, r0
 8003432:	106d      	asrs	r5, r5, #1
 8003434:	42ab      	cmp	r3, r5
 8003436:	d900      	bls.n	800343a <__ssputs_r+0x3e>
 8003438:	001d      	movs	r5, r3
 800343a:	0552      	lsls	r2, r2, #21
 800343c:	d528      	bpl.n	8003490 <__ssputs_r+0x94>
 800343e:	0029      	movs	r1, r5
 8003440:	9802      	ldr	r0, [sp, #8]
 8003442:	f7ff ff4b 	bl	80032dc <_malloc_r>
 8003446:	1e06      	subs	r6, r0, #0
 8003448:	d02c      	beq.n	80034a4 <__ssputs_r+0xa8>
 800344a:	9a01      	ldr	r2, [sp, #4]
 800344c:	6921      	ldr	r1, [r4, #16]
 800344e:	f7ff fecf 	bl	80031f0 <memcpy>
 8003452:	89a2      	ldrh	r2, [r4, #12]
 8003454:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <__ssputs_r+0xbc>)
 8003456:	401a      	ands	r2, r3
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	4313      	orrs	r3, r2
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	6126      	str	r6, [r4, #16]
 8003462:	18f6      	adds	r6, r6, r3
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	003e      	movs	r6, r7
 8003468:	6165      	str	r5, [r4, #20]
 800346a:	1aed      	subs	r5, r5, r3
 800346c:	60a5      	str	r5, [r4, #8]
 800346e:	42be      	cmp	r6, r7
 8003470:	d900      	bls.n	8003474 <__ssputs_r+0x78>
 8003472:	003e      	movs	r6, r7
 8003474:	0032      	movs	r2, r6
 8003476:	9903      	ldr	r1, [sp, #12]
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	f000 fa9b 	bl	80039b4 <memmove>
 800347e:	2000      	movs	r0, #0
 8003480:	68a3      	ldr	r3, [r4, #8]
 8003482:	1b9b      	subs	r3, r3, r6
 8003484:	60a3      	str	r3, [r4, #8]
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	199b      	adds	r3, r3, r6
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	b005      	add	sp, #20
 800348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003490:	002a      	movs	r2, r5
 8003492:	9802      	ldr	r0, [sp, #8]
 8003494:	f000 fabf 	bl	8003a16 <_realloc_r>
 8003498:	1e06      	subs	r6, r0, #0
 800349a:	d1e0      	bne.n	800345e <__ssputs_r+0x62>
 800349c:	6921      	ldr	r1, [r4, #16]
 800349e:	9802      	ldr	r0, [sp, #8]
 80034a0:	f7ff feb0 	bl	8003204 <_free_r>
 80034a4:	230c      	movs	r3, #12
 80034a6:	2001      	movs	r0, #1
 80034a8:	9a02      	ldr	r2, [sp, #8]
 80034aa:	4240      	negs	r0, r0
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	89a2      	ldrh	r2, [r4, #12]
 80034b0:	3334      	adds	r3, #52	@ 0x34
 80034b2:	4313      	orrs	r3, r2
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	e7e9      	b.n	800348c <__ssputs_r+0x90>
 80034b8:	fffffb7f 	.word	0xfffffb7f

080034bc <_svfiprintf_r>:
 80034bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034be:	b0a1      	sub	sp, #132	@ 0x84
 80034c0:	9003      	str	r0, [sp, #12]
 80034c2:	001d      	movs	r5, r3
 80034c4:	898b      	ldrh	r3, [r1, #12]
 80034c6:	000f      	movs	r7, r1
 80034c8:	0016      	movs	r6, r2
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	d511      	bpl.n	80034f2 <_svfiprintf_r+0x36>
 80034ce:	690b      	ldr	r3, [r1, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <_svfiprintf_r+0x36>
 80034d4:	2140      	movs	r1, #64	@ 0x40
 80034d6:	f7ff ff01 	bl	80032dc <_malloc_r>
 80034da:	6038      	str	r0, [r7, #0]
 80034dc:	6138      	str	r0, [r7, #16]
 80034de:	2800      	cmp	r0, #0
 80034e0:	d105      	bne.n	80034ee <_svfiprintf_r+0x32>
 80034e2:	230c      	movs	r3, #12
 80034e4:	9a03      	ldr	r2, [sp, #12]
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	2001      	movs	r0, #1
 80034ea:	4240      	negs	r0, r0
 80034ec:	e0cf      	b.n	800368e <_svfiprintf_r+0x1d2>
 80034ee:	2340      	movs	r3, #64	@ 0x40
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	2300      	movs	r3, #0
 80034f4:	ac08      	add	r4, sp, #32
 80034f6:	6163      	str	r3, [r4, #20]
 80034f8:	3320      	adds	r3, #32
 80034fa:	7663      	strb	r3, [r4, #25]
 80034fc:	3310      	adds	r3, #16
 80034fe:	76a3      	strb	r3, [r4, #26]
 8003500:	9507      	str	r5, [sp, #28]
 8003502:	0035      	movs	r5, r6
 8003504:	782b      	ldrb	r3, [r5, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <_svfiprintf_r+0x52>
 800350a:	2b25      	cmp	r3, #37	@ 0x25
 800350c:	d148      	bne.n	80035a0 <_svfiprintf_r+0xe4>
 800350e:	1bab      	subs	r3, r5, r6
 8003510:	9305      	str	r3, [sp, #20]
 8003512:	42b5      	cmp	r5, r6
 8003514:	d00b      	beq.n	800352e <_svfiprintf_r+0x72>
 8003516:	0032      	movs	r2, r6
 8003518:	0039      	movs	r1, r7
 800351a:	9803      	ldr	r0, [sp, #12]
 800351c:	f7ff ff6e 	bl	80033fc <__ssputs_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d100      	bne.n	8003526 <_svfiprintf_r+0x6a>
 8003524:	e0ae      	b.n	8003684 <_svfiprintf_r+0x1c8>
 8003526:	6963      	ldr	r3, [r4, #20]
 8003528:	9a05      	ldr	r2, [sp, #20]
 800352a:	189b      	adds	r3, r3, r2
 800352c:	6163      	str	r3, [r4, #20]
 800352e:	782b      	ldrb	r3, [r5, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d100      	bne.n	8003536 <_svfiprintf_r+0x7a>
 8003534:	e0a6      	b.n	8003684 <_svfiprintf_r+0x1c8>
 8003536:	2201      	movs	r2, #1
 8003538:	2300      	movs	r3, #0
 800353a:	4252      	negs	r2, r2
 800353c:	6062      	str	r2, [r4, #4]
 800353e:	a904      	add	r1, sp, #16
 8003540:	3254      	adds	r2, #84	@ 0x54
 8003542:	1852      	adds	r2, r2, r1
 8003544:	1c6e      	adds	r6, r5, #1
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	60e3      	str	r3, [r4, #12]
 800354a:	60a3      	str	r3, [r4, #8]
 800354c:	7013      	strb	r3, [r2, #0]
 800354e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003550:	4b54      	ldr	r3, [pc, #336]	@ (80036a4 <_svfiprintf_r+0x1e8>)
 8003552:	2205      	movs	r2, #5
 8003554:	0018      	movs	r0, r3
 8003556:	7831      	ldrb	r1, [r6, #0]
 8003558:	9305      	str	r3, [sp, #20]
 800355a:	f000 fa51 	bl	8003a00 <memchr>
 800355e:	1c75      	adds	r5, r6, #1
 8003560:	2800      	cmp	r0, #0
 8003562:	d11f      	bne.n	80035a4 <_svfiprintf_r+0xe8>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	06d3      	lsls	r3, r2, #27
 8003568:	d504      	bpl.n	8003574 <_svfiprintf_r+0xb8>
 800356a:	2353      	movs	r3, #83	@ 0x53
 800356c:	a904      	add	r1, sp, #16
 800356e:	185b      	adds	r3, r3, r1
 8003570:	2120      	movs	r1, #32
 8003572:	7019      	strb	r1, [r3, #0]
 8003574:	0713      	lsls	r3, r2, #28
 8003576:	d504      	bpl.n	8003582 <_svfiprintf_r+0xc6>
 8003578:	2353      	movs	r3, #83	@ 0x53
 800357a:	a904      	add	r1, sp, #16
 800357c:	185b      	adds	r3, r3, r1
 800357e:	212b      	movs	r1, #43	@ 0x2b
 8003580:	7019      	strb	r1, [r3, #0]
 8003582:	7833      	ldrb	r3, [r6, #0]
 8003584:	2b2a      	cmp	r3, #42	@ 0x2a
 8003586:	d016      	beq.n	80035b6 <_svfiprintf_r+0xfa>
 8003588:	0035      	movs	r5, r6
 800358a:	2100      	movs	r1, #0
 800358c:	200a      	movs	r0, #10
 800358e:	68e3      	ldr	r3, [r4, #12]
 8003590:	782a      	ldrb	r2, [r5, #0]
 8003592:	1c6e      	adds	r6, r5, #1
 8003594:	3a30      	subs	r2, #48	@ 0x30
 8003596:	2a09      	cmp	r2, #9
 8003598:	d950      	bls.n	800363c <_svfiprintf_r+0x180>
 800359a:	2900      	cmp	r1, #0
 800359c:	d111      	bne.n	80035c2 <_svfiprintf_r+0x106>
 800359e:	e017      	b.n	80035d0 <_svfiprintf_r+0x114>
 80035a0:	3501      	adds	r5, #1
 80035a2:	e7af      	b.n	8003504 <_svfiprintf_r+0x48>
 80035a4:	9b05      	ldr	r3, [sp, #20]
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	1ac0      	subs	r0, r0, r3
 80035aa:	2301      	movs	r3, #1
 80035ac:	4083      	lsls	r3, r0
 80035ae:	4313      	orrs	r3, r2
 80035b0:	002e      	movs	r6, r5
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	e7cc      	b.n	8003550 <_svfiprintf_r+0x94>
 80035b6:	9b07      	ldr	r3, [sp, #28]
 80035b8:	1d19      	adds	r1, r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	9107      	str	r1, [sp, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db01      	blt.n	80035c6 <_svfiprintf_r+0x10a>
 80035c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80035c4:	e004      	b.n	80035d0 <_svfiprintf_r+0x114>
 80035c6:	425b      	negs	r3, r3
 80035c8:	60e3      	str	r3, [r4, #12]
 80035ca:	2302      	movs	r3, #2
 80035cc:	4313      	orrs	r3, r2
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	782b      	ldrb	r3, [r5, #0]
 80035d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80035d4:	d10c      	bne.n	80035f0 <_svfiprintf_r+0x134>
 80035d6:	786b      	ldrb	r3, [r5, #1]
 80035d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80035da:	d134      	bne.n	8003646 <_svfiprintf_r+0x18a>
 80035dc:	9b07      	ldr	r3, [sp, #28]
 80035de:	3502      	adds	r5, #2
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	9207      	str	r2, [sp, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da01      	bge.n	80035ee <_svfiprintf_r+0x132>
 80035ea:	2301      	movs	r3, #1
 80035ec:	425b      	negs	r3, r3
 80035ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80035f0:	4e2d      	ldr	r6, [pc, #180]	@ (80036a8 <_svfiprintf_r+0x1ec>)
 80035f2:	2203      	movs	r2, #3
 80035f4:	0030      	movs	r0, r6
 80035f6:	7829      	ldrb	r1, [r5, #0]
 80035f8:	f000 fa02 	bl	8003a00 <memchr>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d006      	beq.n	800360e <_svfiprintf_r+0x152>
 8003600:	2340      	movs	r3, #64	@ 0x40
 8003602:	1b80      	subs	r0, r0, r6
 8003604:	4083      	lsls	r3, r0
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	3501      	adds	r5, #1
 800360a:	4313      	orrs	r3, r2
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	7829      	ldrb	r1, [r5, #0]
 8003610:	2206      	movs	r2, #6
 8003612:	4826      	ldr	r0, [pc, #152]	@ (80036ac <_svfiprintf_r+0x1f0>)
 8003614:	1c6e      	adds	r6, r5, #1
 8003616:	7621      	strb	r1, [r4, #24]
 8003618:	f000 f9f2 	bl	8003a00 <memchr>
 800361c:	2800      	cmp	r0, #0
 800361e:	d038      	beq.n	8003692 <_svfiprintf_r+0x1d6>
 8003620:	4b23      	ldr	r3, [pc, #140]	@ (80036b0 <_svfiprintf_r+0x1f4>)
 8003622:	2b00      	cmp	r3, #0
 8003624:	d122      	bne.n	800366c <_svfiprintf_r+0x1b0>
 8003626:	2207      	movs	r2, #7
 8003628:	9b07      	ldr	r3, [sp, #28]
 800362a:	3307      	adds	r3, #7
 800362c:	4393      	bics	r3, r2
 800362e:	3308      	adds	r3, #8
 8003630:	9307      	str	r3, [sp, #28]
 8003632:	6963      	ldr	r3, [r4, #20]
 8003634:	9a04      	ldr	r2, [sp, #16]
 8003636:	189b      	adds	r3, r3, r2
 8003638:	6163      	str	r3, [r4, #20]
 800363a:	e762      	b.n	8003502 <_svfiprintf_r+0x46>
 800363c:	4343      	muls	r3, r0
 800363e:	0035      	movs	r5, r6
 8003640:	2101      	movs	r1, #1
 8003642:	189b      	adds	r3, r3, r2
 8003644:	e7a4      	b.n	8003590 <_svfiprintf_r+0xd4>
 8003646:	2300      	movs	r3, #0
 8003648:	200a      	movs	r0, #10
 800364a:	0019      	movs	r1, r3
 800364c:	3501      	adds	r5, #1
 800364e:	6063      	str	r3, [r4, #4]
 8003650:	782a      	ldrb	r2, [r5, #0]
 8003652:	1c6e      	adds	r6, r5, #1
 8003654:	3a30      	subs	r2, #48	@ 0x30
 8003656:	2a09      	cmp	r2, #9
 8003658:	d903      	bls.n	8003662 <_svfiprintf_r+0x1a6>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0c8      	beq.n	80035f0 <_svfiprintf_r+0x134>
 800365e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003660:	e7c6      	b.n	80035f0 <_svfiprintf_r+0x134>
 8003662:	4341      	muls	r1, r0
 8003664:	0035      	movs	r5, r6
 8003666:	2301      	movs	r3, #1
 8003668:	1889      	adds	r1, r1, r2
 800366a:	e7f1      	b.n	8003650 <_svfiprintf_r+0x194>
 800366c:	aa07      	add	r2, sp, #28
 800366e:	9200      	str	r2, [sp, #0]
 8003670:	0021      	movs	r1, r4
 8003672:	003a      	movs	r2, r7
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <_svfiprintf_r+0x1f8>)
 8003676:	9803      	ldr	r0, [sp, #12]
 8003678:	e000      	b.n	800367c <_svfiprintf_r+0x1c0>
 800367a:	bf00      	nop
 800367c:	9004      	str	r0, [sp, #16]
 800367e:	9b04      	ldr	r3, [sp, #16]
 8003680:	3301      	adds	r3, #1
 8003682:	d1d6      	bne.n	8003632 <_svfiprintf_r+0x176>
 8003684:	89bb      	ldrh	r3, [r7, #12]
 8003686:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003688:	065b      	lsls	r3, r3, #25
 800368a:	d500      	bpl.n	800368e <_svfiprintf_r+0x1d2>
 800368c:	e72c      	b.n	80034e8 <_svfiprintf_r+0x2c>
 800368e:	b021      	add	sp, #132	@ 0x84
 8003690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003692:	aa07      	add	r2, sp, #28
 8003694:	9200      	str	r2, [sp, #0]
 8003696:	0021      	movs	r1, r4
 8003698:	003a      	movs	r2, r7
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <_svfiprintf_r+0x1f8>)
 800369c:	9803      	ldr	r0, [sp, #12]
 800369e:	f000 f87b 	bl	8003798 <_printf_i>
 80036a2:	e7eb      	b.n	800367c <_svfiprintf_r+0x1c0>
 80036a4:	08003af0 	.word	0x08003af0
 80036a8:	08003af6 	.word	0x08003af6
 80036ac:	08003afa 	.word	0x08003afa
 80036b0:	00000000 	.word	0x00000000
 80036b4:	080033fd 	.word	0x080033fd

080036b8 <_printf_common>:
 80036b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ba:	0016      	movs	r6, r2
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	688a      	ldr	r2, [r1, #8]
 80036c0:	690b      	ldr	r3, [r1, #16]
 80036c2:	000c      	movs	r4, r1
 80036c4:	9000      	str	r0, [sp, #0]
 80036c6:	4293      	cmp	r3, r2
 80036c8:	da00      	bge.n	80036cc <_printf_common+0x14>
 80036ca:	0013      	movs	r3, r2
 80036cc:	0022      	movs	r2, r4
 80036ce:	6033      	str	r3, [r6, #0]
 80036d0:	3243      	adds	r2, #67	@ 0x43
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	2a00      	cmp	r2, #0
 80036d6:	d001      	beq.n	80036dc <_printf_common+0x24>
 80036d8:	3301      	adds	r3, #1
 80036da:	6033      	str	r3, [r6, #0]
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	069b      	lsls	r3, r3, #26
 80036e0:	d502      	bpl.n	80036e8 <_printf_common+0x30>
 80036e2:	6833      	ldr	r3, [r6, #0]
 80036e4:	3302      	adds	r3, #2
 80036e6:	6033      	str	r3, [r6, #0]
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	2306      	movs	r3, #6
 80036ec:	0015      	movs	r5, r2
 80036ee:	401d      	ands	r5, r3
 80036f0:	421a      	tst	r2, r3
 80036f2:	d027      	beq.n	8003744 <_printf_common+0x8c>
 80036f4:	0023      	movs	r3, r4
 80036f6:	3343      	adds	r3, #67	@ 0x43
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	4193      	sbcs	r3, r2
 80036fe:	6822      	ldr	r2, [r4, #0]
 8003700:	0692      	lsls	r2, r2, #26
 8003702:	d430      	bmi.n	8003766 <_printf_common+0xae>
 8003704:	0022      	movs	r2, r4
 8003706:	9901      	ldr	r1, [sp, #4]
 8003708:	9800      	ldr	r0, [sp, #0]
 800370a:	9d08      	ldr	r5, [sp, #32]
 800370c:	3243      	adds	r2, #67	@ 0x43
 800370e:	47a8      	blx	r5
 8003710:	3001      	adds	r0, #1
 8003712:	d025      	beq.n	8003760 <_printf_common+0xa8>
 8003714:	2206      	movs	r2, #6
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	2500      	movs	r5, #0
 800371a:	4013      	ands	r3, r2
 800371c:	2b04      	cmp	r3, #4
 800371e:	d105      	bne.n	800372c <_printf_common+0x74>
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	68e5      	ldr	r5, [r4, #12]
 8003724:	1aed      	subs	r5, r5, r3
 8003726:	43eb      	mvns	r3, r5
 8003728:	17db      	asrs	r3, r3, #31
 800372a:	401d      	ands	r5, r3
 800372c:	68a3      	ldr	r3, [r4, #8]
 800372e:	6922      	ldr	r2, [r4, #16]
 8003730:	4293      	cmp	r3, r2
 8003732:	dd01      	ble.n	8003738 <_printf_common+0x80>
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	18ed      	adds	r5, r5, r3
 8003738:	2600      	movs	r6, #0
 800373a:	42b5      	cmp	r5, r6
 800373c:	d120      	bne.n	8003780 <_printf_common+0xc8>
 800373e:	2000      	movs	r0, #0
 8003740:	e010      	b.n	8003764 <_printf_common+0xac>
 8003742:	3501      	adds	r5, #1
 8003744:	68e3      	ldr	r3, [r4, #12]
 8003746:	6832      	ldr	r2, [r6, #0]
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	42ab      	cmp	r3, r5
 800374c:	ddd2      	ble.n	80036f4 <_printf_common+0x3c>
 800374e:	0022      	movs	r2, r4
 8003750:	2301      	movs	r3, #1
 8003752:	9901      	ldr	r1, [sp, #4]
 8003754:	9800      	ldr	r0, [sp, #0]
 8003756:	9f08      	ldr	r7, [sp, #32]
 8003758:	3219      	adds	r2, #25
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	d1f0      	bne.n	8003742 <_printf_common+0x8a>
 8003760:	2001      	movs	r0, #1
 8003762:	4240      	negs	r0, r0
 8003764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003766:	2030      	movs	r0, #48	@ 0x30
 8003768:	18e1      	adds	r1, r4, r3
 800376a:	3143      	adds	r1, #67	@ 0x43
 800376c:	7008      	strb	r0, [r1, #0]
 800376e:	0021      	movs	r1, r4
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	3145      	adds	r1, #69	@ 0x45
 8003774:	7809      	ldrb	r1, [r1, #0]
 8003776:	18a2      	adds	r2, r4, r2
 8003778:	3243      	adds	r2, #67	@ 0x43
 800377a:	3302      	adds	r3, #2
 800377c:	7011      	strb	r1, [r2, #0]
 800377e:	e7c1      	b.n	8003704 <_printf_common+0x4c>
 8003780:	0022      	movs	r2, r4
 8003782:	2301      	movs	r3, #1
 8003784:	9901      	ldr	r1, [sp, #4]
 8003786:	9800      	ldr	r0, [sp, #0]
 8003788:	9f08      	ldr	r7, [sp, #32]
 800378a:	321a      	adds	r2, #26
 800378c:	47b8      	blx	r7
 800378e:	3001      	adds	r0, #1
 8003790:	d0e6      	beq.n	8003760 <_printf_common+0xa8>
 8003792:	3601      	adds	r6, #1
 8003794:	e7d1      	b.n	800373a <_printf_common+0x82>
	...

08003798 <_printf_i>:
 8003798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379a:	b08b      	sub	sp, #44	@ 0x2c
 800379c:	9206      	str	r2, [sp, #24]
 800379e:	000a      	movs	r2, r1
 80037a0:	3243      	adds	r2, #67	@ 0x43
 80037a2:	9307      	str	r3, [sp, #28]
 80037a4:	9005      	str	r0, [sp, #20]
 80037a6:	9203      	str	r2, [sp, #12]
 80037a8:	7e0a      	ldrb	r2, [r1, #24]
 80037aa:	000c      	movs	r4, r1
 80037ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80037ae:	2a78      	cmp	r2, #120	@ 0x78
 80037b0:	d809      	bhi.n	80037c6 <_printf_i+0x2e>
 80037b2:	2a62      	cmp	r2, #98	@ 0x62
 80037b4:	d80b      	bhi.n	80037ce <_printf_i+0x36>
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	d100      	bne.n	80037bc <_printf_i+0x24>
 80037ba:	e0bc      	b.n	8003936 <_printf_i+0x19e>
 80037bc:	497b      	ldr	r1, [pc, #492]	@ (80039ac <_printf_i+0x214>)
 80037be:	9104      	str	r1, [sp, #16]
 80037c0:	2a58      	cmp	r2, #88	@ 0x58
 80037c2:	d100      	bne.n	80037c6 <_printf_i+0x2e>
 80037c4:	e090      	b.n	80038e8 <_printf_i+0x150>
 80037c6:	0025      	movs	r5, r4
 80037c8:	3542      	adds	r5, #66	@ 0x42
 80037ca:	702a      	strb	r2, [r5, #0]
 80037cc:	e022      	b.n	8003814 <_printf_i+0x7c>
 80037ce:	0010      	movs	r0, r2
 80037d0:	3863      	subs	r0, #99	@ 0x63
 80037d2:	2815      	cmp	r0, #21
 80037d4:	d8f7      	bhi.n	80037c6 <_printf_i+0x2e>
 80037d6:	f7fc fc97 	bl	8000108 <__gnu_thumb1_case_shi>
 80037da:	0016      	.short	0x0016
 80037dc:	fff6001f 	.word	0xfff6001f
 80037e0:	fff6fff6 	.word	0xfff6fff6
 80037e4:	001ffff6 	.word	0x001ffff6
 80037e8:	fff6fff6 	.word	0xfff6fff6
 80037ec:	fff6fff6 	.word	0xfff6fff6
 80037f0:	003600a1 	.word	0x003600a1
 80037f4:	fff60080 	.word	0xfff60080
 80037f8:	00b2fff6 	.word	0x00b2fff6
 80037fc:	0036fff6 	.word	0x0036fff6
 8003800:	fff6fff6 	.word	0xfff6fff6
 8003804:	0084      	.short	0x0084
 8003806:	0025      	movs	r5, r4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	3542      	adds	r5, #66	@ 0x42
 800380c:	1d11      	adds	r1, r2, #4
 800380e:	6019      	str	r1, [r3, #0]
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	702b      	strb	r3, [r5, #0]
 8003814:	2301      	movs	r3, #1
 8003816:	e0a0      	b.n	800395a <_printf_i+0x1c2>
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	6809      	ldr	r1, [r1, #0]
 800381c:	1d02      	adds	r2, r0, #4
 800381e:	060d      	lsls	r5, r1, #24
 8003820:	d50b      	bpl.n	800383a <_printf_i+0xa2>
 8003822:	6806      	ldr	r6, [r0, #0]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	2e00      	cmp	r6, #0
 8003828:	da03      	bge.n	8003832 <_printf_i+0x9a>
 800382a:	232d      	movs	r3, #45	@ 0x2d
 800382c:	9a03      	ldr	r2, [sp, #12]
 800382e:	4276      	negs	r6, r6
 8003830:	7013      	strb	r3, [r2, #0]
 8003832:	4b5e      	ldr	r3, [pc, #376]	@ (80039ac <_printf_i+0x214>)
 8003834:	270a      	movs	r7, #10
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	e018      	b.n	800386c <_printf_i+0xd4>
 800383a:	6806      	ldr	r6, [r0, #0]
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	0649      	lsls	r1, r1, #25
 8003840:	d5f1      	bpl.n	8003826 <_printf_i+0x8e>
 8003842:	b236      	sxth	r6, r6
 8003844:	e7ef      	b.n	8003826 <_printf_i+0x8e>
 8003846:	6808      	ldr	r0, [r1, #0]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	c940      	ldmia	r1!, {r6}
 800384c:	0605      	lsls	r5, r0, #24
 800384e:	d402      	bmi.n	8003856 <_printf_i+0xbe>
 8003850:	0640      	lsls	r0, r0, #25
 8003852:	d500      	bpl.n	8003856 <_printf_i+0xbe>
 8003854:	b2b6      	uxth	r6, r6
 8003856:	6019      	str	r1, [r3, #0]
 8003858:	4b54      	ldr	r3, [pc, #336]	@ (80039ac <_printf_i+0x214>)
 800385a:	270a      	movs	r7, #10
 800385c:	9304      	str	r3, [sp, #16]
 800385e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003860:	d100      	bne.n	8003864 <_printf_i+0xcc>
 8003862:	3f02      	subs	r7, #2
 8003864:	0023      	movs	r3, r4
 8003866:	2200      	movs	r2, #0
 8003868:	3343      	adds	r3, #67	@ 0x43
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	6863      	ldr	r3, [r4, #4]
 800386e:	60a3      	str	r3, [r4, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db03      	blt.n	800387c <_printf_i+0xe4>
 8003874:	2104      	movs	r1, #4
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	438a      	bics	r2, r1
 800387a:	6022      	str	r2, [r4, #0]
 800387c:	2e00      	cmp	r6, #0
 800387e:	d102      	bne.n	8003886 <_printf_i+0xee>
 8003880:	9d03      	ldr	r5, [sp, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <_printf_i+0x108>
 8003886:	9d03      	ldr	r5, [sp, #12]
 8003888:	0030      	movs	r0, r6
 800388a:	0039      	movs	r1, r7
 800388c:	f7fc fccc 	bl	8000228 <__aeabi_uidivmod>
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	3d01      	subs	r5, #1
 8003894:	5c5b      	ldrb	r3, [r3, r1]
 8003896:	702b      	strb	r3, [r5, #0]
 8003898:	0033      	movs	r3, r6
 800389a:	0006      	movs	r6, r0
 800389c:	429f      	cmp	r7, r3
 800389e:	d9f3      	bls.n	8003888 <_printf_i+0xf0>
 80038a0:	2f08      	cmp	r7, #8
 80038a2:	d109      	bne.n	80038b8 <_printf_i+0x120>
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	07db      	lsls	r3, r3, #31
 80038a8:	d506      	bpl.n	80038b8 <_printf_i+0x120>
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	dc02      	bgt.n	80038b8 <_printf_i+0x120>
 80038b2:	2330      	movs	r3, #48	@ 0x30
 80038b4:	3d01      	subs	r5, #1
 80038b6:	702b      	strb	r3, [r5, #0]
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	1b5b      	subs	r3, r3, r5
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	9b07      	ldr	r3, [sp, #28]
 80038c0:	0021      	movs	r1, r4
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	9805      	ldr	r0, [sp, #20]
 80038c6:	9b06      	ldr	r3, [sp, #24]
 80038c8:	aa09      	add	r2, sp, #36	@ 0x24
 80038ca:	f7ff fef5 	bl	80036b8 <_printf_common>
 80038ce:	3001      	adds	r0, #1
 80038d0:	d148      	bne.n	8003964 <_printf_i+0x1cc>
 80038d2:	2001      	movs	r0, #1
 80038d4:	4240      	negs	r0, r0
 80038d6:	b00b      	add	sp, #44	@ 0x2c
 80038d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038da:	2220      	movs	r2, #32
 80038dc:	6809      	ldr	r1, [r1, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	6022      	str	r2, [r4, #0]
 80038e2:	2278      	movs	r2, #120	@ 0x78
 80038e4:	4932      	ldr	r1, [pc, #200]	@ (80039b0 <_printf_i+0x218>)
 80038e6:	9104      	str	r1, [sp, #16]
 80038e8:	0021      	movs	r1, r4
 80038ea:	3145      	adds	r1, #69	@ 0x45
 80038ec:	700a      	strb	r2, [r1, #0]
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6822      	ldr	r2, [r4, #0]
 80038f2:	c940      	ldmia	r1!, {r6}
 80038f4:	0610      	lsls	r0, r2, #24
 80038f6:	d402      	bmi.n	80038fe <_printf_i+0x166>
 80038f8:	0650      	lsls	r0, r2, #25
 80038fa:	d500      	bpl.n	80038fe <_printf_i+0x166>
 80038fc:	b2b6      	uxth	r6, r6
 80038fe:	6019      	str	r1, [r3, #0]
 8003900:	07d3      	lsls	r3, r2, #31
 8003902:	d502      	bpl.n	800390a <_printf_i+0x172>
 8003904:	2320      	movs	r3, #32
 8003906:	4313      	orrs	r3, r2
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	2e00      	cmp	r6, #0
 800390c:	d001      	beq.n	8003912 <_printf_i+0x17a>
 800390e:	2710      	movs	r7, #16
 8003910:	e7a8      	b.n	8003864 <_printf_i+0xcc>
 8003912:	2220      	movs	r2, #32
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	4393      	bics	r3, r2
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	e7f8      	b.n	800390e <_printf_i+0x176>
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	680d      	ldr	r5, [r1, #0]
 8003920:	1d10      	adds	r0, r2, #4
 8003922:	6949      	ldr	r1, [r1, #20]
 8003924:	6018      	str	r0, [r3, #0]
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	d501      	bpl.n	8003930 <_printf_i+0x198>
 800392c:	6019      	str	r1, [r3, #0]
 800392e:	e002      	b.n	8003936 <_printf_i+0x19e>
 8003930:	066d      	lsls	r5, r5, #25
 8003932:	d5fb      	bpl.n	800392c <_printf_i+0x194>
 8003934:	8019      	strh	r1, [r3, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	9d03      	ldr	r5, [sp, #12]
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	e7bf      	b.n	80038be <_printf_i+0x126>
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	1d11      	adds	r1, r2, #4
 8003942:	6019      	str	r1, [r3, #0]
 8003944:	6815      	ldr	r5, [r2, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	0028      	movs	r0, r5
 800394a:	6862      	ldr	r2, [r4, #4]
 800394c:	f000 f858 	bl	8003a00 <memchr>
 8003950:	2800      	cmp	r0, #0
 8003952:	d001      	beq.n	8003958 <_printf_i+0x1c0>
 8003954:	1b40      	subs	r0, r0, r5
 8003956:	6060      	str	r0, [r4, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	9a03      	ldr	r2, [sp, #12]
 8003960:	7013      	strb	r3, [r2, #0]
 8003962:	e7ac      	b.n	80038be <_printf_i+0x126>
 8003964:	002a      	movs	r2, r5
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	9906      	ldr	r1, [sp, #24]
 800396a:	9805      	ldr	r0, [sp, #20]
 800396c:	9d07      	ldr	r5, [sp, #28]
 800396e:	47a8      	blx	r5
 8003970:	3001      	adds	r0, #1
 8003972:	d0ae      	beq.n	80038d2 <_printf_i+0x13a>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	079b      	lsls	r3, r3, #30
 8003978:	d415      	bmi.n	80039a6 <_printf_i+0x20e>
 800397a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800397c:	68e0      	ldr	r0, [r4, #12]
 800397e:	4298      	cmp	r0, r3
 8003980:	daa9      	bge.n	80038d6 <_printf_i+0x13e>
 8003982:	0018      	movs	r0, r3
 8003984:	e7a7      	b.n	80038d6 <_printf_i+0x13e>
 8003986:	0022      	movs	r2, r4
 8003988:	2301      	movs	r3, #1
 800398a:	9906      	ldr	r1, [sp, #24]
 800398c:	9805      	ldr	r0, [sp, #20]
 800398e:	9e07      	ldr	r6, [sp, #28]
 8003990:	3219      	adds	r2, #25
 8003992:	47b0      	blx	r6
 8003994:	3001      	adds	r0, #1
 8003996:	d09c      	beq.n	80038d2 <_printf_i+0x13a>
 8003998:	3501      	adds	r5, #1
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dcf0      	bgt.n	8003986 <_printf_i+0x1ee>
 80039a4:	e7e9      	b.n	800397a <_printf_i+0x1e2>
 80039a6:	2500      	movs	r5, #0
 80039a8:	e7f7      	b.n	800399a <_printf_i+0x202>
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	08003b01 	.word	0x08003b01
 80039b0:	08003b12 	.word	0x08003b12

080039b4 <memmove>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4288      	cmp	r0, r1
 80039b8:	d806      	bhi.n	80039c8 <memmove+0x14>
 80039ba:	2300      	movs	r3, #0
 80039bc:	429a      	cmp	r2, r3
 80039be:	d008      	beq.n	80039d2 <memmove+0x1e>
 80039c0:	5ccc      	ldrb	r4, [r1, r3]
 80039c2:	54c4      	strb	r4, [r0, r3]
 80039c4:	3301      	adds	r3, #1
 80039c6:	e7f9      	b.n	80039bc <memmove+0x8>
 80039c8:	188b      	adds	r3, r1, r2
 80039ca:	4298      	cmp	r0, r3
 80039cc:	d2f5      	bcs.n	80039ba <memmove+0x6>
 80039ce:	3a01      	subs	r2, #1
 80039d0:	d200      	bcs.n	80039d4 <memmove+0x20>
 80039d2:	bd10      	pop	{r4, pc}
 80039d4:	5c8b      	ldrb	r3, [r1, r2]
 80039d6:	5483      	strb	r3, [r0, r2]
 80039d8:	e7f9      	b.n	80039ce <memmove+0x1a>
	...

080039dc <_sbrk_r>:
 80039dc:	2300      	movs	r3, #0
 80039de:	b570      	push	{r4, r5, r6, lr}
 80039e0:	4d06      	ldr	r5, [pc, #24]	@ (80039fc <_sbrk_r+0x20>)
 80039e2:	0004      	movs	r4, r0
 80039e4:	0008      	movs	r0, r1
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	f7fd f8d2 	bl	8000b90 <_sbrk>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d103      	bne.n	80039f8 <_sbrk_r+0x1c>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d000      	beq.n	80039f8 <_sbrk_r+0x1c>
 80039f6:	6023      	str	r3, [r4, #0]
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	200004b4 	.word	0x200004b4

08003a00 <memchr>:
 8003a00:	b2c9      	uxtb	r1, r1
 8003a02:	1882      	adds	r2, r0, r2
 8003a04:	4290      	cmp	r0, r2
 8003a06:	d101      	bne.n	8003a0c <memchr+0xc>
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4770      	bx	lr
 8003a0c:	7803      	ldrb	r3, [r0, #0]
 8003a0e:	428b      	cmp	r3, r1
 8003a10:	d0fb      	beq.n	8003a0a <memchr+0xa>
 8003a12:	3001      	adds	r0, #1
 8003a14:	e7f6      	b.n	8003a04 <memchr+0x4>

08003a16 <_realloc_r>:
 8003a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a18:	0006      	movs	r6, r0
 8003a1a:	000c      	movs	r4, r1
 8003a1c:	0015      	movs	r5, r2
 8003a1e:	2900      	cmp	r1, #0
 8003a20:	d105      	bne.n	8003a2e <_realloc_r+0x18>
 8003a22:	0011      	movs	r1, r2
 8003a24:	f7ff fc5a 	bl	80032dc <_malloc_r>
 8003a28:	0004      	movs	r4, r0
 8003a2a:	0020      	movs	r0, r4
 8003a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d103      	bne.n	8003a3a <_realloc_r+0x24>
 8003a32:	f7ff fbe7 	bl	8003204 <_free_r>
 8003a36:	2400      	movs	r4, #0
 8003a38:	e7f7      	b.n	8003a2a <_realloc_r+0x14>
 8003a3a:	f000 f81b 	bl	8003a74 <_malloc_usable_size_r>
 8003a3e:	0007      	movs	r7, r0
 8003a40:	4285      	cmp	r5, r0
 8003a42:	d802      	bhi.n	8003a4a <_realloc_r+0x34>
 8003a44:	0843      	lsrs	r3, r0, #1
 8003a46:	42ab      	cmp	r3, r5
 8003a48:	d3ef      	bcc.n	8003a2a <_realloc_r+0x14>
 8003a4a:	0029      	movs	r1, r5
 8003a4c:	0030      	movs	r0, r6
 8003a4e:	f7ff fc45 	bl	80032dc <_malloc_r>
 8003a52:	9001      	str	r0, [sp, #4]
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d0ee      	beq.n	8003a36 <_realloc_r+0x20>
 8003a58:	002a      	movs	r2, r5
 8003a5a:	42bd      	cmp	r5, r7
 8003a5c:	d900      	bls.n	8003a60 <_realloc_r+0x4a>
 8003a5e:	003a      	movs	r2, r7
 8003a60:	0021      	movs	r1, r4
 8003a62:	9801      	ldr	r0, [sp, #4]
 8003a64:	f7ff fbc4 	bl	80031f0 <memcpy>
 8003a68:	0021      	movs	r1, r4
 8003a6a:	0030      	movs	r0, r6
 8003a6c:	f7ff fbca 	bl	8003204 <_free_r>
 8003a70:	9c01      	ldr	r4, [sp, #4]
 8003a72:	e7da      	b.n	8003a2a <_realloc_r+0x14>

08003a74 <_malloc_usable_size_r>:
 8003a74:	1f0b      	subs	r3, r1, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1f18      	subs	r0, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da01      	bge.n	8003a82 <_malloc_usable_size_r+0xe>
 8003a7e:	580b      	ldr	r3, [r1, r0]
 8003a80:	18c0      	adds	r0, r0, r3
 8003a82:	4770      	bx	lr

08003a84 <_init>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr

08003a90 <_fini>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr
