
Pueba_tarjeta_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008190  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08008250  08008250  00009250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008658  08008658  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008658  08008658  0000a1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008658  08008658  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008658  08008658  00009658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800865c  0800865c  0000965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008660  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  08008834  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08008834  0000a4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d66b  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  00017867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000198f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ed  00000000  00000000  0001a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a16  00000000  00000000  0001af8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fefa  00000000  00000000  0002c9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067314  00000000  00000000  0003c89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb8  00000000  00000000  000a3bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000a7aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008238 	.word	0x08008238

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08008238 	.word	0x08008238

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 ff2a 	bl	80023b8 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fdf0 	bl	80023b8 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 fabb 	bl	80023b8 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 fa9a 	bl	80023b8 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	0800826c 	.word	0x0800826c
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f9cd 	bl	80023b8 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f9bb 	bl	80023b8 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 ff10 	bl	80023b8 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 feec 	bl	80023b8 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fd75 	bl	80023b8 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fd63 	bl	80023b8 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fcab 	bl	80023b8 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fb63 	bl	80023b8 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f914 	bl	80023b8 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f8eb 	bl	80023b8 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__aeabi_f2d>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	0242      	lsls	r2, r0, #9
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	0fc4      	lsrs	r4, r0, #31
 8002228:	20fe      	movs	r0, #254	@ 0xfe
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	1c59      	adds	r1, r3, #1
 800222e:	0a55      	lsrs	r5, r2, #9
 8002230:	4208      	tst	r0, r1
 8002232:	d00c      	beq.n	800224e <__aeabi_f2d+0x2e>
 8002234:	21e0      	movs	r1, #224	@ 0xe0
 8002236:	0089      	lsls	r1, r1, #2
 8002238:	468c      	mov	ip, r1
 800223a:	076d      	lsls	r5, r5, #29
 800223c:	0b12      	lsrs	r2, r2, #12
 800223e:	4463      	add	r3, ip
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	4313      	orrs	r3, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4323      	orrs	r3, r4
 8002248:	0028      	movs	r0, r5
 800224a:	0019      	movs	r1, r3
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <__aeabi_f2d+0x5c>
 8002252:	2d00      	cmp	r5, #0
 8002254:	d01b      	beq.n	800228e <__aeabi_f2d+0x6e>
 8002256:	0028      	movs	r0, r5
 8002258:	f000 f8ae 	bl	80023b8 <__clzsi2>
 800225c:	280a      	cmp	r0, #10
 800225e:	dc1c      	bgt.n	800229a <__aeabi_f2d+0x7a>
 8002260:	230b      	movs	r3, #11
 8002262:	002a      	movs	r2, r5
 8002264:	1a1b      	subs	r3, r3, r0
 8002266:	40da      	lsrs	r2, r3
 8002268:	0003      	movs	r3, r0
 800226a:	3315      	adds	r3, #21
 800226c:	409d      	lsls	r5, r3
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <__aeabi_f2d+0x88>)
 8002270:	0312      	lsls	r2, r2, #12
 8002272:	1a1b      	subs	r3, r3, r0
 8002274:	055b      	lsls	r3, r3, #21
 8002276:	0b12      	lsrs	r2, r2, #12
 8002278:	0d5b      	lsrs	r3, r3, #21
 800227a:	e7e1      	b.n	8002240 <__aeabi_f2d+0x20>
 800227c:	2d00      	cmp	r5, #0
 800227e:	d009      	beq.n	8002294 <__aeabi_f2d+0x74>
 8002280:	0b13      	lsrs	r3, r2, #12
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	0312      	lsls	r2, r2, #12
 8002286:	431a      	orrs	r2, r3
 8002288:	076d      	lsls	r5, r5, #29
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <__aeabi_f2d+0x8c>)
 800228c:	e7d8      	b.n	8002240 <__aeabi_f2d+0x20>
 800228e:	2300      	movs	r3, #0
 8002290:	2200      	movs	r2, #0
 8002292:	e7d5      	b.n	8002240 <__aeabi_f2d+0x20>
 8002294:	2200      	movs	r2, #0
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <__aeabi_f2d+0x8c>)
 8002298:	e7d2      	b.n	8002240 <__aeabi_f2d+0x20>
 800229a:	0003      	movs	r3, r0
 800229c:	002a      	movs	r2, r5
 800229e:	3b0b      	subs	r3, #11
 80022a0:	409a      	lsls	r2, r3
 80022a2:	2500      	movs	r5, #0
 80022a4:	e7e3      	b.n	800226e <__aeabi_f2d+0x4e>
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	00000389 	.word	0x00000389
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2f>:
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	004b      	lsls	r3, r1, #1
 80022b4:	030f      	lsls	r7, r1, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	4c3b      	ldr	r4, [pc, #236]	@ (80023a8 <__aeabi_d2f+0xf8>)
 80022ba:	0f45      	lsrs	r5, r0, #29
 80022bc:	b083      	sub	sp, #12
 80022be:	0a7f      	lsrs	r7, r7, #9
 80022c0:	1c5e      	adds	r6, r3, #1
 80022c2:	432f      	orrs	r7, r5
 80022c4:	9000      	str	r0, [sp, #0]
 80022c6:	9101      	str	r1, [sp, #4]
 80022c8:	0fca      	lsrs	r2, r1, #31
 80022ca:	00c5      	lsls	r5, r0, #3
 80022cc:	4226      	tst	r6, r4
 80022ce:	d00b      	beq.n	80022e8 <__aeabi_d2f+0x38>
 80022d0:	4936      	ldr	r1, [pc, #216]	@ (80023ac <__aeabi_d2f+0xfc>)
 80022d2:	185c      	adds	r4, r3, r1
 80022d4:	2cfe      	cmp	r4, #254	@ 0xfe
 80022d6:	dd13      	ble.n	8002300 <__aeabi_d2f+0x50>
 80022d8:	20ff      	movs	r0, #255	@ 0xff
 80022da:	2300      	movs	r3, #0
 80022dc:	05c0      	lsls	r0, r0, #23
 80022de:	4318      	orrs	r0, r3
 80022e0:	07d2      	lsls	r2, r2, #31
 80022e2:	4310      	orrs	r0, r2
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <__aeabi_d2f+0x42>
 80022ec:	2000      	movs	r0, #0
 80022ee:	2300      	movs	r3, #0
 80022f0:	e7f4      	b.n	80022dc <__aeabi_d2f+0x2c>
 80022f2:	433d      	orrs	r5, r7
 80022f4:	d0f0      	beq.n	80022d8 <__aeabi_d2f+0x28>
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	03db      	lsls	r3, r3, #15
 80022fa:	20ff      	movs	r0, #255	@ 0xff
 80022fc:	433b      	orrs	r3, r7
 80022fe:	e7ed      	b.n	80022dc <__aeabi_d2f+0x2c>
 8002300:	2c00      	cmp	r4, #0
 8002302:	dd14      	ble.n	800232e <__aeabi_d2f+0x7e>
 8002304:	9b00      	ldr	r3, [sp, #0]
 8002306:	00ff      	lsls	r7, r7, #3
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	4183      	sbcs	r3, r0
 800230e:	0f69      	lsrs	r1, r5, #29
 8002310:	433b      	orrs	r3, r7
 8002312:	430b      	orrs	r3, r1
 8002314:	0759      	lsls	r1, r3, #29
 8002316:	d041      	beq.n	800239c <__aeabi_d2f+0xec>
 8002318:	210f      	movs	r1, #15
 800231a:	4019      	ands	r1, r3
 800231c:	2904      	cmp	r1, #4
 800231e:	d028      	beq.n	8002372 <__aeabi_d2f+0xc2>
 8002320:	3304      	adds	r3, #4
 8002322:	0159      	lsls	r1, r3, #5
 8002324:	d525      	bpl.n	8002372 <__aeabi_d2f+0xc2>
 8002326:	3401      	adds	r4, #1
 8002328:	2300      	movs	r3, #0
 800232a:	b2e0      	uxtb	r0, r4
 800232c:	e7d6      	b.n	80022dc <__aeabi_d2f+0x2c>
 800232e:	0021      	movs	r1, r4
 8002330:	3117      	adds	r1, #23
 8002332:	dbdb      	blt.n	80022ec <__aeabi_d2f+0x3c>
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	201e      	movs	r0, #30
 8002338:	0409      	lsls	r1, r1, #16
 800233a:	4339      	orrs	r1, r7
 800233c:	1b00      	subs	r0, r0, r4
 800233e:	281f      	cmp	r0, #31
 8002340:	dd1b      	ble.n	800237a <__aeabi_d2f+0xca>
 8002342:	2602      	movs	r6, #2
 8002344:	4276      	negs	r6, r6
 8002346:	1b34      	subs	r4, r6, r4
 8002348:	000e      	movs	r6, r1
 800234a:	40e6      	lsrs	r6, r4
 800234c:	0034      	movs	r4, r6
 800234e:	2820      	cmp	r0, #32
 8002350:	d004      	beq.n	800235c <__aeabi_d2f+0xac>
 8002352:	4817      	ldr	r0, [pc, #92]	@ (80023b0 <__aeabi_d2f+0x100>)
 8002354:	4684      	mov	ip, r0
 8002356:	4463      	add	r3, ip
 8002358:	4099      	lsls	r1, r3
 800235a:	430d      	orrs	r5, r1
 800235c:	002b      	movs	r3, r5
 800235e:	1e59      	subs	r1, r3, #1
 8002360:	418b      	sbcs	r3, r1
 8002362:	4323      	orrs	r3, r4
 8002364:	0759      	lsls	r1, r3, #29
 8002366:	d015      	beq.n	8002394 <__aeabi_d2f+0xe4>
 8002368:	210f      	movs	r1, #15
 800236a:	2400      	movs	r4, #0
 800236c:	4019      	ands	r1, r3
 800236e:	2904      	cmp	r1, #4
 8002370:	d117      	bne.n	80023a2 <__aeabi_d2f+0xf2>
 8002372:	019b      	lsls	r3, r3, #6
 8002374:	0a5b      	lsrs	r3, r3, #9
 8002376:	b2e0      	uxtb	r0, r4
 8002378:	e7b0      	b.n	80022dc <__aeabi_d2f+0x2c>
 800237a:	4c0e      	ldr	r4, [pc, #56]	@ (80023b4 <__aeabi_d2f+0x104>)
 800237c:	191c      	adds	r4, r3, r4
 800237e:	002b      	movs	r3, r5
 8002380:	40a5      	lsls	r5, r4
 8002382:	40c3      	lsrs	r3, r0
 8002384:	40a1      	lsls	r1, r4
 8002386:	1e68      	subs	r0, r5, #1
 8002388:	4185      	sbcs	r5, r0
 800238a:	4329      	orrs	r1, r5
 800238c:	430b      	orrs	r3, r1
 800238e:	2400      	movs	r4, #0
 8002390:	0759      	lsls	r1, r3, #29
 8002392:	d1c1      	bne.n	8002318 <__aeabi_d2f+0x68>
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	2000      	movs	r0, #0
 8002398:	0a5b      	lsrs	r3, r3, #9
 800239a:	e79f      	b.n	80022dc <__aeabi_d2f+0x2c>
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	b2e0      	uxtb	r0, r4
 80023a0:	e79c      	b.n	80022dc <__aeabi_d2f+0x2c>
 80023a2:	3304      	adds	r3, #4
 80023a4:	e7e5      	b.n	8002372 <__aeabi_d2f+0xc2>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	000007fe 	.word	0x000007fe
 80023ac:	fffffc80 	.word	0xfffffc80
 80023b0:	fffffca2 	.word	0xfffffca2
 80023b4:	fffffc82 	.word	0xfffffc82

080023b8 <__clzsi2>:
 80023b8:	211c      	movs	r1, #28
 80023ba:	2301      	movs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	4298      	cmp	r0, r3
 80023c0:	d301      	bcc.n	80023c6 <__clzsi2+0xe>
 80023c2:	0c00      	lsrs	r0, r0, #16
 80023c4:	3910      	subs	r1, #16
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	4298      	cmp	r0, r3
 80023ca:	d301      	bcc.n	80023d0 <__clzsi2+0x18>
 80023cc:	0a00      	lsrs	r0, r0, #8
 80023ce:	3908      	subs	r1, #8
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	4298      	cmp	r0, r3
 80023d4:	d301      	bcc.n	80023da <__clzsi2+0x22>
 80023d6:	0900      	lsrs	r0, r0, #4
 80023d8:	3904      	subs	r1, #4
 80023da:	a202      	add	r2, pc, #8	@ (adr r2, 80023e4 <__clzsi2+0x2c>)
 80023dc:	5c10      	ldrb	r0, [r2, r0]
 80023de:	1840      	adds	r0, r0, r1
 80023e0:	4770      	bx	lr
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	02020304 	.word	0x02020304
 80023e8:	01010101 	.word	0x01010101
	...

080023f4 <delay>:
/*
 * @brief	Wait the micro-seconds of the parameter.
 * @retval	None
 */
static void delay ( uint16_t us )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);	//set the counter value a 0
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <delay+0x30>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);	//wait for the counter to reach the us input in the parameter us
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <delay+0x30>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3f8      	bcc.n	800240a <delay+0x16>
}
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	200001f8 	.word	0x200001f8

08002428 <Set_Pin_Input>:
/*
 * @brief	Configure pin as input
 * @retval	None
 */
static void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN )
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	000a      	movs	r2, r1
 8002432:	1cbb      	adds	r3, r7, #2
 8002434:	801a      	strh	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	240c      	movs	r4, #12
 8002438:	193b      	adds	r3, r7, r4
 800243a:	0018      	movs	r0, r3
 800243c:	2314      	movs	r3, #20
 800243e:	001a      	movs	r2, r3
 8002440:	2100      	movs	r1, #0
 8002442:	f003 fd87 	bl	8005f54 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN;
 8002446:	1cbb      	adds	r3, r7, #2
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	193b      	adds	r3, r7, r4
 800244c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244e:	193b      	adds	r3, r7, r4
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002454:	193b      	adds	r3, r7, r4
 8002456:	2201      	movs	r2, #1
 8002458:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800245a:	193a      	adds	r2, r7, r4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0011      	movs	r1, r2
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fe9f 	bl	80031a4 <HAL_GPIO_Init>
}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b009      	add	sp, #36	@ 0x24
 800246c:	bd90      	pop	{r4, r7, pc}

0800246e <Set_Pin_Output>:
/*
 * @brief Configure pin as output
 * @retval None
 */
static void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN )
{
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b089      	sub	sp, #36	@ 0x24
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	000a      	movs	r2, r1
 8002478:	1cbb      	adds	r3, r7, #2
 800247a:	801a      	strh	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	240c      	movs	r4, #12
 800247e:	193b      	adds	r3, r7, r4
 8002480:	0018      	movs	r0, r3
 8002482:	2314      	movs	r3, #20
 8002484:	001a      	movs	r2, r3
 8002486:	2100      	movs	r1, #0
 8002488:	f003 fd64 	bl	8005f54 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN;
 800248c:	1cbb      	adds	r3, r7, #2
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	193b      	adds	r3, r7, r4
 8002492:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	193b      	adds	r3, r7, r4
 8002496:	2201      	movs	r2, #1
 8002498:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	193b      	adds	r3, r7, r4
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80024a0:	193a      	adds	r2, r7, r4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0011      	movs	r1, r2
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fe7c 	bl	80031a4 <HAL_GPIO_Init>

}
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b009      	add	sp, #36	@ 0x24
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <DS18B20_Start>:
 * 			with master.
 * @retval	Return value of presence of the DS18B20 sensor. If value=1,
 * 			detected sensor, but valure=0, the not detected sensor.
 */
static uint8_t DS18B20_Start ( void )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0

	uint8_t Response = 0;
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 80024c0:	2390      	movs	r3, #144	@ 0x90
 80024c2:	05db      	lsls	r3, r3, #23
 80024c4:	2104      	movs	r1, #4
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff ffd1 	bl	800246e <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80024cc:	2390      	movs	r3, #144	@ 0x90
 80024ce:	05db      	lsls	r3, r3, #23
 80024d0:	2200      	movs	r2, #0
 80024d2:	2104      	movs	r1, #4
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fff2 	bl	80034be <HAL_GPIO_WritePin>
	delay (500);
 80024da:	23fa      	movs	r3, #250	@ 0xfa
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff ff88 	bl	80023f4 <delay>

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80024e4:	2390      	movs	r3, #144	@ 0x90
 80024e6:	05db      	lsls	r3, r3, #23
 80024e8:	2104      	movs	r1, #4
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff ff9c 	bl	8002428 <Set_Pin_Input>

	delay (80);
 80024f0:	2050      	movs	r0, #80	@ 0x50
 80024f2:	f7ff ff7f 	bl	80023f4 <delay>

	if(!(HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin))) Response = 1;
 80024f6:	2390      	movs	r3, #144	@ 0x90
 80024f8:	05db      	lsls	r3, r3, #23
 80024fa:	2104      	movs	r1, #4
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 ffc1 	bl	8003484 <HAL_GPIO_ReadPin>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d103      	bne.n	800250e <DS18B20_Start+0x5a>
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e002      	b.n	8002514 <DS18B20_Start+0x60>
	else Response = 0;
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]

	delay (400);
 8002514:	23c8      	movs	r3, #200	@ 0xc8
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff ff6b 	bl	80023f4 <delay>

	return Response;
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}

0800252a <DS18B20_Write>:
/*
 * @brief	Write a byte to the DS18B20 for start a process
 * @retval	None
 */
static void DS18B20_Write ( uint8_t data )
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	0002      	movs	r2, r0
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	701a      	strb	r2, [r3, #0]

	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002536:	2390      	movs	r3, #144	@ 0x90
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	2104      	movs	r1, #4
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff ff96 	bl	800246e <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e03a      	b.n	80025be <DS18B20_Write+0x94>
	{

		if ((data & (1<<i)) !=0 )	//if the bit is high
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	411a      	asrs	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d019      	beq.n	800258c <DS18B20_Write+0x62>
		{

			//write 1
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002558:	2390      	movs	r3, #144	@ 0x90
 800255a:	05db      	lsls	r3, r3, #23
 800255c:	2104      	movs	r1, #4
 800255e:	0018      	movs	r0, r3
 8002560:	f7ff ff85 	bl	800246e <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8002564:	2390      	movs	r3, #144	@ 0x90
 8002566:	05db      	lsls	r3, r3, #23
 8002568:	2200      	movs	r2, #0
 800256a:	2104      	movs	r1, #4
 800256c:	0018      	movs	r0, r3
 800256e:	f000 ffa6 	bl	80034be <HAL_GPIO_WritePin>
			delay (1);
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff ff3e 	bl	80023f4 <delay>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8002578:	2390      	movs	r3, #144	@ 0x90
 800257a:	05db      	lsls	r3, r3, #23
 800257c:	2104      	movs	r1, #4
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff ff52 	bl	8002428 <Set_Pin_Input>
			delay (60);
 8002584:	203c      	movs	r0, #60	@ 0x3c
 8002586:	f7ff ff35 	bl	80023f4 <delay>
 800258a:	e015      	b.n	80025b8 <DS18B20_Write+0x8e>

		}else //if the bit is low
		{

			//write 0
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 800258c:	2390      	movs	r3, #144	@ 0x90
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	2104      	movs	r1, #4
 8002592:	0018      	movs	r0, r3
 8002594:	f7ff ff6b 	bl	800246e <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8002598:	2390      	movs	r3, #144	@ 0x90
 800259a:	05db      	lsls	r3, r3, #23
 800259c:	2200      	movs	r2, #0
 800259e:	2104      	movs	r1, #4
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 ff8c 	bl	80034be <HAL_GPIO_WritePin>
			delay (60); //wait for 60 us
 80025a6:	203c      	movs	r0, #60	@ 0x3c
 80025a8:	f7ff ff24 	bl	80023f4 <delay>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80025ac:	2390      	movs	r3, #144	@ 0x90
 80025ae:	05db      	lsls	r3, r3, #23
 80025b0:	2104      	movs	r1, #4
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7ff ff38 	bl	8002428 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b07      	cmp	r3, #7
 80025c2:	ddc1      	ble.n	8002548 <DS18B20_Write+0x1e>
		}
	}
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}

080025ce <DS18B20_Read>:
/*
 * @brief	Read byte of the DS18B20 sensor
 * @retval	Byte returned by the DS18B20 sensor
 */
static uint8_t DS18B20_Read (void)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0

	uint8_t value = 0;
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80025da:	2390      	movs	r3, #144	@ 0x90
 80025dc:	05db      	lsls	r3, r3, #23
 80025de:	2104      	movs	r1, #4
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff ff21 	bl	8002428 <Set_Pin_Input>

	for(int i=0; i<8; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	e032      	b.n	8002652 <DS18B20_Read+0x84>
	{
		Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 80025ec:	2390      	movs	r3, #144	@ 0x90
 80025ee:	05db      	lsls	r3, r3, #23
 80025f0:	2104      	movs	r1, #4
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7ff ff3b 	bl	800246e <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80025f8:	2390      	movs	r3, #144	@ 0x90
 80025fa:	05db      	lsls	r3, r3, #23
 80025fc:	2200      	movs	r2, #0
 80025fe:	2104      	movs	r1, #4
 8002600:	0018      	movs	r0, r3
 8002602:	f000 ff5c 	bl	80034be <HAL_GPIO_WritePin>
		delay (2);
 8002606:	2002      	movs	r0, #2
 8002608:	f7ff fef4 	bl	80023f4 <delay>

		Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 800260c:	2390      	movs	r3, #144	@ 0x90
 800260e:	05db      	lsls	r3, r3, #23
 8002610:	2104      	movs	r1, #4
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff ff08 	bl	8002428 <Set_Pin_Input>
		delay (5);
 8002618:	2005      	movs	r0, #5
 800261a:	f7ff feeb 	bl	80023f4 <delay>
		if(HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin))
 800261e:	2390      	movs	r3, #144	@ 0x90
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	2104      	movs	r1, #4
 8002624:	0018      	movs	r0, r3
 8002626:	f000 ff2d 	bl	8003484 <HAL_GPIO_ReadPin>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d00b      	beq.n	8002646 <DS18B20_Read+0x78>
		{
			value |= 1<<i; //read=1
 800262e:	2201      	movs	r2, #1
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	b25a      	sxtb	r2, r3
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b25b      	sxtb	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b25a      	sxtb	r2, r3
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	701a      	strb	r2, [r3, #0]
		}
		delay (60);
 8002646:	203c      	movs	r0, #60	@ 0x3c
 8002648:	f7ff fed4 	bl	80023f4 <delay>
	for(int i=0; i<8; i++)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b07      	cmp	r3, #7
 8002656:	ddc9      	ble.n	80025ec <DS18B20_Read+0x1e>
	}
	return value;
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}

08002664 <convert_temperature>:
 * @param	byte_1 Byte #1 to convert
 * @param	byte_2 Byte #2 to convert
 * @retval	Decimal value of temperature
 */
static float convert_temperature(uint8_t byte_1, uint8_t byte_2)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	0002      	movs	r2, r0
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	1dbb      	adds	r3, r7, #6
 8002672:	1c0a      	adds	r2, r1, #0
 8002674:	701a      	strb	r2, [r3, #0]
	uint16_t tempval = byte_2 << 8 | byte_1;
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b21b      	sxth	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b21a      	sxth	r2, r3
 8002688:	210e      	movs	r1, #14
 800268a:	187b      	adds	r3, r7, r1
 800268c:	801a      	strh	r2, [r3, #0]
	float result_temp = (128.0/2048)*tempval;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff fd72 	bl	800217c <__aeabi_i2d>
 8002698:	2200      	movs	r2, #0
 800269a:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <convert_temperature+0x58>)
 800269c:	f7fe feac 	bl	80013f8 <__aeabi_dmul>
 80026a0:	0002      	movs	r2, r0
 80026a2:	000b      	movs	r3, r1
 80026a4:	0010      	movs	r0, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	f7ff fe02 	bl	80022b0 <__aeabi_d2f>
 80026ac:	1c03      	adds	r3, r0, #0
 80026ae:	60bb      	str	r3, [r7, #8]

	return result_temp;
 80026b0:	68bb      	ldr	r3, [r7, #8]
}
 80026b2:	1c18      	adds	r0, r3, #0
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b004      	add	sp, #16
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	3fb00000 	.word	0x3fb00000

080026c0 <Get_temperature>:
/*
 * @brief	Get the temperature value
 * @retval	float with the temperature value
 */
float Get_temperature( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	Presence = DS18B20_Start();
 80026c4:	f7ff fef6 	bl	80024b4 <DS18B20_Start>
 80026c8:	0003      	movs	r3, r0
 80026ca:	001a      	movs	r2, r3
 80026cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <Get_temperature+0x84>)
 80026ce:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f000 fbe7 	bl	8002ea4 <HAL_Delay>
	DS18B20_Write(SKIP_ROM);
 80026d6:	20cc      	movs	r0, #204	@ 0xcc
 80026d8:	f7ff ff27 	bl	800252a <DS18B20_Write>
	DS18B20_Write(CONVERT_T);
 80026dc:	2044      	movs	r0, #68	@ 0x44
 80026de:	f7ff ff24 	bl	800252a <DS18B20_Write>
	HAL_Delay(800);
 80026e2:	23c8      	movs	r3, #200	@ 0xc8
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fbdc 	bl	8002ea4 <HAL_Delay>

	Presence = DS18B20_Start();
 80026ec:	f7ff fee2 	bl	80024b4 <DS18B20_Start>
 80026f0:	0003      	movs	r3, r0
 80026f2:	001a      	movs	r2, r3
 80026f4:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <Get_temperature+0x84>)
 80026f6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f000 fbd3 	bl	8002ea4 <HAL_Delay>
	DS18B20_Write(SKIP_ROM);
 80026fe:	20cc      	movs	r0, #204	@ 0xcc
 8002700:	f7ff ff13 	bl	800252a <DS18B20_Write>
	DS18B20_Write(READ_SCRATCHPAD);
 8002704:	20be      	movs	r0, #190	@ 0xbe
 8002706:	f7ff ff10 	bl	800252a <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 800270a:	f7ff ff60 	bl	80025ce <DS18B20_Read>
 800270e:	0003      	movs	r3, r0
 8002710:	001a      	movs	r2, r3
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <Get_temperature+0x88>)
 8002714:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 8002716:	f7ff ff5a 	bl	80025ce <DS18B20_Read>
 800271a:	0003      	movs	r3, r0
 800271c:	001a      	movs	r2, r3
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <Get_temperature+0x8c>)
 8002720:	701a      	strb	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1, (const uint8_t *)&read, 6, 1000);
	//size_to_send = sprintf( (char *)&transmit_text, "presence %d el primer %d y el segundo %d \r\n", Presence, Temp_byte1, Temp_byte2);
	//HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, 1000);
	temp_dec = convert_temperature(Temp_byte1, Temp_byte2);
 8002722:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <Get_temperature+0x88>)
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	4b09      	ldr	r3, [pc, #36]	@ (800274c <Get_temperature+0x8c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f7ff ff99 	bl	8002664 <convert_temperature>
 8002732:	1c02      	adds	r2, r0, #0
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <Get_temperature+0x90>)
 8002736:	601a      	str	r2, [r3, #0]

	return temp_dec;
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <Get_temperature+0x90>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	1c18      	adds	r0, r3, #0
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	200001f0 	.word	0x200001f0
 8002748:	200001f1 	.word	0x200001f1
 800274c:	200001f2 	.word	0x200001f2
 8002750:	200001f4 	.word	0x200001f4

08002754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275a:	f000 fb3f 	bl	8002ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800275e:	f000 f835 	bl	80027cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002762:	f000 f91b 	bl	800299c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002766:	f000 f8e9 	bl	800293c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800276a:	f000 f891 	bl	8002890 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <main+0x64>)
 8002770:	0018      	movs	r0, r3
 8002772:	f001 fc3d 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  float temperature = Get_temperature();
 8002776:	f7ff ffa3 	bl	80026c0 <Get_temperature>
 800277a:	1c03      	adds	r3, r0, #0
 800277c:	607b      	str	r3, [r7, #4]
	  size_to_send = sprintf((char *)&transmit_text, "Temperature = %0.2f °C \r\n\n", temperature);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fd4e 	bl	8002220 <__aeabi_f2d>
 8002784:	0002      	movs	r2, r0
 8002786:	000b      	movs	r3, r1
 8002788:	490c      	ldr	r1, [pc, #48]	@ (80027bc <main+0x68>)
 800278a:	480d      	ldr	r0, [pc, #52]	@ (80027c0 <main+0x6c>)
 800278c:	f003 fb76 	bl	8005e7c <siprintf>
 8002790:	0003      	movs	r3, r0
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <main+0x70>)
 8002796:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (const uint8_t *)&transmit_text, size_to_send, 500);
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <main+0x70>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	001a      	movs	r2, r3
 800279e:	23fa      	movs	r3, #250	@ 0xfa
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4907      	ldr	r1, [pc, #28]	@ (80027c0 <main+0x6c>)
 80027a4:	4808      	ldr	r0, [pc, #32]	@ (80027c8 <main+0x74>)
 80027a6:	f001 ff0d 	bl	80045c4 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80027aa:	23fa      	movs	r3, #250	@ 0xfa
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fb78 	bl	8002ea4 <HAL_Delay>
  {
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	e7de      	b.n	8002776 <main+0x22>
 80027b8:	200001f8 	.word	0x200001f8
 80027bc:	08008250 	.word	0x08008250
 80027c0:	200002c8 	.word	0x200002c8
 80027c4:	20000348 	.word	0x20000348
 80027c8:	20000240 	.word	0x20000240

080027cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b095      	sub	sp, #84	@ 0x54
 80027d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d2:	2420      	movs	r4, #32
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	0018      	movs	r0, r3
 80027d8:	2330      	movs	r3, #48	@ 0x30
 80027da:	001a      	movs	r2, r3
 80027dc:	2100      	movs	r1, #0
 80027de:	f003 fbb9 	bl	8005f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e2:	2310      	movs	r3, #16
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	0018      	movs	r0, r3
 80027e8:	2310      	movs	r3, #16
 80027ea:	001a      	movs	r2, r3
 80027ec:	2100      	movs	r1, #0
 80027ee:	f003 fbb1 	bl	8005f54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f2:	003b      	movs	r3, r7
 80027f4:	0018      	movs	r0, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	001a      	movs	r2, r3
 80027fa:	2100      	movs	r1, #0
 80027fc:	f003 fbaa 	bl	8005f54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002800:	0021      	movs	r1, r4
 8002802:	187b      	adds	r3, r7, r1
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	2201      	movs	r2, #1
 800280c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2210      	movs	r2, #16
 8002812:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2202      	movs	r2, #2
 8002818:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2200      	movs	r2, #0
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002820:	187b      	adds	r3, r7, r1
 8002822:	22a0      	movs	r2, #160	@ 0xa0
 8002824:	0392      	lsls	r2, r2, #14
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2200      	movs	r2, #0
 800282c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800282e:	187b      	adds	r3, r7, r1
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fe61 	bl	80034f8 <HAL_RCC_OscConfig>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800283a:	f000 f91d 	bl	8002a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800283e:	2110      	movs	r1, #16
 8002840:	187b      	adds	r3, r7, r1
 8002842:	2207      	movs	r2, #7
 8002844:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002846:	187b      	adds	r3, r7, r1
 8002848:	2202      	movs	r2, #2
 800284a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800284c:	187b      	adds	r3, r7, r1
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2101      	movs	r1, #1
 800285c:	0018      	movs	r0, r3
 800285e:	f001 f965 	bl	8003b2c <HAL_RCC_ClockConfig>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d001      	beq.n	800286a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002866:	f000 f907 	bl	8002a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800286a:	003b      	movs	r3, r7
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002870:	003b      	movs	r3, r7
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002876:	003b      	movs	r3, r7
 8002878:	0018      	movs	r0, r3
 800287a:	f001 fa9b 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002882:	f000 f8f9 	bl	8002a78 <Error_Handler>
  }
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b015      	add	sp, #84	@ 0x54
 800288c:	bd90      	pop	{r4, r7, pc}
	...

08002890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002896:	2308      	movs	r3, #8
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	0018      	movs	r0, r3
 800289c:	2310      	movs	r3, #16
 800289e:	001a      	movs	r2, r3
 80028a0:	2100      	movs	r1, #0
 80028a2:	f003 fb57 	bl	8005f54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a6:	003b      	movs	r3, r7
 80028a8:	0018      	movs	r0, r3
 80028aa:	2308      	movs	r3, #8
 80028ac:	001a      	movs	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f003 fb50 	bl	8005f54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <MX_TIM3_Init+0xa4>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80028ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028bc:	222f      	movs	r2, #47	@ 0x2f
 80028be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <MX_TIM3_Init+0xa8>)
 80028ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028d8:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 fb38 	bl	8003f50 <HAL_TIM_Base_Init>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028e4:	f000 f8c8 	bl	8002a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e8:	2108      	movs	r1, #8
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	2280      	movs	r2, #128	@ 0x80
 80028ee:	0152      	lsls	r2, r2, #5
 80028f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028f2:	187a      	adds	r2, r7, r1
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <MX_TIM3_Init+0xa0>)
 80028f6:	0011      	movs	r1, r2
 80028f8:	0018      	movs	r0, r3
 80028fa:	f001 fbc5 	bl	8004088 <HAL_TIM_ConfigClockSource>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002902:	f000 f8b9 	bl	8002a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002906:	003b      	movs	r3, r7
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	003b      	movs	r3, r7
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002912:	003a      	movs	r2, r7
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <MX_TIM3_Init+0xa0>)
 8002916:	0011      	movs	r1, r2
 8002918:	0018      	movs	r0, r3
 800291a:	f001 fda7 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002922:	f000 f8a9 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b006      	add	sp, #24
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	200001f8 	.word	0x200001f8
 8002934:	40000400 	.word	0x40000400
 8002938:	0000fffe 	.word	0x0000fffe

0800293c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002942:	4a15      	ldr	r2, [pc, #84]	@ (8002998 <MX_USART1_UART_Init+0x5c>)
 8002944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002948:	22e1      	movs	r2, #225	@ 0xe1
 800294a:	0252      	lsls	r2, r2, #9
 800294c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <MX_USART1_UART_Init+0x58>)
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fdcb 	bl	800451c <HAL_UART_Init>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d001      	beq.n	800298e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800298a:	f000 f875 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000240 	.word	0x20000240
 8002998:	40013800 	.word	0x40013800

0800299c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	240c      	movs	r4, #12
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	2314      	movs	r3, #20
 80029aa:	001a      	movs	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f003 fad1 	bl	8005f54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <MX_GPIO_Init+0xd0>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <MX_GPIO_Init+0xd0>)
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	0289      	lsls	r1, r1, #10
 80029bc:	430a      	orrs	r2, r1
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <MX_GPIO_Init+0xd0>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <MX_GPIO_Init+0xd0>)
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <MX_GPIO_Init+0xd0>)
 80029d4:	2180      	movs	r1, #128	@ 0x80
 80029d6:	02c9      	lsls	r1, r1, #11
 80029d8:	430a      	orrs	r2, r1
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <MX_GPIO_Init+0xd0>)
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	02db      	lsls	r3, r3, #11
 80029e4:	4013      	ands	r3, r2
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|R_SPEED_LED_Pin, GPIO_PIN_RESET);
 80029ea:	2390      	movs	r3, #144	@ 0x90
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	2200      	movs	r2, #0
 80029f0:	2184      	movs	r1, #132	@ 0x84
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 fd63 	bl	80034be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_SPEED_LED_Pin|B_SPEED_LED_Pin|R_TEMP_LED_Pin|G_TEMP_LED_Pin
 80029f8:	491d      	ldr	r1, [pc, #116]	@ (8002a70 <MX_GPIO_Init+0xd4>)
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <MX_GPIO_Init+0xd8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fd5d 	bl	80034be <HAL_GPIO_WritePin>
                          |B_TEMP_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SETTING_LED_GPIO_Port, SETTING_LED_Pin, GPIO_PIN_SET);
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	0059      	lsls	r1, r3, #1
 8002a08:	2390      	movs	r3, #144	@ 0x90
 8002a0a:	05db      	lsls	r3, r3, #23
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fd55 	bl	80034be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DS18B20_Pin R_SPEED_LED_Pin SETTING_LED_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin|R_SPEED_LED_Pin|SETTING_LED_Pin;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	22c2      	movs	r2, #194	@ 0xc2
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	2201      	movs	r2, #1
 8002a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	193a      	adds	r2, r7, r4
 8002a30:	2390      	movs	r3, #144	@ 0x90
 8002a32:	05db      	lsls	r3, r3, #23
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fbb4 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_SPEED_LED_Pin B_SPEED_LED_Pin R_TEMP_LED_Pin G_TEMP_LED_Pin
                           B_TEMP_LED_Pin */
  GPIO_InitStruct.Pin = G_SPEED_LED_Pin|B_SPEED_LED_Pin|R_TEMP_LED_Pin|G_TEMP_LED_Pin
 8002a3c:	0021      	movs	r1, r4
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <MX_GPIO_Init+0xd4>)
 8002a42:	601a      	str	r2, [r3, #0]
                          |B_TEMP_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2201      	movs	r2, #1
 8002a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	4a06      	ldr	r2, [pc, #24]	@ (8002a74 <MX_GPIO_Init+0xd8>)
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	f000 fba1 	bl	80031a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b009      	add	sp, #36	@ 0x24
 8002a68:	bd90      	pop	{r4, r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	00000c07 	.word	0x00000c07
 8002a74:	48000400 	.word	0x48000400

08002a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a7c:	b672      	cpsid	i
}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a80:	46c0      	nop			@ (mov r8, r8)
 8002a82:	e7fd      	b.n	8002a80 <Error_Handler+0x8>

08002a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a90:	2101      	movs	r1, #1
 8002a92:	430a      	orrs	r2, r1
 8002a94:	619a      	str	r2, [r3, #24]
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002aa8:	2180      	movs	r1, #128	@ 0x80
 8002aaa:	0549      	lsls	r1, r1, #21
 8002aac:	430a      	orrs	r2, r1
 8002aae:	61da      	str	r2, [r3, #28]
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	055b      	lsls	r3, r3, #21
 8002ab8:	4013      	ands	r3, r2
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <HAL_TIM_Base_MspInit+0x34>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10b      	bne.n	8002af6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_TIM_Base_MspInit+0x38>)
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_TIM_Base_MspInit+0x38>)
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	61da      	str	r2, [r3, #28]
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_TIM_Base_MspInit+0x38>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2202      	movs	r2, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b08b      	sub	sp, #44	@ 0x2c
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	2414      	movs	r4, #20
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	0018      	movs	r0, r3
 8002b16:	2314      	movs	r3, #20
 8002b18:	001a      	movs	r2, r3
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f003 fa1a 	bl	8005f54 <memset>
  if(huart->Instance==USART1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a20      	ldr	r2, [pc, #128]	@ (8002ba8 <HAL_UART_MspInit+0xa0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d139      	bne.n	8002b9e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <HAL_UART_MspInit+0xa4>)
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_UART_MspInit+0xa4>)
 8002b30:	2180      	movs	r1, #128	@ 0x80
 8002b32:	01c9      	lsls	r1, r1, #7
 8002b34:	430a      	orrs	r2, r1
 8002b36:	619a      	str	r2, [r3, #24]
 8002b38:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <HAL_UART_MspInit+0xa4>)
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	01db      	lsls	r3, r3, #7
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_UART_MspInit+0xa4>)
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <HAL_UART_MspInit+0xa4>)
 8002b4c:	2180      	movs	r1, #128	@ 0x80
 8002b4e:	02c9      	lsls	r1, r1, #11
 8002b50:	430a      	orrs	r2, r1
 8002b52:	615a      	str	r2, [r3, #20]
 8002b54:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <HAL_UART_MspInit+0xa4>)
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	2380      	movs	r3, #128	@ 0x80
 8002b5a:	02db      	lsls	r3, r3, #11
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002b62:	0021      	movs	r1, r4
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	22c0      	movs	r2, #192	@ 0xc0
 8002b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <HAL_UART_MspInit+0xa8>)
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f000 fb0b 	bl	80031a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	201b      	movs	r0, #27
 8002b94:	f000 fa56 	bl	8003044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b98:	201b      	movs	r0, #27
 8002b9a:	f000 fa68 	bl	800306e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b00b      	add	sp, #44	@ 0x2c
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48000400 	.word	0x48000400

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	e7fd      	b.n	8002bb8 <NMI_Handler+0x4>

08002bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc0:	46c0      	nop			@ (mov r8, r8)
 8002bc2:	e7fd      	b.n	8002bc0 <HardFault_Handler+0x4>

08002bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bdc:	f000 f946 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <USART1_IRQHandler+0x14>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f001 fd88 	bl	8004704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	20000240 	.word	0x20000240

08002c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  return 1;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_kill>:

int _kill(int pid, int sig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c16:	f003 f9f7 	bl	8006008 <__errno>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	2216      	movs	r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	425b      	negs	r3, r3
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_exit>:

void _exit (int status)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c34:	2301      	movs	r3, #1
 8002c36:	425a      	negs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff ffe5 	bl	8002c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	e7fd      	b.n	8002c42 <_exit+0x16>

08002c46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e00a      	b.n	8002c6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c58:	e000      	b.n	8002c5c <_read+0x16>
 8002c5a:	bf00      	nop
 8002c5c:	0001      	movs	r1, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	60ba      	str	r2, [r7, #8]
 8002c64:	b2ca      	uxtb	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbf0      	blt.n	8002c58 <_read+0x12>
  }

  return len;
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b006      	add	sp, #24
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e009      	b.n	8002ca6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	60ba      	str	r2, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	e000      	b.n	8002ca0 <_write+0x20>
 8002c9e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dbf1      	blt.n	8002c92 <_write+0x12>
  }
  return len;
 8002cae:	687b      	ldr	r3, [r7, #4]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b006      	add	sp, #24
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_close>:

int _close(int file)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	425b      	negs	r3, r3
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2280      	movs	r2, #128	@ 0x80
 8002cda:	0192      	lsls	r2, r2, #6
 8002cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_isatty>:

int _isatty(int file)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cf0:	2301      	movs	r3, #1
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <_sbrk+0x5c>)
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <_sbrk+0x60>)
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <_sbrk+0x64>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	@ (8002d78 <_sbrk+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	18d3      	adds	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d40:	f003 f962 	bl	8006008 <__errno>
 8002d44:	0003      	movs	r3, r0
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	e009      	b.n	8002d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d50:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d56:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	18d2      	adds	r2, r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <_sbrk+0x64>)
 8002d60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b006      	add	sp, #24
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20002000 	.word	0x20002000
 8002d70:	00000400 	.word	0x00000400
 8002d74:	2000034c 	.word	0x2000034c
 8002d78:	200004a0 	.word	0x200004a0

08002d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d80:	46c0      	nop			@ (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d88:	480d      	ldr	r0, [pc, #52]	@ (8002dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d8c:	f7ff fff6 	bl	8002d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d90:	480c      	ldr	r0, [pc, #48]	@ (8002dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d92:	490d      	ldr	r1, [pc, #52]	@ (8002dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d94:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <LoopForever+0xe>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d98:	e002      	b.n	8002da0 <LoopCopyDataInit>

08002d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9e:	3304      	adds	r3, #4

08002da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da4:	d3f9      	bcc.n	8002d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da6:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002da8:	4c0a      	ldr	r4, [pc, #40]	@ (8002dd4 <LoopForever+0x16>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dac:	e001      	b.n	8002db2 <LoopFillZerobss>

08002dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db0:	3204      	adds	r2, #4

08002db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db4:	d3fb      	bcc.n	8002dae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002db6:	f003 f92d 	bl	8006014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dba:	f7ff fccb 	bl	8002754 <main>

08002dbe <LoopForever>:

LoopForever:
    b LoopForever
 8002dbe:	e7fe      	b.n	8002dbe <LoopForever>
  ldr   r0, =_estack
 8002dc0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002dcc:	08008660 	.word	0x08008660
  ldr r2, =_sbss
 8002dd0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002dd4:	200004a0 	.word	0x200004a0

08002dd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <ADC1_IRQHandler>
	...

08002ddc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de0:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <HAL_Init+0x24>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_Init+0x24>)
 8002de6:	2110      	movs	r1, #16
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f000 f809 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df2:	f7ff fe47 	bl	8002a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	40022000 	.word	0x40022000

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <HAL_InitTick+0x5c>)
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_InitTick+0x60>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	0019      	movs	r1, r3
 8002e16:	23fa      	movs	r3, #250	@ 0xfa
 8002e18:	0098      	lsls	r0, r3, #2
 8002e1a:	f7fd f991 	bl	8000140 <__udivsi3>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	0019      	movs	r1, r3
 8002e22:	0020      	movs	r0, r4
 8002e24:	f7fd f98c 	bl	8000140 <__udivsi3>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 f92f 	bl	800308e <HAL_SYSTICK_Config>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e00f      	b.n	8002e58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d80b      	bhi.n	8002e56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	2301      	movs	r3, #1
 8002e42:	425b      	negs	r3, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f8fc 	bl	8003044 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_InitTick+0x64>)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b003      	add	sp, #12
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000008 	.word	0x20000008
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_IncTick+0x1c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_IncTick+0x20>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	18d2      	adds	r2, r2, r3
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_IncTick+0x20>)
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	20000350 	.word	0x20000350

08002e90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b02      	ldr	r3, [pc, #8]	@ (8002ea0 <HAL_GetTick+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	20000350 	.word	0x20000350

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	f7ff ffe0 	bl	8002e90 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	20000008 	.word	0x20000008

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002efe:	d809      	bhi.n	8002f14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	001a      	movs	r2, r3
 8002f06:	231f      	movs	r3, #31
 8002f08:	401a      	ands	r2, r3
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <__NVIC_EnableIRQ+0x30>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4091      	lsls	r1, r2
 8002f10:	000a      	movs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
  }
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	0002      	movs	r2, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	1dfb      	adds	r3, r7, #7
 8002f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f34:	d828      	bhi.n	8002f88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff4 <__NVIC_SetPriority+0xd4>)
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	33c0      	adds	r3, #192	@ 0xc0
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	589b      	ldr	r3, [r3, r2]
 8002f46:	1dfa      	adds	r2, r7, #7
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	400a      	ands	r2, r1
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	21ff      	movs	r1, #255	@ 0xff
 8002f54:	4091      	lsls	r1, r2
 8002f56:	000a      	movs	r2, r1
 8002f58:	43d2      	mvns	r2, r2
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	019b      	lsls	r3, r3, #6
 8002f62:	22ff      	movs	r2, #255	@ 0xff
 8002f64:	401a      	ands	r2, r3
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	4003      	ands	r3, r0
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f74:	481f      	ldr	r0, [pc, #124]	@ (8002ff4 <__NVIC_SetPriority+0xd4>)
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	33c0      	adds	r3, #192	@ 0xc0
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f86:	e031      	b.n	8002fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f88:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <__NVIC_SetPriority+0xd8>)
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	0019      	movs	r1, r3
 8002f90:	230f      	movs	r3, #15
 8002f92:	400b      	ands	r3, r1
 8002f94:	3b08      	subs	r3, #8
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3306      	adds	r3, #6
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	18d3      	adds	r3, r2, r3
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1dfa      	adds	r2, r7, #7
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	2203      	movs	r2, #3
 8002faa:	400a      	ands	r2, r1
 8002fac:	00d2      	lsls	r2, r2, #3
 8002fae:	21ff      	movs	r1, #255	@ 0xff
 8002fb0:	4091      	lsls	r1, r2
 8002fb2:	000a      	movs	r2, r1
 8002fb4:	43d2      	mvns	r2, r2
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	22ff      	movs	r2, #255	@ 0xff
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	2303      	movs	r3, #3
 8002fca:	4003      	ands	r3, r0
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd0:	4809      	ldr	r0, [pc, #36]	@ (8002ff8 <__NVIC_SetPriority+0xd8>)
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	001c      	movs	r4, r3
 8002fd8:	230f      	movs	r3, #15
 8002fda:	4023      	ands	r3, r4
 8002fdc:	3b08      	subs	r3, #8
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	3306      	adds	r3, #6
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	18c3      	adds	r3, r0, r3
 8002fe8:	3304      	adds	r3, #4
 8002fea:	601a      	str	r2, [r3, #0]
}
 8002fec:	46c0      	nop			@ (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b003      	add	sp, #12
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	045b      	lsls	r3, r3, #17
 800300c:	429a      	cmp	r2, r3
 800300e:	d301      	bcc.n	8003014 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003010:	2301      	movs	r3, #1
 8003012:	e010      	b.n	8003036 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003014:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <SysTick_Config+0x44>)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	3a01      	subs	r2, #1
 800301a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301c:	2301      	movs	r3, #1
 800301e:	425b      	negs	r3, r3
 8003020:	2103      	movs	r1, #3
 8003022:	0018      	movs	r0, r3
 8003024:	f7ff ff7c 	bl	8002f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x44>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x44>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	210f      	movs	r1, #15
 8003050:	187b      	adds	r3, r7, r1
 8003052:	1c02      	adds	r2, r0, #0
 8003054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	187b      	adds	r3, r7, r1
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b25b      	sxtb	r3, r3
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff ff5d 	bl	8002f20 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b004      	add	sp, #16
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	0002      	movs	r2, r0
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307a:	1dfb      	adds	r3, r7, #7
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff ff33 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff ffaf 	bl	8002ffc <SysTick_Config>
 800309e:	0003      	movs	r3, r0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2221      	movs	r2, #33	@ 0x21
 80030b4:	5c9b      	ldrb	r3, [r3, r2]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2204      	movs	r2, #4
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	210e      	movs	r1, #14
 80030da:	438a      	bics	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	438a      	bics	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	2101      	movs	r1, #1
 80030f8:	4091      	lsls	r1, r2
 80030fa:	000a      	movs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2221      	movs	r2, #33	@ 0x21
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	210f      	movs	r1, #15
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2221      	movs	r2, #33	@ 0x21
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d006      	beq.n	8003142 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2204      	movs	r2, #4
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e028      	b.n	8003194 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	210e      	movs	r1, #14
 800314e:	438a      	bics	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	438a      	bics	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	2101      	movs	r1, #1
 800316c:	4091      	lsls	r1, r2
 800316e:	000a      	movs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2221      	movs	r2, #33	@ 0x21
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	2100      	movs	r1, #0
 8003180:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	0010      	movs	r0, r2
 8003192:	4798      	blx	r3
    }
  }
  return status;
 8003194:	230f      	movs	r3, #15
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031b2:	e14f      	b.n	8003454 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4091      	lsls	r1, r2
 80031be:	000a      	movs	r2, r1
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d100      	bne.n	80031cc <HAL_GPIO_Init+0x28>
 80031ca:	e140      	b.n	800344e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d005      	beq.n	80031e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2203      	movs	r2, #3
 80031de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d130      	bne.n	8003246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	409a      	lsls	r2, r3
 80031f2:	0013      	movs	r3, r2
 80031f4:	43da      	mvns	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	0013      	movs	r3, r2
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321a:	2201      	movs	r2, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	43da      	mvns	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	2201      	movs	r2, #1
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	4013      	ands	r3, r2
 800324e:	2b03      	cmp	r3, #3
 8003250:	d017      	beq.n	8003282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	409a      	lsls	r2, r3
 8003260:	0013      	movs	r3, r2
 8003262:	43da      	mvns	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	0013      	movs	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2203      	movs	r2, #3
 8003288:	4013      	ands	r3, r2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d123      	bne.n	80032d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	0092      	lsls	r2, r2, #2
 8003298:	58d3      	ldr	r3, [r2, r3]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2207      	movs	r2, #7
 80032a0:	4013      	ands	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	409a      	lsls	r2, r3
 80032a8:	0013      	movs	r3, r2
 80032aa:	43da      	mvns	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2107      	movs	r1, #7
 80032ba:	400b      	ands	r3, r1
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	409a      	lsls	r2, r3
 80032c0:	0013      	movs	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	6939      	ldr	r1, [r7, #16]
 80032d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	43da      	mvns	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2203      	movs	r2, #3
 80032f4:	401a      	ands	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	0013      	movs	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	23c0      	movs	r3, #192	@ 0xc0
 8003310:	029b      	lsls	r3, r3, #10
 8003312:	4013      	ands	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_GPIO_Init+0x174>
 8003316:	e09a      	b.n	800344e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003318:	4b54      	ldr	r3, [pc, #336]	@ (800346c <HAL_GPIO_Init+0x2c8>)
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_GPIO_Init+0x2c8>)
 800331e:	2101      	movs	r1, #1
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
 8003324:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_GPIO_Init+0x2c8>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2201      	movs	r2, #1
 800332a:	4013      	ands	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003330:	4a4f      	ldr	r2, [pc, #316]	@ (8003470 <HAL_GPIO_Init+0x2cc>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	589b      	ldr	r3, [r3, r2]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2203      	movs	r2, #3
 8003342:	4013      	ands	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	220f      	movs	r2, #15
 8003348:	409a      	lsls	r2, r3
 800334a:	0013      	movs	r3, r2
 800334c:	43da      	mvns	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	2390      	movs	r3, #144	@ 0x90
 8003358:	05db      	lsls	r3, r3, #23
 800335a:	429a      	cmp	r2, r3
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x1e2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a44      	ldr	r2, [pc, #272]	@ (8003474 <HAL_GPIO_Init+0x2d0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x1de>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a43      	ldr	r2, [pc, #268]	@ (8003478 <HAL_GPIO_Init+0x2d4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x1da>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a42      	ldr	r2, [pc, #264]	@ (800347c <HAL_GPIO_Init+0x2d8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x1d6>
 8003376:	2303      	movs	r3, #3
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x1e4>
 800337a:	2305      	movs	r3, #5
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x1e4>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x1e4>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x1e4>
 8003386:	2300      	movs	r3, #0
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	2103      	movs	r1, #3
 800338c:	400a      	ands	r2, r1
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003398:	4935      	ldr	r1, [pc, #212]	@ (8003470 <HAL_GPIO_Init+0x2cc>)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43da      	mvns	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	035b      	lsls	r3, r3, #13
 80033be:	4013      	ands	r3, r2
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43da      	mvns	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	2380      	movs	r3, #128	@ 0x80
 80033e6:	039b      	lsls	r3, r3, #14
 80033e8:	4013      	ands	r3, r2
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033f4:	4b22      	ldr	r3, [pc, #136]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80033fa:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43da      	mvns	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	4013      	ands	r3, r2
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800341e:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003424:	4b16      	ldr	r3, [pc, #88]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	43da      	mvns	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	4013      	ands	r3, r2
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003448:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <HAL_GPIO_Init+0x2dc>)
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	40da      	lsrs	r2, r3
 800345c:	1e13      	subs	r3, r2, #0
 800345e:	d000      	beq.n	8003462 <HAL_GPIO_Init+0x2be>
 8003460:	e6a8      	b.n	80031b4 <HAL_GPIO_Init+0x10>
  } 
}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b006      	add	sp, #24
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	40010000 	.word	0x40010000
 8003474:	48000400 	.word	0x48000400
 8003478:	48000800 	.word	0x48000800
 800347c:	48000c00 	.word	0x48000c00
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	000a      	movs	r2, r1
 800348e:	1cbb      	adds	r3, r7, #2
 8003490:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	1cba      	adds	r2, r7, #2
 8003498:	8812      	ldrh	r2, [r2, #0]
 800349a:	4013      	ands	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800349e:	230f      	movs	r3, #15
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034a8:	230f      	movs	r3, #15
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80034b0:	230f      	movs	r3, #15
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
  }
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	0008      	movs	r0, r1
 80034c8:	0011      	movs	r1, r2
 80034ca:	1cbb      	adds	r3, r7, #2
 80034cc:	1c02      	adds	r2, r0, #0
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	1c7b      	adds	r3, r7, #1
 80034d2:	1c0a      	adds	r2, r1, #0
 80034d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d6:	1c7b      	adds	r3, r7, #1
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034de:	1cbb      	adds	r3, r7, #2
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e6:	e003      	b.n	80034f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034e8:	1cbb      	adds	r3, r7, #2
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e301      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2201      	movs	r2, #1
 8003510:	4013      	ands	r3, r2
 8003512:	d100      	bne.n	8003516 <HAL_RCC_OscConfig+0x1e>
 8003514:	e08d      	b.n	8003632 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003516:	4bc3      	ldr	r3, [pc, #780]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	220c      	movs	r2, #12
 800351c:	4013      	ands	r3, r2
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00e      	beq.n	8003540 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003522:	4bc0      	ldr	r3, [pc, #768]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	220c      	movs	r2, #12
 8003528:	4013      	ands	r3, r2
 800352a:	2b08      	cmp	r3, #8
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x64>
 800352e:	4bbd      	ldr	r3, [pc, #756]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	2380      	movs	r3, #128	@ 0x80
 8003534:	025b      	lsls	r3, r3, #9
 8003536:	401a      	ands	r2, r3
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	025b      	lsls	r3, r3, #9
 800353c:	429a      	cmp	r2, r3
 800353e:	d10d      	bne.n	800355c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4bb8      	ldr	r3, [pc, #736]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	4013      	ands	r3, r2
 800354a:	d100      	bne.n	800354e <HAL_RCC_OscConfig+0x56>
 800354c:	e070      	b.n	8003630 <HAL_RCC_OscConfig+0x138>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d000      	beq.n	8003558 <HAL_RCC_OscConfig+0x60>
 8003556:	e06b      	b.n	8003630 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e2d8      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x7c>
 8003564:	4baf      	ldr	r3, [pc, #700]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4bae      	ldr	r3, [pc, #696]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800356a:	2180      	movs	r1, #128	@ 0x80
 800356c:	0249      	lsls	r1, r1, #9
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e02f      	b.n	80035d4 <HAL_RCC_OscConfig+0xdc>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x9e>
 800357c:	4ba9      	ldr	r3, [pc, #676]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4ba8      	ldr	r3, [pc, #672]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003582:	49a9      	ldr	r1, [pc, #676]	@ (8003828 <HAL_RCC_OscConfig+0x330>)
 8003584:	400a      	ands	r2, r1
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	4ba6      	ldr	r3, [pc, #664]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4ba5      	ldr	r3, [pc, #660]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800358e:	49a7      	ldr	r1, [pc, #668]	@ (800382c <HAL_RCC_OscConfig+0x334>)
 8003590:	400a      	ands	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e01e      	b.n	80035d4 <HAL_RCC_OscConfig+0xdc>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10e      	bne.n	80035bc <HAL_RCC_OscConfig+0xc4>
 800359e:	4ba1      	ldr	r3, [pc, #644]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	2180      	movs	r1, #128	@ 0x80
 80035a6:	02c9      	lsls	r1, r1, #11
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b9c      	ldr	r3, [pc, #624]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	0249      	lsls	r1, r1, #9
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0xdc>
 80035bc:	4b99      	ldr	r3, [pc, #612]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b98      	ldr	r3, [pc, #608]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035c2:	4999      	ldr	r1, [pc, #612]	@ (8003828 <HAL_RCC_OscConfig+0x330>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	4b96      	ldr	r3, [pc, #600]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b95      	ldr	r3, [pc, #596]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035ce:	4997      	ldr	r1, [pc, #604]	@ (800382c <HAL_RCC_OscConfig+0x334>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d014      	beq.n	8003606 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7ff fc58 	bl	8002e90 <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e6:	f7ff fc53 	bl	8002e90 <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	@ 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e28a      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	029b      	lsls	r3, r3, #10
 8003600:	4013      	ands	r3, r2
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0xee>
 8003604:	e015      	b.n	8003632 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7ff fc43 	bl	8002e90 <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7ff fc3e 	bl	8002e90 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e275      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b80      	ldr	r3, [pc, #512]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	@ 0x80
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	4013      	ands	r3, r2
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x118>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d100      	bne.n	800363e <HAL_RCC_OscConfig+0x146>
 800363c:	e069      	b.n	8003712 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800363e:	4b79      	ldr	r3, [pc, #484]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	220c      	movs	r2, #12
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003648:	4b76      	ldr	r3, [pc, #472]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	220c      	movs	r2, #12
 800364e:	4013      	ands	r3, r2
 8003650:	2b08      	cmp	r3, #8
 8003652:	d11c      	bne.n	800368e <HAL_RCC_OscConfig+0x196>
 8003654:	4b73      	ldr	r3, [pc, #460]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	025b      	lsls	r3, r3, #9
 800365c:	4013      	ands	r3, r2
 800365e:	d116      	bne.n	800368e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003660:	4b70      	ldr	r3, [pc, #448]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2202      	movs	r2, #2
 8003666:	4013      	ands	r3, r2
 8003668:	d005      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e24b      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	4b6b      	ldr	r3, [pc, #428]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	22f8      	movs	r2, #248	@ 0xf8
 800367c:	4393      	bics	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00da      	lsls	r2, r3, #3
 8003686:	4b67      	ldr	r3, [pc, #412]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368c:	e041      	b.n	8003712 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d024      	beq.n	80036e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003696:	4b63      	ldr	r3, [pc, #396]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b62      	ldr	r3, [pc, #392]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800369c:	2101      	movs	r1, #1
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7ff fbf5 	bl	8002e90 <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ac:	f7ff fbf0 	bl	8002e90 <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e227      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4b59      	ldr	r3, [pc, #356]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2202      	movs	r2, #2
 80036c4:	4013      	ands	r3, r2
 80036c6:	d0f1      	beq.n	80036ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b56      	ldr	r3, [pc, #344]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	22f8      	movs	r2, #248	@ 0xf8
 80036ce:	4393      	bics	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00da      	lsls	r2, r3, #3
 80036d8:	4b52      	ldr	r3, [pc, #328]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e018      	b.n	8003712 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e0:	4b50      	ldr	r3, [pc, #320]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7ff fbd0 	bl	8002e90 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f6:	f7ff fbcb 	bl	8002e90 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e202      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003708:	4b46      	ldr	r3, [pc, #280]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2202      	movs	r2, #2
 800370e:	4013      	ands	r3, r2
 8003710:	d1f1      	bne.n	80036f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2208      	movs	r2, #8
 8003718:	4013      	ands	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d019      	beq.n	8003758 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003724:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003728:	4b3e      	ldr	r3, [pc, #248]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800372a:	2101      	movs	r1, #1
 800372c:	430a      	orrs	r2, r1
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7ff fbae 	bl	8002e90 <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7ff fba9 	bl	8002e90 <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1e0      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	4b35      	ldr	r3, [pc, #212]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	2202      	movs	r2, #2
 8003752:	4013      	ands	r3, r2
 8003754:	d0f1      	beq.n	800373a <HAL_RCC_OscConfig+0x242>
 8003756:	e018      	b.n	800378a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003758:	4b32      	ldr	r3, [pc, #200]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800375a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800375c:	4b31      	ldr	r3, [pc, #196]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800375e:	2101      	movs	r1, #1
 8003760:	438a      	bics	r2, r1
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003764:	f7ff fb94 	bl	8002e90 <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800376e:	f7ff fb8f 	bl	8002e90 <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e1c6      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b28      	ldr	r3, [pc, #160]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d1f1      	bne.n	800376e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2204      	movs	r2, #4
 8003790:	4013      	ands	r3, r2
 8003792:	d100      	bne.n	8003796 <HAL_RCC_OscConfig+0x29e>
 8003794:	e0b4      	b.n	8003900 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	201f      	movs	r0, #31
 8003798:	183b      	adds	r3, r7, r0
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b21      	ldr	r3, [pc, #132]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	055b      	lsls	r3, r3, #21
 80037a6:	4013      	ands	r3, r2
 80037a8:	d110      	bne.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80037b0:	2180      	movs	r1, #128	@ 0x80
 80037b2:	0549      	lsls	r1, r1, #21
 80037b4:	430a      	orrs	r2, r1
 80037b6:	61da      	str	r2, [r3, #28]
 80037b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	055b      	lsls	r3, r3, #21
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4b18      	ldr	r3, [pc, #96]	@ (8003830 <HAL_RCC_OscConfig+0x338>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	d11a      	bne.n	800380e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d8:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <HAL_RCC_OscConfig+0x338>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <HAL_RCC_OscConfig+0x338>)
 80037de:	2180      	movs	r1, #128	@ 0x80
 80037e0:	0049      	lsls	r1, r1, #1
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7ff fb53 	bl	8002e90 <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7ff fb4e 	bl	8002e90 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	@ 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e185      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_OscConfig+0x338>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10e      	bne.n	8003834 <HAL_RCC_OscConfig+0x33c>
 8003816:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	4b02      	ldr	r3, [pc, #8]	@ (8003824 <HAL_RCC_OscConfig+0x32c>)
 800381c:	2101      	movs	r1, #1
 800381e:	430a      	orrs	r2, r1
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	e035      	b.n	8003890 <HAL_RCC_OscConfig+0x398>
 8003824:	40021000 	.word	0x40021000
 8003828:	fffeffff 	.word	0xfffeffff
 800382c:	fffbffff 	.word	0xfffbffff
 8003830:	40007000 	.word	0x40007000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x35e>
 800383c:	4bb6      	ldr	r3, [pc, #728]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	4bb5      	ldr	r3, [pc, #724]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003842:	2101      	movs	r1, #1
 8003844:	438a      	bics	r2, r1
 8003846:	621a      	str	r2, [r3, #32]
 8003848:	4bb3      	ldr	r3, [pc, #716]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	4bb2      	ldr	r3, [pc, #712]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800384e:	2104      	movs	r1, #4
 8003850:	438a      	bics	r2, r1
 8003852:	621a      	str	r2, [r3, #32]
 8003854:	e01c      	b.n	8003890 <HAL_RCC_OscConfig+0x398>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b05      	cmp	r3, #5
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x380>
 800385e:	4bae      	ldr	r3, [pc, #696]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	4bad      	ldr	r3, [pc, #692]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003864:	2104      	movs	r1, #4
 8003866:	430a      	orrs	r2, r1
 8003868:	621a      	str	r2, [r3, #32]
 800386a:	4bab      	ldr	r3, [pc, #684]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	4baa      	ldr	r3, [pc, #680]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003870:	2101      	movs	r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	621a      	str	r2, [r3, #32]
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0x398>
 8003878:	4ba7      	ldr	r3, [pc, #668]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	4ba6      	ldr	r3, [pc, #664]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800387e:	2101      	movs	r1, #1
 8003880:	438a      	bics	r2, r1
 8003882:	621a      	str	r2, [r3, #32]
 8003884:	4ba4      	ldr	r3, [pc, #656]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	4ba3      	ldr	r3, [pc, #652]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800388a:	2104      	movs	r1, #4
 800388c:	438a      	bics	r2, r1
 800388e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d014      	beq.n	80038c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7ff fafa 	bl	8002e90 <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e009      	b.n	80038b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7ff faf5 	bl	8002e90 <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	4a9b      	ldr	r2, [pc, #620]	@ (8003b1c <HAL_RCC_OscConfig+0x624>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e12b      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b6:	4b98      	ldr	r3, [pc, #608]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2202      	movs	r2, #2
 80038bc:	4013      	ands	r3, r2
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x3aa>
 80038c0:	e013      	b.n	80038ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7ff fae5 	bl	8002e90 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7ff fae0 	bl	8002e90 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a91      	ldr	r2, [pc, #580]	@ (8003b1c <HAL_RCC_OscConfig+0x624>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e116      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	2202      	movs	r2, #2
 80038e6:	4013      	ands	r3, r2
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ea:	231f      	movs	r3, #31
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b88      	ldr	r3, [pc, #544]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	4b87      	ldr	r3, [pc, #540]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80038fa:	4989      	ldr	r1, [pc, #548]	@ (8003b20 <HAL_RCC_OscConfig+0x628>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2210      	movs	r2, #16
 8003906:	4013      	ands	r3, r2
 8003908:	d063      	beq.n	80039d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d12a      	bne.n	8003968 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003912:	4b81      	ldr	r3, [pc, #516]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003916:	4b80      	ldr	r3, [pc, #512]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003918:	2104      	movs	r1, #4
 800391a:	430a      	orrs	r2, r1
 800391c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800391e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003922:	4b7d      	ldr	r3, [pc, #500]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003924:	2101      	movs	r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7ff fab1 	bl	8002e90 <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003934:	f7ff faac 	bl	8002e90 <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0e3      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003946:	4b74      	ldr	r3, [pc, #464]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	d0f1      	beq.n	8003934 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003950:	4b71      	ldr	r3, [pc, #452]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003954:	22f8      	movs	r2, #248	@ 0xf8
 8003956:	4393      	bics	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	00da      	lsls	r2, r3, #3
 8003960:	4b6d      	ldr	r3, [pc, #436]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003962:	430a      	orrs	r2, r1
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
 8003966:	e034      	b.n	80039d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	3305      	adds	r3, #5
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003970:	4b69      	ldr	r3, [pc, #420]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003974:	4b68      	ldr	r3, [pc, #416]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003976:	2104      	movs	r1, #4
 8003978:	438a      	bics	r2, r1
 800397a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800397c:	4b66      	ldr	r3, [pc, #408]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	22f8      	movs	r2, #248	@ 0xf8
 8003982:	4393      	bics	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	00da      	lsls	r2, r3, #3
 800398c:	4b62      	ldr	r3, [pc, #392]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800398e:	430a      	orrs	r2, r1
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34
 8003992:	e01e      	b.n	80039d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003994:	4b60      	ldr	r3, [pc, #384]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003998:	4b5f      	ldr	r3, [pc, #380]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 800399a:	2104      	movs	r1, #4
 800399c:	430a      	orrs	r2, r1
 800399e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80039a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80039a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	438a      	bics	r2, r1
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7ff fa70 	bl	8002e90 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039b6:	f7ff fa6b 	bl	8002e90 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0a2      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039c8:	4b53      	ldr	r3, [pc, #332]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	2202      	movs	r2, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	d1f1      	bne.n	80039b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d100      	bne.n	80039dc <HAL_RCC_OscConfig+0x4e4>
 80039da:	e097      	b.n	8003b0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	220c      	movs	r2, #12
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x4f2>
 80039e8:	e06b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d14c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b49      	ldr	r3, [pc, #292]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b48      	ldr	r3, [pc, #288]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 80039f8:	494a      	ldr	r1, [pc, #296]	@ (8003b24 <HAL_RCC_OscConfig+0x62c>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7ff fa47 	bl	8002e90 <HAL_GetTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7ff fa42 	bl	8002e90 <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e079      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	049b      	lsls	r3, r3, #18
 8003a22:	4013      	ands	r3, r2
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a26:	4b3c      	ldr	r3, [pc, #240]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	4b38      	ldr	r3, [pc, #224]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a3a:	4b37      	ldr	r3, [pc, #220]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8003b28 <HAL_RCC_OscConfig+0x630>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	4b32      	ldr	r3, [pc, #200]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b2f      	ldr	r3, [pc, #188]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	0449      	lsls	r1, r1, #17
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7ff fa15 	bl	8002e90 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7ff fa10 	bl	8002e90 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e047      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7e:	4b26      	ldr	r3, [pc, #152]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	049b      	lsls	r3, r3, #18
 8003a86:	4013      	ands	r3, r2
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x574>
 8003a8a:	e03f      	b.n	8003b0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b21      	ldr	r3, [pc, #132]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003a92:	4924      	ldr	r1, [pc, #144]	@ (8003b24 <HAL_RCC_OscConfig+0x62c>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7ff f9fa 	bl	8002e90 <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7ff f9f5 	bl	8002e90 <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e02c      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab4:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	049b      	lsls	r3, r3, #18
 8003abc:	4013      	ands	r3, r2
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x5aa>
 8003ac0:	e024      	b.n	8003b0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e01f      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003ad4:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <HAL_RCC_OscConfig+0x620>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	025b      	lsls	r3, r3, #9
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d10e      	bne.n	8003b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	220f      	movs	r2, #15
 8003aee:	401a      	ands	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	23f0      	movs	r3, #240	@ 0xf0
 8003afc:	039b      	lsls	r3, r3, #14
 8003afe:	401a      	ands	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b008      	add	sp, #32
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	00001388 	.word	0x00001388
 8003b20:	efffffff 	.word	0xefffffff
 8003b24:	feffffff 	.word	0xfeffffff
 8003b28:	ffc2ffff 	.word	0xffc2ffff

08003b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0b3      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d911      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b58      	ldr	r3, [pc, #352]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	4393      	bics	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b60:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	4013      	ands	r3, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e09a      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d015      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2204      	movs	r2, #4
 8003b82:	4013      	ands	r3, r2
 8003b84:	d006      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b86:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003b8c:	21e0      	movs	r1, #224	@ 0xe0
 8003b8e:	00c9      	lsls	r1, r1, #3
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	22f0      	movs	r2, #240	@ 0xf0
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	4b44      	ldr	r3, [pc, #272]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d040      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	029b      	lsls	r3, r3, #10
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d114      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06e      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b38      	ldr	r3, [pc, #224]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	2380      	movs	r3, #128	@ 0x80
 8003bd8:	049b      	lsls	r3, r3, #18
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e062      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b34      	ldr	r3, [pc, #208]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e05b      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf0:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	4393      	bics	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7ff f944 	bl	8002e90 <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0c:	e009      	b.n	8003c22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0e:	f7ff f93f 	bl	8002e90 <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	4a27      	ldr	r2, [pc, #156]	@ (8003cb8 <HAL_RCC_ClockConfig+0x18c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e042      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b24      	ldr	r3, [pc, #144]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	220c      	movs	r2, #12
 8003c28:	401a      	ands	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1ec      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d211      	bcs.n	8003c66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	4393      	bics	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c54:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <HAL_RCC_ClockConfig+0x184>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e020      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a11      	ldr	r2, [pc, #68]	@ (8003cbc <HAL_RCC_ClockConfig+0x190>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c84:	f000 f820 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c88:	0001      	movs	r1, r0
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_RCC_ClockConfig+0x188>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	220f      	movs	r2, #15
 8003c92:	4013      	ands	r3, r2
 8003c94:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc0 <HAL_RCC_ClockConfig+0x194>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	000a      	movs	r2, r1
 8003c9a:	40da      	lsrs	r2, r3
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <HAL_RCC_ClockConfig+0x198>)
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	f7ff f8af 	bl	8002e04 <HAL_InitTick>
  
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40022000 	.word	0x40022000
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	00001388 	.word	0x00001388
 8003cbc:	fffff8ff 	.word	0xfffff8ff
 8003cc0:	080082ac 	.word	0x080082ac
 8003cc4:	20000000 	.word	0x20000000

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ce2:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	220c      	movs	r2, #12
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x36>
 8003cf6:	e02c      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cfa:	613b      	str	r3, [r7, #16]
      break;
 8003cfc:	e02c      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	220f      	movs	r2, #15
 8003d04:	4013      	ands	r3, r2
 8003d06:	4a19      	ldr	r2, [pc, #100]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d0c:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	220f      	movs	r2, #15
 8003d12:	4013      	ands	r3, r2
 8003d14:	4a16      	ldr	r2, [pc, #88]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	2380      	movs	r3, #128	@ 0x80
 8003d1e:	025b      	lsls	r3, r3, #9
 8003d20:	4013      	ands	r3, r2
 8003d22:	d009      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4810      	ldr	r0, [pc, #64]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d28:	f7fc fa0a 	bl	8000140 <__udivsi3>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	001a      	movs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4353      	muls	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e009      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	000a      	movs	r2, r1
 8003d3c:	0152      	lsls	r2, r2, #5
 8003d3e:	1a52      	subs	r2, r2, r1
 8003d40:	0193      	lsls	r3, r2, #6
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	185b      	adds	r3, r3, r1
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	613b      	str	r3, [r7, #16]
      break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d54:	613b      	str	r3, [r7, #16]
      break;
 8003d56:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d58:	693b      	ldr	r3, [r7, #16]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	40021000 	.word	0x40021000
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	080082c4 	.word	0x080082c4
 8003d70:	080082d4 	.word	0x080082d4

08003d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b02      	ldr	r3, [pc, #8]	@ (8003d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	20000000 	.word	0x20000000

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d8c:	f7ff fff2 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d90:	0001      	movs	r1, r0
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	2207      	movs	r2, #7
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	4a04      	ldr	r2, [pc, #16]	@ (8003db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	40d9      	lsrs	r1, r3
 8003da2:	000b      	movs	r3, r1
}    
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	40021000 	.word	0x40021000
 8003db0:	080082bc 	.word	0x080082bc

08003db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	025b      	lsls	r3, r3, #9
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003dd0:	e08e      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2017      	movs	r0, #23
 8003dd4:	183b      	adds	r3, r7, r0
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b57      	ldr	r3, [pc, #348]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	055b      	lsls	r3, r3, #21
 8003de2:	4013      	ands	r3, r2
 8003de4:	d110      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	4b54      	ldr	r3, [pc, #336]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003dec:	2180      	movs	r1, #128	@ 0x80
 8003dee:	0549      	lsls	r1, r1, #21
 8003df0:	430a      	orrs	r2, r1
 8003df2:	61da      	str	r2, [r3, #28]
 8003df4:	4b50      	ldr	r3, [pc, #320]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	055b      	lsls	r3, r3, #21
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e02:	183b      	adds	r3, r7, r0
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	4b4c      	ldr	r3, [pc, #304]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2380      	movs	r3, #128	@ 0x80
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d11a      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e14:	4b49      	ldr	r3, [pc, #292]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	0049      	lsls	r1, r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7ff f835 	bl	8002e90 <HAL_GetTick>
 8003e26:	0003      	movs	r3, r0
 8003e28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7ff f830 	bl	8002e90 <HAL_GetTick>
 8003e30:	0002      	movs	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	@ 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e077      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	2380      	movs	r3, #128	@ 0x80
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4013      	ands	r3, r2
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	23c0      	movs	r3, #192	@ 0xc0
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4013      	ands	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d034      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	23c0      	movs	r3, #192	@ 0xc0
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4013      	ands	r3, r2
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e6c:	4b32      	ldr	r3, [pc, #200]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e76:	4b30      	ldr	r3, [pc, #192]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	0249      	lsls	r1, r1, #9
 8003e80:	430a      	orrs	r2, r1
 8003e82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	4b2b      	ldr	r3, [pc, #172]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e8a:	492e      	ldr	r1, [pc, #184]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e90:	4b29      	ldr	r3, [pc, #164]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fe fff7 	bl	8002e90 <HAL_GetTick>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e009      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fe fff2 	bl	8002e90 <HAL_GetTick>
 8003eac:	0002      	movs	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e038      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a1d      	ldr	r2, [pc, #116]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	0019      	movs	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eda:	2317      	movs	r3, #23
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003eea:	4918      	ldr	r1, [pc, #96]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003efa:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	2203      	movs	r2, #3
 8003f00:	4393      	bics	r3, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2220      	movs	r2, #32
 8003f14:	4013      	ands	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f18:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	4393      	bics	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	4b04      	ldr	r3, [pc, #16]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b006      	add	sp, #24
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	fffffcff 	.word	0xfffffcff
 8003f44:	fffeffff 	.word	0xfffeffff
 8003f48:	00001388 	.word	0x00001388
 8003f4c:	efffffff 	.word	0xefffffff

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e042      	b.n	8003fe8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223d      	movs	r2, #61	@ 0x3d
 8003f66:	5c9b      	ldrb	r3, [r3, r2]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	223c      	movs	r2, #60	@ 0x3c
 8003f72:	2100      	movs	r1, #0
 8003f74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7fe fda7 	bl	8002acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223d      	movs	r2, #61	@ 0x3d
 8003f82:	2102      	movs	r1, #2
 8003f84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	0019      	movs	r1, r3
 8003f90:	0010      	movs	r0, r2
 8003f92:	f000 f94d 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2246      	movs	r2, #70	@ 0x46
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223e      	movs	r2, #62	@ 0x3e
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223f      	movs	r2, #63	@ 0x3f
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2240      	movs	r2, #64	@ 0x40
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2241      	movs	r2, #65	@ 0x41
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2242      	movs	r2, #66	@ 0x42
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2243      	movs	r2, #67	@ 0x43
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2244      	movs	r2, #68	@ 0x44
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2245      	movs	r2, #69	@ 0x45
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223d      	movs	r2, #61	@ 0x3d
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	223d      	movs	r2, #61	@ 0x3d
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d001      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e035      	b.n	8004074 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	223d      	movs	r2, #61	@ 0x3d
 800400c:	2102      	movs	r1, #2
 800400e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <HAL_TIM_Base_Start_IT+0x8c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIM_Base_Start_IT+0x4e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <HAL_TIM_Base_Start_IT+0x90>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIM_Base_Start_IT+0x4e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	@ (8004084 <HAL_TIM_Base_Start_IT+0x94>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2207      	movs	r2, #7
 8004046:	4013      	ands	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b06      	cmp	r3, #6
 800404e:	d010      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	e007      	b.n	8004072 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b004      	add	sp, #16
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	230f      	movs	r3, #15
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	223c      	movs	r2, #60	@ 0x3c
 800409e:	5c9b      	ldrb	r3, [r3, r2]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_ConfigClockSource+0x20>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0bc      	b.n	8004222 <HAL_TIM_ConfigClockSource+0x19a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	223c      	movs	r2, #60	@ 0x3c
 80040ac:	2101      	movs	r1, #1
 80040ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	223d      	movs	r2, #61	@ 0x3d
 80040b4:	2102      	movs	r1, #2
 80040b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2277      	movs	r2, #119	@ 0x77
 80040c4:	4393      	bics	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_TIM_ConfigClockSource+0x1a4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2280      	movs	r2, #128	@ 0x80
 80040de:	0192      	lsls	r2, r2, #6
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d040      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0xde>
 80040e4:	2280      	movs	r2, #128	@ 0x80
 80040e6:	0192      	lsls	r2, r2, #6
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d900      	bls.n	80040ee <HAL_TIM_ConfigClockSource+0x66>
 80040ec:	e088      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 80040ee:	2280      	movs	r2, #128	@ 0x80
 80040f0:	0152      	lsls	r2, r2, #5
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d100      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0x70>
 80040f6:	e088      	b.n	800420a <HAL_TIM_ConfigClockSource+0x182>
 80040f8:	2280      	movs	r2, #128	@ 0x80
 80040fa:	0152      	lsls	r2, r2, #5
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d900      	bls.n	8004102 <HAL_TIM_ConfigClockSource+0x7a>
 8004100:	e07e      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 8004102:	2b70      	cmp	r3, #112	@ 0x70
 8004104:	d018      	beq.n	8004138 <HAL_TIM_ConfigClockSource+0xb0>
 8004106:	d900      	bls.n	800410a <HAL_TIM_ConfigClockSource+0x82>
 8004108:	e07a      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 800410a:	2b60      	cmp	r3, #96	@ 0x60
 800410c:	d04f      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x126>
 800410e:	d900      	bls.n	8004112 <HAL_TIM_ConfigClockSource+0x8a>
 8004110:	e076      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 8004112:	2b50      	cmp	r3, #80	@ 0x50
 8004114:	d03b      	beq.n	800418e <HAL_TIM_ConfigClockSource+0x106>
 8004116:	d900      	bls.n	800411a <HAL_TIM_ConfigClockSource+0x92>
 8004118:	e072      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d057      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x146>
 800411e:	d900      	bls.n	8004122 <HAL_TIM_ConfigClockSource+0x9a>
 8004120:	e06e      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 8004122:	2b30      	cmp	r3, #48	@ 0x30
 8004124:	d063      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x166>
 8004126:	d86b      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d060      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x166>
 800412c:	d868      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d05d      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x166>
 8004132:	2b10      	cmp	r3, #16
 8004134:	d05b      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x166>
 8004136:	e063      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	f000 f970 	bl	800442c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2277      	movs	r2, #119	@ 0x77
 8004158:	4313      	orrs	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
      break;
 8004164:	e052      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004176:	f000 f959 	bl	800442c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	01c9      	lsls	r1, r1, #7
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
      break;
 800418c:	e03e      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	001a      	movs	r2, r3
 800419c:	f000 f8cc 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2150      	movs	r1, #80	@ 0x50
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f926 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 80041ac:	e02e      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ba:	001a      	movs	r2, r3
 80041bc:	f000 f8ea 	bl	8004394 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2160      	movs	r1, #96	@ 0x60
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f916 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 80041cc:	e01e      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041da:	001a      	movs	r2, r3
 80041dc:	f000 f8ac 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2140      	movs	r1, #64	@ 0x40
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 f906 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 80041ec:	e00e      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	0019      	movs	r1, r3
 80041f8:	0010      	movs	r0, r2
 80041fa:	f000 f8fd 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 80041fe:	e005      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004200:	230f      	movs	r3, #15
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]
      break;
 8004208:	e000      	b.n	800420c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800420a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	223d      	movs	r2, #61	@ 0x3d
 8004210:	2101      	movs	r1, #1
 8004212:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	223c      	movs	r2, #60	@ 0x3c
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

  return status;
 800421c:	230f      	movs	r3, #15
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	781b      	ldrb	r3, [r3, #0]
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b004      	add	sp, #16
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	ffff00ff 	.word	0xffff00ff

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a36      	ldr	r2, [pc, #216]	@ (800431c <TIM_Base_SetConfig+0xec>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_Base_SetConfig+0x20>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a35      	ldr	r2, [pc, #212]	@ (8004320 <TIM_Base_SetConfig+0xf0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d108      	bne.n	8004262 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2270      	movs	r2, #112	@ 0x70
 8004254:	4393      	bics	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2d      	ldr	r2, [pc, #180]	@ (800431c <TIM_Base_SetConfig+0xec>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2c      	ldr	r2, [pc, #176]	@ (8004320 <TIM_Base_SetConfig+0xf0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2b      	ldr	r2, [pc, #172]	@ (8004324 <TIM_Base_SetConfig+0xf4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2a      	ldr	r2, [pc, #168]	@ (8004328 <TIM_Base_SetConfig+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a29      	ldr	r2, [pc, #164]	@ (800432c <TIM_Base_SetConfig+0xfc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a28      	ldr	r2, [pc, #160]	@ (8004330 <TIM_Base_SetConfig+0x100>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a27      	ldr	r2, [pc, #156]	@ (8004334 <TIM_Base_SetConfig+0x104>)
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2280      	movs	r2, #128	@ 0x80
 80042a8:	4393      	bics	r3, r2
 80042aa:	001a      	movs	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a13      	ldr	r2, [pc, #76]	@ (800431c <TIM_Base_SetConfig+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_Base_SetConfig+0xba>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a14      	ldr	r2, [pc, #80]	@ (8004328 <TIM_Base_SetConfig+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0xba>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a13      	ldr	r2, [pc, #76]	@ (800432c <TIM_Base_SetConfig+0xfc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0xba>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <TIM_Base_SetConfig+0x100>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d103      	bne.n	80042f2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	2b01      	cmp	r3, #1
 8004302:	d106      	bne.n	8004312 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2201      	movs	r2, #1
 800430a:	4393      	bics	r3, r2
 800430c:	001a      	movs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]
  }
}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40002000 	.word	0x40002000
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800
 8004334:	fffffcff 	.word	0xfffffcff

08004338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	2201      	movs	r2, #1
 8004350:	4393      	bics	r3, r2
 8004352:	001a      	movs	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	22f0      	movs	r2, #240	@ 0xf0
 8004362:	4393      	bics	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	220a      	movs	r2, #10
 8004374:	4393      	bics	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b006      	add	sp, #24
 8004392:	bd80      	pop	{r7, pc}

08004394 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	2210      	movs	r2, #16
 80043ac:	4393      	bics	r3, r2
 80043ae:	001a      	movs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <TIM_TI2_ConfigInputStage+0x60>)
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	22a0      	movs	r2, #160	@ 0xa0
 80043d0:	4393      	bics	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b006      	add	sp, #24
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	ffff0fff 	.word	0xffff0fff

080043f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2270      	movs	r2, #112	@ 0x70
 800440c:	4393      	bics	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	2207      	movs	r2, #7
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	609a      	str	r2, [r3, #8]
}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4a09      	ldr	r2, [pc, #36]	@ (8004468 <TIM_ETR_SetConfig+0x3c>)
 8004444:	4013      	ands	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	431a      	orrs	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b006      	add	sp, #24
 8004466:	bd80      	pop	{r7, pc}
 8004468:	ffff00ff 	.word	0xffff00ff

0800446c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	223c      	movs	r2, #60	@ 0x3c
 800447a:	5c9b      	ldrb	r3, [r3, r2]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e041      	b.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	223c      	movs	r2, #60	@ 0x3c
 8004488:	2101      	movs	r1, #1
 800448a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	223d      	movs	r2, #61	@ 0x3d
 8004490:	2102      	movs	r1, #2
 8004492:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2270      	movs	r2, #112	@ 0x70
 80044a8:	4393      	bics	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a11      	ldr	r2, [pc, #68]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a10      	ldr	r2, [pc, #64]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2280      	movs	r2, #128	@ 0x80
 80044e0:	4393      	bics	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223d      	movs	r2, #61	@ 0x3d
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	223c      	movs	r2, #60	@ 0x3c
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40014000 	.word	0x40014000

0800451c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e044      	b.n	80045b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2278      	movs	r2, #120	@ 0x78
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fe fae1 	bl	8002b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2224      	movs	r2, #36	@ 0x24
 800454a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	438a      	bics	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 fcf0 	bl	8004f4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 fbac 	bl	8004ccc <UART_SetConfig>
 8004574:	0003      	movs	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e01c      	b.n	80045b8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	490d      	ldr	r1, [pc, #52]	@ (80045c0 <HAL_UART_Init+0xa4>)
 800458a:	400a      	ands	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2108      	movs	r1, #8
 800459a:	438a      	bics	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 fd7f 	bl	80050b4 <UART_CheckIdleState>
 80045b6:	0003      	movs	r3, r0
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	fffff7ff 	.word	0xfffff7ff

080045c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	1dbb      	adds	r3, r7, #6
 80045d2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d000      	beq.n	80045de <HAL_UART_Transmit+0x1a>
 80045dc:	e08c      	b.n	80046f8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_Transmit+0x28>
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e084      	b.n	80046fa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d109      	bne.n	8004610 <HAL_UART_Transmit+0x4c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	d001      	beq.n	8004610 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e074      	b.n	80046fa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2284      	movs	r2, #132	@ 0x84
 8004614:	2100      	movs	r1, #0
 8004616:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2221      	movs	r2, #33	@ 0x21
 800461c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461e:	f7fe fc37 	bl	8002e90 <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1dba      	adds	r2, r7, #6
 800462a:	2150      	movs	r1, #80	@ 0x50
 800462c:	8812      	ldrh	r2, [r2, #0]
 800462e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1dba      	adds	r2, r7, #6
 8004634:	2152      	movs	r1, #82	@ 0x52
 8004636:	8812      	ldrh	r2, [r2, #0]
 8004638:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	015b      	lsls	r3, r3, #5
 8004642:	429a      	cmp	r2, r3
 8004644:	d108      	bne.n	8004658 <HAL_UART_Transmit+0x94>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e003      	b.n	8004660 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004660:	e02f      	b.n	80046c2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	0013      	movs	r3, r2
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	@ 0x80
 8004670:	f000 fdc8 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 8004674:	1e03      	subs	r3, r0, #0
 8004676:	d004      	beq.n	8004682 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e03b      	b.n	80046fa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	05d2      	lsls	r2, r2, #23
 8004692:	0dd2      	lsrs	r2, r2, #23
 8004694:	b292      	uxth	r2, r2
 8004696:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3302      	adds	r3, #2
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e007      	b.n	80046b0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2252      	movs	r2, #82	@ 0x52
 80046b4:	5a9b      	ldrh	r3, [r3, r2]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b299      	uxth	r1, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2252      	movs	r2, #82	@ 0x52
 80046c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2252      	movs	r2, #82	@ 0x52
 80046c6:	5a9b      	ldrh	r3, [r3, r2]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1c9      	bne.n	8004662 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	0013      	movs	r3, r2
 80046d8:	2200      	movs	r2, #0
 80046da:	2140      	movs	r1, #64	@ 0x40
 80046dc:	f000 fd92 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 80046e0:	1e03      	subs	r3, r0, #0
 80046e2:	d004      	beq.n	80046ee <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e005      	b.n	80046fa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b008      	add	sp, #32
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b0ab      	sub	sp, #172	@ 0xac
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	22a4      	movs	r2, #164	@ 0xa4
 8004714:	18b9      	adds	r1, r7, r2
 8004716:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	20a0      	movs	r0, #160	@ 0xa0
 8004720:	1839      	adds	r1, r7, r0
 8004722:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	219c      	movs	r1, #156	@ 0x9c
 800472c:	1879      	adds	r1, r7, r1
 800472e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004730:	0011      	movs	r1, r2
 8004732:	18bb      	adds	r3, r7, r2
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a99      	ldr	r2, [pc, #612]	@ (800499c <HAL_UART_IRQHandler+0x298>)
 8004738:	4013      	ands	r3, r2
 800473a:	2298      	movs	r2, #152	@ 0x98
 800473c:	18bc      	adds	r4, r7, r2
 800473e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004740:	18bb      	adds	r3, r7, r2
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d114      	bne.n	8004772 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004748:	187b      	adds	r3, r7, r1
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2220      	movs	r2, #32
 800474e:	4013      	ands	r3, r2
 8004750:	d00f      	beq.n	8004772 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004752:	183b      	adds	r3, r7, r0
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2220      	movs	r2, #32
 8004758:	4013      	ands	r3, r2
 800475a:	d00a      	beq.n	8004772 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004760:	2b00      	cmp	r3, #0
 8004762:	d100      	bne.n	8004766 <HAL_UART_IRQHandler+0x62>
 8004764:	e286      	b.n	8004c74 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	0010      	movs	r0, r2
 800476e:	4798      	blx	r3
      }
      return;
 8004770:	e280      	b.n	8004c74 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004772:	2398      	movs	r3, #152	@ 0x98
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d100      	bne.n	800477e <HAL_UART_IRQHandler+0x7a>
 800477c:	e114      	b.n	80049a8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800477e:	239c      	movs	r3, #156	@ 0x9c
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	4013      	ands	r3, r2
 8004788:	d106      	bne.n	8004798 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800478a:	23a0      	movs	r3, #160	@ 0xa0
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a83      	ldr	r2, [pc, #524]	@ (80049a0 <HAL_UART_IRQHandler+0x29c>)
 8004792:	4013      	ands	r3, r2
 8004794:	d100      	bne.n	8004798 <HAL_UART_IRQHandler+0x94>
 8004796:	e107      	b.n	80049a8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004798:	23a4      	movs	r3, #164	@ 0xa4
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2201      	movs	r2, #1
 80047a0:	4013      	ands	r3, r2
 80047a2:	d012      	beq.n	80047ca <HAL_UART_IRQHandler+0xc6>
 80047a4:	23a0      	movs	r3, #160	@ 0xa0
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	d00b      	beq.n	80047ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2201      	movs	r2, #1
 80047b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2284      	movs	r2, #132	@ 0x84
 80047be:	589b      	ldr	r3, [r3, r2]
 80047c0:	2201      	movs	r2, #1
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2184      	movs	r1, #132	@ 0x84
 80047c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047ca:	23a4      	movs	r3, #164	@ 0xa4
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2202      	movs	r2, #2
 80047d2:	4013      	ands	r3, r2
 80047d4:	d011      	beq.n	80047fa <HAL_UART_IRQHandler+0xf6>
 80047d6:	239c      	movs	r3, #156	@ 0x9c
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	4013      	ands	r3, r2
 80047e0:	d00b      	beq.n	80047fa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2202      	movs	r2, #2
 80047e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2284      	movs	r2, #132	@ 0x84
 80047ee:	589b      	ldr	r3, [r3, r2]
 80047f0:	2204      	movs	r2, #4
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2184      	movs	r1, #132	@ 0x84
 80047f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047fa:	23a4      	movs	r3, #164	@ 0xa4
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2204      	movs	r2, #4
 8004802:	4013      	ands	r3, r2
 8004804:	d011      	beq.n	800482a <HAL_UART_IRQHandler+0x126>
 8004806:	239c      	movs	r3, #156	@ 0x9c
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	4013      	ands	r3, r2
 8004810:	d00b      	beq.n	800482a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2204      	movs	r2, #4
 8004818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2284      	movs	r2, #132	@ 0x84
 800481e:	589b      	ldr	r3, [r3, r2]
 8004820:	2202      	movs	r2, #2
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2184      	movs	r1, #132	@ 0x84
 8004828:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800482a:	23a4      	movs	r3, #164	@ 0xa4
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2208      	movs	r2, #8
 8004832:	4013      	ands	r3, r2
 8004834:	d017      	beq.n	8004866 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004836:	23a0      	movs	r3, #160	@ 0xa0
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2220      	movs	r2, #32
 800483e:	4013      	ands	r3, r2
 8004840:	d105      	bne.n	800484e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004842:	239c      	movs	r3, #156	@ 0x9c
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800484c:	d00b      	beq.n	8004866 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2208      	movs	r2, #8
 8004854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2284      	movs	r2, #132	@ 0x84
 800485a:	589b      	ldr	r3, [r3, r2]
 800485c:	2208      	movs	r2, #8
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2184      	movs	r1, #132	@ 0x84
 8004864:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004866:	23a4      	movs	r3, #164	@ 0xa4
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4013      	ands	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_UART_IRQHandler+0x198>
 8004874:	23a0      	movs	r3, #160	@ 0xa0
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	04db      	lsls	r3, r3, #19
 800487e:	4013      	ands	r3, r2
 8004880:	d00c      	beq.n	800489c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	0112      	lsls	r2, r2, #4
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2284      	movs	r2, #132	@ 0x84
 8004890:	589b      	ldr	r3, [r3, r2]
 8004892:	2220      	movs	r2, #32
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2184      	movs	r1, #132	@ 0x84
 800489a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2284      	movs	r2, #132	@ 0x84
 80048a0:	589b      	ldr	r3, [r3, r2]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d100      	bne.n	80048a8 <HAL_UART_IRQHandler+0x1a4>
 80048a6:	e1e7      	b.n	8004c78 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048a8:	23a4      	movs	r3, #164	@ 0xa4
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2220      	movs	r2, #32
 80048b0:	4013      	ands	r3, r2
 80048b2:	d00e      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b4:	23a0      	movs	r3, #160	@ 0xa0
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	4013      	ands	r3, r2
 80048be:	d008      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	0010      	movs	r0, r2
 80048d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2284      	movs	r2, #132	@ 0x84
 80048d6:	589b      	ldr	r3, [r3, r2]
 80048d8:	2194      	movs	r1, #148	@ 0x94
 80048da:	187a      	adds	r2, r7, r1
 80048dc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2240      	movs	r2, #64	@ 0x40
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b40      	cmp	r3, #64	@ 0x40
 80048ea:	d004      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2228      	movs	r2, #40	@ 0x28
 80048f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048f4:	d047      	beq.n	8004986 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 fcf3 	bl	80052e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2240      	movs	r2, #64	@ 0x40
 8004906:	4013      	ands	r3, r2
 8004908:	2b40      	cmp	r3, #64	@ 0x40
 800490a:	d137      	bne.n	800497c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490c:	f3ef 8310 	mrs	r3, PRIMASK
 8004910:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004914:	2090      	movs	r0, #144	@ 0x90
 8004916:	183a      	adds	r2, r7, r0
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	2301      	movs	r3, #1
 800491c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2140      	movs	r1, #64	@ 0x40
 8004932:	438a      	bics	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
 8004936:	183b      	adds	r3, r7, r0
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800493e:	f383 8810 	msr	PRIMASK, r3
}
 8004942:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <HAL_UART_IRQHandler+0x2a0>)
 8004952:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004958:	0018      	movs	r0, r3
 800495a:	f7fe fbdd 	bl	8003118 <HAL_DMA_Abort_IT>
 800495e:	1e03      	subs	r3, r0, #0
 8004960:	d01a      	beq.n	8004998 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496c:	0018      	movs	r0, r3
 800496e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e012      	b.n	8004998 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f995 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497a:	e00d      	b.n	8004998 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 f990 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e008      	b.n	8004998 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f98b 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2284      	movs	r2, #132	@ 0x84
 8004992:	2100      	movs	r1, #0
 8004994:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004996:	e16f      	b.n	8004c78 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	46c0      	nop			@ (mov r8, r8)
    return;
 800499a:	e16d      	b.n	8004c78 <HAL_UART_IRQHandler+0x574>
 800499c:	0000080f 	.word	0x0000080f
 80049a0:	04000120 	.word	0x04000120
 80049a4:	080053ad 	.word	0x080053ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d000      	beq.n	80049b2 <HAL_UART_IRQHandler+0x2ae>
 80049b0:	e139      	b.n	8004c26 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049b2:	23a4      	movs	r3, #164	@ 0xa4
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2210      	movs	r2, #16
 80049ba:	4013      	ands	r3, r2
 80049bc:	d100      	bne.n	80049c0 <HAL_UART_IRQHandler+0x2bc>
 80049be:	e132      	b.n	8004c26 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049c0:	23a0      	movs	r3, #160	@ 0xa0
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2210      	movs	r2, #16
 80049c8:	4013      	ands	r3, r2
 80049ca:	d100      	bne.n	80049ce <HAL_UART_IRQHandler+0x2ca>
 80049cc:	e12b      	b.n	8004c26 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2210      	movs	r2, #16
 80049d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2240      	movs	r2, #64	@ 0x40
 80049de:	4013      	ands	r3, r2
 80049e0:	2b40      	cmp	r3, #64	@ 0x40
 80049e2:	d000      	beq.n	80049e6 <HAL_UART_IRQHandler+0x2e2>
 80049e4:	e09f      	b.n	8004b26 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	217e      	movs	r1, #126	@ 0x7e
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d100      	bne.n	80049fe <HAL_UART_IRQHandler+0x2fa>
 80049fc:	e13e      	b.n	8004c7c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2258      	movs	r2, #88	@ 0x58
 8004a02:	5a9b      	ldrh	r3, [r3, r2]
 8004a04:	187a      	adds	r2, r7, r1
 8004a06:	8812      	ldrh	r2, [r2, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d300      	bcc.n	8004a0e <HAL_UART_IRQHandler+0x30a>
 8004a0c:	e136      	b.n	8004c7c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	187a      	adds	r2, r7, r1
 8004a12:	215a      	movs	r1, #90	@ 0x5a
 8004a14:	8812      	ldrh	r2, [r2, #0]
 8004a16:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d06f      	beq.n	8004b02 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a22:	f3ef 8310 	mrs	r3, PRIMASK
 8004a26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	f383 8810 	msr	PRIMASK, r3
}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4992      	ldr	r1, [pc, #584]	@ (8004c8c <HAL_UART_IRQHandler+0x588>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a5e:	2301      	movs	r3, #1
 8004a60:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			@ (mov r8, r8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2101      	movs	r1, #1
 8004a76:	438a      	bics	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
 8004a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a90:	2301      	movs	r3, #1
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2140      	movs	r1, #64	@ 0x40
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2280      	movs	r2, #128	@ 0x80
 8004abc:	2120      	movs	r1, #32
 8004abe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ad6:	f383 8810 	msr	PRIMASK, r3
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2110      	movs	r1, #16
 8004ae8:	438a      	bics	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fe fad3 	bl	80030a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2258      	movs	r2, #88	@ 0x58
 8004b0c:	5a9a      	ldrh	r2, [r3, r2]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	215a      	movs	r1, #90	@ 0x5a
 8004b12:	5a5b      	ldrh	r3, [r3, r1]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 f8c8 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b24:	e0aa      	b.n	8004c7c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2258      	movs	r2, #88	@ 0x58
 8004b2a:	5a99      	ldrh	r1, [r3, r2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	225a      	movs	r2, #90	@ 0x5a
 8004b30:	5a9b      	ldrh	r3, [r3, r2]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	208e      	movs	r0, #142	@ 0x8e
 8004b36:	183b      	adds	r3, r7, r0
 8004b38:	1a8a      	subs	r2, r1, r2
 8004b3a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	225a      	movs	r2, #90	@ 0x5a
 8004b40:	5a9b      	ldrh	r3, [r3, r2]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d100      	bne.n	8004b4a <HAL_UART_IRQHandler+0x446>
 8004b48:	e09a      	b.n	8004c80 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004b4a:	183b      	adds	r3, r7, r0
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <HAL_UART_IRQHandler+0x450>
 8004b52:	e095      	b.n	8004c80 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b54:	f3ef 8310 	mrs	r3, PRIMASK
 8004b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5c:	2488      	movs	r4, #136	@ 0x88
 8004b5e:	193a      	adds	r2, r7, r4
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	2301      	movs	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4945      	ldr	r1, [pc, #276]	@ (8004c90 <HAL_UART_IRQHandler+0x58c>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	193b      	adds	r3, r7, r4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b90:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b92:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	2484      	movs	r4, #132	@ 0x84
 8004b96:	193a      	adds	r2, r7, r4
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			@ (mov r8, r8)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	438a      	bics	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
 8004bb6:	193b      	adds	r3, r7, r4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2280      	movs	r2, #128	@ 0x80
 8004bc8:	2120      	movs	r1, #32
 8004bca:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	2480      	movs	r4, #128	@ 0x80
 8004be2:	193a      	adds	r2, r7, r4
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	f383 8810 	msr	PRIMASK, r3
}
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2110      	movs	r1, #16
 8004bfe:	438a      	bics	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c16:	183b      	adds	r3, r7, r0
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f848 	bl	8004cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c24:	e02c      	b.n	8004c80 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c26:	23a4      	movs	r3, #164	@ 0xa4
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2280      	movs	r2, #128	@ 0x80
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d00f      	beq.n	8004c52 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c32:	23a0      	movs	r3, #160	@ 0xa0
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2280      	movs	r2, #128	@ 0x80
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01e      	beq.n	8004c84 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	0010      	movs	r0, r2
 8004c4e:	4798      	blx	r3
    }
    return;
 8004c50:	e018      	b.n	8004c84 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c52:	23a4      	movs	r3, #164	@ 0xa4
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2240      	movs	r2, #64	@ 0x40
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_UART_IRQHandler+0x582>
 8004c5e:	23a0      	movs	r3, #160	@ 0xa0
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2240      	movs	r2, #64	@ 0x40
 8004c66:	4013      	ands	r3, r2
 8004c68:	d00d      	beq.n	8004c86 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 fbb4 	bl	80053da <UART_EndTransmit_IT>
    return;
 8004c72:	e008      	b.n	8004c86 <HAL_UART_IRQHandler+0x582>
      return;
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	e006      	b.n	8004c86 <HAL_UART_IRQHandler+0x582>
    return;
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	e004      	b.n	8004c86 <HAL_UART_IRQHandler+0x582>
      return;
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	e002      	b.n	8004c86 <HAL_UART_IRQHandler+0x582>
      return;
 8004c80:	46c0      	nop			@ (mov r8, r8)
 8004c82:	e000      	b.n	8004c86 <HAL_UART_IRQHandler+0x582>
    return;
 8004c84:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b02b      	add	sp, #172	@ 0xac
 8004c8a:	bd90      	pop	{r4, r7, pc}
 8004c8c:	fffffeff 	.word	0xfffffeff
 8004c90:	fffffedf 	.word	0xfffffedf

08004c94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c9c:	46c0      	nop			@ (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	000a      	movs	r2, r1
 8004cbe:	1cbb      	adds	r3, r7, #2
 8004cc0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b002      	add	sp, #8
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd4:	231e      	movs	r3, #30
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a8d      	ldr	r2, [pc, #564]	@ (8004f30 <UART_SetConfig+0x264>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	0019      	movs	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a88      	ldr	r2, [pc, #544]	@ (8004f34 <UART_SetConfig+0x268>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a7f      	ldr	r2, [pc, #508]	@ (8004f38 <UART_SetConfig+0x26c>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a7b      	ldr	r2, [pc, #492]	@ (8004f3c <UART_SetConfig+0x270>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d127      	bne.n	8004da2 <UART_SetConfig+0xd6>
 8004d52:	4b7b      	ldr	r3, [pc, #492]	@ (8004f40 <UART_SetConfig+0x274>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	2203      	movs	r2, #3
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d00d      	beq.n	8004d7a <UART_SetConfig+0xae>
 8004d5e:	d81b      	bhi.n	8004d98 <UART_SetConfig+0xcc>
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d014      	beq.n	8004d8e <UART_SetConfig+0xc2>
 8004d64:	d818      	bhi.n	8004d98 <UART_SetConfig+0xcc>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <UART_SetConfig+0xa4>
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d00a      	beq.n	8004d84 <UART_SetConfig+0xb8>
 8004d6e:	e013      	b.n	8004d98 <UART_SetConfig+0xcc>
 8004d70:	231f      	movs	r3, #31
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e021      	b.n	8004dbe <UART_SetConfig+0xf2>
 8004d7a:	231f      	movs	r3, #31
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	2202      	movs	r2, #2
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e01c      	b.n	8004dbe <UART_SetConfig+0xf2>
 8004d84:	231f      	movs	r3, #31
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	2204      	movs	r2, #4
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e017      	b.n	8004dbe <UART_SetConfig+0xf2>
 8004d8e:	231f      	movs	r3, #31
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	2208      	movs	r2, #8
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e012      	b.n	8004dbe <UART_SetConfig+0xf2>
 8004d98:	231f      	movs	r3, #31
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e00d      	b.n	8004dbe <UART_SetConfig+0xf2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a67      	ldr	r2, [pc, #412]	@ (8004f44 <UART_SetConfig+0x278>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d104      	bne.n	8004db6 <UART_SetConfig+0xea>
 8004dac:	231f      	movs	r3, #31
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e003      	b.n	8004dbe <UART_SetConfig+0xf2>
 8004db6:	231f      	movs	r3, #31
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2210      	movs	r2, #16
 8004dbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d15c      	bne.n	8004e84 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004dca:	231f      	movs	r3, #31
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d015      	beq.n	8004e00 <UART_SetConfig+0x134>
 8004dd4:	dc18      	bgt.n	8004e08 <UART_SetConfig+0x13c>
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d00d      	beq.n	8004df6 <UART_SetConfig+0x12a>
 8004dda:	dc15      	bgt.n	8004e08 <UART_SetConfig+0x13c>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <UART_SetConfig+0x11a>
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d005      	beq.n	8004df0 <UART_SetConfig+0x124>
 8004de4:	e010      	b.n	8004e08 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de6:	f7fe ffcf 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8004dea:	0003      	movs	r3, r0
 8004dec:	61bb      	str	r3, [r7, #24]
        break;
 8004dee:	e012      	b.n	8004e16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df0:	4b55      	ldr	r3, [pc, #340]	@ (8004f48 <UART_SetConfig+0x27c>)
 8004df2:	61bb      	str	r3, [r7, #24]
        break;
 8004df4:	e00f      	b.n	8004e16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df6:	f7fe ff67 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	61bb      	str	r3, [r7, #24]
        break;
 8004dfe:	e00a      	b.n	8004e16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	61bb      	str	r3, [r7, #24]
        break;
 8004e06:	e006      	b.n	8004e16 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e0c:	231e      	movs	r3, #30
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
        break;
 8004e14:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d100      	bne.n	8004e1e <UART_SetConfig+0x152>
 8004e1c:	e07a      	b.n	8004f14 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	18d2      	adds	r2, r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	0019      	movs	r1, r3
 8004e30:	0010      	movs	r0, r2
 8004e32:	f7fb f985 	bl	8000140 <__udivsi3>
 8004e36:	0003      	movs	r3, r0
 8004e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b0f      	cmp	r3, #15
 8004e3e:	d91c      	bls.n	8004e7a <UART_SetConfig+0x1ae>
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	2380      	movs	r3, #128	@ 0x80
 8004e44:	025b      	lsls	r3, r3, #9
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d217      	bcs.n	8004e7a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	200e      	movs	r0, #14
 8004e50:	183b      	adds	r3, r7, r0
 8004e52:	210f      	movs	r1, #15
 8004e54:	438a      	bics	r2, r1
 8004e56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2207      	movs	r2, #7
 8004e60:	4013      	ands	r3, r2
 8004e62:	b299      	uxth	r1, r3
 8004e64:	183b      	adds	r3, r7, r0
 8004e66:	183a      	adds	r2, r7, r0
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	183a      	adds	r2, r7, r0
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e04c      	b.n	8004f14 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7a:	231e      	movs	r3, #30
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e047      	b.n	8004f14 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e84:	231f      	movs	r3, #31
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d015      	beq.n	8004eba <UART_SetConfig+0x1ee>
 8004e8e:	dc18      	bgt.n	8004ec2 <UART_SetConfig+0x1f6>
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d00d      	beq.n	8004eb0 <UART_SetConfig+0x1e4>
 8004e94:	dc15      	bgt.n	8004ec2 <UART_SetConfig+0x1f6>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <UART_SetConfig+0x1d4>
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d005      	beq.n	8004eaa <UART_SetConfig+0x1de>
 8004e9e:	e010      	b.n	8004ec2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe ff72 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	61bb      	str	r3, [r7, #24]
        break;
 8004ea8:	e012      	b.n	8004ed0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eaa:	4b27      	ldr	r3, [pc, #156]	@ (8004f48 <UART_SetConfig+0x27c>)
 8004eac:	61bb      	str	r3, [r7, #24]
        break;
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb0:	f7fe ff0a 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	61bb      	str	r3, [r7, #24]
        break;
 8004eb8:	e00a      	b.n	8004ed0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	61bb      	str	r3, [r7, #24]
        break;
 8004ec0:	e006      	b.n	8004ed0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec6:	231e      	movs	r3, #30
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
        break;
 8004ece:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01e      	beq.n	8004f14 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	085a      	lsrs	r2, r3, #1
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	18d2      	adds	r2, r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	0010      	movs	r0, r2
 8004ee8:	f7fb f92a 	bl	8000140 <__udivsi3>
 8004eec:	0003      	movs	r3, r0
 8004eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d90a      	bls.n	8004f0c <UART_SetConfig+0x240>
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	025b      	lsls	r3, r3, #9
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d205      	bcs.n	8004f0c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	e003      	b.n	8004f14 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0c:	231e      	movs	r3, #30
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f20:	231e      	movs	r3, #30
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	781b      	ldrb	r3, [r3, #0]
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b008      	add	sp, #32
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	ffff69f3 	.word	0xffff69f3
 8004f34:	ffffcfff 	.word	0xffffcfff
 8004f38:	fffff4ff 	.word	0xfffff4ff
 8004f3c:	40013800 	.word	0x40013800
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40004400 	.word	0x40004400
 8004f48:	007a1200 	.word	0x007a1200

08004f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	2208      	movs	r2, #8
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a4a      	ldr	r2, [pc, #296]	@ (8005090 <UART_AdvFeatureConfig+0x144>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4a43      	ldr	r2, [pc, #268]	@ (8005094 <UART_AdvFeatureConfig+0x148>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8005098 <UART_AdvFeatureConfig+0x14c>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4a34      	ldr	r2, [pc, #208]	@ (800509c <UART_AdvFeatureConfig+0x150>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	0019      	movs	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	@ (80050a0 <UART_AdvFeatureConfig+0x154>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	2220      	movs	r2, #32
 8005004:	4013      	ands	r3, r2
 8005006:	d00b      	beq.n	8005020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	4a25      	ldr	r2, [pc, #148]	@ (80050a4 <UART_AdvFeatureConfig+0x158>)
 8005010:	4013      	ands	r3, r2
 8005012:	0019      	movs	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	2240      	movs	r2, #64	@ 0x40
 8005026:	4013      	ands	r3, r2
 8005028:	d01d      	beq.n	8005066 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <UART_AdvFeatureConfig+0x15c>)
 8005032:	4013      	ands	r3, r2
 8005034:	0019      	movs	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	035b      	lsls	r3, r3, #13
 800504a:	429a      	cmp	r2, r3
 800504c:	d10b      	bne.n	8005066 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <UART_AdvFeatureConfig+0x160>)
 8005056:	4013      	ands	r3, r2
 8005058:	0019      	movs	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	2280      	movs	r2, #128	@ 0x80
 800506c:	4013      	ands	r3, r2
 800506e:	d00b      	beq.n	8005088 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4a0e      	ldr	r2, [pc, #56]	@ (80050b0 <UART_AdvFeatureConfig+0x164>)
 8005078:	4013      	ands	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }
}
 8005088:	46c0      	nop			@ (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b002      	add	sp, #8
 800508e:	bd80      	pop	{r7, pc}
 8005090:	ffff7fff 	.word	0xffff7fff
 8005094:	fffdffff 	.word	0xfffdffff
 8005098:	fffeffff 	.word	0xfffeffff
 800509c:	fffbffff 	.word	0xfffbffff
 80050a0:	ffffefff 	.word	0xffffefff
 80050a4:	ffffdfff 	.word	0xffffdfff
 80050a8:	ffefffff 	.word	0xffefffff
 80050ac:	ff9fffff 	.word	0xff9fffff
 80050b0:	fff7ffff 	.word	0xfff7ffff

080050b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b092      	sub	sp, #72	@ 0x48
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2284      	movs	r2, #132	@ 0x84
 80050c0:	2100      	movs	r1, #0
 80050c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c4:	f7fd fee4 	bl	8002e90 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2208      	movs	r2, #8
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d12c      	bne.n	8005134 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050dc:	2280      	movs	r2, #128	@ 0x80
 80050de:	0391      	lsls	r1, r2, #14
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4a46      	ldr	r2, [pc, #280]	@ (80051fc <UART_CheckIdleState+0x148>)
 80050e4:	9200      	str	r2, [sp, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f000 f88c 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 80050ec:	1e03      	subs	r3, r0, #0
 80050ee:	d021      	beq.n	8005134 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f0:	f3ef 8310 	mrs	r3, PRIMASK
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050fa:	2301      	movs	r3, #1
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	f383 8810 	msr	PRIMASK, r3
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2180      	movs	r1, #128	@ 0x80
 8005112:	438a      	bics	r2, r1
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	f383 8810 	msr	PRIMASK, r3
}
 8005120:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2278      	movs	r2, #120	@ 0x78
 800512c:	2100      	movs	r1, #0
 800512e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e05f      	b.n	80051f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2204      	movs	r2, #4
 800513c:	4013      	ands	r3, r2
 800513e:	2b04      	cmp	r3, #4
 8005140:	d146      	bne.n	80051d0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	2280      	movs	r2, #128	@ 0x80
 8005146:	03d1      	lsls	r1, r2, #15
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4a2c      	ldr	r2, [pc, #176]	@ (80051fc <UART_CheckIdleState+0x148>)
 800514c:	9200      	str	r2, [sp, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	f000 f858 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 8005154:	1e03      	subs	r3, r0, #0
 8005156:	d03b      	beq.n	80051d0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005158:	f3ef 8310 	mrs	r3, PRIMASK
 800515c:	60fb      	str	r3, [r7, #12]
  return(result);
 800515e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
 8005162:	2301      	movs	r3, #1
 8005164:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f383 8810 	msr	PRIMASK, r3
}
 800516c:	46c0      	nop			@ (mov r8, r8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4921      	ldr	r1, [pc, #132]	@ (8005200 <UART_CheckIdleState+0x14c>)
 800517a:	400a      	ands	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f383 8810 	msr	PRIMASK, r3
}
 8005188:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518a:	f3ef 8310 	mrs	r3, PRIMASK
 800518e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005190:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005192:	633b      	str	r3, [r7, #48]	@ 0x30
 8005194:	2301      	movs	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2101      	movs	r1, #1
 80051ac:	438a      	bics	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f383 8810 	msr	PRIMASK, r3
}
 80051ba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2280      	movs	r2, #128	@ 0x80
 80051c0:	2120      	movs	r1, #32
 80051c2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2278      	movs	r2, #120	@ 0x78
 80051c8:	2100      	movs	r1, #0
 80051ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e011      	b.n	80051f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2280      	movs	r2, #128	@ 0x80
 80051da:	2120      	movs	r1, #32
 80051dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2278      	movs	r2, #120	@ 0x78
 80051ee:	2100      	movs	r1, #0
 80051f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b010      	add	sp, #64	@ 0x40
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	01ffffff 	.word	0x01ffffff
 8005200:	fffffedf 	.word	0xfffffedf

08005204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	1dfb      	adds	r3, r7, #7
 8005212:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005214:	e051      	b.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	3301      	adds	r3, #1
 800521a:	d04e      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521c:	f7fd fe38 	bl	8002e90 <HAL_GetTick>
 8005220:	0002      	movs	r2, r0
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	429a      	cmp	r2, r3
 800522a:	d302      	bcc.n	8005232 <UART_WaitOnFlagUntilTimeout+0x2e>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e051      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2204      	movs	r2, #4
 800523e:	4013      	ands	r3, r2
 8005240:	d03b      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b80      	cmp	r3, #128	@ 0x80
 8005246:	d038      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d035      	beq.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2208      	movs	r2, #8
 8005256:	4013      	ands	r3, r2
 8005258:	2b08      	cmp	r3, #8
 800525a:	d111      	bne.n	8005280 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2208      	movs	r2, #8
 8005262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f83c 	bl	80052e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2284      	movs	r2, #132	@ 0x84
 8005270:	2108      	movs	r1, #8
 8005272:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2278      	movs	r2, #120	@ 0x78
 8005278:	2100      	movs	r1, #0
 800527a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e02c      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	401a      	ands	r2, r3
 800528c:	2380      	movs	r3, #128	@ 0x80
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	429a      	cmp	r2, r3
 8005292:	d112      	bne.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2280      	movs	r2, #128	@ 0x80
 800529a:	0112      	lsls	r2, r2, #4
 800529c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 f81f 	bl	80052e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2284      	movs	r2, #132	@ 0x84
 80052aa:	2120      	movs	r1, #32
 80052ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2278      	movs	r2, #120	@ 0x78
 80052b2:	2100      	movs	r1, #0
 80052b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e00f      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	4013      	ands	r3, r2
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	425a      	negs	r2, r3
 80052ca:	4153      	adcs	r3, r2
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	001a      	movs	r2, r3
 80052d0:	1dfb      	adds	r3, r7, #7
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d09e      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	@ 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	617b      	str	r3, [r7, #20]
  return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4926      	ldr	r1, [pc, #152]	@ (80053a8 <UART_EndRxTransfer+0xc4>)
 800530e:	400a      	ands	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531e:	f3ef 8310 	mrs	r3, PRIMASK
 8005322:	623b      	str	r3, [r7, #32]
  return(result);
 8005324:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	633b      	str	r3, [r7, #48]	@ 0x30
 8005328:	2301      	movs	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	f383 8810 	msr	PRIMASK, r3
}
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	438a      	bics	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	f383 8810 	msr	PRIMASK, r3
}
 800534e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005354:	2b01      	cmp	r3, #1
 8005356:	d118      	bne.n	800538a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005358:	f3ef 8310 	mrs	r3, PRIMASK
 800535c:	60bb      	str	r3, [r7, #8]
  return(result);
 800535e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005362:	2301      	movs	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2110      	movs	r1, #16
 800537a:	438a      	bics	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005380:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2280      	movs	r2, #128	@ 0x80
 800538e:	2120      	movs	r1, #32
 8005390:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b00e      	add	sp, #56	@ 0x38
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	fffffedf 	.word	0xfffffedf

080053ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	225a      	movs	r2, #90	@ 0x5a
 80053be:	2100      	movs	r1, #0
 80053c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2252      	movs	r2, #82	@ 0x52
 80053c6:	2100      	movs	r1, #0
 80053c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7ff fc69 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e2:	f3ef 8310 	mrs	r3, PRIMASK
 80053e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	2301      	movs	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2140      	movs	r1, #64	@ 0x40
 8005404:	438a      	bics	r2, r1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7ff fc36 	bl	8004c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005428:	46c0      	nop			@ (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b006      	add	sp, #24
 800542e:	bd80      	pop	{r7, pc}

08005430 <__cvt>:
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005432:	001f      	movs	r7, r3
 8005434:	2300      	movs	r3, #0
 8005436:	0016      	movs	r6, r2
 8005438:	b08b      	sub	sp, #44	@ 0x2c
 800543a:	429f      	cmp	r7, r3
 800543c:	da04      	bge.n	8005448 <__cvt+0x18>
 800543e:	2180      	movs	r1, #128	@ 0x80
 8005440:	0609      	lsls	r1, r1, #24
 8005442:	187b      	adds	r3, r7, r1
 8005444:	001f      	movs	r7, r3
 8005446:	232d      	movs	r3, #45	@ 0x2d
 8005448:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800544a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800544c:	7013      	strb	r3, [r2, #0]
 800544e:	2320      	movs	r3, #32
 8005450:	2203      	movs	r2, #3
 8005452:	439d      	bics	r5, r3
 8005454:	2d46      	cmp	r5, #70	@ 0x46
 8005456:	d007      	beq.n	8005468 <__cvt+0x38>
 8005458:	002b      	movs	r3, r5
 800545a:	3b45      	subs	r3, #69	@ 0x45
 800545c:	4259      	negs	r1, r3
 800545e:	414b      	adcs	r3, r1
 8005460:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005462:	3a01      	subs	r2, #1
 8005464:	18cb      	adds	r3, r1, r3
 8005466:	9310      	str	r3, [sp, #64]	@ 0x40
 8005468:	ab09      	add	r3, sp, #36	@ 0x24
 800546a:	9304      	str	r3, [sp, #16]
 800546c:	ab08      	add	r3, sp, #32
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005472:	9200      	str	r2, [sp, #0]
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005478:	0032      	movs	r2, r6
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	003b      	movs	r3, r7
 800547e:	f000 fe89 	bl	8006194 <_dtoa_r>
 8005482:	0004      	movs	r4, r0
 8005484:	2d47      	cmp	r5, #71	@ 0x47
 8005486:	d11b      	bne.n	80054c0 <__cvt+0x90>
 8005488:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d511      	bpl.n	80054b2 <__cvt+0x82>
 800548e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005490:	18c3      	adds	r3, r0, r3
 8005492:	9307      	str	r3, [sp, #28]
 8005494:	2200      	movs	r2, #0
 8005496:	2300      	movs	r3, #0
 8005498:	0030      	movs	r0, r6
 800549a:	0039      	movs	r1, r7
 800549c:	f7fa ffd6 	bl	800044c <__aeabi_dcmpeq>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d001      	beq.n	80054a8 <__cvt+0x78>
 80054a4:	9b07      	ldr	r3, [sp, #28]
 80054a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80054a8:	2230      	movs	r2, #48	@ 0x30
 80054aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ac:	9907      	ldr	r1, [sp, #28]
 80054ae:	428b      	cmp	r3, r1
 80054b0:	d320      	bcc.n	80054f4 <__cvt+0xc4>
 80054b2:	0020      	movs	r0, r4
 80054b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80054b8:	1b1b      	subs	r3, r3, r4
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	b00b      	add	sp, #44	@ 0x2c
 80054be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80054c2:	18c3      	adds	r3, r0, r3
 80054c4:	9307      	str	r3, [sp, #28]
 80054c6:	2d46      	cmp	r5, #70	@ 0x46
 80054c8:	d1e4      	bne.n	8005494 <__cvt+0x64>
 80054ca:	7803      	ldrb	r3, [r0, #0]
 80054cc:	2b30      	cmp	r3, #48	@ 0x30
 80054ce:	d10c      	bne.n	80054ea <__cvt+0xba>
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	0030      	movs	r0, r6
 80054d6:	0039      	movs	r1, r7
 80054d8:	f7fa ffb8 	bl	800044c <__aeabi_dcmpeq>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d104      	bne.n	80054ea <__cvt+0xba>
 80054e0:	2301      	movs	r3, #1
 80054e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80054ec:	9a07      	ldr	r2, [sp, #28]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	18d3      	adds	r3, r2, r3
 80054f2:	e7ce      	b.n	8005492 <__cvt+0x62>
 80054f4:	1c59      	adds	r1, r3, #1
 80054f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e7d6      	b.n	80054aa <__cvt+0x7a>

080054fc <__exponent>:
 80054fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fe:	232b      	movs	r3, #43	@ 0x2b
 8005500:	0005      	movs	r5, r0
 8005502:	000c      	movs	r4, r1
 8005504:	b085      	sub	sp, #20
 8005506:	7002      	strb	r2, [r0, #0]
 8005508:	2900      	cmp	r1, #0
 800550a:	da01      	bge.n	8005510 <__exponent+0x14>
 800550c:	424c      	negs	r4, r1
 800550e:	3302      	adds	r3, #2
 8005510:	706b      	strb	r3, [r5, #1]
 8005512:	2c09      	cmp	r4, #9
 8005514:	dd2c      	ble.n	8005570 <__exponent+0x74>
 8005516:	ab02      	add	r3, sp, #8
 8005518:	1dde      	adds	r6, r3, #7
 800551a:	0020      	movs	r0, r4
 800551c:	210a      	movs	r1, #10
 800551e:	f7fa ff7f 	bl	8000420 <__aeabi_idivmod>
 8005522:	0037      	movs	r7, r6
 8005524:	3130      	adds	r1, #48	@ 0x30
 8005526:	3e01      	subs	r6, #1
 8005528:	0020      	movs	r0, r4
 800552a:	7031      	strb	r1, [r6, #0]
 800552c:	210a      	movs	r1, #10
 800552e:	9401      	str	r4, [sp, #4]
 8005530:	f7fa fe90 	bl	8000254 <__divsi3>
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	0004      	movs	r4, r0
 8005538:	2b63      	cmp	r3, #99	@ 0x63
 800553a:	dcee      	bgt.n	800551a <__exponent+0x1e>
 800553c:	1eba      	subs	r2, r7, #2
 800553e:	1ca8      	adds	r0, r5, #2
 8005540:	0001      	movs	r1, r0
 8005542:	0013      	movs	r3, r2
 8005544:	3430      	adds	r4, #48	@ 0x30
 8005546:	7014      	strb	r4, [r2, #0]
 8005548:	ac02      	add	r4, sp, #8
 800554a:	3407      	adds	r4, #7
 800554c:	429c      	cmp	r4, r3
 800554e:	d80a      	bhi.n	8005566 <__exponent+0x6a>
 8005550:	2300      	movs	r3, #0
 8005552:	42a2      	cmp	r2, r4
 8005554:	d803      	bhi.n	800555e <__exponent+0x62>
 8005556:	3309      	adds	r3, #9
 8005558:	aa02      	add	r2, sp, #8
 800555a:	189b      	adds	r3, r3, r2
 800555c:	1bdb      	subs	r3, r3, r7
 800555e:	18c0      	adds	r0, r0, r3
 8005560:	1b40      	subs	r0, r0, r5
 8005562:	b005      	add	sp, #20
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	781c      	ldrb	r4, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	700c      	strb	r4, [r1, #0]
 800556c:	3101      	adds	r1, #1
 800556e:	e7eb      	b.n	8005548 <__exponent+0x4c>
 8005570:	2330      	movs	r3, #48	@ 0x30
 8005572:	18e4      	adds	r4, r4, r3
 8005574:	70ab      	strb	r3, [r5, #2]
 8005576:	1d28      	adds	r0, r5, #4
 8005578:	70ec      	strb	r4, [r5, #3]
 800557a:	e7f1      	b.n	8005560 <__exponent+0x64>

0800557c <_printf_float>:
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b097      	sub	sp, #92	@ 0x5c
 8005580:	000d      	movs	r5, r1
 8005582:	920a      	str	r2, [sp, #40]	@ 0x28
 8005584:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005586:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005588:	9009      	str	r0, [sp, #36]	@ 0x24
 800558a:	f000 fceb 	bl	8005f64 <_localeconv_r>
 800558e:	6803      	ldr	r3, [r0, #0]
 8005590:	0018      	movs	r0, r3
 8005592:	930d      	str	r3, [sp, #52]	@ 0x34
 8005594:	f7fa fdb8 	bl	8000108 <strlen>
 8005598:	2300      	movs	r3, #0
 800559a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800559c:	9314      	str	r3, [sp, #80]	@ 0x50
 800559e:	7e2b      	ldrb	r3, [r5, #24]
 80055a0:	2207      	movs	r2, #7
 80055a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80055a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	05c9      	lsls	r1, r1, #23
 80055ae:	d545      	bpl.n	800563c <_printf_float+0xc0>
 80055b0:	189b      	adds	r3, r3, r2
 80055b2:	4393      	bics	r3, r2
 80055b4:	001a      	movs	r2, r3
 80055b6:	3208      	adds	r2, #8
 80055b8:	6022      	str	r2, [r4, #0]
 80055ba:	2201      	movs	r2, #1
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	685f      	ldr	r7, [r3, #4]
 80055c0:	007b      	lsls	r3, r7, #1
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80055c6:	9610      	str	r6, [sp, #64]	@ 0x40
 80055c8:	64ae      	str	r6, [r5, #72]	@ 0x48
 80055ca:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80055cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80055ce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80055d0:	4ba7      	ldr	r3, [pc, #668]	@ (8005870 <_printf_float+0x2f4>)
 80055d2:	4252      	negs	r2, r2
 80055d4:	f7fc fd74 	bl	80020c0 <__aeabi_dcmpun>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d131      	bne.n	8005640 <_printf_float+0xc4>
 80055dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80055de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80055e0:	2201      	movs	r2, #1
 80055e2:	4ba3      	ldr	r3, [pc, #652]	@ (8005870 <_printf_float+0x2f4>)
 80055e4:	4252      	negs	r2, r2
 80055e6:	f7fa ff41 	bl	800046c <__aeabi_dcmple>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d128      	bne.n	8005640 <_printf_float+0xc4>
 80055ee:	2200      	movs	r2, #0
 80055f0:	2300      	movs	r3, #0
 80055f2:	0030      	movs	r0, r6
 80055f4:	0039      	movs	r1, r7
 80055f6:	f7fa ff2f 	bl	8000458 <__aeabi_dcmplt>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d003      	beq.n	8005606 <_printf_float+0x8a>
 80055fe:	002b      	movs	r3, r5
 8005600:	222d      	movs	r2, #45	@ 0x2d
 8005602:	3343      	adds	r3, #67	@ 0x43
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005608:	4f9a      	ldr	r7, [pc, #616]	@ (8005874 <_printf_float+0x2f8>)
 800560a:	2b47      	cmp	r3, #71	@ 0x47
 800560c:	d900      	bls.n	8005610 <_printf_float+0x94>
 800560e:	4f9a      	ldr	r7, [pc, #616]	@ (8005878 <_printf_float+0x2fc>)
 8005610:	2303      	movs	r3, #3
 8005612:	2400      	movs	r4, #0
 8005614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005616:	612b      	str	r3, [r5, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	439a      	bics	r2, r3
 800561c:	602a      	str	r2, [r5, #0]
 800561e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005620:	0029      	movs	r1, r5
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005628:	aa15      	add	r2, sp, #84	@ 0x54
 800562a:	f000 f9e5 	bl	80059f8 <_printf_common>
 800562e:	3001      	adds	r0, #1
 8005630:	d000      	beq.n	8005634 <_printf_float+0xb8>
 8005632:	e09f      	b.n	8005774 <_printf_float+0x1f8>
 8005634:	2001      	movs	r0, #1
 8005636:	4240      	negs	r0, r0
 8005638:	b017      	add	sp, #92	@ 0x5c
 800563a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800563c:	3307      	adds	r3, #7
 800563e:	e7b8      	b.n	80055b2 <_printf_float+0x36>
 8005640:	0032      	movs	r2, r6
 8005642:	003b      	movs	r3, r7
 8005644:	0030      	movs	r0, r6
 8005646:	0039      	movs	r1, r7
 8005648:	f7fc fd3a 	bl	80020c0 <__aeabi_dcmpun>
 800564c:	2800      	cmp	r0, #0
 800564e:	d00b      	beq.n	8005668 <_printf_float+0xec>
 8005650:	2f00      	cmp	r7, #0
 8005652:	da03      	bge.n	800565c <_printf_float+0xe0>
 8005654:	002b      	movs	r3, r5
 8005656:	222d      	movs	r2, #45	@ 0x2d
 8005658:	3343      	adds	r3, #67	@ 0x43
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800565e:	4f87      	ldr	r7, [pc, #540]	@ (800587c <_printf_float+0x300>)
 8005660:	2b47      	cmp	r3, #71	@ 0x47
 8005662:	d9d5      	bls.n	8005610 <_printf_float+0x94>
 8005664:	4f86      	ldr	r7, [pc, #536]	@ (8005880 <_printf_float+0x304>)
 8005666:	e7d3      	b.n	8005610 <_printf_float+0x94>
 8005668:	2220      	movs	r2, #32
 800566a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800566c:	686b      	ldr	r3, [r5, #4]
 800566e:	4394      	bics	r4, r2
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	d146      	bne.n	8005702 <_printf_float+0x186>
 8005674:	3307      	adds	r3, #7
 8005676:	606b      	str	r3, [r5, #4]
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4313      	orrs	r3, r2
 8005680:	2200      	movs	r2, #0
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	9206      	str	r2, [sp, #24]
 8005686:	aa14      	add	r2, sp, #80	@ 0x50
 8005688:	9205      	str	r2, [sp, #20]
 800568a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800568c:	a90a      	add	r1, sp, #40	@ 0x28
 800568e:	9204      	str	r2, [sp, #16]
 8005690:	aa13      	add	r2, sp, #76	@ 0x4c
 8005692:	9203      	str	r2, [sp, #12]
 8005694:	2223      	movs	r2, #35	@ 0x23
 8005696:	1852      	adds	r2, r2, r1
 8005698:	9202      	str	r2, [sp, #8]
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	686b      	ldr	r3, [r5, #4]
 800569e:	0032      	movs	r2, r6
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056a4:	003b      	movs	r3, r7
 80056a6:	f7ff fec3 	bl	8005430 <__cvt>
 80056aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056ac:	0007      	movs	r7, r0
 80056ae:	2c47      	cmp	r4, #71	@ 0x47
 80056b0:	d12d      	bne.n	800570e <_printf_float+0x192>
 80056b2:	1cd3      	adds	r3, r2, #3
 80056b4:	db02      	blt.n	80056bc <_printf_float+0x140>
 80056b6:	686b      	ldr	r3, [r5, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	dd48      	ble.n	800574e <_printf_float+0x1d2>
 80056bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80056c0:	3b02      	subs	r3, #2
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80056c6:	0028      	movs	r0, r5
 80056c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056ca:	3901      	subs	r1, #1
 80056cc:	3050      	adds	r0, #80	@ 0x50
 80056ce:	9113      	str	r1, [sp, #76]	@ 0x4c
 80056d0:	f7ff ff14 	bl	80054fc <__exponent>
 80056d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80056d6:	0004      	movs	r4, r0
 80056d8:	1813      	adds	r3, r2, r0
 80056da:	612b      	str	r3, [r5, #16]
 80056dc:	2a01      	cmp	r2, #1
 80056de:	dc02      	bgt.n	80056e6 <_printf_float+0x16a>
 80056e0:	682a      	ldr	r2, [r5, #0]
 80056e2:	07d2      	lsls	r2, r2, #31
 80056e4:	d501      	bpl.n	80056ea <_printf_float+0x16e>
 80056e6:	3301      	adds	r3, #1
 80056e8:	612b      	str	r3, [r5, #16]
 80056ea:	2323      	movs	r3, #35	@ 0x23
 80056ec:	aa0a      	add	r2, sp, #40	@ 0x28
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d100      	bne.n	80056f8 <_printf_float+0x17c>
 80056f6:	e792      	b.n	800561e <_printf_float+0xa2>
 80056f8:	002b      	movs	r3, r5
 80056fa:	222d      	movs	r2, #45	@ 0x2d
 80056fc:	3343      	adds	r3, #67	@ 0x43
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	e78d      	b.n	800561e <_printf_float+0xa2>
 8005702:	2c47      	cmp	r4, #71	@ 0x47
 8005704:	d1b8      	bne.n	8005678 <_printf_float+0xfc>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1b6      	bne.n	8005678 <_printf_float+0xfc>
 800570a:	3301      	adds	r3, #1
 800570c:	e7b3      	b.n	8005676 <_printf_float+0xfa>
 800570e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005710:	0011      	movs	r1, r2
 8005712:	2b65      	cmp	r3, #101	@ 0x65
 8005714:	d9d7      	bls.n	80056c6 <_printf_float+0x14a>
 8005716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005718:	2b66      	cmp	r3, #102	@ 0x66
 800571a:	d11a      	bne.n	8005752 <_printf_float+0x1d6>
 800571c:	686b      	ldr	r3, [r5, #4]
 800571e:	2a00      	cmp	r2, #0
 8005720:	dd09      	ble.n	8005736 <_printf_float+0x1ba>
 8005722:	612a      	str	r2, [r5, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <_printf_float+0x1b2>
 8005728:	6829      	ldr	r1, [r5, #0]
 800572a:	07c9      	lsls	r1, r1, #31
 800572c:	d50b      	bpl.n	8005746 <_printf_float+0x1ca>
 800572e:	3301      	adds	r3, #1
 8005730:	189b      	adds	r3, r3, r2
 8005732:	612b      	str	r3, [r5, #16]
 8005734:	e007      	b.n	8005746 <_printf_float+0x1ca>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <_printf_float+0x1c6>
 800573a:	2201      	movs	r2, #1
 800573c:	6829      	ldr	r1, [r5, #0]
 800573e:	4211      	tst	r1, r2
 8005740:	d000      	beq.n	8005744 <_printf_float+0x1c8>
 8005742:	1c9a      	adds	r2, r3, #2
 8005744:	612a      	str	r2, [r5, #16]
 8005746:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005748:	2400      	movs	r4, #0
 800574a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800574c:	e7cd      	b.n	80056ea <_printf_float+0x16e>
 800574e:	2367      	movs	r3, #103	@ 0x67
 8005750:	930c      	str	r3, [sp, #48]	@ 0x30
 8005752:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005754:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005756:	4299      	cmp	r1, r3
 8005758:	db06      	blt.n	8005768 <_printf_float+0x1ec>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	6129      	str	r1, [r5, #16]
 800575e:	07db      	lsls	r3, r3, #31
 8005760:	d5f1      	bpl.n	8005746 <_printf_float+0x1ca>
 8005762:	3101      	adds	r1, #1
 8005764:	6129      	str	r1, [r5, #16]
 8005766:	e7ee      	b.n	8005746 <_printf_float+0x1ca>
 8005768:	2201      	movs	r2, #1
 800576a:	2900      	cmp	r1, #0
 800576c:	dce0      	bgt.n	8005730 <_printf_float+0x1b4>
 800576e:	1892      	adds	r2, r2, r2
 8005770:	1a52      	subs	r2, r2, r1
 8005772:	e7dd      	b.n	8005730 <_printf_float+0x1b4>
 8005774:	682a      	ldr	r2, [r5, #0]
 8005776:	0553      	lsls	r3, r2, #21
 8005778:	d408      	bmi.n	800578c <_printf_float+0x210>
 800577a:	692b      	ldr	r3, [r5, #16]
 800577c:	003a      	movs	r2, r7
 800577e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005780:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005782:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005784:	47a0      	blx	r4
 8005786:	3001      	adds	r0, #1
 8005788:	d129      	bne.n	80057de <_printf_float+0x262>
 800578a:	e753      	b.n	8005634 <_printf_float+0xb8>
 800578c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800578e:	2b65      	cmp	r3, #101	@ 0x65
 8005790:	d800      	bhi.n	8005794 <_printf_float+0x218>
 8005792:	e0da      	b.n	800594a <_printf_float+0x3ce>
 8005794:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005796:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	f7fa fe56 	bl	800044c <__aeabi_dcmpeq>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d033      	beq.n	800580c <_printf_float+0x290>
 80057a4:	2301      	movs	r3, #1
 80057a6:	4a37      	ldr	r2, [pc, #220]	@ (8005884 <_printf_float+0x308>)
 80057a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80057ae:	47a0      	blx	r4
 80057b0:	3001      	adds	r0, #1
 80057b2:	d100      	bne.n	80057b6 <_printf_float+0x23a>
 80057b4:	e73e      	b.n	8005634 <_printf_float+0xb8>
 80057b6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80057b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80057ba:	42b3      	cmp	r3, r6
 80057bc:	db02      	blt.n	80057c4 <_printf_float+0x248>
 80057be:	682b      	ldr	r3, [r5, #0]
 80057c0:	07db      	lsls	r3, r3, #31
 80057c2:	d50c      	bpl.n	80057de <_printf_float+0x262>
 80057c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80057c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80057ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ce:	47a0      	blx	r4
 80057d0:	2400      	movs	r4, #0
 80057d2:	3001      	adds	r0, #1
 80057d4:	d100      	bne.n	80057d8 <_printf_float+0x25c>
 80057d6:	e72d      	b.n	8005634 <_printf_float+0xb8>
 80057d8:	1e73      	subs	r3, r6, #1
 80057da:	42a3      	cmp	r3, r4
 80057dc:	dc0a      	bgt.n	80057f4 <_printf_float+0x278>
 80057de:	682b      	ldr	r3, [r5, #0]
 80057e0:	079b      	lsls	r3, r3, #30
 80057e2:	d500      	bpl.n	80057e6 <_printf_float+0x26a>
 80057e4:	e105      	b.n	80059f2 <_printf_float+0x476>
 80057e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80057e8:	68e8      	ldr	r0, [r5, #12]
 80057ea:	4298      	cmp	r0, r3
 80057ec:	db00      	blt.n	80057f0 <_printf_float+0x274>
 80057ee:	e723      	b.n	8005638 <_printf_float+0xbc>
 80057f0:	0018      	movs	r0, r3
 80057f2:	e721      	b.n	8005638 <_printf_float+0xbc>
 80057f4:	002a      	movs	r2, r5
 80057f6:	2301      	movs	r3, #1
 80057f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80057fe:	321a      	adds	r2, #26
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	d100      	bne.n	8005808 <_printf_float+0x28c>
 8005806:	e715      	b.n	8005634 <_printf_float+0xb8>
 8005808:	3401      	adds	r4, #1
 800580a:	e7e5      	b.n	80057d8 <_printf_float+0x25c>
 800580c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800580e:	2b00      	cmp	r3, #0
 8005810:	dc3a      	bgt.n	8005888 <_printf_float+0x30c>
 8005812:	2301      	movs	r3, #1
 8005814:	4a1b      	ldr	r2, [pc, #108]	@ (8005884 <_printf_float+0x308>)
 8005816:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005818:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800581a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800581c:	47a0      	blx	r4
 800581e:	3001      	adds	r0, #1
 8005820:	d100      	bne.n	8005824 <_printf_float+0x2a8>
 8005822:	e707      	b.n	8005634 <_printf_float+0xb8>
 8005824:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005826:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005828:	4333      	orrs	r3, r6
 800582a:	d102      	bne.n	8005832 <_printf_float+0x2b6>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	07db      	lsls	r3, r3, #31
 8005830:	d5d5      	bpl.n	80057de <_printf_float+0x262>
 8005832:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005836:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005838:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800583a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800583c:	47a0      	blx	r4
 800583e:	2300      	movs	r3, #0
 8005840:	3001      	adds	r0, #1
 8005842:	d100      	bne.n	8005846 <_printf_float+0x2ca>
 8005844:	e6f6      	b.n	8005634 <_printf_float+0xb8>
 8005846:	930c      	str	r3, [sp, #48]	@ 0x30
 8005848:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800584a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800584c:	425b      	negs	r3, r3
 800584e:	4293      	cmp	r3, r2
 8005850:	dc01      	bgt.n	8005856 <_printf_float+0x2da>
 8005852:	0033      	movs	r3, r6
 8005854:	e792      	b.n	800577c <_printf_float+0x200>
 8005856:	002a      	movs	r2, r5
 8005858:	2301      	movs	r3, #1
 800585a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800585c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800585e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005860:	321a      	adds	r2, #26
 8005862:	47a0      	blx	r4
 8005864:	3001      	adds	r0, #1
 8005866:	d100      	bne.n	800586a <_printf_float+0x2ee>
 8005868:	e6e4      	b.n	8005634 <_printf_float+0xb8>
 800586a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800586c:	3301      	adds	r3, #1
 800586e:	e7ea      	b.n	8005846 <_printf_float+0x2ca>
 8005870:	7fefffff 	.word	0x7fefffff
 8005874:	080082e4 	.word	0x080082e4
 8005878:	080082e8 	.word	0x080082e8
 800587c:	080082ec 	.word	0x080082ec
 8005880:	080082f0 	.word	0x080082f0
 8005884:	080082f4 	.word	0x080082f4
 8005888:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800588a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800588c:	930c      	str	r3, [sp, #48]	@ 0x30
 800588e:	429e      	cmp	r6, r3
 8005890:	dd00      	ble.n	8005894 <_printf_float+0x318>
 8005892:	001e      	movs	r6, r3
 8005894:	2e00      	cmp	r6, #0
 8005896:	dc31      	bgt.n	80058fc <_printf_float+0x380>
 8005898:	43f3      	mvns	r3, r6
 800589a:	2400      	movs	r4, #0
 800589c:	17db      	asrs	r3, r3, #31
 800589e:	4033      	ands	r3, r6
 80058a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80058a2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80058a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a6:	1af3      	subs	r3, r6, r3
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	dc30      	bgt.n	800590e <_printf_float+0x392>
 80058ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058b0:	429a      	cmp	r2, r3
 80058b2:	dc38      	bgt.n	8005926 <_printf_float+0x3aa>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	07db      	lsls	r3, r3, #31
 80058b8:	d435      	bmi.n	8005926 <_printf_float+0x3aa>
 80058ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80058bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058c0:	1b9b      	subs	r3, r3, r6
 80058c2:	1b14      	subs	r4, r2, r4
 80058c4:	429c      	cmp	r4, r3
 80058c6:	dd00      	ble.n	80058ca <_printf_float+0x34e>
 80058c8:	001c      	movs	r4, r3
 80058ca:	2c00      	cmp	r4, #0
 80058cc:	dc34      	bgt.n	8005938 <_printf_float+0x3bc>
 80058ce:	43e3      	mvns	r3, r4
 80058d0:	2600      	movs	r6, #0
 80058d2:	17db      	asrs	r3, r3, #31
 80058d4:	401c      	ands	r4, r3
 80058d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	1b1b      	subs	r3, r3, r4
 80058de:	42b3      	cmp	r3, r6
 80058e0:	dc00      	bgt.n	80058e4 <_printf_float+0x368>
 80058e2:	e77c      	b.n	80057de <_printf_float+0x262>
 80058e4:	002a      	movs	r2, r5
 80058e6:	2301      	movs	r3, #1
 80058e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80058ee:	321a      	adds	r2, #26
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	d100      	bne.n	80058f8 <_printf_float+0x37c>
 80058f6:	e69d      	b.n	8005634 <_printf_float+0xb8>
 80058f8:	3601      	adds	r6, #1
 80058fa:	e7ec      	b.n	80058d6 <_printf_float+0x35a>
 80058fc:	0033      	movs	r3, r6
 80058fe:	003a      	movs	r2, r7
 8005900:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005904:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005906:	47a0      	blx	r4
 8005908:	3001      	adds	r0, #1
 800590a:	d1c5      	bne.n	8005898 <_printf_float+0x31c>
 800590c:	e692      	b.n	8005634 <_printf_float+0xb8>
 800590e:	002a      	movs	r2, r5
 8005910:	2301      	movs	r3, #1
 8005912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005914:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005916:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005918:	321a      	adds	r2, #26
 800591a:	47b0      	blx	r6
 800591c:	3001      	adds	r0, #1
 800591e:	d100      	bne.n	8005922 <_printf_float+0x3a6>
 8005920:	e688      	b.n	8005634 <_printf_float+0xb8>
 8005922:	3401      	adds	r4, #1
 8005924:	e7bd      	b.n	80058a2 <_printf_float+0x326>
 8005926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800592a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800592c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800592e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005930:	47a0      	blx	r4
 8005932:	3001      	adds	r0, #1
 8005934:	d1c1      	bne.n	80058ba <_printf_float+0x33e>
 8005936:	e67d      	b.n	8005634 <_printf_float+0xb8>
 8005938:	19ba      	adds	r2, r7, r6
 800593a:	0023      	movs	r3, r4
 800593c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800593e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005940:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005942:	47b0      	blx	r6
 8005944:	3001      	adds	r0, #1
 8005946:	d1c2      	bne.n	80058ce <_printf_float+0x352>
 8005948:	e674      	b.n	8005634 <_printf_float+0xb8>
 800594a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800594c:	930c      	str	r3, [sp, #48]	@ 0x30
 800594e:	2b01      	cmp	r3, #1
 8005950:	dc02      	bgt.n	8005958 <_printf_float+0x3dc>
 8005952:	2301      	movs	r3, #1
 8005954:	421a      	tst	r2, r3
 8005956:	d039      	beq.n	80059cc <_printf_float+0x450>
 8005958:	2301      	movs	r3, #1
 800595a:	003a      	movs	r2, r7
 800595c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800595e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005960:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005962:	47b0      	blx	r6
 8005964:	3001      	adds	r0, #1
 8005966:	d100      	bne.n	800596a <_printf_float+0x3ee>
 8005968:	e664      	b.n	8005634 <_printf_float+0xb8>
 800596a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800596c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800596e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005970:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005972:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005974:	47b0      	blx	r6
 8005976:	3001      	adds	r0, #1
 8005978:	d100      	bne.n	800597c <_printf_float+0x400>
 800597a:	e65b      	b.n	8005634 <_printf_float+0xb8>
 800597c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800597e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	3b01      	subs	r3, #1
 8005986:	930c      	str	r3, [sp, #48]	@ 0x30
 8005988:	2300      	movs	r3, #0
 800598a:	f7fa fd5f 	bl	800044c <__aeabi_dcmpeq>
 800598e:	2800      	cmp	r0, #0
 8005990:	d11a      	bne.n	80059c8 <_printf_float+0x44c>
 8005992:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005994:	1c7a      	adds	r2, r7, #1
 8005996:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005998:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800599a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800599c:	47b0      	blx	r6
 800599e:	3001      	adds	r0, #1
 80059a0:	d10e      	bne.n	80059c0 <_printf_float+0x444>
 80059a2:	e647      	b.n	8005634 <_printf_float+0xb8>
 80059a4:	002a      	movs	r2, r5
 80059a6:	2301      	movs	r3, #1
 80059a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80059ae:	321a      	adds	r2, #26
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	d100      	bne.n	80059b8 <_printf_float+0x43c>
 80059b6:	e63d      	b.n	8005634 <_printf_float+0xb8>
 80059b8:	3601      	adds	r6, #1
 80059ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80059bc:	429e      	cmp	r6, r3
 80059be:	dbf1      	blt.n	80059a4 <_printf_float+0x428>
 80059c0:	002a      	movs	r2, r5
 80059c2:	0023      	movs	r3, r4
 80059c4:	3250      	adds	r2, #80	@ 0x50
 80059c6:	e6da      	b.n	800577e <_printf_float+0x202>
 80059c8:	2600      	movs	r6, #0
 80059ca:	e7f6      	b.n	80059ba <_printf_float+0x43e>
 80059cc:	003a      	movs	r2, r7
 80059ce:	e7e2      	b.n	8005996 <_printf_float+0x41a>
 80059d0:	002a      	movs	r2, r5
 80059d2:	2301      	movs	r3, #1
 80059d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80059da:	3219      	adds	r2, #25
 80059dc:	47b0      	blx	r6
 80059de:	3001      	adds	r0, #1
 80059e0:	d100      	bne.n	80059e4 <_printf_float+0x468>
 80059e2:	e627      	b.n	8005634 <_printf_float+0xb8>
 80059e4:	3401      	adds	r4, #1
 80059e6:	68eb      	ldr	r3, [r5, #12]
 80059e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	dcef      	bgt.n	80059d0 <_printf_float+0x454>
 80059f0:	e6f9      	b.n	80057e6 <_printf_float+0x26a>
 80059f2:	2400      	movs	r4, #0
 80059f4:	e7f7      	b.n	80059e6 <_printf_float+0x46a>
 80059f6:	46c0      	nop			@ (mov r8, r8)

080059f8 <_printf_common>:
 80059f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059fa:	0016      	movs	r6, r2
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	688a      	ldr	r2, [r1, #8]
 8005a00:	690b      	ldr	r3, [r1, #16]
 8005a02:	000c      	movs	r4, r1
 8005a04:	9000      	str	r0, [sp, #0]
 8005a06:	4293      	cmp	r3, r2
 8005a08:	da00      	bge.n	8005a0c <_printf_common+0x14>
 8005a0a:	0013      	movs	r3, r2
 8005a0c:	0022      	movs	r2, r4
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	3243      	adds	r2, #67	@ 0x43
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d001      	beq.n	8005a1c <_printf_common+0x24>
 8005a18:	3301      	adds	r3, #1
 8005a1a:	6033      	str	r3, [r6, #0]
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	069b      	lsls	r3, r3, #26
 8005a20:	d502      	bpl.n	8005a28 <_printf_common+0x30>
 8005a22:	6833      	ldr	r3, [r6, #0]
 8005a24:	3302      	adds	r3, #2
 8005a26:	6033      	str	r3, [r6, #0]
 8005a28:	6822      	ldr	r2, [r4, #0]
 8005a2a:	2306      	movs	r3, #6
 8005a2c:	0015      	movs	r5, r2
 8005a2e:	401d      	ands	r5, r3
 8005a30:	421a      	tst	r2, r3
 8005a32:	d027      	beq.n	8005a84 <_printf_common+0x8c>
 8005a34:	0023      	movs	r3, r4
 8005a36:	3343      	adds	r3, #67	@ 0x43
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	1e5a      	subs	r2, r3, #1
 8005a3c:	4193      	sbcs	r3, r2
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	0692      	lsls	r2, r2, #26
 8005a42:	d430      	bmi.n	8005aa6 <_printf_common+0xae>
 8005a44:	0022      	movs	r2, r4
 8005a46:	9901      	ldr	r1, [sp, #4]
 8005a48:	9800      	ldr	r0, [sp, #0]
 8005a4a:	9d08      	ldr	r5, [sp, #32]
 8005a4c:	3243      	adds	r2, #67	@ 0x43
 8005a4e:	47a8      	blx	r5
 8005a50:	3001      	adds	r0, #1
 8005a52:	d025      	beq.n	8005aa0 <_printf_common+0xa8>
 8005a54:	2206      	movs	r2, #6
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	2500      	movs	r5, #0
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d105      	bne.n	8005a6c <_printf_common+0x74>
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	68e5      	ldr	r5, [r4, #12]
 8005a64:	1aed      	subs	r5, r5, r3
 8005a66:	43eb      	mvns	r3, r5
 8005a68:	17db      	asrs	r3, r3, #31
 8005a6a:	401d      	ands	r5, r3
 8005a6c:	68a3      	ldr	r3, [r4, #8]
 8005a6e:	6922      	ldr	r2, [r4, #16]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	dd01      	ble.n	8005a78 <_printf_common+0x80>
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	18ed      	adds	r5, r5, r3
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42b5      	cmp	r5, r6
 8005a7c:	d120      	bne.n	8005ac0 <_printf_common+0xc8>
 8005a7e:	2000      	movs	r0, #0
 8005a80:	e010      	b.n	8005aa4 <_printf_common+0xac>
 8005a82:	3501      	adds	r5, #1
 8005a84:	68e3      	ldr	r3, [r4, #12]
 8005a86:	6832      	ldr	r2, [r6, #0]
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	42ab      	cmp	r3, r5
 8005a8c:	ddd2      	ble.n	8005a34 <_printf_common+0x3c>
 8005a8e:	0022      	movs	r2, r4
 8005a90:	2301      	movs	r3, #1
 8005a92:	9901      	ldr	r1, [sp, #4]
 8005a94:	9800      	ldr	r0, [sp, #0]
 8005a96:	9f08      	ldr	r7, [sp, #32]
 8005a98:	3219      	adds	r2, #25
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1f0      	bne.n	8005a82 <_printf_common+0x8a>
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	4240      	negs	r0, r0
 8005aa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aa6:	2030      	movs	r0, #48	@ 0x30
 8005aa8:	18e1      	adds	r1, r4, r3
 8005aaa:	3143      	adds	r1, #67	@ 0x43
 8005aac:	7008      	strb	r0, [r1, #0]
 8005aae:	0021      	movs	r1, r4
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	3145      	adds	r1, #69	@ 0x45
 8005ab4:	7809      	ldrb	r1, [r1, #0]
 8005ab6:	18a2      	adds	r2, r4, r2
 8005ab8:	3243      	adds	r2, #67	@ 0x43
 8005aba:	3302      	adds	r3, #2
 8005abc:	7011      	strb	r1, [r2, #0]
 8005abe:	e7c1      	b.n	8005a44 <_printf_common+0x4c>
 8005ac0:	0022      	movs	r2, r4
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9901      	ldr	r1, [sp, #4]
 8005ac6:	9800      	ldr	r0, [sp, #0]
 8005ac8:	9f08      	ldr	r7, [sp, #32]
 8005aca:	321a      	adds	r2, #26
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d0e6      	beq.n	8005aa0 <_printf_common+0xa8>
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7d1      	b.n	8005a7a <_printf_common+0x82>
	...

08005ad8 <_printf_i>:
 8005ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ada:	b08b      	sub	sp, #44	@ 0x2c
 8005adc:	9206      	str	r2, [sp, #24]
 8005ade:	000a      	movs	r2, r1
 8005ae0:	3243      	adds	r2, #67	@ 0x43
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	9005      	str	r0, [sp, #20]
 8005ae6:	9203      	str	r2, [sp, #12]
 8005ae8:	7e0a      	ldrb	r2, [r1, #24]
 8005aea:	000c      	movs	r4, r1
 8005aec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005aee:	2a78      	cmp	r2, #120	@ 0x78
 8005af0:	d809      	bhi.n	8005b06 <_printf_i+0x2e>
 8005af2:	2a62      	cmp	r2, #98	@ 0x62
 8005af4:	d80b      	bhi.n	8005b0e <_printf_i+0x36>
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	d100      	bne.n	8005afc <_printf_i+0x24>
 8005afa:	e0bc      	b.n	8005c76 <_printf_i+0x19e>
 8005afc:	497b      	ldr	r1, [pc, #492]	@ (8005cec <_printf_i+0x214>)
 8005afe:	9104      	str	r1, [sp, #16]
 8005b00:	2a58      	cmp	r2, #88	@ 0x58
 8005b02:	d100      	bne.n	8005b06 <_printf_i+0x2e>
 8005b04:	e090      	b.n	8005c28 <_printf_i+0x150>
 8005b06:	0025      	movs	r5, r4
 8005b08:	3542      	adds	r5, #66	@ 0x42
 8005b0a:	702a      	strb	r2, [r5, #0]
 8005b0c:	e022      	b.n	8005b54 <_printf_i+0x7c>
 8005b0e:	0010      	movs	r0, r2
 8005b10:	3863      	subs	r0, #99	@ 0x63
 8005b12:	2815      	cmp	r0, #21
 8005b14:	d8f7      	bhi.n	8005b06 <_printf_i+0x2e>
 8005b16:	f7fa fb09 	bl	800012c <__gnu_thumb1_case_shi>
 8005b1a:	0016      	.short	0x0016
 8005b1c:	fff6001f 	.word	0xfff6001f
 8005b20:	fff6fff6 	.word	0xfff6fff6
 8005b24:	001ffff6 	.word	0x001ffff6
 8005b28:	fff6fff6 	.word	0xfff6fff6
 8005b2c:	fff6fff6 	.word	0xfff6fff6
 8005b30:	003600a1 	.word	0x003600a1
 8005b34:	fff60080 	.word	0xfff60080
 8005b38:	00b2fff6 	.word	0x00b2fff6
 8005b3c:	0036fff6 	.word	0x0036fff6
 8005b40:	fff6fff6 	.word	0xfff6fff6
 8005b44:	0084      	.short	0x0084
 8005b46:	0025      	movs	r5, r4
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	3542      	adds	r5, #66	@ 0x42
 8005b4c:	1d11      	adds	r1, r2, #4
 8005b4e:	6019      	str	r1, [r3, #0]
 8005b50:	6813      	ldr	r3, [r2, #0]
 8005b52:	702b      	strb	r3, [r5, #0]
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0a0      	b.n	8005c9a <_printf_i+0x1c2>
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	6809      	ldr	r1, [r1, #0]
 8005b5c:	1d02      	adds	r2, r0, #4
 8005b5e:	060d      	lsls	r5, r1, #24
 8005b60:	d50b      	bpl.n	8005b7a <_printf_i+0xa2>
 8005b62:	6806      	ldr	r6, [r0, #0]
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	da03      	bge.n	8005b72 <_printf_i+0x9a>
 8005b6a:	232d      	movs	r3, #45	@ 0x2d
 8005b6c:	9a03      	ldr	r2, [sp, #12]
 8005b6e:	4276      	negs	r6, r6
 8005b70:	7013      	strb	r3, [r2, #0]
 8005b72:	4b5e      	ldr	r3, [pc, #376]	@ (8005cec <_printf_i+0x214>)
 8005b74:	270a      	movs	r7, #10
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	e018      	b.n	8005bac <_printf_i+0xd4>
 8005b7a:	6806      	ldr	r6, [r0, #0]
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	0649      	lsls	r1, r1, #25
 8005b80:	d5f1      	bpl.n	8005b66 <_printf_i+0x8e>
 8005b82:	b236      	sxth	r6, r6
 8005b84:	e7ef      	b.n	8005b66 <_printf_i+0x8e>
 8005b86:	6808      	ldr	r0, [r1, #0]
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	c940      	ldmia	r1!, {r6}
 8005b8c:	0605      	lsls	r5, r0, #24
 8005b8e:	d402      	bmi.n	8005b96 <_printf_i+0xbe>
 8005b90:	0640      	lsls	r0, r0, #25
 8005b92:	d500      	bpl.n	8005b96 <_printf_i+0xbe>
 8005b94:	b2b6      	uxth	r6, r6
 8005b96:	6019      	str	r1, [r3, #0]
 8005b98:	4b54      	ldr	r3, [pc, #336]	@ (8005cec <_printf_i+0x214>)
 8005b9a:	270a      	movs	r7, #10
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005ba0:	d100      	bne.n	8005ba4 <_printf_i+0xcc>
 8005ba2:	3f02      	subs	r7, #2
 8005ba4:	0023      	movs	r3, r4
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	3343      	adds	r3, #67	@ 0x43
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	60a3      	str	r3, [r4, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db03      	blt.n	8005bbc <_printf_i+0xe4>
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	438a      	bics	r2, r1
 8005bba:	6022      	str	r2, [r4, #0]
 8005bbc:	2e00      	cmp	r6, #0
 8005bbe:	d102      	bne.n	8005bc6 <_printf_i+0xee>
 8005bc0:	9d03      	ldr	r5, [sp, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00c      	beq.n	8005be0 <_printf_i+0x108>
 8005bc6:	9d03      	ldr	r5, [sp, #12]
 8005bc8:	0030      	movs	r0, r6
 8005bca:	0039      	movs	r1, r7
 8005bcc:	f7fa fb3e 	bl	800024c <__aeabi_uidivmod>
 8005bd0:	9b04      	ldr	r3, [sp, #16]
 8005bd2:	3d01      	subs	r5, #1
 8005bd4:	5c5b      	ldrb	r3, [r3, r1]
 8005bd6:	702b      	strb	r3, [r5, #0]
 8005bd8:	0033      	movs	r3, r6
 8005bda:	0006      	movs	r6, r0
 8005bdc:	429f      	cmp	r7, r3
 8005bde:	d9f3      	bls.n	8005bc8 <_printf_i+0xf0>
 8005be0:	2f08      	cmp	r7, #8
 8005be2:	d109      	bne.n	8005bf8 <_printf_i+0x120>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	d506      	bpl.n	8005bf8 <_printf_i+0x120>
 8005bea:	6862      	ldr	r2, [r4, #4]
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	dc02      	bgt.n	8005bf8 <_printf_i+0x120>
 8005bf2:	2330      	movs	r3, #48	@ 0x30
 8005bf4:	3d01      	subs	r5, #1
 8005bf6:	702b      	strb	r3, [r5, #0]
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	1b5b      	subs	r3, r3, r5
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	9b07      	ldr	r3, [sp, #28]
 8005c00:	0021      	movs	r1, r4
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	9805      	ldr	r0, [sp, #20]
 8005c06:	9b06      	ldr	r3, [sp, #24]
 8005c08:	aa09      	add	r2, sp, #36	@ 0x24
 8005c0a:	f7ff fef5 	bl	80059f8 <_printf_common>
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d148      	bne.n	8005ca4 <_printf_i+0x1cc>
 8005c12:	2001      	movs	r0, #1
 8005c14:	4240      	negs	r0, r0
 8005c16:	b00b      	add	sp, #44	@ 0x2c
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	6809      	ldr	r1, [r1, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	2278      	movs	r2, #120	@ 0x78
 8005c24:	4932      	ldr	r1, [pc, #200]	@ (8005cf0 <_printf_i+0x218>)
 8005c26:	9104      	str	r1, [sp, #16]
 8005c28:	0021      	movs	r1, r4
 8005c2a:	3145      	adds	r1, #69	@ 0x45
 8005c2c:	700a      	strb	r2, [r1, #0]
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	c940      	ldmia	r1!, {r6}
 8005c34:	0610      	lsls	r0, r2, #24
 8005c36:	d402      	bmi.n	8005c3e <_printf_i+0x166>
 8005c38:	0650      	lsls	r0, r2, #25
 8005c3a:	d500      	bpl.n	8005c3e <_printf_i+0x166>
 8005c3c:	b2b6      	uxth	r6, r6
 8005c3e:	6019      	str	r1, [r3, #0]
 8005c40:	07d3      	lsls	r3, r2, #31
 8005c42:	d502      	bpl.n	8005c4a <_printf_i+0x172>
 8005c44:	2320      	movs	r3, #32
 8005c46:	4313      	orrs	r3, r2
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	2e00      	cmp	r6, #0
 8005c4c:	d001      	beq.n	8005c52 <_printf_i+0x17a>
 8005c4e:	2710      	movs	r7, #16
 8005c50:	e7a8      	b.n	8005ba4 <_printf_i+0xcc>
 8005c52:	2220      	movs	r2, #32
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	4393      	bics	r3, r2
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	e7f8      	b.n	8005c4e <_printf_i+0x176>
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	680d      	ldr	r5, [r1, #0]
 8005c60:	1d10      	adds	r0, r2, #4
 8005c62:	6949      	ldr	r1, [r1, #20]
 8005c64:	6018      	str	r0, [r3, #0]
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	062e      	lsls	r6, r5, #24
 8005c6a:	d501      	bpl.n	8005c70 <_printf_i+0x198>
 8005c6c:	6019      	str	r1, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <_printf_i+0x19e>
 8005c70:	066d      	lsls	r5, r5, #25
 8005c72:	d5fb      	bpl.n	8005c6c <_printf_i+0x194>
 8005c74:	8019      	strh	r1, [r3, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9d03      	ldr	r5, [sp, #12]
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	e7bf      	b.n	8005bfe <_printf_i+0x126>
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	1d11      	adds	r1, r2, #4
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	6815      	ldr	r5, [r2, #0]
 8005c86:	2100      	movs	r1, #0
 8005c88:	0028      	movs	r0, r5
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	f000 f9e9 	bl	8006062 <memchr>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d001      	beq.n	8005c98 <_printf_i+0x1c0>
 8005c94:	1b40      	subs	r0, r0, r5
 8005c96:	6060      	str	r0, [r4, #4]
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9a03      	ldr	r2, [sp, #12]
 8005ca0:	7013      	strb	r3, [r2, #0]
 8005ca2:	e7ac      	b.n	8005bfe <_printf_i+0x126>
 8005ca4:	002a      	movs	r2, r5
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	9906      	ldr	r1, [sp, #24]
 8005caa:	9805      	ldr	r0, [sp, #20]
 8005cac:	9d07      	ldr	r5, [sp, #28]
 8005cae:	47a8      	blx	r5
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0ae      	beq.n	8005c12 <_printf_i+0x13a>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	d415      	bmi.n	8005ce6 <_printf_i+0x20e>
 8005cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cbc:	68e0      	ldr	r0, [r4, #12]
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	daa9      	bge.n	8005c16 <_printf_i+0x13e>
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	e7a7      	b.n	8005c16 <_printf_i+0x13e>
 8005cc6:	0022      	movs	r2, r4
 8005cc8:	2301      	movs	r3, #1
 8005cca:	9906      	ldr	r1, [sp, #24]
 8005ccc:	9805      	ldr	r0, [sp, #20]
 8005cce:	9e07      	ldr	r6, [sp, #28]
 8005cd0:	3219      	adds	r2, #25
 8005cd2:	47b0      	blx	r6
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d09c      	beq.n	8005c12 <_printf_i+0x13a>
 8005cd8:	3501      	adds	r5, #1
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dcf0      	bgt.n	8005cc6 <_printf_i+0x1ee>
 8005ce4:	e7e9      	b.n	8005cba <_printf_i+0x1e2>
 8005ce6:	2500      	movs	r5, #0
 8005ce8:	e7f7      	b.n	8005cda <_printf_i+0x202>
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	080082f6 	.word	0x080082f6
 8005cf0:	08008307 	.word	0x08008307

08005cf4 <std>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	0004      	movs	r4, r0
 8005cfa:	6003      	str	r3, [r0, #0]
 8005cfc:	6043      	str	r3, [r0, #4]
 8005cfe:	6083      	str	r3, [r0, #8]
 8005d00:	8181      	strh	r1, [r0, #12]
 8005d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d04:	81c2      	strh	r2, [r0, #14]
 8005d06:	6103      	str	r3, [r0, #16]
 8005d08:	6143      	str	r3, [r0, #20]
 8005d0a:	6183      	str	r3, [r0, #24]
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	2208      	movs	r2, #8
 8005d10:	305c      	adds	r0, #92	@ 0x5c
 8005d12:	f000 f91f 	bl	8005f54 <memset>
 8005d16:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <std+0x50>)
 8005d18:	6224      	str	r4, [r4, #32]
 8005d1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <std+0x54>)
 8005d1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d20:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <std+0x58>)
 8005d22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d24:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <std+0x5c>)
 8005d26:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d28:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <std+0x60>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d005      	beq.n	8005d3a <std+0x46>
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <std+0x64>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d002      	beq.n	8005d3a <std+0x46>
 8005d34:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <std+0x68>)
 8005d36:	429c      	cmp	r4, r3
 8005d38:	d103      	bne.n	8005d42 <std+0x4e>
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	3058      	adds	r0, #88	@ 0x58
 8005d3e:	f000 f98d 	bl	800605c <__retarget_lock_init_recursive>
 8005d42:	bd10      	pop	{r4, pc}
 8005d44:	08005ebd 	.word	0x08005ebd
 8005d48:	08005ee5 	.word	0x08005ee5
 8005d4c:	08005f1d 	.word	0x08005f1d
 8005d50:	08005f49 	.word	0x08005f49
 8005d54:	20000354 	.word	0x20000354
 8005d58:	200003bc 	.word	0x200003bc
 8005d5c:	20000424 	.word	0x20000424

08005d60 <stdio_exit_handler>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	4a03      	ldr	r2, [pc, #12]	@ (8005d70 <stdio_exit_handler+0x10>)
 8005d64:	4903      	ldr	r1, [pc, #12]	@ (8005d74 <stdio_exit_handler+0x14>)
 8005d66:	4804      	ldr	r0, [pc, #16]	@ (8005d78 <stdio_exit_handler+0x18>)
 8005d68:	f000 f86c 	bl	8005e44 <_fwalk_sglue>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	2000000c 	.word	0x2000000c
 8005d74:	08007a99 	.word	0x08007a99
 8005d78:	2000001c 	.word	0x2000001c

08005d7c <cleanup_stdio>:
 8005d7c:	6841      	ldr	r1, [r0, #4]
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <cleanup_stdio+0x30>)
 8005d80:	b510      	push	{r4, lr}
 8005d82:	0004      	movs	r4, r0
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d001      	beq.n	8005d8c <cleanup_stdio+0x10>
 8005d88:	f001 fe86 	bl	8007a98 <_fflush_r>
 8005d8c:	68a1      	ldr	r1, [r4, #8]
 8005d8e:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <cleanup_stdio+0x34>)
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <cleanup_stdio+0x1e>
 8005d94:	0020      	movs	r0, r4
 8005d96:	f001 fe7f 	bl	8007a98 <_fflush_r>
 8005d9a:	68e1      	ldr	r1, [r4, #12]
 8005d9c:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <cleanup_stdio+0x38>)
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	d002      	beq.n	8005da8 <cleanup_stdio+0x2c>
 8005da2:	0020      	movs	r0, r4
 8005da4:	f001 fe78 	bl	8007a98 <_fflush_r>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	20000354 	.word	0x20000354
 8005db0:	200003bc 	.word	0x200003bc
 8005db4:	20000424 	.word	0x20000424

08005db8 <global_stdio_init.part.0>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <global_stdio_init.part.0+0x28>)
 8005dbc:	4a09      	ldr	r2, [pc, #36]	@ (8005de4 <global_stdio_init.part.0+0x2c>)
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4809      	ldr	r0, [pc, #36]	@ (8005de8 <global_stdio_init.part.0+0x30>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f7ff ff95 	bl	8005cf4 <std>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	2109      	movs	r1, #9
 8005dce:	4807      	ldr	r0, [pc, #28]	@ (8005dec <global_stdio_init.part.0+0x34>)
 8005dd0:	f7ff ff90 	bl	8005cf4 <std>
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	2112      	movs	r1, #18
 8005dd8:	4805      	ldr	r0, [pc, #20]	@ (8005df0 <global_stdio_init.part.0+0x38>)
 8005dda:	f7ff ff8b 	bl	8005cf4 <std>
 8005dde:	bd10      	pop	{r4, pc}
 8005de0:	2000048c 	.word	0x2000048c
 8005de4:	08005d61 	.word	0x08005d61
 8005de8:	20000354 	.word	0x20000354
 8005dec:	200003bc 	.word	0x200003bc
 8005df0:	20000424 	.word	0x20000424

08005df4 <__sfp_lock_acquire>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4802      	ldr	r0, [pc, #8]	@ (8005e00 <__sfp_lock_acquire+0xc>)
 8005df8:	f000 f931 	bl	800605e <__retarget_lock_acquire_recursive>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	20000495 	.word	0x20000495

08005e04 <__sfp_lock_release>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	4802      	ldr	r0, [pc, #8]	@ (8005e10 <__sfp_lock_release+0xc>)
 8005e08:	f000 f92a 	bl	8006060 <__retarget_lock_release_recursive>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	20000495 	.word	0x20000495

08005e14 <__sinit>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	0004      	movs	r4, r0
 8005e18:	f7ff ffec 	bl	8005df4 <__sfp_lock_acquire>
 8005e1c:	6a23      	ldr	r3, [r4, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <__sinit+0x14>
 8005e22:	f7ff ffef 	bl	8005e04 <__sfp_lock_release>
 8005e26:	bd10      	pop	{r4, pc}
 8005e28:	4b04      	ldr	r3, [pc, #16]	@ (8005e3c <__sinit+0x28>)
 8005e2a:	6223      	str	r3, [r4, #32]
 8005e2c:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <__sinit+0x2c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f6      	bne.n	8005e22 <__sinit+0xe>
 8005e34:	f7ff ffc0 	bl	8005db8 <global_stdio_init.part.0>
 8005e38:	e7f3      	b.n	8005e22 <__sinit+0xe>
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	08005d7d 	.word	0x08005d7d
 8005e40:	2000048c 	.word	0x2000048c

08005e44 <_fwalk_sglue>:
 8005e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e46:	0014      	movs	r4, r2
 8005e48:	2600      	movs	r6, #0
 8005e4a:	9000      	str	r0, [sp, #0]
 8005e4c:	9101      	str	r1, [sp, #4]
 8005e4e:	68a5      	ldr	r5, [r4, #8]
 8005e50:	6867      	ldr	r7, [r4, #4]
 8005e52:	3f01      	subs	r7, #1
 8005e54:	d504      	bpl.n	8005e60 <_fwalk_sglue+0x1c>
 8005e56:	6824      	ldr	r4, [r4, #0]
 8005e58:	2c00      	cmp	r4, #0
 8005e5a:	d1f8      	bne.n	8005e4e <_fwalk_sglue+0xa>
 8005e5c:	0030      	movs	r0, r6
 8005e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e60:	89ab      	ldrh	r3, [r5, #12]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d908      	bls.n	8005e78 <_fwalk_sglue+0x34>
 8005e66:	220e      	movs	r2, #14
 8005e68:	5eab      	ldrsh	r3, [r5, r2]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	d004      	beq.n	8005e78 <_fwalk_sglue+0x34>
 8005e6e:	0029      	movs	r1, r5
 8005e70:	9800      	ldr	r0, [sp, #0]
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	4798      	blx	r3
 8005e76:	4306      	orrs	r6, r0
 8005e78:	3568      	adds	r5, #104	@ 0x68
 8005e7a:	e7ea      	b.n	8005e52 <_fwalk_sglue+0xe>

08005e7c <siprintf>:
 8005e7c:	b40e      	push	{r1, r2, r3}
 8005e7e:	b500      	push	{lr}
 8005e80:	490b      	ldr	r1, [pc, #44]	@ (8005eb0 <siprintf+0x34>)
 8005e82:	b09c      	sub	sp, #112	@ 0x70
 8005e84:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e86:	9002      	str	r0, [sp, #8]
 8005e88:	9006      	str	r0, [sp, #24]
 8005e8a:	9107      	str	r1, [sp, #28]
 8005e8c:	9104      	str	r1, [sp, #16]
 8005e8e:	4809      	ldr	r0, [pc, #36]	@ (8005eb4 <siprintf+0x38>)
 8005e90:	4909      	ldr	r1, [pc, #36]	@ (8005eb8 <siprintf+0x3c>)
 8005e92:	cb04      	ldmia	r3!, {r2}
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	a902      	add	r1, sp, #8
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	f001 fc78 	bl	8007790 <_svfiprintf_r>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	b01c      	add	sp, #112	@ 0x70
 8005ea8:	bc08      	pop	{r3}
 8005eaa:	b003      	add	sp, #12
 8005eac:	4718      	bx	r3
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	7fffffff 	.word	0x7fffffff
 8005eb4:	20000018 	.word	0x20000018
 8005eb8:	ffff0208 	.word	0xffff0208

08005ebc <__sread>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	000c      	movs	r4, r1
 8005ec0:	250e      	movs	r5, #14
 8005ec2:	5f49      	ldrsh	r1, [r1, r5]
 8005ec4:	f000 f878 	bl	8005fb8 <_read_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	db03      	blt.n	8005ed4 <__sread+0x18>
 8005ecc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005ece:	181b      	adds	r3, r3, r0
 8005ed0:	6563      	str	r3, [r4, #84]	@ 0x54
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	4a02      	ldr	r2, [pc, #8]	@ (8005ee0 <__sread+0x24>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	e7f9      	b.n	8005ed2 <__sread+0x16>
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	ffffefff 	.word	0xffffefff

08005ee4 <__swrite>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	001f      	movs	r7, r3
 8005ee8:	898b      	ldrh	r3, [r1, #12]
 8005eea:	0005      	movs	r5, r0
 8005eec:	000c      	movs	r4, r1
 8005eee:	0016      	movs	r6, r2
 8005ef0:	05db      	lsls	r3, r3, #23
 8005ef2:	d505      	bpl.n	8005f00 <__swrite+0x1c>
 8005ef4:	230e      	movs	r3, #14
 8005ef6:	5ec9      	ldrsh	r1, [r1, r3]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2302      	movs	r3, #2
 8005efc:	f000 f848 	bl	8005f90 <_lseek_r>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	4a05      	ldr	r2, [pc, #20]	@ (8005f18 <__swrite+0x34>)
 8005f04:	0028      	movs	r0, r5
 8005f06:	4013      	ands	r3, r2
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	0032      	movs	r2, r6
 8005f0c:	230e      	movs	r3, #14
 8005f0e:	5ee1      	ldrsh	r1, [r4, r3]
 8005f10:	003b      	movs	r3, r7
 8005f12:	f000 f865 	bl	8005fe0 <_write_r>
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	ffffefff 	.word	0xffffefff

08005f1c <__sseek>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	000c      	movs	r4, r1
 8005f20:	250e      	movs	r5, #14
 8005f22:	5f49      	ldrsh	r1, [r1, r5]
 8005f24:	f000 f834 	bl	8005f90 <_lseek_r>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	1c42      	adds	r2, r0, #1
 8005f2c:	d103      	bne.n	8005f36 <__sseek+0x1a>
 8005f2e:	4a05      	ldr	r2, [pc, #20]	@ (8005f44 <__sseek+0x28>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	2280      	movs	r2, #128	@ 0x80
 8005f38:	0152      	lsls	r2, r2, #5
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f40:	e7f8      	b.n	8005f34 <__sseek+0x18>
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	ffffefff 	.word	0xffffefff

08005f48 <__sclose>:
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	230e      	movs	r3, #14
 8005f4c:	5ec9      	ldrsh	r1, [r1, r3]
 8005f4e:	f000 f80d 	bl	8005f6c <_close_r>
 8005f52:	bd10      	pop	{r4, pc}

08005f54 <memset>:
 8005f54:	0003      	movs	r3, r0
 8005f56:	1882      	adds	r2, r0, r2
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memset+0xa>
 8005f5c:	4770      	bx	lr
 8005f5e:	7019      	strb	r1, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	e7f9      	b.n	8005f58 <memset+0x4>

08005f64 <_localeconv_r>:
 8005f64:	4800      	ldr	r0, [pc, #0]	@ (8005f68 <_localeconv_r+0x4>)
 8005f66:	4770      	bx	lr
 8005f68:	20000158 	.word	0x20000158

08005f6c <_close_r>:
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	4d06      	ldr	r5, [pc, #24]	@ (8005f8c <_close_r+0x20>)
 8005f72:	0004      	movs	r4, r0
 8005f74:	0008      	movs	r0, r1
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fc fe9e 	bl	8002cb8 <_close>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d103      	bne.n	8005f88 <_close_r+0x1c>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d000      	beq.n	8005f88 <_close_r+0x1c>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	20000490 	.word	0x20000490

08005f90 <_lseek_r>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	0004      	movs	r4, r0
 8005f94:	0008      	movs	r0, r1
 8005f96:	0011      	movs	r1, r2
 8005f98:	001a      	movs	r2, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4d05      	ldr	r5, [pc, #20]	@ (8005fb4 <_lseek_r+0x24>)
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	f7fc feab 	bl	8002cfa <_lseek>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_lseek_r+0x20>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d000      	beq.n	8005fb0 <_lseek_r+0x20>
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	bd70      	pop	{r4, r5, r6, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	20000490 	.word	0x20000490

08005fb8 <_read_r>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	0004      	movs	r4, r0
 8005fbc:	0008      	movs	r0, r1
 8005fbe:	0011      	movs	r1, r2
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	4d05      	ldr	r5, [pc, #20]	@ (8005fdc <_read_r+0x24>)
 8005fc6:	602b      	str	r3, [r5, #0]
 8005fc8:	f7fc fe3d 	bl	8002c46 <_read>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d103      	bne.n	8005fd8 <_read_r+0x20>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d000      	beq.n	8005fd8 <_read_r+0x20>
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	20000490 	.word	0x20000490

08005fe0 <_write_r>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	0008      	movs	r0, r1
 8005fe6:	0011      	movs	r1, r2
 8005fe8:	001a      	movs	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	4d05      	ldr	r5, [pc, #20]	@ (8006004 <_write_r+0x24>)
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fc fe46 	bl	8002c80 <_write>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d103      	bne.n	8006000 <_write_r+0x20>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d000      	beq.n	8006000 <_write_r+0x20>
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	bd70      	pop	{r4, r5, r6, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	20000490 	.word	0x20000490

08006008 <__errno>:
 8006008:	4b01      	ldr	r3, [pc, #4]	@ (8006010 <__errno+0x8>)
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	4770      	bx	lr
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	20000018 	.word	0x20000018

08006014 <__libc_init_array>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	2600      	movs	r6, #0
 8006018:	4c0c      	ldr	r4, [pc, #48]	@ (800604c <__libc_init_array+0x38>)
 800601a:	4d0d      	ldr	r5, [pc, #52]	@ (8006050 <__libc_init_array+0x3c>)
 800601c:	1b64      	subs	r4, r4, r5
 800601e:	10a4      	asrs	r4, r4, #2
 8006020:	42a6      	cmp	r6, r4
 8006022:	d109      	bne.n	8006038 <__libc_init_array+0x24>
 8006024:	2600      	movs	r6, #0
 8006026:	f002 f907 	bl	8008238 <_init>
 800602a:	4c0a      	ldr	r4, [pc, #40]	@ (8006054 <__libc_init_array+0x40>)
 800602c:	4d0a      	ldr	r5, [pc, #40]	@ (8006058 <__libc_init_array+0x44>)
 800602e:	1b64      	subs	r4, r4, r5
 8006030:	10a4      	asrs	r4, r4, #2
 8006032:	42a6      	cmp	r6, r4
 8006034:	d105      	bne.n	8006042 <__libc_init_array+0x2e>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	00b3      	lsls	r3, r6, #2
 800603a:	58eb      	ldr	r3, [r5, r3]
 800603c:	4798      	blx	r3
 800603e:	3601      	adds	r6, #1
 8006040:	e7ee      	b.n	8006020 <__libc_init_array+0xc>
 8006042:	00b3      	lsls	r3, r6, #2
 8006044:	58eb      	ldr	r3, [r5, r3]
 8006046:	4798      	blx	r3
 8006048:	3601      	adds	r6, #1
 800604a:	e7f2      	b.n	8006032 <__libc_init_array+0x1e>
 800604c:	08008658 	.word	0x08008658
 8006050:	08008658 	.word	0x08008658
 8006054:	0800865c 	.word	0x0800865c
 8006058:	08008658 	.word	0x08008658

0800605c <__retarget_lock_init_recursive>:
 800605c:	4770      	bx	lr

0800605e <__retarget_lock_acquire_recursive>:
 800605e:	4770      	bx	lr

08006060 <__retarget_lock_release_recursive>:
 8006060:	4770      	bx	lr

08006062 <memchr>:
 8006062:	b2c9      	uxtb	r1, r1
 8006064:	1882      	adds	r2, r0, r2
 8006066:	4290      	cmp	r0, r2
 8006068:	d101      	bne.n	800606e <memchr+0xc>
 800606a:	2000      	movs	r0, #0
 800606c:	4770      	bx	lr
 800606e:	7803      	ldrb	r3, [r0, #0]
 8006070:	428b      	cmp	r3, r1
 8006072:	d0fb      	beq.n	800606c <memchr+0xa>
 8006074:	3001      	adds	r0, #1
 8006076:	e7f6      	b.n	8006066 <memchr+0x4>

08006078 <quorem>:
 8006078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607a:	6902      	ldr	r2, [r0, #16]
 800607c:	690f      	ldr	r7, [r1, #16]
 800607e:	b087      	sub	sp, #28
 8006080:	0006      	movs	r6, r0
 8006082:	000b      	movs	r3, r1
 8006084:	2000      	movs	r0, #0
 8006086:	9102      	str	r1, [sp, #8]
 8006088:	42ba      	cmp	r2, r7
 800608a:	db6d      	blt.n	8006168 <quorem+0xf0>
 800608c:	3f01      	subs	r7, #1
 800608e:	00bc      	lsls	r4, r7, #2
 8006090:	3314      	adds	r3, #20
 8006092:	9305      	str	r3, [sp, #20]
 8006094:	191b      	adds	r3, r3, r4
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	0033      	movs	r3, r6
 800609a:	3314      	adds	r3, #20
 800609c:	191c      	adds	r4, r3, r4
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	9304      	str	r3, [sp, #16]
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	9804      	ldr	r0, [sp, #16]
 80060a8:	681d      	ldr	r5, [r3, #0]
 80060aa:	3501      	adds	r5, #1
 80060ac:	0029      	movs	r1, r5
 80060ae:	f7fa f847 	bl	8000140 <__udivsi3>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	9000      	str	r0, [sp, #0]
 80060b6:	42ab      	cmp	r3, r5
 80060b8:	d32b      	bcc.n	8006112 <quorem+0x9a>
 80060ba:	9b05      	ldr	r3, [sp, #20]
 80060bc:	9d01      	ldr	r5, [sp, #4]
 80060be:	469c      	mov	ip, r3
 80060c0:	2300      	movs	r3, #0
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	4662      	mov	r2, ip
 80060c8:	ca08      	ldmia	r2!, {r3}
 80060ca:	6828      	ldr	r0, [r5, #0]
 80060cc:	4694      	mov	ip, r2
 80060ce:	9a00      	ldr	r2, [sp, #0]
 80060d0:	b299      	uxth	r1, r3
 80060d2:	4351      	muls	r1, r2
 80060d4:	9a05      	ldr	r2, [sp, #20]
 80060d6:	0c1b      	lsrs	r3, r3, #16
 80060d8:	1889      	adds	r1, r1, r2
 80060da:	9a00      	ldr	r2, [sp, #0]
 80060dc:	4353      	muls	r3, r2
 80060de:	0c0a      	lsrs	r2, r1, #16
 80060e0:	189b      	adds	r3, r3, r2
 80060e2:	0c1a      	lsrs	r2, r3, #16
 80060e4:	b289      	uxth	r1, r1
 80060e6:	9205      	str	r2, [sp, #20]
 80060e8:	b282      	uxth	r2, r0
 80060ea:	1a52      	subs	r2, r2, r1
 80060ec:	9904      	ldr	r1, [sp, #16]
 80060ee:	0c00      	lsrs	r0, r0, #16
 80060f0:	1852      	adds	r2, r2, r1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	1411      	asrs	r1, r2, #16
 80060f6:	1ac3      	subs	r3, r0, r3
 80060f8:	185b      	adds	r3, r3, r1
 80060fa:	1419      	asrs	r1, r3, #16
 80060fc:	b292      	uxth	r2, r2
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	431a      	orrs	r2, r3
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	9104      	str	r1, [sp, #16]
 8006106:	c504      	stmia	r5!, {r2}
 8006108:	4563      	cmp	r3, ip
 800610a:	d2dc      	bcs.n	80060c6 <quorem+0x4e>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d030      	beq.n	8006174 <quorem+0xfc>
 8006112:	0030      	movs	r0, r6
 8006114:	9902      	ldr	r1, [sp, #8]
 8006116:	f001 f9c5 	bl	80074a4 <__mcmp>
 800611a:	2800      	cmp	r0, #0
 800611c:	db23      	blt.n	8006166 <quorem+0xee>
 800611e:	0034      	movs	r4, r6
 8006120:	2500      	movs	r5, #0
 8006122:	9902      	ldr	r1, [sp, #8]
 8006124:	3414      	adds	r4, #20
 8006126:	3114      	adds	r1, #20
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	c901      	ldmia	r1!, {r0}
 800612c:	9302      	str	r3, [sp, #8]
 800612e:	466b      	mov	r3, sp
 8006130:	891b      	ldrh	r3, [r3, #8]
 8006132:	b282      	uxth	r2, r0
 8006134:	1a9a      	subs	r2, r3, r2
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	1952      	adds	r2, r2, r5
 800613a:	0c00      	lsrs	r0, r0, #16
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	1a1b      	subs	r3, r3, r0
 8006140:	1410      	asrs	r0, r2, #16
 8006142:	181b      	adds	r3, r3, r0
 8006144:	141d      	asrs	r5, r3, #16
 8006146:	b292      	uxth	r2, r2
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	431a      	orrs	r2, r3
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	c404      	stmia	r4!, {r2}
 8006150:	428b      	cmp	r3, r1
 8006152:	d2e9      	bcs.n	8006128 <quorem+0xb0>
 8006154:	9a01      	ldr	r2, [sp, #4]
 8006156:	00bb      	lsls	r3, r7, #2
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	2a00      	cmp	r2, #0
 800615e:	d013      	beq.n	8006188 <quorem+0x110>
 8006160:	9b00      	ldr	r3, [sp, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	9800      	ldr	r0, [sp, #0]
 8006168:	b007      	add	sp, #28
 800616a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <quorem+0x104>
 8006172:	3f01      	subs	r7, #1
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	3c04      	subs	r4, #4
 8006178:	42a3      	cmp	r3, r4
 800617a:	d3f7      	bcc.n	800616c <quorem+0xf4>
 800617c:	6137      	str	r7, [r6, #16]
 800617e:	e7c8      	b.n	8006112 <quorem+0x9a>
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	2a00      	cmp	r2, #0
 8006184:	d104      	bne.n	8006190 <quorem+0x118>
 8006186:	3f01      	subs	r7, #1
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	3b04      	subs	r3, #4
 800618c:	429a      	cmp	r2, r3
 800618e:	d3f7      	bcc.n	8006180 <quorem+0x108>
 8006190:	6137      	str	r7, [r6, #16]
 8006192:	e7e5      	b.n	8006160 <quorem+0xe8>

08006194 <_dtoa_r>:
 8006194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006196:	0014      	movs	r4, r2
 8006198:	001d      	movs	r5, r3
 800619a:	69c6      	ldr	r6, [r0, #28]
 800619c:	b09d      	sub	sp, #116	@ 0x74
 800619e:	940a      	str	r4, [sp, #40]	@ 0x28
 80061a0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80061a2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80061a4:	9003      	str	r0, [sp, #12]
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	d10f      	bne.n	80061ca <_dtoa_r+0x36>
 80061aa:	2010      	movs	r0, #16
 80061ac:	f000 fe30 	bl	8006e10 <malloc>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	1e02      	subs	r2, r0, #0
 80061b4:	61d8      	str	r0, [r3, #28]
 80061b6:	d104      	bne.n	80061c2 <_dtoa_r+0x2e>
 80061b8:	21ef      	movs	r1, #239	@ 0xef
 80061ba:	4bc7      	ldr	r3, [pc, #796]	@ (80064d8 <_dtoa_r+0x344>)
 80061bc:	48c7      	ldr	r0, [pc, #796]	@ (80064dc <_dtoa_r+0x348>)
 80061be:	f001 fcc5 	bl	8007b4c <__assert_func>
 80061c2:	6046      	str	r6, [r0, #4]
 80061c4:	6086      	str	r6, [r0, #8]
 80061c6:	6006      	str	r6, [r0, #0]
 80061c8:	60c6      	str	r6, [r0, #12]
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	2900      	cmp	r1, #0
 80061d2:	d00b      	beq.n	80061ec <_dtoa_r+0x58>
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	2301      	movs	r3, #1
 80061d8:	4093      	lsls	r3, r2
 80061da:	604a      	str	r2, [r1, #4]
 80061dc:	608b      	str	r3, [r1, #8]
 80061de:	9803      	ldr	r0, [sp, #12]
 80061e0:	f000 ff16 	bl	8007010 <_Bfree>
 80061e4:	2200      	movs	r2, #0
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	da1e      	bge.n	800622e <_dtoa_r+0x9a>
 80061f0:	2301      	movs	r3, #1
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	006b      	lsls	r3, r5, #1
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061fa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80061fc:	4bb8      	ldr	r3, [pc, #736]	@ (80064e0 <_dtoa_r+0x34c>)
 80061fe:	4ab8      	ldr	r2, [pc, #736]	@ (80064e0 <_dtoa_r+0x34c>)
 8006200:	403b      	ands	r3, r7
 8006202:	4293      	cmp	r3, r2
 8006204:	d116      	bne.n	8006234 <_dtoa_r+0xa0>
 8006206:	4bb7      	ldr	r3, [pc, #732]	@ (80064e4 <_dtoa_r+0x350>)
 8006208:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	033b      	lsls	r3, r7, #12
 800620e:	0b1b      	lsrs	r3, r3, #12
 8006210:	4323      	orrs	r3, r4
 8006212:	d101      	bne.n	8006218 <_dtoa_r+0x84>
 8006214:	f000 fd83 	bl	8006d1e <_dtoa_r+0xb8a>
 8006218:	4bb3      	ldr	r3, [pc, #716]	@ (80064e8 <_dtoa_r+0x354>)
 800621a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800621c:	9308      	str	r3, [sp, #32]
 800621e:	2a00      	cmp	r2, #0
 8006220:	d002      	beq.n	8006228 <_dtoa_r+0x94>
 8006222:	4bb2      	ldr	r3, [pc, #712]	@ (80064ec <_dtoa_r+0x358>)
 8006224:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	9808      	ldr	r0, [sp, #32]
 800622a:	b01d      	add	sp, #116	@ 0x74
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	2300      	movs	r3, #0
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	e7e2      	b.n	80061fa <_dtoa_r+0x66>
 8006234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006238:	9212      	str	r2, [sp, #72]	@ 0x48
 800623a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800623c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800623e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006240:	2200      	movs	r2, #0
 8006242:	2300      	movs	r3, #0
 8006244:	f7fa f902 	bl	800044c <__aeabi_dcmpeq>
 8006248:	1e06      	subs	r6, r0, #0
 800624a:	d00b      	beq.n	8006264 <_dtoa_r+0xd0>
 800624c:	2301      	movs	r3, #1
 800624e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <_dtoa_r+0xca>
 8006258:	4ba5      	ldr	r3, [pc, #660]	@ (80064f0 <_dtoa_r+0x35c>)
 800625a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4ba5      	ldr	r3, [pc, #660]	@ (80064f4 <_dtoa_r+0x360>)
 8006260:	9308      	str	r3, [sp, #32]
 8006262:	e7e1      	b.n	8006228 <_dtoa_r+0x94>
 8006264:	ab1a      	add	r3, sp, #104	@ 0x68
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	ab1b      	add	r3, sp, #108	@ 0x6c
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	9803      	ldr	r0, [sp, #12]
 800626e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006270:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006272:	f001 f9cd 	bl	8007610 <__d2b>
 8006276:	007a      	lsls	r2, r7, #1
 8006278:	9005      	str	r0, [sp, #20]
 800627a:	0d52      	lsrs	r2, r2, #21
 800627c:	d100      	bne.n	8006280 <_dtoa_r+0xec>
 800627e:	e07b      	b.n	8006378 <_dtoa_r+0x1e4>
 8006280:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006282:	9618      	str	r6, [sp, #96]	@ 0x60
 8006284:	0319      	lsls	r1, r3, #12
 8006286:	4b9c      	ldr	r3, [pc, #624]	@ (80064f8 <_dtoa_r+0x364>)
 8006288:	0b09      	lsrs	r1, r1, #12
 800628a:	430b      	orrs	r3, r1
 800628c:	499b      	ldr	r1, [pc, #620]	@ (80064fc <_dtoa_r+0x368>)
 800628e:	1857      	adds	r7, r2, r1
 8006290:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006292:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006294:	0019      	movs	r1, r3
 8006296:	2200      	movs	r2, #0
 8006298:	4b99      	ldr	r3, [pc, #612]	@ (8006500 <_dtoa_r+0x36c>)
 800629a:	f7fb fb75 	bl	8001988 <__aeabi_dsub>
 800629e:	4a99      	ldr	r2, [pc, #612]	@ (8006504 <_dtoa_r+0x370>)
 80062a0:	4b99      	ldr	r3, [pc, #612]	@ (8006508 <_dtoa_r+0x374>)
 80062a2:	f7fb f8a9 	bl	80013f8 <__aeabi_dmul>
 80062a6:	4a99      	ldr	r2, [pc, #612]	@ (800650c <_dtoa_r+0x378>)
 80062a8:	4b99      	ldr	r3, [pc, #612]	@ (8006510 <_dtoa_r+0x37c>)
 80062aa:	f7fa f8fd 	bl	80004a8 <__aeabi_dadd>
 80062ae:	0004      	movs	r4, r0
 80062b0:	0038      	movs	r0, r7
 80062b2:	000d      	movs	r5, r1
 80062b4:	f7fb ff62 	bl	800217c <__aeabi_i2d>
 80062b8:	4a96      	ldr	r2, [pc, #600]	@ (8006514 <_dtoa_r+0x380>)
 80062ba:	4b97      	ldr	r3, [pc, #604]	@ (8006518 <_dtoa_r+0x384>)
 80062bc:	f7fb f89c 	bl	80013f8 <__aeabi_dmul>
 80062c0:	0002      	movs	r2, r0
 80062c2:	000b      	movs	r3, r1
 80062c4:	0020      	movs	r0, r4
 80062c6:	0029      	movs	r1, r5
 80062c8:	f7fa f8ee 	bl	80004a8 <__aeabi_dadd>
 80062cc:	0004      	movs	r4, r0
 80062ce:	000d      	movs	r5, r1
 80062d0:	f7fb ff18 	bl	8002104 <__aeabi_d2iz>
 80062d4:	2200      	movs	r2, #0
 80062d6:	9004      	str	r0, [sp, #16]
 80062d8:	2300      	movs	r3, #0
 80062da:	0020      	movs	r0, r4
 80062dc:	0029      	movs	r1, r5
 80062de:	f7fa f8bb 	bl	8000458 <__aeabi_dcmplt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d00b      	beq.n	80062fe <_dtoa_r+0x16a>
 80062e6:	9804      	ldr	r0, [sp, #16]
 80062e8:	f7fb ff48 	bl	800217c <__aeabi_i2d>
 80062ec:	002b      	movs	r3, r5
 80062ee:	0022      	movs	r2, r4
 80062f0:	f7fa f8ac 	bl	800044c <__aeabi_dcmpeq>
 80062f4:	4243      	negs	r3, r0
 80062f6:	4158      	adcs	r0, r3
 80062f8:	9b04      	ldr	r3, [sp, #16]
 80062fa:	1a1b      	subs	r3, r3, r0
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	2301      	movs	r3, #1
 8006300:	9315      	str	r3, [sp, #84]	@ 0x54
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	2b16      	cmp	r3, #22
 8006306:	d810      	bhi.n	800632a <_dtoa_r+0x196>
 8006308:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800630a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800630c:	9a04      	ldr	r2, [sp, #16]
 800630e:	4b83      	ldr	r3, [pc, #524]	@ (800651c <_dtoa_r+0x388>)
 8006310:	00d2      	lsls	r2, r2, #3
 8006312:	189b      	adds	r3, r3, r2
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f7fa f89e 	bl	8000458 <__aeabi_dcmplt>
 800631c:	2800      	cmp	r0, #0
 800631e:	d047      	beq.n	80063b0 <_dtoa_r+0x21c>
 8006320:	9b04      	ldr	r3, [sp, #16]
 8006322:	3b01      	subs	r3, #1
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	2300      	movs	r3, #0
 8006328:	9315      	str	r3, [sp, #84]	@ 0x54
 800632a:	2200      	movs	r2, #0
 800632c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800632e:	9206      	str	r2, [sp, #24]
 8006330:	1bdb      	subs	r3, r3, r7
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	d53e      	bpl.n	80063b4 <_dtoa_r+0x220>
 8006336:	2201      	movs	r2, #1
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	9306      	str	r3, [sp, #24]
 800633c:	2300      	movs	r3, #0
 800633e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	db38      	blt.n	80063b8 <_dtoa_r+0x224>
 8006346:	9a04      	ldr	r2, [sp, #16]
 8006348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800634a:	4694      	mov	ip, r2
 800634c:	4463      	add	r3, ip
 800634e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006350:	2300      	movs	r3, #0
 8006352:	9214      	str	r2, [sp, #80]	@ 0x50
 8006354:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006356:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006358:	2401      	movs	r4, #1
 800635a:	2b09      	cmp	r3, #9
 800635c:	d867      	bhi.n	800642e <_dtoa_r+0x29a>
 800635e:	2b05      	cmp	r3, #5
 8006360:	dd02      	ble.n	8006368 <_dtoa_r+0x1d4>
 8006362:	2400      	movs	r4, #0
 8006364:	3b04      	subs	r3, #4
 8006366:	9322      	str	r3, [sp, #136]	@ 0x88
 8006368:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800636a:	1e98      	subs	r0, r3, #2
 800636c:	2803      	cmp	r0, #3
 800636e:	d867      	bhi.n	8006440 <_dtoa_r+0x2ac>
 8006370:	f7f9 fed2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006374:	5b383a2b 	.word	0x5b383a2b
 8006378:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800637a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800637c:	18f6      	adds	r6, r6, r3
 800637e:	4b68      	ldr	r3, [pc, #416]	@ (8006520 <_dtoa_r+0x38c>)
 8006380:	18f2      	adds	r2, r6, r3
 8006382:	2a20      	cmp	r2, #32
 8006384:	dd0f      	ble.n	80063a6 <_dtoa_r+0x212>
 8006386:	2340      	movs	r3, #64	@ 0x40
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	409f      	lsls	r7, r3
 800638c:	4b65      	ldr	r3, [pc, #404]	@ (8006524 <_dtoa_r+0x390>)
 800638e:	0038      	movs	r0, r7
 8006390:	18f3      	adds	r3, r6, r3
 8006392:	40dc      	lsrs	r4, r3
 8006394:	4320      	orrs	r0, r4
 8006396:	f7fb ff1f 	bl	80021d8 <__aeabi_ui2d>
 800639a:	2201      	movs	r2, #1
 800639c:	4b62      	ldr	r3, [pc, #392]	@ (8006528 <_dtoa_r+0x394>)
 800639e:	1e77      	subs	r7, r6, #1
 80063a0:	18cb      	adds	r3, r1, r3
 80063a2:	9218      	str	r2, [sp, #96]	@ 0x60
 80063a4:	e776      	b.n	8006294 <_dtoa_r+0x100>
 80063a6:	2320      	movs	r3, #32
 80063a8:	0020      	movs	r0, r4
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	4098      	lsls	r0, r3
 80063ae:	e7f2      	b.n	8006396 <_dtoa_r+0x202>
 80063b0:	9015      	str	r0, [sp, #84]	@ 0x54
 80063b2:	e7ba      	b.n	800632a <_dtoa_r+0x196>
 80063b4:	920d      	str	r2, [sp, #52]	@ 0x34
 80063b6:	e7c3      	b.n	8006340 <_dtoa_r+0x1ac>
 80063b8:	9b06      	ldr	r3, [sp, #24]
 80063ba:	9a04      	ldr	r2, [sp, #16]
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	9306      	str	r3, [sp, #24]
 80063c0:	4253      	negs	r3, r2
 80063c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063c4:	2300      	movs	r3, #0
 80063c6:	9314      	str	r3, [sp, #80]	@ 0x50
 80063c8:	e7c5      	b.n	8006356 <_dtoa_r+0x1c2>
 80063ca:	2300      	movs	r3, #0
 80063cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80063ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80063d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	dc13      	bgt.n	8006400 <_dtoa_r+0x26c>
 80063d8:	2301      	movs	r3, #1
 80063da:	001a      	movs	r2, r3
 80063dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80063de:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80063e2:	e00d      	b.n	8006400 <_dtoa_r+0x26c>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e7f1      	b.n	80063cc <_dtoa_r+0x238>
 80063e8:	2300      	movs	r3, #0
 80063ea:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80063ee:	4694      	mov	ip, r2
 80063f0:	9b04      	ldr	r3, [sp, #16]
 80063f2:	4463      	add	r3, ip
 80063f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80063f6:	3301      	adds	r3, #1
 80063f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dc00      	bgt.n	8006400 <_dtoa_r+0x26c>
 80063fe:	2301      	movs	r3, #1
 8006400:	9a03      	ldr	r2, [sp, #12]
 8006402:	2100      	movs	r1, #0
 8006404:	69d0      	ldr	r0, [r2, #28]
 8006406:	2204      	movs	r2, #4
 8006408:	0015      	movs	r5, r2
 800640a:	3514      	adds	r5, #20
 800640c:	429d      	cmp	r5, r3
 800640e:	d91b      	bls.n	8006448 <_dtoa_r+0x2b4>
 8006410:	6041      	str	r1, [r0, #4]
 8006412:	9803      	ldr	r0, [sp, #12]
 8006414:	f000 fdb8 	bl	8006f88 <_Balloc>
 8006418:	9008      	str	r0, [sp, #32]
 800641a:	2800      	cmp	r0, #0
 800641c:	d117      	bne.n	800644e <_dtoa_r+0x2ba>
 800641e:	21b0      	movs	r1, #176	@ 0xb0
 8006420:	4b42      	ldr	r3, [pc, #264]	@ (800652c <_dtoa_r+0x398>)
 8006422:	482e      	ldr	r0, [pc, #184]	@ (80064dc <_dtoa_r+0x348>)
 8006424:	9a08      	ldr	r2, [sp, #32]
 8006426:	31ff      	adds	r1, #255	@ 0xff
 8006428:	e6c9      	b.n	80061be <_dtoa_r+0x2a>
 800642a:	2301      	movs	r3, #1
 800642c:	e7dd      	b.n	80063ea <_dtoa_r+0x256>
 800642e:	2300      	movs	r3, #0
 8006430:	9410      	str	r4, [sp, #64]	@ 0x40
 8006432:	9322      	str	r3, [sp, #136]	@ 0x88
 8006434:	3b01      	subs	r3, #1
 8006436:	930e      	str	r3, [sp, #56]	@ 0x38
 8006438:	9309      	str	r3, [sp, #36]	@ 0x24
 800643a:	2200      	movs	r2, #0
 800643c:	3313      	adds	r3, #19
 800643e:	e7cf      	b.n	80063e0 <_dtoa_r+0x24c>
 8006440:	2301      	movs	r3, #1
 8006442:	9310      	str	r3, [sp, #64]	@ 0x40
 8006444:	3b02      	subs	r3, #2
 8006446:	e7f6      	b.n	8006436 <_dtoa_r+0x2a2>
 8006448:	3101      	adds	r1, #1
 800644a:	0052      	lsls	r2, r2, #1
 800644c:	e7dc      	b.n	8006408 <_dtoa_r+0x274>
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	9a08      	ldr	r2, [sp, #32]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006458:	2b0e      	cmp	r3, #14
 800645a:	d900      	bls.n	800645e <_dtoa_r+0x2ca>
 800645c:	e0d9      	b.n	8006612 <_dtoa_r+0x47e>
 800645e:	2c00      	cmp	r4, #0
 8006460:	d100      	bne.n	8006464 <_dtoa_r+0x2d0>
 8006462:	e0d6      	b.n	8006612 <_dtoa_r+0x47e>
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	dd64      	ble.n	8006534 <_dtoa_r+0x3a0>
 800646a:	210f      	movs	r1, #15
 800646c:	9a04      	ldr	r2, [sp, #16]
 800646e:	4b2b      	ldr	r3, [pc, #172]	@ (800651c <_dtoa_r+0x388>)
 8006470:	400a      	ands	r2, r1
 8006472:	00d2      	lsls	r2, r2, #3
 8006474:	189b      	adds	r3, r3, r2
 8006476:	681e      	ldr	r6, [r3, #0]
 8006478:	685f      	ldr	r7, [r3, #4]
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	2402      	movs	r4, #2
 800647e:	111d      	asrs	r5, r3, #4
 8006480:	05db      	lsls	r3, r3, #23
 8006482:	d50a      	bpl.n	800649a <_dtoa_r+0x306>
 8006484:	4b2a      	ldr	r3, [pc, #168]	@ (8006530 <_dtoa_r+0x39c>)
 8006486:	400d      	ands	r5, r1
 8006488:	6a1a      	ldr	r2, [r3, #32]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800648e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006490:	f7fa fb6e 	bl	8000b70 <__aeabi_ddiv>
 8006494:	900a      	str	r0, [sp, #40]	@ 0x28
 8006496:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006498:	3401      	adds	r4, #1
 800649a:	4b25      	ldr	r3, [pc, #148]	@ (8006530 <_dtoa_r+0x39c>)
 800649c:	930c      	str	r3, [sp, #48]	@ 0x30
 800649e:	2d00      	cmp	r5, #0
 80064a0:	d108      	bne.n	80064b4 <_dtoa_r+0x320>
 80064a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80064a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064a6:	0032      	movs	r2, r6
 80064a8:	003b      	movs	r3, r7
 80064aa:	f7fa fb61 	bl	8000b70 <__aeabi_ddiv>
 80064ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80064b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80064b2:	e05a      	b.n	800656a <_dtoa_r+0x3d6>
 80064b4:	2301      	movs	r3, #1
 80064b6:	421d      	tst	r5, r3
 80064b8:	d009      	beq.n	80064ce <_dtoa_r+0x33a>
 80064ba:	18e4      	adds	r4, r4, r3
 80064bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064be:	0030      	movs	r0, r6
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	0039      	movs	r1, r7
 80064c6:	f7fa ff97 	bl	80013f8 <__aeabi_dmul>
 80064ca:	0006      	movs	r6, r0
 80064cc:	000f      	movs	r7, r1
 80064ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064d0:	106d      	asrs	r5, r5, #1
 80064d2:	3308      	adds	r3, #8
 80064d4:	e7e2      	b.n	800649c <_dtoa_r+0x308>
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	08008325 	.word	0x08008325
 80064dc:	0800833c 	.word	0x0800833c
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	0000270f 	.word	0x0000270f
 80064e8:	08008321 	.word	0x08008321
 80064ec:	08008324 	.word	0x08008324
 80064f0:	080082f5 	.word	0x080082f5
 80064f4:	080082f4 	.word	0x080082f4
 80064f8:	3ff00000 	.word	0x3ff00000
 80064fc:	fffffc01 	.word	0xfffffc01
 8006500:	3ff80000 	.word	0x3ff80000
 8006504:	636f4361 	.word	0x636f4361
 8006508:	3fd287a7 	.word	0x3fd287a7
 800650c:	8b60c8b3 	.word	0x8b60c8b3
 8006510:	3fc68a28 	.word	0x3fc68a28
 8006514:	509f79fb 	.word	0x509f79fb
 8006518:	3fd34413 	.word	0x3fd34413
 800651c:	08008438 	.word	0x08008438
 8006520:	00000432 	.word	0x00000432
 8006524:	00000412 	.word	0x00000412
 8006528:	fe100000 	.word	0xfe100000
 800652c:	08008394 	.word	0x08008394
 8006530:	08008410 	.word	0x08008410
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	2402      	movs	r4, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d016      	beq.n	800656a <_dtoa_r+0x3d6>
 800653c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800653e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006540:	220f      	movs	r2, #15
 8006542:	425d      	negs	r5, r3
 8006544:	402a      	ands	r2, r5
 8006546:	4bd7      	ldr	r3, [pc, #860]	@ (80068a4 <_dtoa_r+0x710>)
 8006548:	00d2      	lsls	r2, r2, #3
 800654a:	189b      	adds	r3, r3, r2
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f7fa ff52 	bl	80013f8 <__aeabi_dmul>
 8006554:	2701      	movs	r7, #1
 8006556:	2300      	movs	r3, #0
 8006558:	900a      	str	r0, [sp, #40]	@ 0x28
 800655a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800655c:	4ed2      	ldr	r6, [pc, #840]	@ (80068a8 <_dtoa_r+0x714>)
 800655e:	112d      	asrs	r5, r5, #4
 8006560:	2d00      	cmp	r5, #0
 8006562:	d000      	beq.n	8006566 <_dtoa_r+0x3d2>
 8006564:	e0ba      	b.n	80066dc <_dtoa_r+0x548>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1a1      	bne.n	80064ae <_dtoa_r+0x31a>
 800656a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800656c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800656e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006570:	2b00      	cmp	r3, #0
 8006572:	d100      	bne.n	8006576 <_dtoa_r+0x3e2>
 8006574:	e0bd      	b.n	80066f2 <_dtoa_r+0x55e>
 8006576:	2200      	movs	r2, #0
 8006578:	0030      	movs	r0, r6
 800657a:	0039      	movs	r1, r7
 800657c:	4bcb      	ldr	r3, [pc, #812]	@ (80068ac <_dtoa_r+0x718>)
 800657e:	f7f9 ff6b 	bl	8000458 <__aeabi_dcmplt>
 8006582:	2800      	cmp	r0, #0
 8006584:	d100      	bne.n	8006588 <_dtoa_r+0x3f4>
 8006586:	e0b4      	b.n	80066f2 <_dtoa_r+0x55e>
 8006588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d100      	bne.n	8006590 <_dtoa_r+0x3fc>
 800658e:	e0b0      	b.n	80066f2 <_dtoa_r+0x55e>
 8006590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006592:	2b00      	cmp	r3, #0
 8006594:	dd39      	ble.n	800660a <_dtoa_r+0x476>
 8006596:	9b04      	ldr	r3, [sp, #16]
 8006598:	2200      	movs	r2, #0
 800659a:	3b01      	subs	r3, #1
 800659c:	930c      	str	r3, [sp, #48]	@ 0x30
 800659e:	0030      	movs	r0, r6
 80065a0:	4bc3      	ldr	r3, [pc, #780]	@ (80068b0 <_dtoa_r+0x71c>)
 80065a2:	0039      	movs	r1, r7
 80065a4:	f7fa ff28 	bl	80013f8 <__aeabi_dmul>
 80065a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80065aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ae:	3401      	adds	r4, #1
 80065b0:	0020      	movs	r0, r4
 80065b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80065b4:	f7fb fde2 	bl	800217c <__aeabi_i2d>
 80065b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065bc:	f7fa ff1c 	bl	80013f8 <__aeabi_dmul>
 80065c0:	4bbc      	ldr	r3, [pc, #752]	@ (80068b4 <_dtoa_r+0x720>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7f9 ff70 	bl	80004a8 <__aeabi_dadd>
 80065c8:	4bbb      	ldr	r3, [pc, #748]	@ (80068b8 <_dtoa_r+0x724>)
 80065ca:	0006      	movs	r6, r0
 80065cc:	18cf      	adds	r7, r1, r3
 80065ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d000      	beq.n	80065d6 <_dtoa_r+0x442>
 80065d4:	e091      	b.n	80066fa <_dtoa_r+0x566>
 80065d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065da:	2200      	movs	r2, #0
 80065dc:	4bb7      	ldr	r3, [pc, #732]	@ (80068bc <_dtoa_r+0x728>)
 80065de:	f7fb f9d3 	bl	8001988 <__aeabi_dsub>
 80065e2:	0032      	movs	r2, r6
 80065e4:	003b      	movs	r3, r7
 80065e6:	0004      	movs	r4, r0
 80065e8:	000d      	movs	r5, r1
 80065ea:	f7f9 ff49 	bl	8000480 <__aeabi_dcmpgt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d000      	beq.n	80065f4 <_dtoa_r+0x460>
 80065f2:	e29d      	b.n	8006b30 <_dtoa_r+0x99c>
 80065f4:	2180      	movs	r1, #128	@ 0x80
 80065f6:	0609      	lsls	r1, r1, #24
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	0032      	movs	r2, r6
 80065fc:	0020      	movs	r0, r4
 80065fe:	0029      	movs	r1, r5
 8006600:	f7f9 ff2a 	bl	8000458 <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	d000      	beq.n	800660a <_dtoa_r+0x476>
 8006608:	e130      	b.n	800686c <_dtoa_r+0x6d8>
 800660a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800660c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800660e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006610:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006612:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006614:	2b00      	cmp	r3, #0
 8006616:	da00      	bge.n	800661a <_dtoa_r+0x486>
 8006618:	e177      	b.n	800690a <_dtoa_r+0x776>
 800661a:	9a04      	ldr	r2, [sp, #16]
 800661c:	2a0e      	cmp	r2, #14
 800661e:	dd00      	ble.n	8006622 <_dtoa_r+0x48e>
 8006620:	e173      	b.n	800690a <_dtoa_r+0x776>
 8006622:	4ba0      	ldr	r3, [pc, #640]	@ (80068a4 <_dtoa_r+0x710>)
 8006624:	00d2      	lsls	r2, r2, #3
 8006626:	189b      	adds	r3, r3, r2
 8006628:	685c      	ldr	r4, [r3, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	9306      	str	r3, [sp, #24]
 800662e:	9407      	str	r4, [sp, #28]
 8006630:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006632:	2b00      	cmp	r3, #0
 8006634:	da03      	bge.n	800663e <_dtoa_r+0x4aa>
 8006636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	dc00      	bgt.n	800663e <_dtoa_r+0x4aa>
 800663c:	e106      	b.n	800684c <_dtoa_r+0x6b8>
 800663e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006640:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006644:	9d08      	ldr	r5, [sp, #32]
 8006646:	3b01      	subs	r3, #1
 8006648:	195b      	adds	r3, r3, r5
 800664a:	930a      	str	r3, [sp, #40]	@ 0x28
 800664c:	9a06      	ldr	r2, [sp, #24]
 800664e:	9b07      	ldr	r3, [sp, #28]
 8006650:	0030      	movs	r0, r6
 8006652:	0039      	movs	r1, r7
 8006654:	f7fa fa8c 	bl	8000b70 <__aeabi_ddiv>
 8006658:	f7fb fd54 	bl	8002104 <__aeabi_d2iz>
 800665c:	9009      	str	r0, [sp, #36]	@ 0x24
 800665e:	f7fb fd8d 	bl	800217c <__aeabi_i2d>
 8006662:	9a06      	ldr	r2, [sp, #24]
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	f7fa fec7 	bl	80013f8 <__aeabi_dmul>
 800666a:	0002      	movs	r2, r0
 800666c:	000b      	movs	r3, r1
 800666e:	0030      	movs	r0, r6
 8006670:	0039      	movs	r1, r7
 8006672:	f7fb f989 	bl	8001988 <__aeabi_dsub>
 8006676:	002b      	movs	r3, r5
 8006678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800667a:	3501      	adds	r5, #1
 800667c:	3230      	adds	r2, #48	@ 0x30
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006682:	002c      	movs	r4, r5
 8006684:	429a      	cmp	r2, r3
 8006686:	d000      	beq.n	800668a <_dtoa_r+0x4f6>
 8006688:	e131      	b.n	80068ee <_dtoa_r+0x75a>
 800668a:	0002      	movs	r2, r0
 800668c:	000b      	movs	r3, r1
 800668e:	f7f9 ff0b 	bl	80004a8 <__aeabi_dadd>
 8006692:	9a06      	ldr	r2, [sp, #24]
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	0006      	movs	r6, r0
 8006698:	000f      	movs	r7, r1
 800669a:	f7f9 fef1 	bl	8000480 <__aeabi_dcmpgt>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d000      	beq.n	80066a4 <_dtoa_r+0x510>
 80066a2:	e10f      	b.n	80068c4 <_dtoa_r+0x730>
 80066a4:	9a06      	ldr	r2, [sp, #24]
 80066a6:	9b07      	ldr	r3, [sp, #28]
 80066a8:	0030      	movs	r0, r6
 80066aa:	0039      	movs	r1, r7
 80066ac:	f7f9 fece 	bl	800044c <__aeabi_dcmpeq>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d003      	beq.n	80066bc <_dtoa_r+0x528>
 80066b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b6:	07dd      	lsls	r5, r3, #31
 80066b8:	d500      	bpl.n	80066bc <_dtoa_r+0x528>
 80066ba:	e103      	b.n	80068c4 <_dtoa_r+0x730>
 80066bc:	9905      	ldr	r1, [sp, #20]
 80066be:	9803      	ldr	r0, [sp, #12]
 80066c0:	f000 fca6 	bl	8007010 <_Bfree>
 80066c4:	2300      	movs	r3, #0
 80066c6:	7023      	strb	r3, [r4, #0]
 80066c8:	9b04      	ldr	r3, [sp, #16]
 80066ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066cc:	3301      	adds	r3, #1
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d100      	bne.n	80066d8 <_dtoa_r+0x544>
 80066d6:	e5a7      	b.n	8006228 <_dtoa_r+0x94>
 80066d8:	601c      	str	r4, [r3, #0]
 80066da:	e5a5      	b.n	8006228 <_dtoa_r+0x94>
 80066dc:	423d      	tst	r5, r7
 80066de:	d005      	beq.n	80066ec <_dtoa_r+0x558>
 80066e0:	6832      	ldr	r2, [r6, #0]
 80066e2:	6873      	ldr	r3, [r6, #4]
 80066e4:	f7fa fe88 	bl	80013f8 <__aeabi_dmul>
 80066e8:	003b      	movs	r3, r7
 80066ea:	3401      	adds	r4, #1
 80066ec:	106d      	asrs	r5, r5, #1
 80066ee:	3608      	adds	r6, #8
 80066f0:	e736      	b.n	8006560 <_dtoa_r+0x3cc>
 80066f2:	9b04      	ldr	r3, [sp, #16]
 80066f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80066f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f8:	e75a      	b.n	80065b0 <_dtoa_r+0x41c>
 80066fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80066fc:	4b69      	ldr	r3, [pc, #420]	@ (80068a4 <_dtoa_r+0x710>)
 80066fe:	3a01      	subs	r2, #1
 8006700:	00d2      	lsls	r2, r2, #3
 8006702:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006704:	189b      	adds	r3, r3, r2
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2900      	cmp	r1, #0
 800670c:	d04c      	beq.n	80067a8 <_dtoa_r+0x614>
 800670e:	2000      	movs	r0, #0
 8006710:	496b      	ldr	r1, [pc, #428]	@ (80068c0 <_dtoa_r+0x72c>)
 8006712:	f7fa fa2d 	bl	8000b70 <__aeabi_ddiv>
 8006716:	0032      	movs	r2, r6
 8006718:	003b      	movs	r3, r7
 800671a:	f7fb f935 	bl	8001988 <__aeabi_dsub>
 800671e:	9a08      	ldr	r2, [sp, #32]
 8006720:	0006      	movs	r6, r0
 8006722:	4694      	mov	ip, r2
 8006724:	000f      	movs	r7, r1
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	9316      	str	r3, [sp, #88]	@ 0x58
 800672a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800672c:	4463      	add	r3, ip
 800672e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006730:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006732:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006734:	f7fb fce6 	bl	8002104 <__aeabi_d2iz>
 8006738:	0005      	movs	r5, r0
 800673a:	f7fb fd1f 	bl	800217c <__aeabi_i2d>
 800673e:	0002      	movs	r2, r0
 8006740:	000b      	movs	r3, r1
 8006742:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006744:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006746:	f7fb f91f 	bl	8001988 <__aeabi_dsub>
 800674a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800674c:	3530      	adds	r5, #48	@ 0x30
 800674e:	1c5c      	adds	r4, r3, #1
 8006750:	701d      	strb	r5, [r3, #0]
 8006752:	0032      	movs	r2, r6
 8006754:	003b      	movs	r3, r7
 8006756:	900a      	str	r0, [sp, #40]	@ 0x28
 8006758:	910b      	str	r1, [sp, #44]	@ 0x2c
 800675a:	f7f9 fe7d 	bl	8000458 <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	d16a      	bne.n	8006838 <_dtoa_r+0x6a4>
 8006762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006766:	2000      	movs	r0, #0
 8006768:	4950      	ldr	r1, [pc, #320]	@ (80068ac <_dtoa_r+0x718>)
 800676a:	f7fb f90d 	bl	8001988 <__aeabi_dsub>
 800676e:	0032      	movs	r2, r6
 8006770:	003b      	movs	r3, r7
 8006772:	f7f9 fe71 	bl	8000458 <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	d000      	beq.n	800677c <_dtoa_r+0x5e8>
 800677a:	e0a5      	b.n	80068c8 <_dtoa_r+0x734>
 800677c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800677e:	42a3      	cmp	r3, r4
 8006780:	d100      	bne.n	8006784 <_dtoa_r+0x5f0>
 8006782:	e742      	b.n	800660a <_dtoa_r+0x476>
 8006784:	2200      	movs	r2, #0
 8006786:	0030      	movs	r0, r6
 8006788:	0039      	movs	r1, r7
 800678a:	4b49      	ldr	r3, [pc, #292]	@ (80068b0 <_dtoa_r+0x71c>)
 800678c:	f7fa fe34 	bl	80013f8 <__aeabi_dmul>
 8006790:	2200      	movs	r2, #0
 8006792:	0006      	movs	r6, r0
 8006794:	000f      	movs	r7, r1
 8006796:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006798:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800679a:	4b45      	ldr	r3, [pc, #276]	@ (80068b0 <_dtoa_r+0x71c>)
 800679c:	f7fa fe2c 	bl	80013f8 <__aeabi_dmul>
 80067a0:	9416      	str	r4, [sp, #88]	@ 0x58
 80067a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80067a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80067a6:	e7c3      	b.n	8006730 <_dtoa_r+0x59c>
 80067a8:	0030      	movs	r0, r6
 80067aa:	0039      	movs	r1, r7
 80067ac:	f7fa fe24 	bl	80013f8 <__aeabi_dmul>
 80067b0:	9d08      	ldr	r5, [sp, #32]
 80067b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80067b4:	002b      	movs	r3, r5
 80067b6:	4694      	mov	ip, r2
 80067b8:	9016      	str	r0, [sp, #88]	@ 0x58
 80067ba:	9117      	str	r1, [sp, #92]	@ 0x5c
 80067bc:	4463      	add	r3, ip
 80067be:	9319      	str	r3, [sp, #100]	@ 0x64
 80067c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80067c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067c4:	f7fb fc9e 	bl	8002104 <__aeabi_d2iz>
 80067c8:	0004      	movs	r4, r0
 80067ca:	f7fb fcd7 	bl	800217c <__aeabi_i2d>
 80067ce:	000b      	movs	r3, r1
 80067d0:	0002      	movs	r2, r0
 80067d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80067d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067d6:	f7fb f8d7 	bl	8001988 <__aeabi_dsub>
 80067da:	3430      	adds	r4, #48	@ 0x30
 80067dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067de:	702c      	strb	r4, [r5, #0]
 80067e0:	3501      	adds	r5, #1
 80067e2:	0006      	movs	r6, r0
 80067e4:	000f      	movs	r7, r1
 80067e6:	42ab      	cmp	r3, r5
 80067e8:	d129      	bne.n	800683e <_dtoa_r+0x6aa>
 80067ea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80067ec:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80067ee:	9b08      	ldr	r3, [sp, #32]
 80067f0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80067f2:	469c      	mov	ip, r3
 80067f4:	2200      	movs	r2, #0
 80067f6:	4b32      	ldr	r3, [pc, #200]	@ (80068c0 <_dtoa_r+0x72c>)
 80067f8:	4464      	add	r4, ip
 80067fa:	f7f9 fe55 	bl	80004a8 <__aeabi_dadd>
 80067fe:	0002      	movs	r2, r0
 8006800:	000b      	movs	r3, r1
 8006802:	0030      	movs	r0, r6
 8006804:	0039      	movs	r1, r7
 8006806:	f7f9 fe3b 	bl	8000480 <__aeabi_dcmpgt>
 800680a:	2800      	cmp	r0, #0
 800680c:	d15c      	bne.n	80068c8 <_dtoa_r+0x734>
 800680e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006810:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006812:	2000      	movs	r0, #0
 8006814:	492a      	ldr	r1, [pc, #168]	@ (80068c0 <_dtoa_r+0x72c>)
 8006816:	f7fb f8b7 	bl	8001988 <__aeabi_dsub>
 800681a:	0002      	movs	r2, r0
 800681c:	000b      	movs	r3, r1
 800681e:	0030      	movs	r0, r6
 8006820:	0039      	movs	r1, r7
 8006822:	f7f9 fe19 	bl	8000458 <__aeabi_dcmplt>
 8006826:	2800      	cmp	r0, #0
 8006828:	d100      	bne.n	800682c <_dtoa_r+0x698>
 800682a:	e6ee      	b.n	800660a <_dtoa_r+0x476>
 800682c:	0023      	movs	r3, r4
 800682e:	3c01      	subs	r4, #1
 8006830:	7822      	ldrb	r2, [r4, #0]
 8006832:	2a30      	cmp	r2, #48	@ 0x30
 8006834:	d0fa      	beq.n	800682c <_dtoa_r+0x698>
 8006836:	001c      	movs	r4, r3
 8006838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800683a:	9304      	str	r3, [sp, #16]
 800683c:	e73e      	b.n	80066bc <_dtoa_r+0x528>
 800683e:	2200      	movs	r2, #0
 8006840:	4b1b      	ldr	r3, [pc, #108]	@ (80068b0 <_dtoa_r+0x71c>)
 8006842:	f7fa fdd9 	bl	80013f8 <__aeabi_dmul>
 8006846:	900a      	str	r0, [sp, #40]	@ 0x28
 8006848:	910b      	str	r1, [sp, #44]	@ 0x2c
 800684a:	e7b9      	b.n	80067c0 <_dtoa_r+0x62c>
 800684c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10c      	bne.n	800686c <_dtoa_r+0x6d8>
 8006852:	9806      	ldr	r0, [sp, #24]
 8006854:	9907      	ldr	r1, [sp, #28]
 8006856:	2200      	movs	r2, #0
 8006858:	4b18      	ldr	r3, [pc, #96]	@ (80068bc <_dtoa_r+0x728>)
 800685a:	f7fa fdcd 	bl	80013f8 <__aeabi_dmul>
 800685e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006862:	f7f9 fe17 	bl	8000494 <__aeabi_dcmpge>
 8006866:	2800      	cmp	r0, #0
 8006868:	d100      	bne.n	800686c <_dtoa_r+0x6d8>
 800686a:	e164      	b.n	8006b36 <_dtoa_r+0x9a2>
 800686c:	2600      	movs	r6, #0
 800686e:	0037      	movs	r7, r6
 8006870:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006872:	9c08      	ldr	r4, [sp, #32]
 8006874:	43db      	mvns	r3, r3
 8006876:	930c      	str	r3, [sp, #48]	@ 0x30
 8006878:	2300      	movs	r3, #0
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	0031      	movs	r1, r6
 800687e:	9803      	ldr	r0, [sp, #12]
 8006880:	f000 fbc6 	bl	8007010 <_Bfree>
 8006884:	2f00      	cmp	r7, #0
 8006886:	d0d7      	beq.n	8006838 <_dtoa_r+0x6a4>
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <_dtoa_r+0x706>
 800688e:	42bb      	cmp	r3, r7
 8006890:	d003      	beq.n	800689a <_dtoa_r+0x706>
 8006892:	0019      	movs	r1, r3
 8006894:	9803      	ldr	r0, [sp, #12]
 8006896:	f000 fbbb 	bl	8007010 <_Bfree>
 800689a:	0039      	movs	r1, r7
 800689c:	9803      	ldr	r0, [sp, #12]
 800689e:	f000 fbb7 	bl	8007010 <_Bfree>
 80068a2:	e7c9      	b.n	8006838 <_dtoa_r+0x6a4>
 80068a4:	08008438 	.word	0x08008438
 80068a8:	08008410 	.word	0x08008410
 80068ac:	3ff00000 	.word	0x3ff00000
 80068b0:	40240000 	.word	0x40240000
 80068b4:	401c0000 	.word	0x401c0000
 80068b8:	fcc00000 	.word	0xfcc00000
 80068bc:	40140000 	.word	0x40140000
 80068c0:	3fe00000 	.word	0x3fe00000
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80068c8:	0023      	movs	r3, r4
 80068ca:	001c      	movs	r4, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	2a39      	cmp	r2, #57	@ 0x39
 80068d2:	d108      	bne.n	80068e6 <_dtoa_r+0x752>
 80068d4:	9a08      	ldr	r2, [sp, #32]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d1f7      	bne.n	80068ca <_dtoa_r+0x736>
 80068da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068dc:	9908      	ldr	r1, [sp, #32]
 80068de:	3201      	adds	r2, #1
 80068e0:	920c      	str	r2, [sp, #48]	@ 0x30
 80068e2:	2230      	movs	r2, #48	@ 0x30
 80068e4:	700a      	strb	r2, [r1, #0]
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	3201      	adds	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e7a4      	b.n	8006838 <_dtoa_r+0x6a4>
 80068ee:	2200      	movs	r2, #0
 80068f0:	4bc6      	ldr	r3, [pc, #792]	@ (8006c0c <_dtoa_r+0xa78>)
 80068f2:	f7fa fd81 	bl	80013f8 <__aeabi_dmul>
 80068f6:	2200      	movs	r2, #0
 80068f8:	2300      	movs	r3, #0
 80068fa:	0006      	movs	r6, r0
 80068fc:	000f      	movs	r7, r1
 80068fe:	f7f9 fda5 	bl	800044c <__aeabi_dcmpeq>
 8006902:	2800      	cmp	r0, #0
 8006904:	d100      	bne.n	8006908 <_dtoa_r+0x774>
 8006906:	e6a1      	b.n	800664c <_dtoa_r+0x4b8>
 8006908:	e6d8      	b.n	80066bc <_dtoa_r+0x528>
 800690a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800690c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800690e:	9c06      	ldr	r4, [sp, #24]
 8006910:	2f00      	cmp	r7, #0
 8006912:	d014      	beq.n	800693e <_dtoa_r+0x7aa>
 8006914:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006916:	2a01      	cmp	r2, #1
 8006918:	dd00      	ble.n	800691c <_dtoa_r+0x788>
 800691a:	e0c8      	b.n	8006aae <_dtoa_r+0x91a>
 800691c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800691e:	2a00      	cmp	r2, #0
 8006920:	d100      	bne.n	8006924 <_dtoa_r+0x790>
 8006922:	e0be      	b.n	8006aa2 <_dtoa_r+0x90e>
 8006924:	4aba      	ldr	r2, [pc, #744]	@ (8006c10 <_dtoa_r+0xa7c>)
 8006926:	189b      	adds	r3, r3, r2
 8006928:	9a06      	ldr	r2, [sp, #24]
 800692a:	2101      	movs	r1, #1
 800692c:	18d2      	adds	r2, r2, r3
 800692e:	9206      	str	r2, [sp, #24]
 8006930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006932:	9803      	ldr	r0, [sp, #12]
 8006934:	18d3      	adds	r3, r2, r3
 8006936:	930d      	str	r3, [sp, #52]	@ 0x34
 8006938:	f000 fc22 	bl	8007180 <__i2b>
 800693c:	0007      	movs	r7, r0
 800693e:	2c00      	cmp	r4, #0
 8006940:	d00e      	beq.n	8006960 <_dtoa_r+0x7cc>
 8006942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd0b      	ble.n	8006960 <_dtoa_r+0x7cc>
 8006948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800694a:	0023      	movs	r3, r4
 800694c:	4294      	cmp	r4, r2
 800694e:	dd00      	ble.n	8006952 <_dtoa_r+0x7be>
 8006950:	0013      	movs	r3, r2
 8006952:	9a06      	ldr	r2, [sp, #24]
 8006954:	1ae4      	subs	r4, r4, r3
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	9206      	str	r2, [sp, #24]
 800695a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01f      	beq.n	80069a6 <_dtoa_r+0x812>
 8006966:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d100      	bne.n	800696e <_dtoa_r+0x7da>
 800696c:	e0b5      	b.n	8006ada <_dtoa_r+0x946>
 800696e:	2d00      	cmp	r5, #0
 8006970:	d010      	beq.n	8006994 <_dtoa_r+0x800>
 8006972:	0039      	movs	r1, r7
 8006974:	002a      	movs	r2, r5
 8006976:	9803      	ldr	r0, [sp, #12]
 8006978:	f000 fccc 	bl	8007314 <__pow5mult>
 800697c:	9a05      	ldr	r2, [sp, #20]
 800697e:	0001      	movs	r1, r0
 8006980:	0007      	movs	r7, r0
 8006982:	9803      	ldr	r0, [sp, #12]
 8006984:	f000 fc14 	bl	80071b0 <__multiply>
 8006988:	0006      	movs	r6, r0
 800698a:	9905      	ldr	r1, [sp, #20]
 800698c:	9803      	ldr	r0, [sp, #12]
 800698e:	f000 fb3f 	bl	8007010 <_Bfree>
 8006992:	9605      	str	r6, [sp, #20]
 8006994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006996:	1b5a      	subs	r2, r3, r5
 8006998:	42ab      	cmp	r3, r5
 800699a:	d004      	beq.n	80069a6 <_dtoa_r+0x812>
 800699c:	9905      	ldr	r1, [sp, #20]
 800699e:	9803      	ldr	r0, [sp, #12]
 80069a0:	f000 fcb8 	bl	8007314 <__pow5mult>
 80069a4:	9005      	str	r0, [sp, #20]
 80069a6:	2101      	movs	r1, #1
 80069a8:	9803      	ldr	r0, [sp, #12]
 80069aa:	f000 fbe9 	bl	8007180 <__i2b>
 80069ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069b0:	0006      	movs	r6, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d100      	bne.n	80069b8 <_dtoa_r+0x824>
 80069b6:	e1bc      	b.n	8006d32 <_dtoa_r+0xb9e>
 80069b8:	001a      	movs	r2, r3
 80069ba:	0001      	movs	r1, r0
 80069bc:	9803      	ldr	r0, [sp, #12]
 80069be:	f000 fca9 	bl	8007314 <__pow5mult>
 80069c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80069c4:	0006      	movs	r6, r0
 80069c6:	2500      	movs	r5, #0
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	dc16      	bgt.n	80069fa <_dtoa_r+0x866>
 80069cc:	2500      	movs	r5, #0
 80069ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	d10e      	bne.n	80069f2 <_dtoa_r+0x85e>
 80069d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d6:	031b      	lsls	r3, r3, #12
 80069d8:	42ab      	cmp	r3, r5
 80069da:	d10a      	bne.n	80069f2 <_dtoa_r+0x85e>
 80069dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006c14 <_dtoa_r+0xa80>)
 80069de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069e0:	4213      	tst	r3, r2
 80069e2:	d006      	beq.n	80069f2 <_dtoa_r+0x85e>
 80069e4:	9b06      	ldr	r3, [sp, #24]
 80069e6:	3501      	adds	r5, #1
 80069e8:	3301      	adds	r3, #1
 80069ea:	9306      	str	r3, [sp, #24]
 80069ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069ee:	3301      	adds	r3, #1
 80069f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80069f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069f4:	2001      	movs	r0, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <_dtoa_r+0x878>
 80069fa:	6933      	ldr	r3, [r6, #16]
 80069fc:	3303      	adds	r3, #3
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	18f3      	adds	r3, r6, r3
 8006a02:	6858      	ldr	r0, [r3, #4]
 8006a04:	f000 fb6c 	bl	80070e0 <__hi0bits>
 8006a08:	2320      	movs	r3, #32
 8006a0a:	1a18      	subs	r0, r3, r0
 8006a0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a0e:	1818      	adds	r0, r3, r0
 8006a10:	0002      	movs	r2, r0
 8006a12:	231f      	movs	r3, #31
 8006a14:	401a      	ands	r2, r3
 8006a16:	4218      	tst	r0, r3
 8006a18:	d065      	beq.n	8006ae6 <_dtoa_r+0x952>
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	1a9b      	subs	r3, r3, r2
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	dd5d      	ble.n	8006ade <_dtoa_r+0x94a>
 8006a22:	231c      	movs	r3, #28
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	9a06      	ldr	r2, [sp, #24]
 8006a28:	18e4      	adds	r4, r4, r3
 8006a2a:	18d2      	adds	r2, r2, r3
 8006a2c:	9206      	str	r2, [sp, #24]
 8006a2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a30:	18d3      	adds	r3, r2, r3
 8006a32:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a34:	9b06      	ldr	r3, [sp, #24]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dd05      	ble.n	8006a46 <_dtoa_r+0x8b2>
 8006a3a:	001a      	movs	r2, r3
 8006a3c:	9905      	ldr	r1, [sp, #20]
 8006a3e:	9803      	ldr	r0, [sp, #12]
 8006a40:	f000 fcc4 	bl	80073cc <__lshift>
 8006a44:	9005      	str	r0, [sp, #20]
 8006a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dd05      	ble.n	8006a58 <_dtoa_r+0x8c4>
 8006a4c:	0031      	movs	r1, r6
 8006a4e:	001a      	movs	r2, r3
 8006a50:	9803      	ldr	r0, [sp, #12]
 8006a52:	f000 fcbb 	bl	80073cc <__lshift>
 8006a56:	0006      	movs	r6, r0
 8006a58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d045      	beq.n	8006aea <_dtoa_r+0x956>
 8006a5e:	0031      	movs	r1, r6
 8006a60:	9805      	ldr	r0, [sp, #20]
 8006a62:	f000 fd1f 	bl	80074a4 <__mcmp>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	da3f      	bge.n	8006aea <_dtoa_r+0x956>
 8006a6a:	9b04      	ldr	r3, [sp, #16]
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a72:	9905      	ldr	r1, [sp, #20]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9803      	ldr	r0, [sp, #12]
 8006a78:	f000 faee 	bl	8007058 <__multadd>
 8006a7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a7e:	9005      	str	r0, [sp, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d100      	bne.n	8006a86 <_dtoa_r+0x8f2>
 8006a84:	e15c      	b.n	8006d40 <_dtoa_r+0xbac>
 8006a86:	2300      	movs	r3, #0
 8006a88:	0039      	movs	r1, r7
 8006a8a:	220a      	movs	r2, #10
 8006a8c:	9803      	ldr	r0, [sp, #12]
 8006a8e:	f000 fae3 	bl	8007058 <__multadd>
 8006a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a94:	0007      	movs	r7, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc55      	bgt.n	8006b46 <_dtoa_r+0x9b2>
 8006a9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	dc2d      	bgt.n	8006afc <_dtoa_r+0x968>
 8006aa0:	e051      	b.n	8006b46 <_dtoa_r+0x9b2>
 8006aa2:	2336      	movs	r3, #54	@ 0x36
 8006aa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006aa6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006aa8:	9c06      	ldr	r4, [sp, #24]
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	e73c      	b.n	8006928 <_dtoa_r+0x794>
 8006aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab0:	1e5d      	subs	r5, r3, #1
 8006ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	db08      	blt.n	8006aca <_dtoa_r+0x936>
 8006ab8:	1b5d      	subs	r5, r3, r5
 8006aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006abc:	9c06      	ldr	r4, [sp, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	db00      	blt.n	8006ac4 <_dtoa_r+0x930>
 8006ac2:	e731      	b.n	8006928 <_dtoa_r+0x794>
 8006ac4:	1ae4      	subs	r4, r4, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e72e      	b.n	8006928 <_dtoa_r+0x794>
 8006aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006acc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ace:	1aeb      	subs	r3, r5, r3
 8006ad0:	18d3      	adds	r3, r2, r3
 8006ad2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006ad4:	9314      	str	r3, [sp, #80]	@ 0x50
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	e7ef      	b.n	8006aba <_dtoa_r+0x926>
 8006ada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006adc:	e75e      	b.n	800699c <_dtoa_r+0x808>
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d0a8      	beq.n	8006a34 <_dtoa_r+0x8a0>
 8006ae2:	331c      	adds	r3, #28
 8006ae4:	e79f      	b.n	8006a26 <_dtoa_r+0x892>
 8006ae6:	0013      	movs	r3, r2
 8006ae8:	e7fb      	b.n	8006ae2 <_dtoa_r+0x94e>
 8006aea:	9b04      	ldr	r3, [sp, #16]
 8006aec:	930c      	str	r3, [sp, #48]	@ 0x30
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dc23      	bgt.n	8006b3e <_dtoa_r+0x9aa>
 8006af6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	dd20      	ble.n	8006b3e <_dtoa_r+0x9aa>
 8006afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d000      	beq.n	8006b04 <_dtoa_r+0x970>
 8006b02:	e6b5      	b.n	8006870 <_dtoa_r+0x6dc>
 8006b04:	0031      	movs	r1, r6
 8006b06:	2205      	movs	r2, #5
 8006b08:	9803      	ldr	r0, [sp, #12]
 8006b0a:	f000 faa5 	bl	8007058 <__multadd>
 8006b0e:	0006      	movs	r6, r0
 8006b10:	0001      	movs	r1, r0
 8006b12:	9805      	ldr	r0, [sp, #20]
 8006b14:	f000 fcc6 	bl	80074a4 <__mcmp>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	dc00      	bgt.n	8006b1e <_dtoa_r+0x98a>
 8006b1c:	e6a8      	b.n	8006870 <_dtoa_r+0x6dc>
 8006b1e:	9b08      	ldr	r3, [sp, #32]
 8006b20:	9a08      	ldr	r2, [sp, #32]
 8006b22:	1c5c      	adds	r4, r3, #1
 8006b24:	2331      	movs	r3, #49	@ 0x31
 8006b26:	7013      	strb	r3, [r2, #0]
 8006b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b2e:	e6a3      	b.n	8006878 <_dtoa_r+0x6e4>
 8006b30:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006b32:	0037      	movs	r7, r6
 8006b34:	e7f3      	b.n	8006b1e <_dtoa_r+0x98a>
 8006b36:	9b04      	ldr	r3, [sp, #16]
 8006b38:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006b3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b3c:	e7f9      	b.n	8006b32 <_dtoa_r+0x99e>
 8006b3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d100      	bne.n	8006b46 <_dtoa_r+0x9b2>
 8006b44:	e100      	b.n	8006d48 <_dtoa_r+0xbb4>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	dd05      	ble.n	8006b56 <_dtoa_r+0x9c2>
 8006b4a:	0039      	movs	r1, r7
 8006b4c:	0022      	movs	r2, r4
 8006b4e:	9803      	ldr	r0, [sp, #12]
 8006b50:	f000 fc3c 	bl	80073cc <__lshift>
 8006b54:	0007      	movs	r7, r0
 8006b56:	0038      	movs	r0, r7
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	d018      	beq.n	8006b8e <_dtoa_r+0x9fa>
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	9803      	ldr	r0, [sp, #12]
 8006b60:	f000 fa12 	bl	8006f88 <_Balloc>
 8006b64:	1e04      	subs	r4, r0, #0
 8006b66:	d105      	bne.n	8006b74 <_dtoa_r+0x9e0>
 8006b68:	0022      	movs	r2, r4
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c18 <_dtoa_r+0xa84>)
 8006b6c:	482b      	ldr	r0, [pc, #172]	@ (8006c1c <_dtoa_r+0xa88>)
 8006b6e:	492c      	ldr	r1, [pc, #176]	@ (8006c20 <_dtoa_r+0xa8c>)
 8006b70:	f7ff fb25 	bl	80061be <_dtoa_r+0x2a>
 8006b74:	0039      	movs	r1, r7
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	310c      	adds	r1, #12
 8006b7a:	3202      	adds	r2, #2
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	300c      	adds	r0, #12
 8006b80:	f000 ffda 	bl	8007b38 <memcpy>
 8006b84:	2201      	movs	r2, #1
 8006b86:	0021      	movs	r1, r4
 8006b88:	9803      	ldr	r0, [sp, #12]
 8006b8a:	f000 fc1f 	bl	80073cc <__lshift>
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b92:	9306      	str	r3, [sp, #24]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	2201      	movs	r2, #1
 8006b9a:	9704      	str	r7, [sp, #16]
 8006b9c:	0007      	movs	r7, r0
 8006b9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ba6:	0031      	movs	r1, r6
 8006ba8:	9805      	ldr	r0, [sp, #20]
 8006baa:	f7ff fa65 	bl	8006078 <quorem>
 8006bae:	9904      	ldr	r1, [sp, #16]
 8006bb0:	0005      	movs	r5, r0
 8006bb2:	900a      	str	r0, [sp, #40]	@ 0x28
 8006bb4:	9805      	ldr	r0, [sp, #20]
 8006bb6:	f000 fc75 	bl	80074a4 <__mcmp>
 8006bba:	003a      	movs	r2, r7
 8006bbc:	900d      	str	r0, [sp, #52]	@ 0x34
 8006bbe:	0031      	movs	r1, r6
 8006bc0:	9803      	ldr	r0, [sp, #12]
 8006bc2:	f000 fc8b 	bl	80074dc <__mdiff>
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	68c3      	ldr	r3, [r0, #12]
 8006bca:	0004      	movs	r4, r0
 8006bcc:	3530      	adds	r5, #48	@ 0x30
 8006bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <_dtoa_r+0xa4a>
 8006bd4:	0001      	movs	r1, r0
 8006bd6:	9805      	ldr	r0, [sp, #20]
 8006bd8:	f000 fc64 	bl	80074a4 <__mcmp>
 8006bdc:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bde:	0021      	movs	r1, r4
 8006be0:	9803      	ldr	r0, [sp, #12]
 8006be2:	f000 fa15 	bl	8007010 <_Bfree>
 8006be6:	9b06      	ldr	r3, [sp, #24]
 8006be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bea:	1c5c      	adds	r4, r3, #1
 8006bec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d116      	bne.n	8006c24 <_dtoa_r+0xa90>
 8006bf6:	2d39      	cmp	r5, #57	@ 0x39
 8006bf8:	d02f      	beq.n	8006c5a <_dtoa_r+0xac6>
 8006bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dd01      	ble.n	8006c04 <_dtoa_r+0xa70>
 8006c00:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006c02:	3531      	adds	r5, #49	@ 0x31
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	701d      	strb	r5, [r3, #0]
 8006c08:	e638      	b.n	800687c <_dtoa_r+0x6e8>
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	40240000 	.word	0x40240000
 8006c10:	00000433 	.word	0x00000433
 8006c14:	7ff00000 	.word	0x7ff00000
 8006c18:	08008394 	.word	0x08008394
 8006c1c:	0800833c 	.word	0x0800833c
 8006c20:	000002ef 	.word	0x000002ef
 8006c24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db04      	blt.n	8006c34 <_dtoa_r+0xaa0>
 8006c2a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d11e      	bne.n	8006c72 <_dtoa_r+0xade>
 8006c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dde4      	ble.n	8006c04 <_dtoa_r+0xa70>
 8006c3a:	9905      	ldr	r1, [sp, #20]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	9803      	ldr	r0, [sp, #12]
 8006c40:	f000 fbc4 	bl	80073cc <__lshift>
 8006c44:	0031      	movs	r1, r6
 8006c46:	9005      	str	r0, [sp, #20]
 8006c48:	f000 fc2c 	bl	80074a4 <__mcmp>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	dc02      	bgt.n	8006c56 <_dtoa_r+0xac2>
 8006c50:	d1d8      	bne.n	8006c04 <_dtoa_r+0xa70>
 8006c52:	07eb      	lsls	r3, r5, #31
 8006c54:	d5d6      	bpl.n	8006c04 <_dtoa_r+0xa70>
 8006c56:	2d39      	cmp	r5, #57	@ 0x39
 8006c58:	d1d2      	bne.n	8006c00 <_dtoa_r+0xa6c>
 8006c5a:	2339      	movs	r3, #57	@ 0x39
 8006c5c:	9a06      	ldr	r2, [sp, #24]
 8006c5e:	7013      	strb	r3, [r2, #0]
 8006c60:	0023      	movs	r3, r4
 8006c62:	001c      	movs	r4, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	2a39      	cmp	r2, #57	@ 0x39
 8006c6a:	d04f      	beq.n	8006d0c <_dtoa_r+0xb78>
 8006c6c:	3201      	adds	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	e604      	b.n	800687c <_dtoa_r+0x6e8>
 8006c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dd03      	ble.n	8006c80 <_dtoa_r+0xaec>
 8006c78:	2d39      	cmp	r5, #57	@ 0x39
 8006c7a:	d0ee      	beq.n	8006c5a <_dtoa_r+0xac6>
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	e7c1      	b.n	8006c04 <_dtoa_r+0xa70>
 8006c80:	9b06      	ldr	r3, [sp, #24]
 8006c82:	9a06      	ldr	r2, [sp, #24]
 8006c84:	701d      	strb	r5, [r3, #0]
 8006c86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d02a      	beq.n	8006ce2 <_dtoa_r+0xb4e>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	220a      	movs	r2, #10
 8006c90:	9905      	ldr	r1, [sp, #20]
 8006c92:	9803      	ldr	r0, [sp, #12]
 8006c94:	f000 f9e0 	bl	8007058 <__multadd>
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	9005      	str	r0, [sp, #20]
 8006c9c:	42bb      	cmp	r3, r7
 8006c9e:	d109      	bne.n	8006cb4 <_dtoa_r+0xb20>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	9904      	ldr	r1, [sp, #16]
 8006ca6:	9803      	ldr	r0, [sp, #12]
 8006ca8:	f000 f9d6 	bl	8007058 <__multadd>
 8006cac:	9004      	str	r0, [sp, #16]
 8006cae:	0007      	movs	r7, r0
 8006cb0:	9406      	str	r4, [sp, #24]
 8006cb2:	e778      	b.n	8006ba6 <_dtoa_r+0xa12>
 8006cb4:	9904      	ldr	r1, [sp, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	220a      	movs	r2, #10
 8006cba:	9803      	ldr	r0, [sp, #12]
 8006cbc:	f000 f9cc 	bl	8007058 <__multadd>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9004      	str	r0, [sp, #16]
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	0039      	movs	r1, r7
 8006cc8:	9803      	ldr	r0, [sp, #12]
 8006cca:	f000 f9c5 	bl	8007058 <__multadd>
 8006cce:	e7ee      	b.n	8006cae <_dtoa_r+0xb1a>
 8006cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd2:	2401      	movs	r4, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dd00      	ble.n	8006cda <_dtoa_r+0xb46>
 8006cd8:	001c      	movs	r4, r3
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	191c      	adds	r4, r3, r4
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	9905      	ldr	r1, [sp, #20]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	9803      	ldr	r0, [sp, #12]
 8006ce8:	f000 fb70 	bl	80073cc <__lshift>
 8006cec:	0031      	movs	r1, r6
 8006cee:	9005      	str	r0, [sp, #20]
 8006cf0:	f000 fbd8 	bl	80074a4 <__mcmp>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	dcb3      	bgt.n	8006c60 <_dtoa_r+0xacc>
 8006cf8:	d101      	bne.n	8006cfe <_dtoa_r+0xb6a>
 8006cfa:	07ed      	lsls	r5, r5, #31
 8006cfc:	d4b0      	bmi.n	8006c60 <_dtoa_r+0xacc>
 8006cfe:	0023      	movs	r3, r4
 8006d00:	001c      	movs	r4, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	2a30      	cmp	r2, #48	@ 0x30
 8006d08:	d0fa      	beq.n	8006d00 <_dtoa_r+0xb6c>
 8006d0a:	e5b7      	b.n	800687c <_dtoa_r+0x6e8>
 8006d0c:	9a08      	ldr	r2, [sp, #32]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d1a7      	bne.n	8006c62 <_dtoa_r+0xace>
 8006d12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d14:	3301      	adds	r3, #1
 8006d16:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d18:	2331      	movs	r3, #49	@ 0x31
 8006d1a:	7013      	strb	r3, [r2, #0]
 8006d1c:	e5ae      	b.n	800687c <_dtoa_r+0x6e8>
 8006d1e:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <_dtoa_r+0xbe0>)
 8006d20:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d22:	9308      	str	r3, [sp, #32]
 8006d24:	4b14      	ldr	r3, [pc, #80]	@ (8006d78 <_dtoa_r+0xbe4>)
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	d001      	beq.n	8006d2e <_dtoa_r+0xb9a>
 8006d2a:	f7ff fa7b 	bl	8006224 <_dtoa_r+0x90>
 8006d2e:	f7ff fa7b 	bl	8006228 <_dtoa_r+0x94>
 8006d32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	dc00      	bgt.n	8006d3a <_dtoa_r+0xba6>
 8006d38:	e648      	b.n	80069cc <_dtoa_r+0x838>
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006d3e:	e665      	b.n	8006a0c <_dtoa_r+0x878>
 8006d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dc00      	bgt.n	8006d48 <_dtoa_r+0xbb4>
 8006d46:	e6d6      	b.n	8006af6 <_dtoa_r+0x962>
 8006d48:	2400      	movs	r4, #0
 8006d4a:	0031      	movs	r1, r6
 8006d4c:	9805      	ldr	r0, [sp, #20]
 8006d4e:	f7ff f993 	bl	8006078 <quorem>
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	3030      	adds	r0, #48	@ 0x30
 8006d56:	5518      	strb	r0, [r3, r4]
 8006d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	0005      	movs	r5, r0
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	dab6      	bge.n	8006cd0 <_dtoa_r+0xb3c>
 8006d62:	2300      	movs	r3, #0
 8006d64:	220a      	movs	r2, #10
 8006d66:	9905      	ldr	r1, [sp, #20]
 8006d68:	9803      	ldr	r0, [sp, #12]
 8006d6a:	f000 f975 	bl	8007058 <__multadd>
 8006d6e:	9005      	str	r0, [sp, #20]
 8006d70:	e7eb      	b.n	8006d4a <_dtoa_r+0xbb6>
 8006d72:	46c0      	nop			@ (mov r8, r8)
 8006d74:	08008318 	.word	0x08008318
 8006d78:	08008320 	.word	0x08008320

08006d7c <_free_r>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	0005      	movs	r5, r0
 8006d80:	1e0c      	subs	r4, r1, #0
 8006d82:	d010      	beq.n	8006da6 <_free_r+0x2a>
 8006d84:	3c04      	subs	r4, #4
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da00      	bge.n	8006d8e <_free_r+0x12>
 8006d8c:	18e4      	adds	r4, r4, r3
 8006d8e:	0028      	movs	r0, r5
 8006d90:	f000 f8ea 	bl	8006f68 <__malloc_lock>
 8006d94:	4a1d      	ldr	r2, [pc, #116]	@ (8006e0c <_free_r+0x90>)
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d105      	bne.n	8006da8 <_free_r+0x2c>
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	6014      	str	r4, [r2, #0]
 8006da0:	0028      	movs	r0, r5
 8006da2:	f000 f8e9 	bl	8006f78 <__malloc_unlock>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	d908      	bls.n	8006dbe <_free_r+0x42>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	1821      	adds	r1, r4, r0
 8006db0:	428b      	cmp	r3, r1
 8006db2:	d1f3      	bne.n	8006d9c <_free_r+0x20>
 8006db4:	6819      	ldr	r1, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	1809      	adds	r1, r1, r0
 8006dba:	6021      	str	r1, [r4, #0]
 8006dbc:	e7ee      	b.n	8006d9c <_free_r+0x20>
 8006dbe:	001a      	movs	r2, r3
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <_free_r+0x4e>
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	d9f9      	bls.n	8006dbe <_free_r+0x42>
 8006dca:	6811      	ldr	r1, [r2, #0]
 8006dcc:	1850      	adds	r0, r2, r1
 8006dce:	42a0      	cmp	r0, r4
 8006dd0:	d10b      	bne.n	8006dea <_free_r+0x6e>
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	1809      	adds	r1, r1, r0
 8006dd6:	1850      	adds	r0, r2, r1
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	d1e0      	bne.n	8006da0 <_free_r+0x24>
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	1841      	adds	r1, r0, r1
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	6053      	str	r3, [r2, #4]
 8006de8:	e7da      	b.n	8006da0 <_free_r+0x24>
 8006dea:	42a0      	cmp	r0, r4
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x78>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d5      	b.n	8006da0 <_free_r+0x24>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	d103      	bne.n	8006e04 <_free_r+0x88>
 8006dfc:	6819      	ldr	r1, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	1809      	adds	r1, r1, r0
 8006e02:	6021      	str	r1, [r4, #0]
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	6054      	str	r4, [r2, #4]
 8006e08:	e7ca      	b.n	8006da0 <_free_r+0x24>
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	2000049c 	.word	0x2000049c

08006e10 <malloc>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4b03      	ldr	r3, [pc, #12]	@ (8006e20 <malloc+0x10>)
 8006e14:	0001      	movs	r1, r0
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	f000 f826 	bl	8006e68 <_malloc_r>
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	20000018 	.word	0x20000018

08006e24 <sbrk_aligned>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4e0f      	ldr	r6, [pc, #60]	@ (8006e64 <sbrk_aligned+0x40>)
 8006e28:	000d      	movs	r5, r1
 8006e2a:	6831      	ldr	r1, [r6, #0]
 8006e2c:	0004      	movs	r4, r0
 8006e2e:	2900      	cmp	r1, #0
 8006e30:	d102      	bne.n	8006e38 <sbrk_aligned+0x14>
 8006e32:	f000 fe6f 	bl	8007b14 <_sbrk_r>
 8006e36:	6030      	str	r0, [r6, #0]
 8006e38:	0029      	movs	r1, r5
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f000 fe6a 	bl	8007b14 <_sbrk_r>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d103      	bne.n	8006e4c <sbrk_aligned+0x28>
 8006e44:	2501      	movs	r5, #1
 8006e46:	426d      	negs	r5, r5
 8006e48:	0028      	movs	r0, r5
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	1cc5      	adds	r5, r0, #3
 8006e50:	439d      	bics	r5, r3
 8006e52:	42a8      	cmp	r0, r5
 8006e54:	d0f8      	beq.n	8006e48 <sbrk_aligned+0x24>
 8006e56:	1a29      	subs	r1, r5, r0
 8006e58:	0020      	movs	r0, r4
 8006e5a:	f000 fe5b 	bl	8007b14 <_sbrk_r>
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d1f2      	bne.n	8006e48 <sbrk_aligned+0x24>
 8006e62:	e7ef      	b.n	8006e44 <sbrk_aligned+0x20>
 8006e64:	20000498 	.word	0x20000498

08006e68 <_malloc_r>:
 8006e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	1ccb      	adds	r3, r1, #3
 8006e6e:	4393      	bics	r3, r2
 8006e70:	3308      	adds	r3, #8
 8006e72:	0005      	movs	r5, r0
 8006e74:	001f      	movs	r7, r3
 8006e76:	2b0c      	cmp	r3, #12
 8006e78:	d234      	bcs.n	8006ee4 <_malloc_r+0x7c>
 8006e7a:	270c      	movs	r7, #12
 8006e7c:	42b9      	cmp	r1, r7
 8006e7e:	d833      	bhi.n	8006ee8 <_malloc_r+0x80>
 8006e80:	0028      	movs	r0, r5
 8006e82:	f000 f871 	bl	8006f68 <__malloc_lock>
 8006e86:	4e37      	ldr	r6, [pc, #220]	@ (8006f64 <_malloc_r+0xfc>)
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	001c      	movs	r4, r3
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	d12f      	bne.n	8006ef0 <_malloc_r+0x88>
 8006e90:	0039      	movs	r1, r7
 8006e92:	0028      	movs	r0, r5
 8006e94:	f7ff ffc6 	bl	8006e24 <sbrk_aligned>
 8006e98:	0004      	movs	r4, r0
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d15f      	bne.n	8006f5e <_malloc_r+0xf6>
 8006e9e:	6834      	ldr	r4, [r6, #0]
 8006ea0:	9400      	str	r4, [sp, #0]
 8006ea2:	9b00      	ldr	r3, [sp, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d14a      	bne.n	8006f3e <_malloc_r+0xd6>
 8006ea8:	2c00      	cmp	r4, #0
 8006eaa:	d052      	beq.n	8006f52 <_malloc_r+0xea>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	0028      	movs	r0, r5
 8006eb0:	18e3      	adds	r3, r4, r3
 8006eb2:	9900      	ldr	r1, [sp, #0]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	f000 fe2d 	bl	8007b14 <_sbrk_r>
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	4283      	cmp	r3, r0
 8006ebe:	d148      	bne.n	8006f52 <_malloc_r+0xea>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	0028      	movs	r0, r5
 8006ec4:	1aff      	subs	r7, r7, r3
 8006ec6:	0039      	movs	r1, r7
 8006ec8:	f7ff ffac 	bl	8006e24 <sbrk_aligned>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d040      	beq.n	8006f52 <_malloc_r+0xea>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	19db      	adds	r3, r3, r7
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	6833      	ldr	r3, [r6, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d133      	bne.n	8006f46 <_malloc_r+0xde>
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	e019      	b.n	8006f18 <_malloc_r+0xb0>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	dac9      	bge.n	8006e7c <_malloc_r+0x14>
 8006ee8:	230c      	movs	r3, #12
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	2000      	movs	r0, #0
 8006eee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ef0:	6821      	ldr	r1, [r4, #0]
 8006ef2:	1bc9      	subs	r1, r1, r7
 8006ef4:	d420      	bmi.n	8006f38 <_malloc_r+0xd0>
 8006ef6:	290b      	cmp	r1, #11
 8006ef8:	d90a      	bls.n	8006f10 <_malloc_r+0xa8>
 8006efa:	19e2      	adds	r2, r4, r7
 8006efc:	6027      	str	r7, [r4, #0]
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	d104      	bne.n	8006f0c <_malloc_r+0xa4>
 8006f02:	6032      	str	r2, [r6, #0]
 8006f04:	6863      	ldr	r3, [r4, #4]
 8006f06:	6011      	str	r1, [r2, #0]
 8006f08:	6053      	str	r3, [r2, #4]
 8006f0a:	e005      	b.n	8006f18 <_malloc_r+0xb0>
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	e7f9      	b.n	8006f04 <_malloc_r+0x9c>
 8006f10:	6862      	ldr	r2, [r4, #4]
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	d10e      	bne.n	8006f34 <_malloc_r+0xcc>
 8006f16:	6032      	str	r2, [r6, #0]
 8006f18:	0028      	movs	r0, r5
 8006f1a:	f000 f82d 	bl	8006f78 <__malloc_unlock>
 8006f1e:	0020      	movs	r0, r4
 8006f20:	2207      	movs	r2, #7
 8006f22:	300b      	adds	r0, #11
 8006f24:	1d23      	adds	r3, r4, #4
 8006f26:	4390      	bics	r0, r2
 8006f28:	1ac2      	subs	r2, r0, r3
 8006f2a:	4298      	cmp	r0, r3
 8006f2c:	d0df      	beq.n	8006eee <_malloc_r+0x86>
 8006f2e:	1a1b      	subs	r3, r3, r0
 8006f30:	50a3      	str	r3, [r4, r2]
 8006f32:	e7dc      	b.n	8006eee <_malloc_r+0x86>
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	e7ef      	b.n	8006f18 <_malloc_r+0xb0>
 8006f38:	0023      	movs	r3, r4
 8006f3a:	6864      	ldr	r4, [r4, #4]
 8006f3c:	e7a6      	b.n	8006e8c <_malloc_r+0x24>
 8006f3e:	9c00      	ldr	r4, [sp, #0]
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	e7ad      	b.n	8006ea2 <_malloc_r+0x3a>
 8006f46:	001a      	movs	r2, r3
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	42a3      	cmp	r3, r4
 8006f4c:	d1fb      	bne.n	8006f46 <_malloc_r+0xde>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e7da      	b.n	8006f08 <_malloc_r+0xa0>
 8006f52:	230c      	movs	r3, #12
 8006f54:	0028      	movs	r0, r5
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f000 f80e 	bl	8006f78 <__malloc_unlock>
 8006f5c:	e7c6      	b.n	8006eec <_malloc_r+0x84>
 8006f5e:	6007      	str	r7, [r0, #0]
 8006f60:	e7da      	b.n	8006f18 <_malloc_r+0xb0>
 8006f62:	46c0      	nop			@ (mov r8, r8)
 8006f64:	2000049c 	.word	0x2000049c

08006f68 <__malloc_lock>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	4802      	ldr	r0, [pc, #8]	@ (8006f74 <__malloc_lock+0xc>)
 8006f6c:	f7ff f877 	bl	800605e <__retarget_lock_acquire_recursive>
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	46c0      	nop			@ (mov r8, r8)
 8006f74:	20000494 	.word	0x20000494

08006f78 <__malloc_unlock>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4802      	ldr	r0, [pc, #8]	@ (8006f84 <__malloc_unlock+0xc>)
 8006f7c:	f7ff f870 	bl	8006060 <__retarget_lock_release_recursive>
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	20000494 	.word	0x20000494

08006f88 <_Balloc>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	69c5      	ldr	r5, [r0, #28]
 8006f8c:	0006      	movs	r6, r0
 8006f8e:	000c      	movs	r4, r1
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	d10e      	bne.n	8006fb2 <_Balloc+0x2a>
 8006f94:	2010      	movs	r0, #16
 8006f96:	f7ff ff3b 	bl	8006e10 <malloc>
 8006f9a:	1e02      	subs	r2, r0, #0
 8006f9c:	61f0      	str	r0, [r6, #28]
 8006f9e:	d104      	bne.n	8006faa <_Balloc+0x22>
 8006fa0:	216b      	movs	r1, #107	@ 0x6b
 8006fa2:	4b19      	ldr	r3, [pc, #100]	@ (8007008 <_Balloc+0x80>)
 8006fa4:	4819      	ldr	r0, [pc, #100]	@ (800700c <_Balloc+0x84>)
 8006fa6:	f000 fdd1 	bl	8007b4c <__assert_func>
 8006faa:	6045      	str	r5, [r0, #4]
 8006fac:	6085      	str	r5, [r0, #8]
 8006fae:	6005      	str	r5, [r0, #0]
 8006fb0:	60c5      	str	r5, [r0, #12]
 8006fb2:	69f5      	ldr	r5, [r6, #28]
 8006fb4:	68eb      	ldr	r3, [r5, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d013      	beq.n	8006fe2 <_Balloc+0x5a>
 8006fba:	69f3      	ldr	r3, [r6, #28]
 8006fbc:	00a2      	lsls	r2, r4, #2
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d118      	bne.n	8006ffa <_Balloc+0x72>
 8006fc8:	2101      	movs	r1, #1
 8006fca:	000d      	movs	r5, r1
 8006fcc:	40a5      	lsls	r5, r4
 8006fce:	1d6a      	adds	r2, r5, #5
 8006fd0:	0030      	movs	r0, r6
 8006fd2:	0092      	lsls	r2, r2, #2
 8006fd4:	f000 fdd8 	bl	8007b88 <_calloc_r>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d00c      	beq.n	8006ff6 <_Balloc+0x6e>
 8006fdc:	6044      	str	r4, [r0, #4]
 8006fde:	6085      	str	r5, [r0, #8]
 8006fe0:	e00d      	b.n	8006ffe <_Balloc+0x76>
 8006fe2:	2221      	movs	r2, #33	@ 0x21
 8006fe4:	2104      	movs	r1, #4
 8006fe6:	0030      	movs	r0, r6
 8006fe8:	f000 fdce 	bl	8007b88 <_calloc_r>
 8006fec:	69f3      	ldr	r3, [r6, #28]
 8006fee:	60e8      	str	r0, [r5, #12]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e1      	bne.n	8006fba <_Balloc+0x32>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	6802      	ldr	r2, [r0, #0]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	2300      	movs	r3, #0
 8007000:	6103      	str	r3, [r0, #16]
 8007002:	60c3      	str	r3, [r0, #12]
 8007004:	e7f8      	b.n	8006ff8 <_Balloc+0x70>
 8007006:	46c0      	nop			@ (mov r8, r8)
 8007008:	08008325 	.word	0x08008325
 800700c:	080083a5 	.word	0x080083a5

08007010 <_Bfree>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	69c6      	ldr	r6, [r0, #28]
 8007014:	0005      	movs	r5, r0
 8007016:	000c      	movs	r4, r1
 8007018:	2e00      	cmp	r6, #0
 800701a:	d10e      	bne.n	800703a <_Bfree+0x2a>
 800701c:	2010      	movs	r0, #16
 800701e:	f7ff fef7 	bl	8006e10 <malloc>
 8007022:	1e02      	subs	r2, r0, #0
 8007024:	61e8      	str	r0, [r5, #28]
 8007026:	d104      	bne.n	8007032 <_Bfree+0x22>
 8007028:	218f      	movs	r1, #143	@ 0x8f
 800702a:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <_Bfree+0x40>)
 800702c:	4809      	ldr	r0, [pc, #36]	@ (8007054 <_Bfree+0x44>)
 800702e:	f000 fd8d 	bl	8007b4c <__assert_func>
 8007032:	6046      	str	r6, [r0, #4]
 8007034:	6086      	str	r6, [r0, #8]
 8007036:	6006      	str	r6, [r0, #0]
 8007038:	60c6      	str	r6, [r0, #12]
 800703a:	2c00      	cmp	r4, #0
 800703c:	d007      	beq.n	800704e <_Bfree+0x3e>
 800703e:	69eb      	ldr	r3, [r5, #28]
 8007040:	6862      	ldr	r2, [r4, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	0092      	lsls	r2, r2, #2
 8007046:	189b      	adds	r3, r3, r2
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	6022      	str	r2, [r4, #0]
 800704c:	601c      	str	r4, [r3, #0]
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	08008325 	.word	0x08008325
 8007054:	080083a5 	.word	0x080083a5

08007058 <__multadd>:
 8007058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705a:	000f      	movs	r7, r1
 800705c:	9001      	str	r0, [sp, #4]
 800705e:	000c      	movs	r4, r1
 8007060:	001e      	movs	r6, r3
 8007062:	2000      	movs	r0, #0
 8007064:	690d      	ldr	r5, [r1, #16]
 8007066:	3714      	adds	r7, #20
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	3001      	adds	r0, #1
 800706c:	b299      	uxth	r1, r3
 800706e:	4351      	muls	r1, r2
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	4353      	muls	r3, r2
 8007074:	1989      	adds	r1, r1, r6
 8007076:	0c0e      	lsrs	r6, r1, #16
 8007078:	199b      	adds	r3, r3, r6
 800707a:	0c1e      	lsrs	r6, r3, #16
 800707c:	b289      	uxth	r1, r1
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	185b      	adds	r3, r3, r1
 8007082:	c708      	stmia	r7!, {r3}
 8007084:	4285      	cmp	r5, r0
 8007086:	dcef      	bgt.n	8007068 <__multadd+0x10>
 8007088:	2e00      	cmp	r6, #0
 800708a:	d022      	beq.n	80070d2 <__multadd+0x7a>
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	42ab      	cmp	r3, r5
 8007090:	dc19      	bgt.n	80070c6 <__multadd+0x6e>
 8007092:	6861      	ldr	r1, [r4, #4]
 8007094:	9801      	ldr	r0, [sp, #4]
 8007096:	3101      	adds	r1, #1
 8007098:	f7ff ff76 	bl	8006f88 <_Balloc>
 800709c:	1e07      	subs	r7, r0, #0
 800709e:	d105      	bne.n	80070ac <__multadd+0x54>
 80070a0:	003a      	movs	r2, r7
 80070a2:	21ba      	movs	r1, #186	@ 0xba
 80070a4:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <__multadd+0x80>)
 80070a6:	480d      	ldr	r0, [pc, #52]	@ (80070dc <__multadd+0x84>)
 80070a8:	f000 fd50 	bl	8007b4c <__assert_func>
 80070ac:	0021      	movs	r1, r4
 80070ae:	6922      	ldr	r2, [r4, #16]
 80070b0:	310c      	adds	r1, #12
 80070b2:	3202      	adds	r2, #2
 80070b4:	0092      	lsls	r2, r2, #2
 80070b6:	300c      	adds	r0, #12
 80070b8:	f000 fd3e 	bl	8007b38 <memcpy>
 80070bc:	0021      	movs	r1, r4
 80070be:	9801      	ldr	r0, [sp, #4]
 80070c0:	f7ff ffa6 	bl	8007010 <_Bfree>
 80070c4:	003c      	movs	r4, r7
 80070c6:	1d2b      	adds	r3, r5, #4
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	18e3      	adds	r3, r4, r3
 80070cc:	3501      	adds	r5, #1
 80070ce:	605e      	str	r6, [r3, #4]
 80070d0:	6125      	str	r5, [r4, #16]
 80070d2:	0020      	movs	r0, r4
 80070d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	08008394 	.word	0x08008394
 80070dc:	080083a5 	.word	0x080083a5

080070e0 <__hi0bits>:
 80070e0:	2280      	movs	r2, #128	@ 0x80
 80070e2:	0003      	movs	r3, r0
 80070e4:	0252      	lsls	r2, r2, #9
 80070e6:	2000      	movs	r0, #0
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d201      	bcs.n	80070f0 <__hi0bits+0x10>
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	3010      	adds	r0, #16
 80070f0:	2280      	movs	r2, #128	@ 0x80
 80070f2:	0452      	lsls	r2, r2, #17
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d201      	bcs.n	80070fc <__hi0bits+0x1c>
 80070f8:	3008      	adds	r0, #8
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	2280      	movs	r2, #128	@ 0x80
 80070fe:	0552      	lsls	r2, r2, #21
 8007100:	4293      	cmp	r3, r2
 8007102:	d201      	bcs.n	8007108 <__hi0bits+0x28>
 8007104:	3004      	adds	r0, #4
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	2280      	movs	r2, #128	@ 0x80
 800710a:	05d2      	lsls	r2, r2, #23
 800710c:	4293      	cmp	r3, r2
 800710e:	d201      	bcs.n	8007114 <__hi0bits+0x34>
 8007110:	3002      	adds	r0, #2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	db03      	blt.n	8007120 <__hi0bits+0x40>
 8007118:	3001      	adds	r0, #1
 800711a:	4213      	tst	r3, r2
 800711c:	d100      	bne.n	8007120 <__hi0bits+0x40>
 800711e:	2020      	movs	r0, #32
 8007120:	4770      	bx	lr

08007122 <__lo0bits>:
 8007122:	6803      	ldr	r3, [r0, #0]
 8007124:	0001      	movs	r1, r0
 8007126:	2207      	movs	r2, #7
 8007128:	0018      	movs	r0, r3
 800712a:	4010      	ands	r0, r2
 800712c:	4213      	tst	r3, r2
 800712e:	d00d      	beq.n	800714c <__lo0bits+0x2a>
 8007130:	3a06      	subs	r2, #6
 8007132:	2000      	movs	r0, #0
 8007134:	4213      	tst	r3, r2
 8007136:	d105      	bne.n	8007144 <__lo0bits+0x22>
 8007138:	3002      	adds	r0, #2
 800713a:	4203      	tst	r3, r0
 800713c:	d003      	beq.n	8007146 <__lo0bits+0x24>
 800713e:	40d3      	lsrs	r3, r2
 8007140:	0010      	movs	r0, r2
 8007142:	600b      	str	r3, [r1, #0]
 8007144:	4770      	bx	lr
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	600b      	str	r3, [r1, #0]
 800714a:	e7fb      	b.n	8007144 <__lo0bits+0x22>
 800714c:	b29a      	uxth	r2, r3
 800714e:	2a00      	cmp	r2, #0
 8007150:	d101      	bne.n	8007156 <__lo0bits+0x34>
 8007152:	2010      	movs	r0, #16
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	b2da      	uxtb	r2, r3
 8007158:	2a00      	cmp	r2, #0
 800715a:	d101      	bne.n	8007160 <__lo0bits+0x3e>
 800715c:	3008      	adds	r0, #8
 800715e:	0a1b      	lsrs	r3, r3, #8
 8007160:	071a      	lsls	r2, r3, #28
 8007162:	d101      	bne.n	8007168 <__lo0bits+0x46>
 8007164:	3004      	adds	r0, #4
 8007166:	091b      	lsrs	r3, r3, #4
 8007168:	079a      	lsls	r2, r3, #30
 800716a:	d101      	bne.n	8007170 <__lo0bits+0x4e>
 800716c:	3002      	adds	r0, #2
 800716e:	089b      	lsrs	r3, r3, #2
 8007170:	07da      	lsls	r2, r3, #31
 8007172:	d4e9      	bmi.n	8007148 <__lo0bits+0x26>
 8007174:	3001      	adds	r0, #1
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	d1e6      	bne.n	8007148 <__lo0bits+0x26>
 800717a:	2020      	movs	r0, #32
 800717c:	e7e2      	b.n	8007144 <__lo0bits+0x22>
	...

08007180 <__i2b>:
 8007180:	b510      	push	{r4, lr}
 8007182:	000c      	movs	r4, r1
 8007184:	2101      	movs	r1, #1
 8007186:	f7ff feff 	bl	8006f88 <_Balloc>
 800718a:	2800      	cmp	r0, #0
 800718c:	d107      	bne.n	800719e <__i2b+0x1e>
 800718e:	2146      	movs	r1, #70	@ 0x46
 8007190:	4c05      	ldr	r4, [pc, #20]	@ (80071a8 <__i2b+0x28>)
 8007192:	0002      	movs	r2, r0
 8007194:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <__i2b+0x2c>)
 8007196:	0020      	movs	r0, r4
 8007198:	31ff      	adds	r1, #255	@ 0xff
 800719a:	f000 fcd7 	bl	8007b4c <__assert_func>
 800719e:	2301      	movs	r3, #1
 80071a0:	6144      	str	r4, [r0, #20]
 80071a2:	6103      	str	r3, [r0, #16]
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	46c0      	nop			@ (mov r8, r8)
 80071a8:	080083a5 	.word	0x080083a5
 80071ac:	08008394 	.word	0x08008394

080071b0 <__multiply>:
 80071b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b2:	0014      	movs	r4, r2
 80071b4:	690a      	ldr	r2, [r1, #16]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	000d      	movs	r5, r1
 80071ba:	b08b      	sub	sp, #44	@ 0x2c
 80071bc:	429a      	cmp	r2, r3
 80071be:	db02      	blt.n	80071c6 <__multiply+0x16>
 80071c0:	0023      	movs	r3, r4
 80071c2:	000c      	movs	r4, r1
 80071c4:	001d      	movs	r5, r3
 80071c6:	6927      	ldr	r7, [r4, #16]
 80071c8:	692e      	ldr	r6, [r5, #16]
 80071ca:	6861      	ldr	r1, [r4, #4]
 80071cc:	19bb      	adds	r3, r7, r6
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	68a3      	ldr	r3, [r4, #8]
 80071d2:	19ba      	adds	r2, r7, r6
 80071d4:	4293      	cmp	r3, r2
 80071d6:	da00      	bge.n	80071da <__multiply+0x2a>
 80071d8:	3101      	adds	r1, #1
 80071da:	f7ff fed5 	bl	8006f88 <_Balloc>
 80071de:	9002      	str	r0, [sp, #8]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d106      	bne.n	80071f2 <__multiply+0x42>
 80071e4:	21b1      	movs	r1, #177	@ 0xb1
 80071e6:	4b49      	ldr	r3, [pc, #292]	@ (800730c <__multiply+0x15c>)
 80071e8:	4849      	ldr	r0, [pc, #292]	@ (8007310 <__multiply+0x160>)
 80071ea:	9a02      	ldr	r2, [sp, #8]
 80071ec:	0049      	lsls	r1, r1, #1
 80071ee:	f000 fcad 	bl	8007b4c <__assert_func>
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	3314      	adds	r3, #20
 80071f8:	469c      	mov	ip, r3
 80071fa:	19bb      	adds	r3, r7, r6
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4463      	add	r3, ip
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	4663      	mov	r3, ip
 8007204:	9904      	ldr	r1, [sp, #16]
 8007206:	428b      	cmp	r3, r1
 8007208:	d32a      	bcc.n	8007260 <__multiply+0xb0>
 800720a:	0023      	movs	r3, r4
 800720c:	00bf      	lsls	r7, r7, #2
 800720e:	3314      	adds	r3, #20
 8007210:	3514      	adds	r5, #20
 8007212:	9308      	str	r3, [sp, #32]
 8007214:	00b6      	lsls	r6, r6, #2
 8007216:	19db      	adds	r3, r3, r7
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	19ab      	adds	r3, r5, r6
 800721c:	9309      	str	r3, [sp, #36]	@ 0x24
 800721e:	2304      	movs	r3, #4
 8007220:	9306      	str	r3, [sp, #24]
 8007222:	0023      	movs	r3, r4
 8007224:	9a05      	ldr	r2, [sp, #20]
 8007226:	3315      	adds	r3, #21
 8007228:	9501      	str	r5, [sp, #4]
 800722a:	429a      	cmp	r2, r3
 800722c:	d305      	bcc.n	800723a <__multiply+0x8a>
 800722e:	1b13      	subs	r3, r2, r4
 8007230:	3b15      	subs	r3, #21
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	3301      	adds	r3, #1
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	9306      	str	r3, [sp, #24]
 800723a:	9b01      	ldr	r3, [sp, #4]
 800723c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800723e:	4293      	cmp	r3, r2
 8007240:	d310      	bcc.n	8007264 <__multiply+0xb4>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd05      	ble.n	8007254 <__multiply+0xa4>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	3b04      	subs	r3, #4
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d056      	beq.n	8007302 <__multiply+0x152>
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	9a03      	ldr	r2, [sp, #12]
 8007258:	0018      	movs	r0, r3
 800725a:	611a      	str	r2, [r3, #16]
 800725c:	b00b      	add	sp, #44	@ 0x2c
 800725e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007260:	c304      	stmia	r3!, {r2}
 8007262:	e7cf      	b.n	8007204 <__multiply+0x54>
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	b280      	uxth	r0, r0
 800726a:	2800      	cmp	r0, #0
 800726c:	d01e      	beq.n	80072ac <__multiply+0xfc>
 800726e:	4667      	mov	r7, ip
 8007270:	2500      	movs	r5, #0
 8007272:	9e08      	ldr	r6, [sp, #32]
 8007274:	ce02      	ldmia	r6!, {r1}
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	b28b      	uxth	r3, r1
 800727c:	4343      	muls	r3, r0
 800727e:	001a      	movs	r2, r3
 8007280:	466b      	mov	r3, sp
 8007282:	0c09      	lsrs	r1, r1, #16
 8007284:	8b9b      	ldrh	r3, [r3, #28]
 8007286:	4341      	muls	r1, r0
 8007288:	18d3      	adds	r3, r2, r3
 800728a:	9a07      	ldr	r2, [sp, #28]
 800728c:	195b      	adds	r3, r3, r5
 800728e:	0c12      	lsrs	r2, r2, #16
 8007290:	1889      	adds	r1, r1, r2
 8007292:	0c1a      	lsrs	r2, r3, #16
 8007294:	188a      	adds	r2, r1, r2
 8007296:	b29b      	uxth	r3, r3
 8007298:	0c15      	lsrs	r5, r2, #16
 800729a:	0412      	lsls	r2, r2, #16
 800729c:	431a      	orrs	r2, r3
 800729e:	9b05      	ldr	r3, [sp, #20]
 80072a0:	c704      	stmia	r7!, {r2}
 80072a2:	42b3      	cmp	r3, r6
 80072a4:	d8e6      	bhi.n	8007274 <__multiply+0xc4>
 80072a6:	4663      	mov	r3, ip
 80072a8:	9a06      	ldr	r2, [sp, #24]
 80072aa:	509d      	str	r5, [r3, r2]
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	0c00      	lsrs	r0, r0, #16
 80072b2:	d020      	beq.n	80072f6 <__multiply+0x146>
 80072b4:	4663      	mov	r3, ip
 80072b6:	0025      	movs	r5, r4
 80072b8:	4661      	mov	r1, ip
 80072ba:	2700      	movs	r7, #0
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3514      	adds	r5, #20
 80072c0:	682a      	ldr	r2, [r5, #0]
 80072c2:	680e      	ldr	r6, [r1, #0]
 80072c4:	b292      	uxth	r2, r2
 80072c6:	4342      	muls	r2, r0
 80072c8:	0c36      	lsrs	r6, r6, #16
 80072ca:	1992      	adds	r2, r2, r6
 80072cc:	19d2      	adds	r2, r2, r7
 80072ce:	0416      	lsls	r6, r2, #16
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	431e      	orrs	r6, r3
 80072d4:	600e      	str	r6, [r1, #0]
 80072d6:	cd40      	ldmia	r5!, {r6}
 80072d8:	684b      	ldr	r3, [r1, #4]
 80072da:	0c36      	lsrs	r6, r6, #16
 80072dc:	4346      	muls	r6, r0
 80072de:	b29b      	uxth	r3, r3
 80072e0:	0c12      	lsrs	r2, r2, #16
 80072e2:	18f3      	adds	r3, r6, r3
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	9a05      	ldr	r2, [sp, #20]
 80072e8:	0c1f      	lsrs	r7, r3, #16
 80072ea:	3104      	adds	r1, #4
 80072ec:	42aa      	cmp	r2, r5
 80072ee:	d8e7      	bhi.n	80072c0 <__multiply+0x110>
 80072f0:	4662      	mov	r2, ip
 80072f2:	9906      	ldr	r1, [sp, #24]
 80072f4:	5053      	str	r3, [r2, r1]
 80072f6:	9b01      	ldr	r3, [sp, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2304      	movs	r3, #4
 80072fe:	449c      	add	ip, r3
 8007300:	e79b      	b.n	800723a <__multiply+0x8a>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	3b01      	subs	r3, #1
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	e79b      	b.n	8007242 <__multiply+0x92>
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	08008394 	.word	0x08008394
 8007310:	080083a5 	.word	0x080083a5

08007314 <__pow5mult>:
 8007314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007316:	2303      	movs	r3, #3
 8007318:	0015      	movs	r5, r2
 800731a:	0007      	movs	r7, r0
 800731c:	000e      	movs	r6, r1
 800731e:	401a      	ands	r2, r3
 8007320:	421d      	tst	r5, r3
 8007322:	d008      	beq.n	8007336 <__pow5mult+0x22>
 8007324:	4925      	ldr	r1, [pc, #148]	@ (80073bc <__pow5mult+0xa8>)
 8007326:	3a01      	subs	r2, #1
 8007328:	0092      	lsls	r2, r2, #2
 800732a:	5852      	ldr	r2, [r2, r1]
 800732c:	2300      	movs	r3, #0
 800732e:	0031      	movs	r1, r6
 8007330:	f7ff fe92 	bl	8007058 <__multadd>
 8007334:	0006      	movs	r6, r0
 8007336:	10ad      	asrs	r5, r5, #2
 8007338:	d03d      	beq.n	80073b6 <__pow5mult+0xa2>
 800733a:	69fc      	ldr	r4, [r7, #28]
 800733c:	2c00      	cmp	r4, #0
 800733e:	d10f      	bne.n	8007360 <__pow5mult+0x4c>
 8007340:	2010      	movs	r0, #16
 8007342:	f7ff fd65 	bl	8006e10 <malloc>
 8007346:	1e02      	subs	r2, r0, #0
 8007348:	61f8      	str	r0, [r7, #28]
 800734a:	d105      	bne.n	8007358 <__pow5mult+0x44>
 800734c:	21b4      	movs	r1, #180	@ 0xb4
 800734e:	4b1c      	ldr	r3, [pc, #112]	@ (80073c0 <__pow5mult+0xac>)
 8007350:	481c      	ldr	r0, [pc, #112]	@ (80073c4 <__pow5mult+0xb0>)
 8007352:	31ff      	adds	r1, #255	@ 0xff
 8007354:	f000 fbfa 	bl	8007b4c <__assert_func>
 8007358:	6044      	str	r4, [r0, #4]
 800735a:	6084      	str	r4, [r0, #8]
 800735c:	6004      	str	r4, [r0, #0]
 800735e:	60c4      	str	r4, [r0, #12]
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	689c      	ldr	r4, [r3, #8]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d108      	bne.n	800737c <__pow5mult+0x68>
 800736a:	0038      	movs	r0, r7
 800736c:	4916      	ldr	r1, [pc, #88]	@ (80073c8 <__pow5mult+0xb4>)
 800736e:	f7ff ff07 	bl	8007180 <__i2b>
 8007372:	9b01      	ldr	r3, [sp, #4]
 8007374:	0004      	movs	r4, r0
 8007376:	6098      	str	r0, [r3, #8]
 8007378:	2300      	movs	r3, #0
 800737a:	6003      	str	r3, [r0, #0]
 800737c:	2301      	movs	r3, #1
 800737e:	421d      	tst	r5, r3
 8007380:	d00a      	beq.n	8007398 <__pow5mult+0x84>
 8007382:	0031      	movs	r1, r6
 8007384:	0022      	movs	r2, r4
 8007386:	0038      	movs	r0, r7
 8007388:	f7ff ff12 	bl	80071b0 <__multiply>
 800738c:	0031      	movs	r1, r6
 800738e:	9001      	str	r0, [sp, #4]
 8007390:	0038      	movs	r0, r7
 8007392:	f7ff fe3d 	bl	8007010 <_Bfree>
 8007396:	9e01      	ldr	r6, [sp, #4]
 8007398:	106d      	asrs	r5, r5, #1
 800739a:	d00c      	beq.n	80073b6 <__pow5mult+0xa2>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	2800      	cmp	r0, #0
 80073a0:	d107      	bne.n	80073b2 <__pow5mult+0x9e>
 80073a2:	0022      	movs	r2, r4
 80073a4:	0021      	movs	r1, r4
 80073a6:	0038      	movs	r0, r7
 80073a8:	f7ff ff02 	bl	80071b0 <__multiply>
 80073ac:	2300      	movs	r3, #0
 80073ae:	6020      	str	r0, [r4, #0]
 80073b0:	6003      	str	r3, [r0, #0]
 80073b2:	0004      	movs	r4, r0
 80073b4:	e7e2      	b.n	800737c <__pow5mult+0x68>
 80073b6:	0030      	movs	r0, r6
 80073b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	08008400 	.word	0x08008400
 80073c0:	08008325 	.word	0x08008325
 80073c4:	080083a5 	.word	0x080083a5
 80073c8:	00000271 	.word	0x00000271

080073cc <__lshift>:
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ce:	000c      	movs	r4, r1
 80073d0:	0016      	movs	r6, r2
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	1157      	asrs	r7, r2, #5
 80073d6:	b085      	sub	sp, #20
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	3301      	adds	r3, #1
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	6849      	ldr	r1, [r1, #4]
 80073e2:	68a3      	ldr	r3, [r4, #8]
 80073e4:	9002      	str	r0, [sp, #8]
 80073e6:	9a00      	ldr	r2, [sp, #0]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	db10      	blt.n	800740e <__lshift+0x42>
 80073ec:	9802      	ldr	r0, [sp, #8]
 80073ee:	f7ff fdcb 	bl	8006f88 <_Balloc>
 80073f2:	2300      	movs	r3, #0
 80073f4:	0001      	movs	r1, r0
 80073f6:	0005      	movs	r5, r0
 80073f8:	001a      	movs	r2, r3
 80073fa:	3114      	adds	r1, #20
 80073fc:	4298      	cmp	r0, r3
 80073fe:	d10c      	bne.n	800741a <__lshift+0x4e>
 8007400:	21ef      	movs	r1, #239	@ 0xef
 8007402:	002a      	movs	r2, r5
 8007404:	4b25      	ldr	r3, [pc, #148]	@ (800749c <__lshift+0xd0>)
 8007406:	4826      	ldr	r0, [pc, #152]	@ (80074a0 <__lshift+0xd4>)
 8007408:	0049      	lsls	r1, r1, #1
 800740a:	f000 fb9f 	bl	8007b4c <__assert_func>
 800740e:	3101      	adds	r1, #1
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	e7e8      	b.n	80073e6 <__lshift+0x1a>
 8007414:	0098      	lsls	r0, r3, #2
 8007416:	500a      	str	r2, [r1, r0]
 8007418:	3301      	adds	r3, #1
 800741a:	42bb      	cmp	r3, r7
 800741c:	dbfa      	blt.n	8007414 <__lshift+0x48>
 800741e:	43fb      	mvns	r3, r7
 8007420:	17db      	asrs	r3, r3, #31
 8007422:	401f      	ands	r7, r3
 8007424:	00bf      	lsls	r7, r7, #2
 8007426:	0023      	movs	r3, r4
 8007428:	201f      	movs	r0, #31
 800742a:	19c9      	adds	r1, r1, r7
 800742c:	0037      	movs	r7, r6
 800742e:	6922      	ldr	r2, [r4, #16]
 8007430:	3314      	adds	r3, #20
 8007432:	0092      	lsls	r2, r2, #2
 8007434:	189a      	adds	r2, r3, r2
 8007436:	4007      	ands	r7, r0
 8007438:	4206      	tst	r6, r0
 800743a:	d029      	beq.n	8007490 <__lshift+0xc4>
 800743c:	3001      	adds	r0, #1
 800743e:	1bc0      	subs	r0, r0, r7
 8007440:	9003      	str	r0, [sp, #12]
 8007442:	468c      	mov	ip, r1
 8007444:	2000      	movs	r0, #0
 8007446:	681e      	ldr	r6, [r3, #0]
 8007448:	40be      	lsls	r6, r7
 800744a:	4306      	orrs	r6, r0
 800744c:	4660      	mov	r0, ip
 800744e:	c040      	stmia	r0!, {r6}
 8007450:	4684      	mov	ip, r0
 8007452:	9e03      	ldr	r6, [sp, #12]
 8007454:	cb01      	ldmia	r3!, {r0}
 8007456:	40f0      	lsrs	r0, r6
 8007458:	429a      	cmp	r2, r3
 800745a:	d8f4      	bhi.n	8007446 <__lshift+0x7a>
 800745c:	0026      	movs	r6, r4
 800745e:	3615      	adds	r6, #21
 8007460:	2304      	movs	r3, #4
 8007462:	42b2      	cmp	r2, r6
 8007464:	d304      	bcc.n	8007470 <__lshift+0xa4>
 8007466:	1b13      	subs	r3, r2, r4
 8007468:	3b15      	subs	r3, #21
 800746a:	089b      	lsrs	r3, r3, #2
 800746c:	3301      	adds	r3, #1
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	50c8      	str	r0, [r1, r3]
 8007472:	2800      	cmp	r0, #0
 8007474:	d002      	beq.n	800747c <__lshift+0xb0>
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	3302      	adds	r3, #2
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	9802      	ldr	r0, [sp, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	0021      	movs	r1, r4
 8007484:	612b      	str	r3, [r5, #16]
 8007486:	f7ff fdc3 	bl	8007010 <_Bfree>
 800748a:	0028      	movs	r0, r5
 800748c:	b005      	add	sp, #20
 800748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007490:	cb01      	ldmia	r3!, {r0}
 8007492:	c101      	stmia	r1!, {r0}
 8007494:	429a      	cmp	r2, r3
 8007496:	d8fb      	bhi.n	8007490 <__lshift+0xc4>
 8007498:	e7f0      	b.n	800747c <__lshift+0xb0>
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	08008394 	.word	0x08008394
 80074a0:	080083a5 	.word	0x080083a5

080074a4 <__mcmp>:
 80074a4:	b530      	push	{r4, r5, lr}
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	6904      	ldr	r4, [r0, #16]
 80074aa:	0002      	movs	r2, r0
 80074ac:	1ae0      	subs	r0, r4, r3
 80074ae:	429c      	cmp	r4, r3
 80074b0:	d10f      	bne.n	80074d2 <__mcmp+0x2e>
 80074b2:	3214      	adds	r2, #20
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	3114      	adds	r1, #20
 80074b8:	0014      	movs	r4, r2
 80074ba:	18c9      	adds	r1, r1, r3
 80074bc:	18d2      	adds	r2, r2, r3
 80074be:	3a04      	subs	r2, #4
 80074c0:	3904      	subs	r1, #4
 80074c2:	6815      	ldr	r5, [r2, #0]
 80074c4:	680b      	ldr	r3, [r1, #0]
 80074c6:	429d      	cmp	r5, r3
 80074c8:	d004      	beq.n	80074d4 <__mcmp+0x30>
 80074ca:	2001      	movs	r0, #1
 80074cc:	429d      	cmp	r5, r3
 80074ce:	d200      	bcs.n	80074d2 <__mcmp+0x2e>
 80074d0:	3802      	subs	r0, #2
 80074d2:	bd30      	pop	{r4, r5, pc}
 80074d4:	4294      	cmp	r4, r2
 80074d6:	d3f2      	bcc.n	80074be <__mcmp+0x1a>
 80074d8:	e7fb      	b.n	80074d2 <__mcmp+0x2e>
	...

080074dc <__mdiff>:
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	000c      	movs	r4, r1
 80074e0:	b087      	sub	sp, #28
 80074e2:	9000      	str	r0, [sp, #0]
 80074e4:	0011      	movs	r1, r2
 80074e6:	0020      	movs	r0, r4
 80074e8:	0017      	movs	r7, r2
 80074ea:	f7ff ffdb 	bl	80074a4 <__mcmp>
 80074ee:	1e05      	subs	r5, r0, #0
 80074f0:	d110      	bne.n	8007514 <__mdiff+0x38>
 80074f2:	0001      	movs	r1, r0
 80074f4:	9800      	ldr	r0, [sp, #0]
 80074f6:	f7ff fd47 	bl	8006f88 <_Balloc>
 80074fa:	1e02      	subs	r2, r0, #0
 80074fc:	d104      	bne.n	8007508 <__mdiff+0x2c>
 80074fe:	4b40      	ldr	r3, [pc, #256]	@ (8007600 <__mdiff+0x124>)
 8007500:	4840      	ldr	r0, [pc, #256]	@ (8007604 <__mdiff+0x128>)
 8007502:	4941      	ldr	r1, [pc, #260]	@ (8007608 <__mdiff+0x12c>)
 8007504:	f000 fb22 	bl	8007b4c <__assert_func>
 8007508:	2301      	movs	r3, #1
 800750a:	6145      	str	r5, [r0, #20]
 800750c:	6103      	str	r3, [r0, #16]
 800750e:	0010      	movs	r0, r2
 8007510:	b007      	add	sp, #28
 8007512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007514:	2600      	movs	r6, #0
 8007516:	42b0      	cmp	r0, r6
 8007518:	da03      	bge.n	8007522 <__mdiff+0x46>
 800751a:	0023      	movs	r3, r4
 800751c:	003c      	movs	r4, r7
 800751e:	001f      	movs	r7, r3
 8007520:	3601      	adds	r6, #1
 8007522:	6861      	ldr	r1, [r4, #4]
 8007524:	9800      	ldr	r0, [sp, #0]
 8007526:	f7ff fd2f 	bl	8006f88 <_Balloc>
 800752a:	1e02      	subs	r2, r0, #0
 800752c:	d103      	bne.n	8007536 <__mdiff+0x5a>
 800752e:	4b34      	ldr	r3, [pc, #208]	@ (8007600 <__mdiff+0x124>)
 8007530:	4834      	ldr	r0, [pc, #208]	@ (8007604 <__mdiff+0x128>)
 8007532:	4936      	ldr	r1, [pc, #216]	@ (800760c <__mdiff+0x130>)
 8007534:	e7e6      	b.n	8007504 <__mdiff+0x28>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	3414      	adds	r4, #20
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	18e3      	adds	r3, r4, r3
 8007540:	0021      	movs	r1, r4
 8007542:	9401      	str	r4, [sp, #4]
 8007544:	003c      	movs	r4, r7
 8007546:	9302      	str	r3, [sp, #8]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3414      	adds	r4, #20
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	18e3      	adds	r3, r4, r3
 8007550:	9303      	str	r3, [sp, #12]
 8007552:	0003      	movs	r3, r0
 8007554:	60c6      	str	r6, [r0, #12]
 8007556:	468c      	mov	ip, r1
 8007558:	2000      	movs	r0, #0
 800755a:	3314      	adds	r3, #20
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	4663      	mov	r3, ip
 8007562:	cb20      	ldmia	r3!, {r5}
 8007564:	b2a9      	uxth	r1, r5
 8007566:	000e      	movs	r6, r1
 8007568:	469c      	mov	ip, r3
 800756a:	cc08      	ldmia	r4!, {r3}
 800756c:	0c2d      	lsrs	r5, r5, #16
 800756e:	b299      	uxth	r1, r3
 8007570:	1a71      	subs	r1, r6, r1
 8007572:	1809      	adds	r1, r1, r0
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	1408      	asrs	r0, r1, #16
 8007578:	1aeb      	subs	r3, r5, r3
 800757a:	181b      	adds	r3, r3, r0
 800757c:	1418      	asrs	r0, r3, #16
 800757e:	b289      	uxth	r1, r1
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	4319      	orrs	r1, r3
 8007584:	9b05      	ldr	r3, [sp, #20]
 8007586:	c302      	stmia	r3!, {r1}
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	9b03      	ldr	r3, [sp, #12]
 800758c:	42a3      	cmp	r3, r4
 800758e:	d8e7      	bhi.n	8007560 <__mdiff+0x84>
 8007590:	0039      	movs	r1, r7
 8007592:	9c03      	ldr	r4, [sp, #12]
 8007594:	3115      	adds	r1, #21
 8007596:	2304      	movs	r3, #4
 8007598:	428c      	cmp	r4, r1
 800759a:	d304      	bcc.n	80075a6 <__mdiff+0xca>
 800759c:	1be3      	subs	r3, r4, r7
 800759e:	3b15      	subs	r3, #21
 80075a0:	089b      	lsrs	r3, r3, #2
 80075a2:	3301      	adds	r3, #1
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	9901      	ldr	r1, [sp, #4]
 80075a8:	18cd      	adds	r5, r1, r3
 80075aa:	9904      	ldr	r1, [sp, #16]
 80075ac:	002e      	movs	r6, r5
 80075ae:	18cb      	adds	r3, r1, r3
 80075b0:	001f      	movs	r7, r3
 80075b2:	9902      	ldr	r1, [sp, #8]
 80075b4:	428e      	cmp	r6, r1
 80075b6:	d311      	bcc.n	80075dc <__mdiff+0x100>
 80075b8:	9c02      	ldr	r4, [sp, #8]
 80075ba:	1ee9      	subs	r1, r5, #3
 80075bc:	2000      	movs	r0, #0
 80075be:	428c      	cmp	r4, r1
 80075c0:	d304      	bcc.n	80075cc <__mdiff+0xf0>
 80075c2:	0021      	movs	r1, r4
 80075c4:	3103      	adds	r1, #3
 80075c6:	1b49      	subs	r1, r1, r5
 80075c8:	0889      	lsrs	r1, r1, #2
 80075ca:	0088      	lsls	r0, r1, #2
 80075cc:	181b      	adds	r3, r3, r0
 80075ce:	3b04      	subs	r3, #4
 80075d0:	6819      	ldr	r1, [r3, #0]
 80075d2:	2900      	cmp	r1, #0
 80075d4:	d010      	beq.n	80075f8 <__mdiff+0x11c>
 80075d6:	9b00      	ldr	r3, [sp, #0]
 80075d8:	6113      	str	r3, [r2, #16]
 80075da:	e798      	b.n	800750e <__mdiff+0x32>
 80075dc:	4684      	mov	ip, r0
 80075de:	ce02      	ldmia	r6!, {r1}
 80075e0:	b288      	uxth	r0, r1
 80075e2:	4460      	add	r0, ip
 80075e4:	1400      	asrs	r0, r0, #16
 80075e6:	0c0c      	lsrs	r4, r1, #16
 80075e8:	1904      	adds	r4, r0, r4
 80075ea:	4461      	add	r1, ip
 80075ec:	1420      	asrs	r0, r4, #16
 80075ee:	b289      	uxth	r1, r1
 80075f0:	0424      	lsls	r4, r4, #16
 80075f2:	4321      	orrs	r1, r4
 80075f4:	c702      	stmia	r7!, {r1}
 80075f6:	e7dc      	b.n	80075b2 <__mdiff+0xd6>
 80075f8:	9900      	ldr	r1, [sp, #0]
 80075fa:	3901      	subs	r1, #1
 80075fc:	9100      	str	r1, [sp, #0]
 80075fe:	e7e6      	b.n	80075ce <__mdiff+0xf2>
 8007600:	08008394 	.word	0x08008394
 8007604:	080083a5 	.word	0x080083a5
 8007608:	00000237 	.word	0x00000237
 800760c:	00000245 	.word	0x00000245

08007610 <__d2b>:
 8007610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007612:	2101      	movs	r1, #1
 8007614:	0016      	movs	r6, r2
 8007616:	001f      	movs	r7, r3
 8007618:	f7ff fcb6 	bl	8006f88 <_Balloc>
 800761c:	1e04      	subs	r4, r0, #0
 800761e:	d105      	bne.n	800762c <__d2b+0x1c>
 8007620:	0022      	movs	r2, r4
 8007622:	4b25      	ldr	r3, [pc, #148]	@ (80076b8 <__d2b+0xa8>)
 8007624:	4825      	ldr	r0, [pc, #148]	@ (80076bc <__d2b+0xac>)
 8007626:	4926      	ldr	r1, [pc, #152]	@ (80076c0 <__d2b+0xb0>)
 8007628:	f000 fa90 	bl	8007b4c <__assert_func>
 800762c:	033b      	lsls	r3, r7, #12
 800762e:	007d      	lsls	r5, r7, #1
 8007630:	0b1b      	lsrs	r3, r3, #12
 8007632:	0d6d      	lsrs	r5, r5, #21
 8007634:	d002      	beq.n	800763c <__d2b+0x2c>
 8007636:	2280      	movs	r2, #128	@ 0x80
 8007638:	0352      	lsls	r2, r2, #13
 800763a:	4313      	orrs	r3, r2
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2e00      	cmp	r6, #0
 8007640:	d025      	beq.n	800768e <__d2b+0x7e>
 8007642:	4668      	mov	r0, sp
 8007644:	9600      	str	r6, [sp, #0]
 8007646:	f7ff fd6c 	bl	8007122 <__lo0bits>
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	9900      	ldr	r1, [sp, #0]
 800764e:	2800      	cmp	r0, #0
 8007650:	d01b      	beq.n	800768a <__d2b+0x7a>
 8007652:	2220      	movs	r2, #32
 8007654:	001e      	movs	r6, r3
 8007656:	1a12      	subs	r2, r2, r0
 8007658:	4096      	lsls	r6, r2
 800765a:	0032      	movs	r2, r6
 800765c:	40c3      	lsrs	r3, r0
 800765e:	430a      	orrs	r2, r1
 8007660:	6162      	str	r2, [r4, #20]
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	9e01      	ldr	r6, [sp, #4]
 8007666:	61a6      	str	r6, [r4, #24]
 8007668:	1e73      	subs	r3, r6, #1
 800766a:	419e      	sbcs	r6, r3
 800766c:	3601      	adds	r6, #1
 800766e:	6126      	str	r6, [r4, #16]
 8007670:	2d00      	cmp	r5, #0
 8007672:	d014      	beq.n	800769e <__d2b+0x8e>
 8007674:	2635      	movs	r6, #53	@ 0x35
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <__d2b+0xb4>)
 8007678:	18ed      	adds	r5, r5, r3
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	182d      	adds	r5, r5, r0
 800767e:	601d      	str	r5, [r3, #0]
 8007680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007682:	1a36      	subs	r6, r6, r0
 8007684:	601e      	str	r6, [r3, #0]
 8007686:	0020      	movs	r0, r4
 8007688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800768a:	6161      	str	r1, [r4, #20]
 800768c:	e7ea      	b.n	8007664 <__d2b+0x54>
 800768e:	a801      	add	r0, sp, #4
 8007690:	f7ff fd47 	bl	8007122 <__lo0bits>
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	2601      	movs	r6, #1
 8007698:	6163      	str	r3, [r4, #20]
 800769a:	3020      	adds	r0, #32
 800769c:	e7e7      	b.n	800766e <__d2b+0x5e>
 800769e:	4b0a      	ldr	r3, [pc, #40]	@ (80076c8 <__d2b+0xb8>)
 80076a0:	18c0      	adds	r0, r0, r3
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	6018      	str	r0, [r3, #0]
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <__d2b+0xbc>)
 80076a8:	18f3      	adds	r3, r6, r3
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	18e3      	adds	r3, r4, r3
 80076ae:	6958      	ldr	r0, [r3, #20]
 80076b0:	f7ff fd16 	bl	80070e0 <__hi0bits>
 80076b4:	0176      	lsls	r6, r6, #5
 80076b6:	e7e3      	b.n	8007680 <__d2b+0x70>
 80076b8:	08008394 	.word	0x08008394
 80076bc:	080083a5 	.word	0x080083a5
 80076c0:	0000030f 	.word	0x0000030f
 80076c4:	fffffbcd 	.word	0xfffffbcd
 80076c8:	fffffbce 	.word	0xfffffbce
 80076cc:	3fffffff 	.word	0x3fffffff

080076d0 <__ssputs_r>:
 80076d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076d2:	688e      	ldr	r6, [r1, #8]
 80076d4:	b085      	sub	sp, #20
 80076d6:	001f      	movs	r7, r3
 80076d8:	000c      	movs	r4, r1
 80076da:	680b      	ldr	r3, [r1, #0]
 80076dc:	9002      	str	r0, [sp, #8]
 80076de:	9203      	str	r2, [sp, #12]
 80076e0:	42be      	cmp	r6, r7
 80076e2:	d830      	bhi.n	8007746 <__ssputs_r+0x76>
 80076e4:	210c      	movs	r1, #12
 80076e6:	5e62      	ldrsh	r2, [r4, r1]
 80076e8:	2190      	movs	r1, #144	@ 0x90
 80076ea:	00c9      	lsls	r1, r1, #3
 80076ec:	420a      	tst	r2, r1
 80076ee:	d028      	beq.n	8007742 <__ssputs_r+0x72>
 80076f0:	2003      	movs	r0, #3
 80076f2:	6921      	ldr	r1, [r4, #16]
 80076f4:	1a5b      	subs	r3, r3, r1
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6963      	ldr	r3, [r4, #20]
 80076fa:	4343      	muls	r3, r0
 80076fc:	9801      	ldr	r0, [sp, #4]
 80076fe:	0fdd      	lsrs	r5, r3, #31
 8007700:	18ed      	adds	r5, r5, r3
 8007702:	1c7b      	adds	r3, r7, #1
 8007704:	181b      	adds	r3, r3, r0
 8007706:	106d      	asrs	r5, r5, #1
 8007708:	42ab      	cmp	r3, r5
 800770a:	d900      	bls.n	800770e <__ssputs_r+0x3e>
 800770c:	001d      	movs	r5, r3
 800770e:	0552      	lsls	r2, r2, #21
 8007710:	d528      	bpl.n	8007764 <__ssputs_r+0x94>
 8007712:	0029      	movs	r1, r5
 8007714:	9802      	ldr	r0, [sp, #8]
 8007716:	f7ff fba7 	bl	8006e68 <_malloc_r>
 800771a:	1e06      	subs	r6, r0, #0
 800771c:	d02c      	beq.n	8007778 <__ssputs_r+0xa8>
 800771e:	9a01      	ldr	r2, [sp, #4]
 8007720:	6921      	ldr	r1, [r4, #16]
 8007722:	f000 fa09 	bl	8007b38 <memcpy>
 8007726:	89a2      	ldrh	r2, [r4, #12]
 8007728:	4b18      	ldr	r3, [pc, #96]	@ (800778c <__ssputs_r+0xbc>)
 800772a:	401a      	ands	r2, r3
 800772c:	2380      	movs	r3, #128	@ 0x80
 800772e:	4313      	orrs	r3, r2
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	9b01      	ldr	r3, [sp, #4]
 8007734:	6126      	str	r6, [r4, #16]
 8007736:	18f6      	adds	r6, r6, r3
 8007738:	6026      	str	r6, [r4, #0]
 800773a:	003e      	movs	r6, r7
 800773c:	6165      	str	r5, [r4, #20]
 800773e:	1aed      	subs	r5, r5, r3
 8007740:	60a5      	str	r5, [r4, #8]
 8007742:	42be      	cmp	r6, r7
 8007744:	d900      	bls.n	8007748 <__ssputs_r+0x78>
 8007746:	003e      	movs	r6, r7
 8007748:	0032      	movs	r2, r6
 800774a:	9903      	ldr	r1, [sp, #12]
 800774c:	6820      	ldr	r0, [r4, #0]
 800774e:	f000 f9ce 	bl	8007aee <memmove>
 8007752:	2000      	movs	r0, #0
 8007754:	68a3      	ldr	r3, [r4, #8]
 8007756:	1b9b      	subs	r3, r3, r6
 8007758:	60a3      	str	r3, [r4, #8]
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	199b      	adds	r3, r3, r6
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	b005      	add	sp, #20
 8007762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007764:	002a      	movs	r2, r5
 8007766:	9802      	ldr	r0, [sp, #8]
 8007768:	f000 fa4d 	bl	8007c06 <_realloc_r>
 800776c:	1e06      	subs	r6, r0, #0
 800776e:	d1e0      	bne.n	8007732 <__ssputs_r+0x62>
 8007770:	6921      	ldr	r1, [r4, #16]
 8007772:	9802      	ldr	r0, [sp, #8]
 8007774:	f7ff fb02 	bl	8006d7c <_free_r>
 8007778:	230c      	movs	r3, #12
 800777a:	2001      	movs	r0, #1
 800777c:	9a02      	ldr	r2, [sp, #8]
 800777e:	4240      	negs	r0, r0
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	89a2      	ldrh	r2, [r4, #12]
 8007784:	3334      	adds	r3, #52	@ 0x34
 8007786:	4313      	orrs	r3, r2
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	e7e9      	b.n	8007760 <__ssputs_r+0x90>
 800778c:	fffffb7f 	.word	0xfffffb7f

08007790 <_svfiprintf_r>:
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007792:	b0a1      	sub	sp, #132	@ 0x84
 8007794:	9003      	str	r0, [sp, #12]
 8007796:	001d      	movs	r5, r3
 8007798:	898b      	ldrh	r3, [r1, #12]
 800779a:	000f      	movs	r7, r1
 800779c:	0016      	movs	r6, r2
 800779e:	061b      	lsls	r3, r3, #24
 80077a0:	d511      	bpl.n	80077c6 <_svfiprintf_r+0x36>
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10e      	bne.n	80077c6 <_svfiprintf_r+0x36>
 80077a8:	2140      	movs	r1, #64	@ 0x40
 80077aa:	f7ff fb5d 	bl	8006e68 <_malloc_r>
 80077ae:	6038      	str	r0, [r7, #0]
 80077b0:	6138      	str	r0, [r7, #16]
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d105      	bne.n	80077c2 <_svfiprintf_r+0x32>
 80077b6:	230c      	movs	r3, #12
 80077b8:	9a03      	ldr	r2, [sp, #12]
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	2001      	movs	r0, #1
 80077be:	4240      	negs	r0, r0
 80077c0:	e0cf      	b.n	8007962 <_svfiprintf_r+0x1d2>
 80077c2:	2340      	movs	r3, #64	@ 0x40
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	2300      	movs	r3, #0
 80077c8:	ac08      	add	r4, sp, #32
 80077ca:	6163      	str	r3, [r4, #20]
 80077cc:	3320      	adds	r3, #32
 80077ce:	7663      	strb	r3, [r4, #25]
 80077d0:	3310      	adds	r3, #16
 80077d2:	76a3      	strb	r3, [r4, #26]
 80077d4:	9507      	str	r5, [sp, #28]
 80077d6:	0035      	movs	r5, r6
 80077d8:	782b      	ldrb	r3, [r5, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <_svfiprintf_r+0x52>
 80077de:	2b25      	cmp	r3, #37	@ 0x25
 80077e0:	d148      	bne.n	8007874 <_svfiprintf_r+0xe4>
 80077e2:	1bab      	subs	r3, r5, r6
 80077e4:	9305      	str	r3, [sp, #20]
 80077e6:	42b5      	cmp	r5, r6
 80077e8:	d00b      	beq.n	8007802 <_svfiprintf_r+0x72>
 80077ea:	0032      	movs	r2, r6
 80077ec:	0039      	movs	r1, r7
 80077ee:	9803      	ldr	r0, [sp, #12]
 80077f0:	f7ff ff6e 	bl	80076d0 <__ssputs_r>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d100      	bne.n	80077fa <_svfiprintf_r+0x6a>
 80077f8:	e0ae      	b.n	8007958 <_svfiprintf_r+0x1c8>
 80077fa:	6963      	ldr	r3, [r4, #20]
 80077fc:	9a05      	ldr	r2, [sp, #20]
 80077fe:	189b      	adds	r3, r3, r2
 8007800:	6163      	str	r3, [r4, #20]
 8007802:	782b      	ldrb	r3, [r5, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d100      	bne.n	800780a <_svfiprintf_r+0x7a>
 8007808:	e0a6      	b.n	8007958 <_svfiprintf_r+0x1c8>
 800780a:	2201      	movs	r2, #1
 800780c:	2300      	movs	r3, #0
 800780e:	4252      	negs	r2, r2
 8007810:	6062      	str	r2, [r4, #4]
 8007812:	a904      	add	r1, sp, #16
 8007814:	3254      	adds	r2, #84	@ 0x54
 8007816:	1852      	adds	r2, r2, r1
 8007818:	1c6e      	adds	r6, r5, #1
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	60e3      	str	r3, [r4, #12]
 800781e:	60a3      	str	r3, [r4, #8]
 8007820:	7013      	strb	r3, [r2, #0]
 8007822:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007824:	4b54      	ldr	r3, [pc, #336]	@ (8007978 <_svfiprintf_r+0x1e8>)
 8007826:	2205      	movs	r2, #5
 8007828:	0018      	movs	r0, r3
 800782a:	7831      	ldrb	r1, [r6, #0]
 800782c:	9305      	str	r3, [sp, #20]
 800782e:	f7fe fc18 	bl	8006062 <memchr>
 8007832:	1c75      	adds	r5, r6, #1
 8007834:	2800      	cmp	r0, #0
 8007836:	d11f      	bne.n	8007878 <_svfiprintf_r+0xe8>
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	06d3      	lsls	r3, r2, #27
 800783c:	d504      	bpl.n	8007848 <_svfiprintf_r+0xb8>
 800783e:	2353      	movs	r3, #83	@ 0x53
 8007840:	a904      	add	r1, sp, #16
 8007842:	185b      	adds	r3, r3, r1
 8007844:	2120      	movs	r1, #32
 8007846:	7019      	strb	r1, [r3, #0]
 8007848:	0713      	lsls	r3, r2, #28
 800784a:	d504      	bpl.n	8007856 <_svfiprintf_r+0xc6>
 800784c:	2353      	movs	r3, #83	@ 0x53
 800784e:	a904      	add	r1, sp, #16
 8007850:	185b      	adds	r3, r3, r1
 8007852:	212b      	movs	r1, #43	@ 0x2b
 8007854:	7019      	strb	r1, [r3, #0]
 8007856:	7833      	ldrb	r3, [r6, #0]
 8007858:	2b2a      	cmp	r3, #42	@ 0x2a
 800785a:	d016      	beq.n	800788a <_svfiprintf_r+0xfa>
 800785c:	0035      	movs	r5, r6
 800785e:	2100      	movs	r1, #0
 8007860:	200a      	movs	r0, #10
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	782a      	ldrb	r2, [r5, #0]
 8007866:	1c6e      	adds	r6, r5, #1
 8007868:	3a30      	subs	r2, #48	@ 0x30
 800786a:	2a09      	cmp	r2, #9
 800786c:	d950      	bls.n	8007910 <_svfiprintf_r+0x180>
 800786e:	2900      	cmp	r1, #0
 8007870:	d111      	bne.n	8007896 <_svfiprintf_r+0x106>
 8007872:	e017      	b.n	80078a4 <_svfiprintf_r+0x114>
 8007874:	3501      	adds	r5, #1
 8007876:	e7af      	b.n	80077d8 <_svfiprintf_r+0x48>
 8007878:	9b05      	ldr	r3, [sp, #20]
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	1ac0      	subs	r0, r0, r3
 800787e:	2301      	movs	r3, #1
 8007880:	4083      	lsls	r3, r0
 8007882:	4313      	orrs	r3, r2
 8007884:	002e      	movs	r6, r5
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	e7cc      	b.n	8007824 <_svfiprintf_r+0x94>
 800788a:	9b07      	ldr	r3, [sp, #28]
 800788c:	1d19      	adds	r1, r3, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	9107      	str	r1, [sp, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	db01      	blt.n	800789a <_svfiprintf_r+0x10a>
 8007896:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007898:	e004      	b.n	80078a4 <_svfiprintf_r+0x114>
 800789a:	425b      	negs	r3, r3
 800789c:	60e3      	str	r3, [r4, #12]
 800789e:	2302      	movs	r3, #2
 80078a0:	4313      	orrs	r3, r2
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	782b      	ldrb	r3, [r5, #0]
 80078a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80078a8:	d10c      	bne.n	80078c4 <_svfiprintf_r+0x134>
 80078aa:	786b      	ldrb	r3, [r5, #1]
 80078ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ae:	d134      	bne.n	800791a <_svfiprintf_r+0x18a>
 80078b0:	9b07      	ldr	r3, [sp, #28]
 80078b2:	3502      	adds	r5, #2
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	9207      	str	r2, [sp, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da01      	bge.n	80078c2 <_svfiprintf_r+0x132>
 80078be:	2301      	movs	r3, #1
 80078c0:	425b      	negs	r3, r3
 80078c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c4:	4e2d      	ldr	r6, [pc, #180]	@ (800797c <_svfiprintf_r+0x1ec>)
 80078c6:	2203      	movs	r2, #3
 80078c8:	0030      	movs	r0, r6
 80078ca:	7829      	ldrb	r1, [r5, #0]
 80078cc:	f7fe fbc9 	bl	8006062 <memchr>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d006      	beq.n	80078e2 <_svfiprintf_r+0x152>
 80078d4:	2340      	movs	r3, #64	@ 0x40
 80078d6:	1b80      	subs	r0, r0, r6
 80078d8:	4083      	lsls	r3, r0
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	3501      	adds	r5, #1
 80078de:	4313      	orrs	r3, r2
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	7829      	ldrb	r1, [r5, #0]
 80078e4:	2206      	movs	r2, #6
 80078e6:	4826      	ldr	r0, [pc, #152]	@ (8007980 <_svfiprintf_r+0x1f0>)
 80078e8:	1c6e      	adds	r6, r5, #1
 80078ea:	7621      	strb	r1, [r4, #24]
 80078ec:	f7fe fbb9 	bl	8006062 <memchr>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d038      	beq.n	8007966 <_svfiprintf_r+0x1d6>
 80078f4:	4b23      	ldr	r3, [pc, #140]	@ (8007984 <_svfiprintf_r+0x1f4>)
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d122      	bne.n	8007940 <_svfiprintf_r+0x1b0>
 80078fa:	2207      	movs	r2, #7
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	3307      	adds	r3, #7
 8007900:	4393      	bics	r3, r2
 8007902:	3308      	adds	r3, #8
 8007904:	9307      	str	r3, [sp, #28]
 8007906:	6963      	ldr	r3, [r4, #20]
 8007908:	9a04      	ldr	r2, [sp, #16]
 800790a:	189b      	adds	r3, r3, r2
 800790c:	6163      	str	r3, [r4, #20]
 800790e:	e762      	b.n	80077d6 <_svfiprintf_r+0x46>
 8007910:	4343      	muls	r3, r0
 8007912:	0035      	movs	r5, r6
 8007914:	2101      	movs	r1, #1
 8007916:	189b      	adds	r3, r3, r2
 8007918:	e7a4      	b.n	8007864 <_svfiprintf_r+0xd4>
 800791a:	2300      	movs	r3, #0
 800791c:	200a      	movs	r0, #10
 800791e:	0019      	movs	r1, r3
 8007920:	3501      	adds	r5, #1
 8007922:	6063      	str	r3, [r4, #4]
 8007924:	782a      	ldrb	r2, [r5, #0]
 8007926:	1c6e      	adds	r6, r5, #1
 8007928:	3a30      	subs	r2, #48	@ 0x30
 800792a:	2a09      	cmp	r2, #9
 800792c:	d903      	bls.n	8007936 <_svfiprintf_r+0x1a6>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0c8      	beq.n	80078c4 <_svfiprintf_r+0x134>
 8007932:	9109      	str	r1, [sp, #36]	@ 0x24
 8007934:	e7c6      	b.n	80078c4 <_svfiprintf_r+0x134>
 8007936:	4341      	muls	r1, r0
 8007938:	0035      	movs	r5, r6
 800793a:	2301      	movs	r3, #1
 800793c:	1889      	adds	r1, r1, r2
 800793e:	e7f1      	b.n	8007924 <_svfiprintf_r+0x194>
 8007940:	aa07      	add	r2, sp, #28
 8007942:	9200      	str	r2, [sp, #0]
 8007944:	0021      	movs	r1, r4
 8007946:	003a      	movs	r2, r7
 8007948:	4b0f      	ldr	r3, [pc, #60]	@ (8007988 <_svfiprintf_r+0x1f8>)
 800794a:	9803      	ldr	r0, [sp, #12]
 800794c:	f7fd fe16 	bl	800557c <_printf_float>
 8007950:	9004      	str	r0, [sp, #16]
 8007952:	9b04      	ldr	r3, [sp, #16]
 8007954:	3301      	adds	r3, #1
 8007956:	d1d6      	bne.n	8007906 <_svfiprintf_r+0x176>
 8007958:	89bb      	ldrh	r3, [r7, #12]
 800795a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800795c:	065b      	lsls	r3, r3, #25
 800795e:	d500      	bpl.n	8007962 <_svfiprintf_r+0x1d2>
 8007960:	e72c      	b.n	80077bc <_svfiprintf_r+0x2c>
 8007962:	b021      	add	sp, #132	@ 0x84
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007966:	aa07      	add	r2, sp, #28
 8007968:	9200      	str	r2, [sp, #0]
 800796a:	0021      	movs	r1, r4
 800796c:	003a      	movs	r2, r7
 800796e:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <_svfiprintf_r+0x1f8>)
 8007970:	9803      	ldr	r0, [sp, #12]
 8007972:	f7fe f8b1 	bl	8005ad8 <_printf_i>
 8007976:	e7eb      	b.n	8007950 <_svfiprintf_r+0x1c0>
 8007978:	08008500 	.word	0x08008500
 800797c:	08008506 	.word	0x08008506
 8007980:	0800850a 	.word	0x0800850a
 8007984:	0800557d 	.word	0x0800557d
 8007988:	080076d1 	.word	0x080076d1

0800798c <__sflush_r>:
 800798c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800798e:	220c      	movs	r2, #12
 8007990:	5e8b      	ldrsh	r3, [r1, r2]
 8007992:	0005      	movs	r5, r0
 8007994:	000c      	movs	r4, r1
 8007996:	071a      	lsls	r2, r3, #28
 8007998:	d456      	bmi.n	8007a48 <__sflush_r+0xbc>
 800799a:	684a      	ldr	r2, [r1, #4]
 800799c:	2a00      	cmp	r2, #0
 800799e:	dc02      	bgt.n	80079a6 <__sflush_r+0x1a>
 80079a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	dd4e      	ble.n	8007a44 <__sflush_r+0xb8>
 80079a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80079a8:	2f00      	cmp	r7, #0
 80079aa:	d04b      	beq.n	8007a44 <__sflush_r+0xb8>
 80079ac:	2200      	movs	r2, #0
 80079ae:	2080      	movs	r0, #128	@ 0x80
 80079b0:	682e      	ldr	r6, [r5, #0]
 80079b2:	602a      	str	r2, [r5, #0]
 80079b4:	001a      	movs	r2, r3
 80079b6:	0140      	lsls	r0, r0, #5
 80079b8:	6a21      	ldr	r1, [r4, #32]
 80079ba:	4002      	ands	r2, r0
 80079bc:	4203      	tst	r3, r0
 80079be:	d033      	beq.n	8007a28 <__sflush_r+0x9c>
 80079c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	075b      	lsls	r3, r3, #29
 80079c6:	d506      	bpl.n	80079d6 <__sflush_r+0x4a>
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <__sflush_r+0x4a>
 80079d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	2300      	movs	r3, #0
 80079d8:	0028      	movs	r0, r5
 80079da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	47b8      	blx	r7
 80079e0:	89a2      	ldrh	r2, [r4, #12]
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d106      	bne.n	80079f4 <__sflush_r+0x68>
 80079e6:	6829      	ldr	r1, [r5, #0]
 80079e8:	291d      	cmp	r1, #29
 80079ea:	d846      	bhi.n	8007a7a <__sflush_r+0xee>
 80079ec:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <__sflush_r+0x108>)
 80079ee:	410b      	asrs	r3, r1
 80079f0:	07db      	lsls	r3, r3, #31
 80079f2:	d442      	bmi.n	8007a7a <__sflush_r+0xee>
 80079f4:	2300      	movs	r3, #0
 80079f6:	6063      	str	r3, [r4, #4]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	04d2      	lsls	r2, r2, #19
 80079fe:	d505      	bpl.n	8007a0c <__sflush_r+0x80>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <__sflush_r+0x7e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d100      	bne.n	8007a0c <__sflush_r+0x80>
 8007a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a0e:	602e      	str	r6, [r5, #0]
 8007a10:	2900      	cmp	r1, #0
 8007a12:	d017      	beq.n	8007a44 <__sflush_r+0xb8>
 8007a14:	0023      	movs	r3, r4
 8007a16:	3344      	adds	r3, #68	@ 0x44
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	d002      	beq.n	8007a22 <__sflush_r+0x96>
 8007a1c:	0028      	movs	r0, r5
 8007a1e:	f7ff f9ad 	bl	8006d7c <_free_r>
 8007a22:	2300      	movs	r3, #0
 8007a24:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a26:	e00d      	b.n	8007a44 <__sflush_r+0xb8>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	0028      	movs	r0, r5
 8007a2c:	47b8      	blx	r7
 8007a2e:	0002      	movs	r2, r0
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d1c6      	bne.n	80079c2 <__sflush_r+0x36>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0c3      	beq.n	80079c2 <__sflush_r+0x36>
 8007a3a:	2b1d      	cmp	r3, #29
 8007a3c:	d001      	beq.n	8007a42 <__sflush_r+0xb6>
 8007a3e:	2b16      	cmp	r3, #22
 8007a40:	d11a      	bne.n	8007a78 <__sflush_r+0xec>
 8007a42:	602e      	str	r6, [r5, #0]
 8007a44:	2000      	movs	r0, #0
 8007a46:	e01e      	b.n	8007a86 <__sflush_r+0xfa>
 8007a48:	690e      	ldr	r6, [r1, #16]
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	d0fa      	beq.n	8007a44 <__sflush_r+0xb8>
 8007a4e:	680f      	ldr	r7, [r1, #0]
 8007a50:	600e      	str	r6, [r1, #0]
 8007a52:	1bba      	subs	r2, r7, r6
 8007a54:	9201      	str	r2, [sp, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	079b      	lsls	r3, r3, #30
 8007a5a:	d100      	bne.n	8007a5e <__sflush_r+0xd2>
 8007a5c:	694a      	ldr	r2, [r1, #20]
 8007a5e:	60a2      	str	r2, [r4, #8]
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	ddee      	ble.n	8007a44 <__sflush_r+0xb8>
 8007a66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007a68:	0032      	movs	r2, r6
 8007a6a:	001f      	movs	r7, r3
 8007a6c:	0028      	movs	r0, r5
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	47b8      	blx	r7
 8007a74:	2800      	cmp	r0, #0
 8007a76:	dc07      	bgt.n	8007a88 <__sflush_r+0xfc>
 8007a78:	89a2      	ldrh	r2, [r4, #12]
 8007a7a:	2340      	movs	r3, #64	@ 0x40
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	b21b      	sxth	r3, r3
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	4240      	negs	r0, r0
 8007a86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	1836      	adds	r6, r6, r0
 8007a8c:	1a1b      	subs	r3, r3, r0
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	e7e6      	b.n	8007a60 <__sflush_r+0xd4>
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	dfbffffe 	.word	0xdfbffffe

08007a98 <_fflush_r>:
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	b570      	push	{r4, r5, r6, lr}
 8007a9c:	0005      	movs	r5, r0
 8007a9e:	000c      	movs	r4, r1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <_fflush_r+0x12>
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	0028      	movs	r0, r5
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d004      	beq.n	8007ab8 <_fflush_r+0x20>
 8007aae:	6a03      	ldr	r3, [r0, #32]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <_fflush_r+0x20>
 8007ab4:	f7fe f9ae 	bl	8005e14 <__sinit>
 8007ab8:	220c      	movs	r2, #12
 8007aba:	5ea3      	ldrsh	r3, [r4, r2]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f1      	beq.n	8007aa4 <_fflush_r+0xc>
 8007ac0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ac2:	07d2      	lsls	r2, r2, #31
 8007ac4:	d404      	bmi.n	8007ad0 <_fflush_r+0x38>
 8007ac6:	059b      	lsls	r3, r3, #22
 8007ac8:	d402      	bmi.n	8007ad0 <_fflush_r+0x38>
 8007aca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007acc:	f7fe fac7 	bl	800605e <__retarget_lock_acquire_recursive>
 8007ad0:	0028      	movs	r0, r5
 8007ad2:	0021      	movs	r1, r4
 8007ad4:	f7ff ff5a 	bl	800798c <__sflush_r>
 8007ad8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ada:	0005      	movs	r5, r0
 8007adc:	07db      	lsls	r3, r3, #31
 8007ade:	d4e2      	bmi.n	8007aa6 <_fflush_r+0xe>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	059b      	lsls	r3, r3, #22
 8007ae4:	d4df      	bmi.n	8007aa6 <_fflush_r+0xe>
 8007ae6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae8:	f7fe faba 	bl	8006060 <__retarget_lock_release_recursive>
 8007aec:	e7db      	b.n	8007aa6 <_fflush_r+0xe>

08007aee <memmove>:
 8007aee:	b510      	push	{r4, lr}
 8007af0:	4288      	cmp	r0, r1
 8007af2:	d806      	bhi.n	8007b02 <memmove+0x14>
 8007af4:	2300      	movs	r3, #0
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d008      	beq.n	8007b0c <memmove+0x1e>
 8007afa:	5ccc      	ldrb	r4, [r1, r3]
 8007afc:	54c4      	strb	r4, [r0, r3]
 8007afe:	3301      	adds	r3, #1
 8007b00:	e7f9      	b.n	8007af6 <memmove+0x8>
 8007b02:	188b      	adds	r3, r1, r2
 8007b04:	4298      	cmp	r0, r3
 8007b06:	d2f5      	bcs.n	8007af4 <memmove+0x6>
 8007b08:	3a01      	subs	r2, #1
 8007b0a:	d200      	bcs.n	8007b0e <memmove+0x20>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	5c8b      	ldrb	r3, [r1, r2]
 8007b10:	5483      	strb	r3, [r0, r2]
 8007b12:	e7f9      	b.n	8007b08 <memmove+0x1a>

08007b14 <_sbrk_r>:
 8007b14:	2300      	movs	r3, #0
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	4d06      	ldr	r5, [pc, #24]	@ (8007b34 <_sbrk_r+0x20>)
 8007b1a:	0004      	movs	r4, r0
 8007b1c:	0008      	movs	r0, r1
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7fb f8f6 	bl	8002d10 <_sbrk>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d103      	bne.n	8007b30 <_sbrk_r+0x1c>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d000      	beq.n	8007b30 <_sbrk_r+0x1c>
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	46c0      	nop			@ (mov r8, r8)
 8007b34:	20000490 	.word	0x20000490

08007b38 <memcpy>:
 8007b38:	2300      	movs	r3, #0
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d100      	bne.n	8007b42 <memcpy+0xa>
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	5ccc      	ldrb	r4, [r1, r3]
 8007b44:	54c4      	strb	r4, [r0, r3]
 8007b46:	3301      	adds	r3, #1
 8007b48:	e7f8      	b.n	8007b3c <memcpy+0x4>
	...

08007b4c <__assert_func>:
 8007b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007b4e:	0014      	movs	r4, r2
 8007b50:	001a      	movs	r2, r3
 8007b52:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <__assert_func+0x2c>)
 8007b54:	0005      	movs	r5, r0
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	000e      	movs	r6, r1
 8007b5a:	68d8      	ldr	r0, [r3, #12]
 8007b5c:	4b07      	ldr	r3, [pc, #28]	@ (8007b7c <__assert_func+0x30>)
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	d101      	bne.n	8007b66 <__assert_func+0x1a>
 8007b62:	4b07      	ldr	r3, [pc, #28]	@ (8007b80 <__assert_func+0x34>)
 8007b64:	001c      	movs	r4, r3
 8007b66:	4907      	ldr	r1, [pc, #28]	@ (8007b84 <__assert_func+0x38>)
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	9402      	str	r4, [sp, #8]
 8007b6c:	002b      	movs	r3, r5
 8007b6e:	9600      	str	r6, [sp, #0]
 8007b70:	f000 f886 	bl	8007c80 <fiprintf>
 8007b74:	f000 f894 	bl	8007ca0 <abort>
 8007b78:	20000018 	.word	0x20000018
 8007b7c:	0800851b 	.word	0x0800851b
 8007b80:	08008556 	.word	0x08008556
 8007b84:	08008528 	.word	0x08008528

08007b88 <_calloc_r>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	0c0b      	lsrs	r3, r1, #16
 8007b8c:	0c15      	lsrs	r5, r2, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d11e      	bne.n	8007bd0 <_calloc_r+0x48>
 8007b92:	2d00      	cmp	r5, #0
 8007b94:	d10c      	bne.n	8007bb0 <_calloc_r+0x28>
 8007b96:	b289      	uxth	r1, r1
 8007b98:	b294      	uxth	r4, r2
 8007b9a:	434c      	muls	r4, r1
 8007b9c:	0021      	movs	r1, r4
 8007b9e:	f7ff f963 	bl	8006e68 <_malloc_r>
 8007ba2:	1e05      	subs	r5, r0, #0
 8007ba4:	d01a      	beq.n	8007bdc <_calloc_r+0x54>
 8007ba6:	0022      	movs	r2, r4
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f7fe f9d3 	bl	8005f54 <memset>
 8007bae:	e016      	b.n	8007bde <_calloc_r+0x56>
 8007bb0:	1c2b      	adds	r3, r5, #0
 8007bb2:	1c0c      	adds	r4, r1, #0
 8007bb4:	b289      	uxth	r1, r1
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	434a      	muls	r2, r1
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	b2a1      	uxth	r1, r4
 8007bbe:	4359      	muls	r1, r3
 8007bc0:	0c14      	lsrs	r4, r2, #16
 8007bc2:	190c      	adds	r4, r1, r4
 8007bc4:	0c23      	lsrs	r3, r4, #16
 8007bc6:	d107      	bne.n	8007bd8 <_calloc_r+0x50>
 8007bc8:	0424      	lsls	r4, r4, #16
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	4314      	orrs	r4, r2
 8007bce:	e7e5      	b.n	8007b9c <_calloc_r+0x14>
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	d101      	bne.n	8007bd8 <_calloc_r+0x50>
 8007bd4:	1c14      	adds	r4, r2, #0
 8007bd6:	e7ed      	b.n	8007bb4 <_calloc_r+0x2c>
 8007bd8:	230c      	movs	r3, #12
 8007bda:	6003      	str	r3, [r0, #0]
 8007bdc:	2500      	movs	r5, #0
 8007bde:	0028      	movs	r0, r5
 8007be0:	bd70      	pop	{r4, r5, r6, pc}

08007be2 <__ascii_mbtowc>:
 8007be2:	b082      	sub	sp, #8
 8007be4:	2900      	cmp	r1, #0
 8007be6:	d100      	bne.n	8007bea <__ascii_mbtowc+0x8>
 8007be8:	a901      	add	r1, sp, #4
 8007bea:	1e10      	subs	r0, r2, #0
 8007bec:	d006      	beq.n	8007bfc <__ascii_mbtowc+0x1a>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d006      	beq.n	8007c00 <__ascii_mbtowc+0x1e>
 8007bf2:	7813      	ldrb	r3, [r2, #0]
 8007bf4:	600b      	str	r3, [r1, #0]
 8007bf6:	7810      	ldrb	r0, [r2, #0]
 8007bf8:	1e43      	subs	r3, r0, #1
 8007bfa:	4198      	sbcs	r0, r3
 8007bfc:	b002      	add	sp, #8
 8007bfe:	4770      	bx	lr
 8007c00:	2002      	movs	r0, #2
 8007c02:	4240      	negs	r0, r0
 8007c04:	e7fa      	b.n	8007bfc <__ascii_mbtowc+0x1a>

08007c06 <_realloc_r>:
 8007c06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c08:	0006      	movs	r6, r0
 8007c0a:	000c      	movs	r4, r1
 8007c0c:	0015      	movs	r5, r2
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d105      	bne.n	8007c1e <_realloc_r+0x18>
 8007c12:	0011      	movs	r1, r2
 8007c14:	f7ff f928 	bl	8006e68 <_malloc_r>
 8007c18:	0004      	movs	r4, r0
 8007c1a:	0020      	movs	r0, r4
 8007c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d103      	bne.n	8007c2a <_realloc_r+0x24>
 8007c22:	f7ff f8ab 	bl	8006d7c <_free_r>
 8007c26:	2400      	movs	r4, #0
 8007c28:	e7f7      	b.n	8007c1a <_realloc_r+0x14>
 8007c2a:	f000 f840 	bl	8007cae <_malloc_usable_size_r>
 8007c2e:	0007      	movs	r7, r0
 8007c30:	4285      	cmp	r5, r0
 8007c32:	d802      	bhi.n	8007c3a <_realloc_r+0x34>
 8007c34:	0843      	lsrs	r3, r0, #1
 8007c36:	42ab      	cmp	r3, r5
 8007c38:	d3ef      	bcc.n	8007c1a <_realloc_r+0x14>
 8007c3a:	0029      	movs	r1, r5
 8007c3c:	0030      	movs	r0, r6
 8007c3e:	f7ff f913 	bl	8006e68 <_malloc_r>
 8007c42:	9001      	str	r0, [sp, #4]
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d0ee      	beq.n	8007c26 <_realloc_r+0x20>
 8007c48:	002a      	movs	r2, r5
 8007c4a:	42bd      	cmp	r5, r7
 8007c4c:	d900      	bls.n	8007c50 <_realloc_r+0x4a>
 8007c4e:	003a      	movs	r2, r7
 8007c50:	0021      	movs	r1, r4
 8007c52:	9801      	ldr	r0, [sp, #4]
 8007c54:	f7ff ff70 	bl	8007b38 <memcpy>
 8007c58:	0021      	movs	r1, r4
 8007c5a:	0030      	movs	r0, r6
 8007c5c:	f7ff f88e 	bl	8006d7c <_free_r>
 8007c60:	9c01      	ldr	r4, [sp, #4]
 8007c62:	e7da      	b.n	8007c1a <_realloc_r+0x14>

08007c64 <__ascii_wctomb>:
 8007c64:	0003      	movs	r3, r0
 8007c66:	1e08      	subs	r0, r1, #0
 8007c68:	d005      	beq.n	8007c76 <__ascii_wctomb+0x12>
 8007c6a:	2aff      	cmp	r2, #255	@ 0xff
 8007c6c:	d904      	bls.n	8007c78 <__ascii_wctomb+0x14>
 8007c6e:	228a      	movs	r2, #138	@ 0x8a
 8007c70:	2001      	movs	r0, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	4240      	negs	r0, r0
 8007c76:	4770      	bx	lr
 8007c78:	2001      	movs	r0, #1
 8007c7a:	700a      	strb	r2, [r1, #0]
 8007c7c:	e7fb      	b.n	8007c76 <__ascii_wctomb+0x12>
	...

08007c80 <fiprintf>:
 8007c80:	b40e      	push	{r1, r2, r3}
 8007c82:	b517      	push	{r0, r1, r2, r4, lr}
 8007c84:	4c05      	ldr	r4, [pc, #20]	@ (8007c9c <fiprintf+0x1c>)
 8007c86:	ab05      	add	r3, sp, #20
 8007c88:	cb04      	ldmia	r3!, {r2}
 8007c8a:	0001      	movs	r1, r0
 8007c8c:	6820      	ldr	r0, [r4, #0]
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	f000 f83c 	bl	8007d0c <_vfiprintf_r>
 8007c94:	bc1e      	pop	{r1, r2, r3, r4}
 8007c96:	bc08      	pop	{r3}
 8007c98:	b003      	add	sp, #12
 8007c9a:	4718      	bx	r3
 8007c9c:	20000018 	.word	0x20000018

08007ca0 <abort>:
 8007ca0:	2006      	movs	r0, #6
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	f000 fa18 	bl	80080d8 <raise>
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fa ffbf 	bl	8002c2c <_exit>

08007cae <_malloc_usable_size_r>:
 8007cae:	1f0b      	subs	r3, r1, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	1f18      	subs	r0, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da01      	bge.n	8007cbc <_malloc_usable_size_r+0xe>
 8007cb8:	580b      	ldr	r3, [r1, r0]
 8007cba:	18c0      	adds	r0, r0, r3
 8007cbc:	4770      	bx	lr

08007cbe <__sfputc_r>:
 8007cbe:	6893      	ldr	r3, [r2, #8]
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	6093      	str	r3, [r2, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da04      	bge.n	8007cd4 <__sfputc_r+0x16>
 8007cca:	6994      	ldr	r4, [r2, #24]
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	db07      	blt.n	8007ce0 <__sfputc_r+0x22>
 8007cd0:	290a      	cmp	r1, #10
 8007cd2:	d005      	beq.n	8007ce0 <__sfputc_r+0x22>
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	1c58      	adds	r0, r3, #1
 8007cd8:	6010      	str	r0, [r2, #0]
 8007cda:	7019      	strb	r1, [r3, #0]
 8007cdc:	0008      	movs	r0, r1
 8007cde:	bd10      	pop	{r4, pc}
 8007ce0:	f000 f930 	bl	8007f44 <__swbuf_r>
 8007ce4:	0001      	movs	r1, r0
 8007ce6:	e7f9      	b.n	8007cdc <__sfputc_r+0x1e>

08007ce8 <__sfputs_r>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	0006      	movs	r6, r0
 8007cec:	000f      	movs	r7, r1
 8007cee:	0014      	movs	r4, r2
 8007cf0:	18d5      	adds	r5, r2, r3
 8007cf2:	42ac      	cmp	r4, r5
 8007cf4:	d101      	bne.n	8007cfa <__sfputs_r+0x12>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e007      	b.n	8007d0a <__sfputs_r+0x22>
 8007cfa:	7821      	ldrb	r1, [r4, #0]
 8007cfc:	003a      	movs	r2, r7
 8007cfe:	0030      	movs	r0, r6
 8007d00:	f7ff ffdd 	bl	8007cbe <__sfputc_r>
 8007d04:	3401      	adds	r4, #1
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d1f3      	bne.n	8007cf2 <__sfputs_r+0xa>
 8007d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d0c <_vfiprintf_r>:
 8007d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0e:	b0a1      	sub	sp, #132	@ 0x84
 8007d10:	000f      	movs	r7, r1
 8007d12:	0015      	movs	r5, r2
 8007d14:	001e      	movs	r6, r3
 8007d16:	9003      	str	r0, [sp, #12]
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d004      	beq.n	8007d26 <_vfiprintf_r+0x1a>
 8007d1c:	6a03      	ldr	r3, [r0, #32]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <_vfiprintf_r+0x1a>
 8007d22:	f7fe f877 	bl	8005e14 <__sinit>
 8007d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d28:	07db      	lsls	r3, r3, #31
 8007d2a:	d405      	bmi.n	8007d38 <_vfiprintf_r+0x2c>
 8007d2c:	89bb      	ldrh	r3, [r7, #12]
 8007d2e:	059b      	lsls	r3, r3, #22
 8007d30:	d402      	bmi.n	8007d38 <_vfiprintf_r+0x2c>
 8007d32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007d34:	f7fe f993 	bl	800605e <__retarget_lock_acquire_recursive>
 8007d38:	89bb      	ldrh	r3, [r7, #12]
 8007d3a:	071b      	lsls	r3, r3, #28
 8007d3c:	d502      	bpl.n	8007d44 <_vfiprintf_r+0x38>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d113      	bne.n	8007d6c <_vfiprintf_r+0x60>
 8007d44:	0039      	movs	r1, r7
 8007d46:	9803      	ldr	r0, [sp, #12]
 8007d48:	f000 f93e 	bl	8007fc8 <__swsetup_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d00d      	beq.n	8007d6c <_vfiprintf_r+0x60>
 8007d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d52:	07db      	lsls	r3, r3, #31
 8007d54:	d503      	bpl.n	8007d5e <_vfiprintf_r+0x52>
 8007d56:	2001      	movs	r0, #1
 8007d58:	4240      	negs	r0, r0
 8007d5a:	b021      	add	sp, #132	@ 0x84
 8007d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5e:	89bb      	ldrh	r3, [r7, #12]
 8007d60:	059b      	lsls	r3, r3, #22
 8007d62:	d4f8      	bmi.n	8007d56 <_vfiprintf_r+0x4a>
 8007d64:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007d66:	f7fe f97b 	bl	8006060 <__retarget_lock_release_recursive>
 8007d6a:	e7f4      	b.n	8007d56 <_vfiprintf_r+0x4a>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	ac08      	add	r4, sp, #32
 8007d70:	6163      	str	r3, [r4, #20]
 8007d72:	3320      	adds	r3, #32
 8007d74:	7663      	strb	r3, [r4, #25]
 8007d76:	3310      	adds	r3, #16
 8007d78:	76a3      	strb	r3, [r4, #26]
 8007d7a:	9607      	str	r6, [sp, #28]
 8007d7c:	002e      	movs	r6, r5
 8007d7e:	7833      	ldrb	r3, [r6, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <_vfiprintf_r+0x7c>
 8007d84:	2b25      	cmp	r3, #37	@ 0x25
 8007d86:	d148      	bne.n	8007e1a <_vfiprintf_r+0x10e>
 8007d88:	1b73      	subs	r3, r6, r5
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	42ae      	cmp	r6, r5
 8007d8e:	d00b      	beq.n	8007da8 <_vfiprintf_r+0x9c>
 8007d90:	002a      	movs	r2, r5
 8007d92:	0039      	movs	r1, r7
 8007d94:	9803      	ldr	r0, [sp, #12]
 8007d96:	f7ff ffa7 	bl	8007ce8 <__sfputs_r>
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d100      	bne.n	8007da0 <_vfiprintf_r+0x94>
 8007d9e:	e0ae      	b.n	8007efe <_vfiprintf_r+0x1f2>
 8007da0:	6963      	ldr	r3, [r4, #20]
 8007da2:	9a05      	ldr	r2, [sp, #20]
 8007da4:	189b      	adds	r3, r3, r2
 8007da6:	6163      	str	r3, [r4, #20]
 8007da8:	7833      	ldrb	r3, [r6, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d100      	bne.n	8007db0 <_vfiprintf_r+0xa4>
 8007dae:	e0a6      	b.n	8007efe <_vfiprintf_r+0x1f2>
 8007db0:	2201      	movs	r2, #1
 8007db2:	2300      	movs	r3, #0
 8007db4:	4252      	negs	r2, r2
 8007db6:	6062      	str	r2, [r4, #4]
 8007db8:	a904      	add	r1, sp, #16
 8007dba:	3254      	adds	r2, #84	@ 0x54
 8007dbc:	1852      	adds	r2, r2, r1
 8007dbe:	1c75      	adds	r5, r6, #1
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	60e3      	str	r3, [r4, #12]
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	7013      	strb	r3, [r2, #0]
 8007dc8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007dca:	4b59      	ldr	r3, [pc, #356]	@ (8007f30 <_vfiprintf_r+0x224>)
 8007dcc:	2205      	movs	r2, #5
 8007dce:	0018      	movs	r0, r3
 8007dd0:	7829      	ldrb	r1, [r5, #0]
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	f7fe f945 	bl	8006062 <memchr>
 8007dd8:	1c6e      	adds	r6, r5, #1
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d11f      	bne.n	8007e1e <_vfiprintf_r+0x112>
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	06d3      	lsls	r3, r2, #27
 8007de2:	d504      	bpl.n	8007dee <_vfiprintf_r+0xe2>
 8007de4:	2353      	movs	r3, #83	@ 0x53
 8007de6:	a904      	add	r1, sp, #16
 8007de8:	185b      	adds	r3, r3, r1
 8007dea:	2120      	movs	r1, #32
 8007dec:	7019      	strb	r1, [r3, #0]
 8007dee:	0713      	lsls	r3, r2, #28
 8007df0:	d504      	bpl.n	8007dfc <_vfiprintf_r+0xf0>
 8007df2:	2353      	movs	r3, #83	@ 0x53
 8007df4:	a904      	add	r1, sp, #16
 8007df6:	185b      	adds	r3, r3, r1
 8007df8:	212b      	movs	r1, #43	@ 0x2b
 8007dfa:	7019      	strb	r1, [r3, #0]
 8007dfc:	782b      	ldrb	r3, [r5, #0]
 8007dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e00:	d016      	beq.n	8007e30 <_vfiprintf_r+0x124>
 8007e02:	002e      	movs	r6, r5
 8007e04:	2100      	movs	r1, #0
 8007e06:	200a      	movs	r0, #10
 8007e08:	68e3      	ldr	r3, [r4, #12]
 8007e0a:	7832      	ldrb	r2, [r6, #0]
 8007e0c:	1c75      	adds	r5, r6, #1
 8007e0e:	3a30      	subs	r2, #48	@ 0x30
 8007e10:	2a09      	cmp	r2, #9
 8007e12:	d950      	bls.n	8007eb6 <_vfiprintf_r+0x1aa>
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d111      	bne.n	8007e3c <_vfiprintf_r+0x130>
 8007e18:	e017      	b.n	8007e4a <_vfiprintf_r+0x13e>
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7af      	b.n	8007d7e <_vfiprintf_r+0x72>
 8007e1e:	9b05      	ldr	r3, [sp, #20]
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	1ac0      	subs	r0, r0, r3
 8007e24:	2301      	movs	r3, #1
 8007e26:	4083      	lsls	r3, r0
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	0035      	movs	r5, r6
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	e7cc      	b.n	8007dca <_vfiprintf_r+0xbe>
 8007e30:	9b07      	ldr	r3, [sp, #28]
 8007e32:	1d19      	adds	r1, r3, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	9107      	str	r1, [sp, #28]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	db01      	blt.n	8007e40 <_vfiprintf_r+0x134>
 8007e3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e3e:	e004      	b.n	8007e4a <_vfiprintf_r+0x13e>
 8007e40:	425b      	negs	r3, r3
 8007e42:	60e3      	str	r3, [r4, #12]
 8007e44:	2302      	movs	r3, #2
 8007e46:	4313      	orrs	r3, r2
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	7833      	ldrb	r3, [r6, #0]
 8007e4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e4e:	d10c      	bne.n	8007e6a <_vfiprintf_r+0x15e>
 8007e50:	7873      	ldrb	r3, [r6, #1]
 8007e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e54:	d134      	bne.n	8007ec0 <_vfiprintf_r+0x1b4>
 8007e56:	9b07      	ldr	r3, [sp, #28]
 8007e58:	3602      	adds	r6, #2
 8007e5a:	1d1a      	adds	r2, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9207      	str	r2, [sp, #28]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da01      	bge.n	8007e68 <_vfiprintf_r+0x15c>
 8007e64:	2301      	movs	r3, #1
 8007e66:	425b      	negs	r3, r3
 8007e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6a:	4d32      	ldr	r5, [pc, #200]	@ (8007f34 <_vfiprintf_r+0x228>)
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	0028      	movs	r0, r5
 8007e70:	7831      	ldrb	r1, [r6, #0]
 8007e72:	f7fe f8f6 	bl	8006062 <memchr>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d006      	beq.n	8007e88 <_vfiprintf_r+0x17c>
 8007e7a:	2340      	movs	r3, #64	@ 0x40
 8007e7c:	1b40      	subs	r0, r0, r5
 8007e7e:	4083      	lsls	r3, r0
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	3601      	adds	r6, #1
 8007e84:	4313      	orrs	r3, r2
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	7831      	ldrb	r1, [r6, #0]
 8007e8a:	2206      	movs	r2, #6
 8007e8c:	482a      	ldr	r0, [pc, #168]	@ (8007f38 <_vfiprintf_r+0x22c>)
 8007e8e:	1c75      	adds	r5, r6, #1
 8007e90:	7621      	strb	r1, [r4, #24]
 8007e92:	f7fe f8e6 	bl	8006062 <memchr>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d040      	beq.n	8007f1c <_vfiprintf_r+0x210>
 8007e9a:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <_vfiprintf_r+0x230>)
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d122      	bne.n	8007ee6 <_vfiprintf_r+0x1da>
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	9b07      	ldr	r3, [sp, #28]
 8007ea4:	3307      	adds	r3, #7
 8007ea6:	4393      	bics	r3, r2
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	9307      	str	r3, [sp, #28]
 8007eac:	6963      	ldr	r3, [r4, #20]
 8007eae:	9a04      	ldr	r2, [sp, #16]
 8007eb0:	189b      	adds	r3, r3, r2
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	e762      	b.n	8007d7c <_vfiprintf_r+0x70>
 8007eb6:	4343      	muls	r3, r0
 8007eb8:	002e      	movs	r6, r5
 8007eba:	2101      	movs	r1, #1
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	e7a4      	b.n	8007e0a <_vfiprintf_r+0xfe>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	200a      	movs	r0, #10
 8007ec4:	0019      	movs	r1, r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	6063      	str	r3, [r4, #4]
 8007eca:	7832      	ldrb	r2, [r6, #0]
 8007ecc:	1c75      	adds	r5, r6, #1
 8007ece:	3a30      	subs	r2, #48	@ 0x30
 8007ed0:	2a09      	cmp	r2, #9
 8007ed2:	d903      	bls.n	8007edc <_vfiprintf_r+0x1d0>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0c8      	beq.n	8007e6a <_vfiprintf_r+0x15e>
 8007ed8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007eda:	e7c6      	b.n	8007e6a <_vfiprintf_r+0x15e>
 8007edc:	4341      	muls	r1, r0
 8007ede:	002e      	movs	r6, r5
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	1889      	adds	r1, r1, r2
 8007ee4:	e7f1      	b.n	8007eca <_vfiprintf_r+0x1be>
 8007ee6:	aa07      	add	r2, sp, #28
 8007ee8:	9200      	str	r2, [sp, #0]
 8007eea:	0021      	movs	r1, r4
 8007eec:	003a      	movs	r2, r7
 8007eee:	4b14      	ldr	r3, [pc, #80]	@ (8007f40 <_vfiprintf_r+0x234>)
 8007ef0:	9803      	ldr	r0, [sp, #12]
 8007ef2:	f7fd fb43 	bl	800557c <_printf_float>
 8007ef6:	9004      	str	r0, [sp, #16]
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	3301      	adds	r3, #1
 8007efc:	d1d6      	bne.n	8007eac <_vfiprintf_r+0x1a0>
 8007efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f00:	07db      	lsls	r3, r3, #31
 8007f02:	d405      	bmi.n	8007f10 <_vfiprintf_r+0x204>
 8007f04:	89bb      	ldrh	r3, [r7, #12]
 8007f06:	059b      	lsls	r3, r3, #22
 8007f08:	d402      	bmi.n	8007f10 <_vfiprintf_r+0x204>
 8007f0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007f0c:	f7fe f8a8 	bl	8006060 <__retarget_lock_release_recursive>
 8007f10:	89bb      	ldrh	r3, [r7, #12]
 8007f12:	065b      	lsls	r3, r3, #25
 8007f14:	d500      	bpl.n	8007f18 <_vfiprintf_r+0x20c>
 8007f16:	e71e      	b.n	8007d56 <_vfiprintf_r+0x4a>
 8007f18:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007f1a:	e71e      	b.n	8007d5a <_vfiprintf_r+0x4e>
 8007f1c:	aa07      	add	r2, sp, #28
 8007f1e:	9200      	str	r2, [sp, #0]
 8007f20:	0021      	movs	r1, r4
 8007f22:	003a      	movs	r2, r7
 8007f24:	4b06      	ldr	r3, [pc, #24]	@ (8007f40 <_vfiprintf_r+0x234>)
 8007f26:	9803      	ldr	r0, [sp, #12]
 8007f28:	f7fd fdd6 	bl	8005ad8 <_printf_i>
 8007f2c:	e7e3      	b.n	8007ef6 <_vfiprintf_r+0x1ea>
 8007f2e:	46c0      	nop			@ (mov r8, r8)
 8007f30:	08008500 	.word	0x08008500
 8007f34:	08008506 	.word	0x08008506
 8007f38:	0800850a 	.word	0x0800850a
 8007f3c:	0800557d 	.word	0x0800557d
 8007f40:	08007ce9 	.word	0x08007ce9

08007f44 <__swbuf_r>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	0006      	movs	r6, r0
 8007f48:	000d      	movs	r5, r1
 8007f4a:	0014      	movs	r4, r2
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d004      	beq.n	8007f5a <__swbuf_r+0x16>
 8007f50:	6a03      	ldr	r3, [r0, #32]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <__swbuf_r+0x16>
 8007f56:	f7fd ff5d 	bl	8005e14 <__sinit>
 8007f5a:	69a3      	ldr	r3, [r4, #24]
 8007f5c:	60a3      	str	r3, [r4, #8]
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	071b      	lsls	r3, r3, #28
 8007f62:	d502      	bpl.n	8007f6a <__swbuf_r+0x26>
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <__swbuf_r+0x3a>
 8007f6a:	0021      	movs	r1, r4
 8007f6c:	0030      	movs	r0, r6
 8007f6e:	f000 f82b 	bl	8007fc8 <__swsetup_r>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d003      	beq.n	8007f7e <__swbuf_r+0x3a>
 8007f76:	2501      	movs	r5, #1
 8007f78:	426d      	negs	r5, r5
 8007f7a:	0028      	movs	r0, r5
 8007f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	b2ef      	uxtb	r7, r5
 8007f84:	1ac0      	subs	r0, r0, r3
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	b2ed      	uxtb	r5, r5
 8007f8a:	4283      	cmp	r3, r0
 8007f8c:	dc05      	bgt.n	8007f9a <__swbuf_r+0x56>
 8007f8e:	0021      	movs	r1, r4
 8007f90:	0030      	movs	r0, r6
 8007f92:	f7ff fd81 	bl	8007a98 <_fflush_r>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d1ed      	bne.n	8007f76 <__swbuf_r+0x32>
 8007f9a:	68a3      	ldr	r3, [r4, #8]
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	60a3      	str	r3, [r4, #8]
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	6022      	str	r2, [r4, #0]
 8007fa8:	701f      	strb	r7, [r3, #0]
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	4283      	cmp	r3, r0
 8007fae:	d004      	beq.n	8007fba <__swbuf_r+0x76>
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	07db      	lsls	r3, r3, #31
 8007fb4:	d5e1      	bpl.n	8007f7a <__swbuf_r+0x36>
 8007fb6:	2d0a      	cmp	r5, #10
 8007fb8:	d1df      	bne.n	8007f7a <__swbuf_r+0x36>
 8007fba:	0021      	movs	r1, r4
 8007fbc:	0030      	movs	r0, r6
 8007fbe:	f7ff fd6b 	bl	8007a98 <_fflush_r>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d0d9      	beq.n	8007f7a <__swbuf_r+0x36>
 8007fc6:	e7d6      	b.n	8007f76 <__swbuf_r+0x32>

08007fc8 <__swsetup_r>:
 8007fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8008080 <__swsetup_r+0xb8>)
 8007fca:	b570      	push	{r4, r5, r6, lr}
 8007fcc:	0005      	movs	r5, r0
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	000c      	movs	r4, r1
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d004      	beq.n	8007fe0 <__swsetup_r+0x18>
 8007fd6:	6a03      	ldr	r3, [r0, #32]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <__swsetup_r+0x18>
 8007fdc:	f7fd ff1a 	bl	8005e14 <__sinit>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	5ee2      	ldrsh	r2, [r4, r3]
 8007fe4:	0713      	lsls	r3, r2, #28
 8007fe6:	d423      	bmi.n	8008030 <__swsetup_r+0x68>
 8007fe8:	06d3      	lsls	r3, r2, #27
 8007fea:	d407      	bmi.n	8007ffc <__swsetup_r+0x34>
 8007fec:	2309      	movs	r3, #9
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	2340      	movs	r3, #64	@ 0x40
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	4240      	negs	r0, r0
 8007ffa:	e03a      	b.n	8008072 <__swsetup_r+0xaa>
 8007ffc:	0752      	lsls	r2, r2, #29
 8007ffe:	d513      	bpl.n	8008028 <__swsetup_r+0x60>
 8008000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008002:	2900      	cmp	r1, #0
 8008004:	d008      	beq.n	8008018 <__swsetup_r+0x50>
 8008006:	0023      	movs	r3, r4
 8008008:	3344      	adds	r3, #68	@ 0x44
 800800a:	4299      	cmp	r1, r3
 800800c:	d002      	beq.n	8008014 <__swsetup_r+0x4c>
 800800e:	0028      	movs	r0, r5
 8008010:	f7fe feb4 	bl	8006d7c <_free_r>
 8008014:	2300      	movs	r3, #0
 8008016:	6363      	str	r3, [r4, #52]	@ 0x34
 8008018:	2224      	movs	r2, #36	@ 0x24
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	4393      	bics	r3, r2
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	2300      	movs	r3, #0
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	2308      	movs	r3, #8
 800802a:	89a2      	ldrh	r2, [r4, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10b      	bne.n	800804e <__swsetup_r+0x86>
 8008036:	21a0      	movs	r1, #160	@ 0xa0
 8008038:	2280      	movs	r2, #128	@ 0x80
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	0089      	lsls	r1, r1, #2
 800803e:	0092      	lsls	r2, r2, #2
 8008040:	400b      	ands	r3, r1
 8008042:	4293      	cmp	r3, r2
 8008044:	d003      	beq.n	800804e <__swsetup_r+0x86>
 8008046:	0021      	movs	r1, r4
 8008048:	0028      	movs	r0, r5
 800804a:	f000 f88f 	bl	800816c <__smakebuf_r>
 800804e:	230c      	movs	r3, #12
 8008050:	5ee2      	ldrsh	r2, [r4, r3]
 8008052:	2101      	movs	r1, #1
 8008054:	0013      	movs	r3, r2
 8008056:	400b      	ands	r3, r1
 8008058:	420a      	tst	r2, r1
 800805a:	d00b      	beq.n	8008074 <__swsetup_r+0xac>
 800805c:	2300      	movs	r3, #0
 800805e:	60a3      	str	r3, [r4, #8]
 8008060:	6963      	ldr	r3, [r4, #20]
 8008062:	425b      	negs	r3, r3
 8008064:	61a3      	str	r3, [r4, #24]
 8008066:	2000      	movs	r0, #0
 8008068:	6923      	ldr	r3, [r4, #16]
 800806a:	4283      	cmp	r3, r0
 800806c:	d101      	bne.n	8008072 <__swsetup_r+0xaa>
 800806e:	0613      	lsls	r3, r2, #24
 8008070:	d4be      	bmi.n	8007ff0 <__swsetup_r+0x28>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	0791      	lsls	r1, r2, #30
 8008076:	d400      	bmi.n	800807a <__swsetup_r+0xb2>
 8008078:	6963      	ldr	r3, [r4, #20]
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	e7f3      	b.n	8008066 <__swsetup_r+0x9e>
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	20000018 	.word	0x20000018

08008084 <_raise_r>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	0004      	movs	r4, r0
 8008088:	000d      	movs	r5, r1
 800808a:	291f      	cmp	r1, #31
 800808c:	d904      	bls.n	8008098 <_raise_r+0x14>
 800808e:	2316      	movs	r3, #22
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	2001      	movs	r0, #1
 8008094:	4240      	negs	r0, r0
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <_raise_r+0x24>
 800809e:	008a      	lsls	r2, r1, #2
 80080a0:	189b      	adds	r3, r3, r2
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d108      	bne.n	80080ba <_raise_r+0x36>
 80080a8:	0020      	movs	r0, r4
 80080aa:	f000 f831 	bl	8008110 <_getpid_r>
 80080ae:	002a      	movs	r2, r5
 80080b0:	0001      	movs	r1, r0
 80080b2:	0020      	movs	r0, r4
 80080b4:	f000 f81a 	bl	80080ec <_kill_r>
 80080b8:	e7ed      	b.n	8008096 <_raise_r+0x12>
 80080ba:	2a01      	cmp	r2, #1
 80080bc:	d009      	beq.n	80080d2 <_raise_r+0x4e>
 80080be:	1c51      	adds	r1, r2, #1
 80080c0:	d103      	bne.n	80080ca <_raise_r+0x46>
 80080c2:	2316      	movs	r3, #22
 80080c4:	6003      	str	r3, [r0, #0]
 80080c6:	2001      	movs	r0, #1
 80080c8:	e7e5      	b.n	8008096 <_raise_r+0x12>
 80080ca:	2100      	movs	r1, #0
 80080cc:	0028      	movs	r0, r5
 80080ce:	6019      	str	r1, [r3, #0]
 80080d0:	4790      	blx	r2
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7df      	b.n	8008096 <_raise_r+0x12>
	...

080080d8 <raise>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	4b03      	ldr	r3, [pc, #12]	@ (80080e8 <raise+0x10>)
 80080dc:	0001      	movs	r1, r0
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	f7ff ffd0 	bl	8008084 <_raise_r>
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	46c0      	nop			@ (mov r8, r8)
 80080e8:	20000018 	.word	0x20000018

080080ec <_kill_r>:
 80080ec:	2300      	movs	r3, #0
 80080ee:	b570      	push	{r4, r5, r6, lr}
 80080f0:	4d06      	ldr	r5, [pc, #24]	@ (800810c <_kill_r+0x20>)
 80080f2:	0004      	movs	r4, r0
 80080f4:	0008      	movs	r0, r1
 80080f6:	0011      	movs	r1, r2
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	f7fa fd87 	bl	8002c0c <_kill>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	d103      	bne.n	800810a <_kill_r+0x1e>
 8008102:	682b      	ldr	r3, [r5, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d000      	beq.n	800810a <_kill_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	20000490 	.word	0x20000490

08008110 <_getpid_r>:
 8008110:	b510      	push	{r4, lr}
 8008112:	f7fa fd75 	bl	8002c00 <_getpid>
 8008116:	bd10      	pop	{r4, pc}

08008118 <__swhatbuf_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	000e      	movs	r6, r1
 800811c:	001d      	movs	r5, r3
 800811e:	230e      	movs	r3, #14
 8008120:	5ec9      	ldrsh	r1, [r1, r3]
 8008122:	0014      	movs	r4, r2
 8008124:	b096      	sub	sp, #88	@ 0x58
 8008126:	2900      	cmp	r1, #0
 8008128:	da0c      	bge.n	8008144 <__swhatbuf_r+0x2c>
 800812a:	89b2      	ldrh	r2, [r6, #12]
 800812c:	2380      	movs	r3, #128	@ 0x80
 800812e:	0011      	movs	r1, r2
 8008130:	4019      	ands	r1, r3
 8008132:	421a      	tst	r2, r3
 8008134:	d114      	bne.n	8008160 <__swhatbuf_r+0x48>
 8008136:	2380      	movs	r3, #128	@ 0x80
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	2000      	movs	r0, #0
 800813c:	6029      	str	r1, [r5, #0]
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	b016      	add	sp, #88	@ 0x58
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	466a      	mov	r2, sp
 8008146:	f000 f853 	bl	80081f0 <_fstat_r>
 800814a:	2800      	cmp	r0, #0
 800814c:	dbed      	blt.n	800812a <__swhatbuf_r+0x12>
 800814e:	23f0      	movs	r3, #240	@ 0xf0
 8008150:	9901      	ldr	r1, [sp, #4]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	4019      	ands	r1, r3
 8008156:	4b04      	ldr	r3, [pc, #16]	@ (8008168 <__swhatbuf_r+0x50>)
 8008158:	18c9      	adds	r1, r1, r3
 800815a:	424b      	negs	r3, r1
 800815c:	4159      	adcs	r1, r3
 800815e:	e7ea      	b.n	8008136 <__swhatbuf_r+0x1e>
 8008160:	2100      	movs	r1, #0
 8008162:	2340      	movs	r3, #64	@ 0x40
 8008164:	e7e9      	b.n	800813a <__swhatbuf_r+0x22>
 8008166:	46c0      	nop			@ (mov r8, r8)
 8008168:	ffffe000 	.word	0xffffe000

0800816c <__smakebuf_r>:
 800816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816e:	2602      	movs	r6, #2
 8008170:	898b      	ldrh	r3, [r1, #12]
 8008172:	0005      	movs	r5, r0
 8008174:	000c      	movs	r4, r1
 8008176:	b085      	sub	sp, #20
 8008178:	4233      	tst	r3, r6
 800817a:	d007      	beq.n	800818c <__smakebuf_r+0x20>
 800817c:	0023      	movs	r3, r4
 800817e:	3347      	adds	r3, #71	@ 0x47
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	2301      	movs	r3, #1
 8008186:	6163      	str	r3, [r4, #20]
 8008188:	b005      	add	sp, #20
 800818a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818c:	ab03      	add	r3, sp, #12
 800818e:	aa02      	add	r2, sp, #8
 8008190:	f7ff ffc2 	bl	8008118 <__swhatbuf_r>
 8008194:	9f02      	ldr	r7, [sp, #8]
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	0039      	movs	r1, r7
 800819a:	0028      	movs	r0, r5
 800819c:	f7fe fe64 	bl	8006e68 <_malloc_r>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d108      	bne.n	80081b6 <__smakebuf_r+0x4a>
 80081a4:	220c      	movs	r2, #12
 80081a6:	5ea3      	ldrsh	r3, [r4, r2]
 80081a8:	059a      	lsls	r2, r3, #22
 80081aa:	d4ed      	bmi.n	8008188 <__smakebuf_r+0x1c>
 80081ac:	2203      	movs	r2, #3
 80081ae:	4393      	bics	r3, r2
 80081b0:	431e      	orrs	r6, r3
 80081b2:	81a6      	strh	r6, [r4, #12]
 80081b4:	e7e2      	b.n	800817c <__smakebuf_r+0x10>
 80081b6:	2380      	movs	r3, #128	@ 0x80
 80081b8:	89a2      	ldrh	r2, [r4, #12]
 80081ba:	6020      	str	r0, [r4, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	6120      	str	r0, [r4, #16]
 80081c4:	6167      	str	r7, [r4, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <__smakebuf_r+0x78>
 80081ca:	0028      	movs	r0, r5
 80081cc:	230e      	movs	r3, #14
 80081ce:	5ee1      	ldrsh	r1, [r4, r3]
 80081d0:	f000 f820 	bl	8008214 <_isatty_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d005      	beq.n	80081e4 <__smakebuf_r+0x78>
 80081d8:	2303      	movs	r3, #3
 80081da:	89a2      	ldrh	r2, [r4, #12]
 80081dc:	439a      	bics	r2, r3
 80081de:	3b02      	subs	r3, #2
 80081e0:	4313      	orrs	r3, r2
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	9a01      	ldr	r2, [sp, #4]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	e7cc      	b.n	8008188 <__smakebuf_r+0x1c>
	...

080081f0 <_fstat_r>:
 80081f0:	2300      	movs	r3, #0
 80081f2:	b570      	push	{r4, r5, r6, lr}
 80081f4:	4d06      	ldr	r5, [pc, #24]	@ (8008210 <_fstat_r+0x20>)
 80081f6:	0004      	movs	r4, r0
 80081f8:	0008      	movs	r0, r1
 80081fa:	0011      	movs	r1, r2
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	f7fa fd65 	bl	8002ccc <_fstat>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d103      	bne.n	800820e <_fstat_r+0x1e>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d000      	beq.n	800820e <_fstat_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	20000490 	.word	0x20000490

08008214 <_isatty_r>:
 8008214:	2300      	movs	r3, #0
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	4d06      	ldr	r5, [pc, #24]	@ (8008234 <_isatty_r+0x20>)
 800821a:	0004      	movs	r4, r0
 800821c:	0008      	movs	r0, r1
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	f7fa fd62 	bl	8002ce8 <_isatty>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d103      	bne.n	8008230 <_isatty_r+0x1c>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d000      	beq.n	8008230 <_isatty_r+0x1c>
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	46c0      	nop			@ (mov r8, r8)
 8008234:	20000490 	.word	0x20000490

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	46c0      	nop			@ (mov r8, r8)
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
