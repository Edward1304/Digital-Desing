
Semaforo_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005804  08005804  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800580c  0800580c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005810  08005810  00006810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005814  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000005c  08005870  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08005870  0000740c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001159d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a9  00000000  00000000  00018629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c44  00000000  00000000  0001ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273d6  00000000  00000000  0001c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013310  00000000  00000000  00043aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_str    000ee9e6  00000000  00000000  0004f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  0013e09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00141d88  2**0
=======
 18 .debug_str    000f2bf3  00000000  00000000  00056dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001499ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  001499f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0014e0ac  2**0
>>>>>>> bee743c99e62a8b3efe4b22b5c9c873be4ddf859
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005748 	.word	0x08005748

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005748 	.word	0x08005748

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == Button_Pin)
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000570:	d102      	bne.n	8000578 <HAL_GPIO_EXTI_Callback+0x18>
		 button_flag = FLAG_SET;
 8000572:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <HAL_GPIO_EXTI_Callback+0x24>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	2000014c 	.word	0x2000014c

08000588 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
   if( huart == &huart2 ){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <HAL_UART_RxCpltCallback+0x50>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d11a      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x46>
	   if(string_to_receive[byte_counter] == '$'){
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_UART_RxCpltCallback+0x54>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <HAL_UART_RxCpltCallback+0x58>)
 80005a0:	5c9b      	ldrb	r3, [r3, r2]
 80005a2:	2b24      	cmp	r3, #36	@ 0x24
 80005a4:	d103      	bne.n	80005ae <HAL_UART_RxCpltCallback+0x26>
		   uart2_received_flag = FLAG_SET;
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_UART_RxCpltCallback+0x5c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
	   }else{
		   byte_counter++;
		   HAL_UART_Receive_IT(&huart2, (uint8_t *)&string_to_receive[byte_counter], LENGTH_COMMAND);
	   }
   }
 }
 80005ac:	e00f      	b.n	80005ce <HAL_UART_RxCpltCallback+0x46>
		   byte_counter++;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <HAL_UART_RxCpltCallback+0x54>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <HAL_UART_RxCpltCallback+0x54>)
 80005b8:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Receive_IT(&huart2, (uint8_t *)&string_to_receive[byte_counter], LENGTH_COMMAND);
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_UART_RxCpltCallback+0x54>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <HAL_UART_RxCpltCallback+0x58>)
 80005c2:	4413      	add	r3, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <HAL_UART_RxCpltCallback+0x50>)
 80005ca:	f003 f90b 	bl	80037e4 <HAL_UART_Receive_IT>
 }
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000c4 	.word	0x200000c4
 80005dc:	2000014f 	.word	0x2000014f
 80005e0:	20000250 	.word	0x20000250
 80005e4:	2000014e 	.word	0x2000014e

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fc6b 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f865 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f935 	bl	8000864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f903 	bl	8000804 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005fe:	f000 f8b1 	bl	8000764 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  button_flag = FLAG_RELEASED;
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <main+0xb0>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
  timer_switch_flag = FLAG_RELEASED;
 8000608:	4b24      	ldr	r3, [pc, #144]	@ (800069c <main+0xb4>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
  uart2_received_flag = FLAG_RELEASED;
 800060e:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <main+0xb8>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
  byte_counter = 0;
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <main+0xbc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
  initialize_state_machine();
 800061a:	f000 f997 	bl	800094c <initialize_state_machine>
  HAL_TIM_Base_Start_IT(&htim3);
 800061e:	4822      	ldr	r0, [pc, #136]	@ (80006a8 <main+0xc0>)
 8000620:	f002 fbb0 	bl	8002d84 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t length_to_send;
  //HAL_StatusTypeDef uart_hal_status;
  length_to_send = sprintf(&string_to_send[0],"HOLA MUNDO\r\n");
 8000624:	4921      	ldr	r1, [pc, #132]	@ (80006ac <main+0xc4>)
 8000626:	4822      	ldr	r0, [pc, #136]	@ (80006b0 <main+0xc8>)
 8000628:	f004 fbee 	bl	8004e08 <siprintf>
 800062c:	4603      	mov	r3, r0
 800062e:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2,(const uint8_t *)&string_to_send[0], length_to_send, 100);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29a      	uxth	r2, r3
 8000634:	2364      	movs	r3, #100	@ 0x64
 8000636:	491e      	ldr	r1, [pc, #120]	@ (80006b0 <main+0xc8>)
 8000638:	481e      	ldr	r0, [pc, #120]	@ (80006b4 <main+0xcc>)
 800063a:	f003 f849 	bl	80036d0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&string_to_receive[byte_counter], LENGTH_COMMAND);
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <main+0xbc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <main+0xd0>)
 8000646:	4413      	add	r3, r2
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <main+0xcc>)
 800064e:	f003 f8c9 	bl	80037e4 <HAL_UART_Receive_IT>
  string_to_receive[LENGTH_COMMAND] = 0x00;
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <main+0xd0>)
 8000654:	2200      	movs	r2, #0
 8000656:	705a      	strb	r2, [r3, #1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(uart2_received_flag == FLAG_SET){
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <main+0xb8>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d118      	bne.n	8000692 <main+0xaa>
		  uart2_received_flag = FLAG_RELEASED;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <main+0xb8>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
		  length_to_send = sprintf(&string_to_send[0],"Message received: %s \r\n", (char *)&string_to_receive[0]);
 8000666:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <main+0xd0>)
 8000668:	4914      	ldr	r1, [pc, #80]	@ (80006bc <main+0xd4>)
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <main+0xc8>)
 800066c:	f004 fbcc 	bl	8004e08 <siprintf>
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
		  HAL_UART_Transmit(&huart2,(const uint8_t *)&string_to_send[0], length_to_send, 100);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	b29a      	uxth	r2, r3
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	490d      	ldr	r1, [pc, #52]	@ (80006b0 <main+0xc8>)
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <main+0xcc>)
 800067e:	f003 f827 	bl	80036d0 <HAL_UART_Transmit>
		  byte_counter = 0;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <main+0xbc>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)&string_to_receive[0], LENGTH_COMMAND);
 8000688:	2201      	movs	r2, #1
 800068a:	490b      	ldr	r1, [pc, #44]	@ (80006b8 <main+0xd0>)
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <main+0xcc>)
 800068e:	f003 f8a9 	bl	80037e4 <HAL_UART_Receive_IT>
	  }else if(uart_hal_status == HAL_TIMEOUT){
		  length_to_send = sprintf(&string_to_send[0],"Message timeout \r\n");
		  HAL_UART_Transmit(&huart2,(const uint8_t *)&string_to_send[0], length_to_send, 100);
	  }*/

	  check_state_machine();
 8000692:	f000 f9f1 	bl	8000a78 <check_state_machine>
	  if(uart2_received_flag == FLAG_SET){
 8000696:	e7df      	b.n	8000658 <main+0x70>
 8000698:	2000014c 	.word	0x2000014c
 800069c:	2000014d 	.word	0x2000014d
 80006a0:	2000014e 	.word	0x2000014e
 80006a4:	2000014f 	.word	0x2000014f
 80006a8:	20000078 	.word	0x20000078
 80006ac:	08005760 	.word	0x08005760
 80006b0:	20000150 	.word	0x20000150
 80006b4:	200000c4 	.word	0x200000c4
 80006b8:	20000250 	.word	0x20000250
 80006bc:	08005770 	.word	0x08005770

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	@ 0x58
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2244      	movs	r2, #68	@ 0x44
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fbba 	bl	8004e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e6:	f000 ffe3 	bl	80016b0 <HAL_PWREx_ControlVoltageScaling>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f0:	f000 f926 	bl	8000940 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	2310      	movs	r3, #16
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000706:	2302      	movs	r3, #2
 8000708:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800070e:	230a      	movs	r3, #10
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f81a 	bl	800175c <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800072e:	f000 f907 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fbe2 	bl	8001f14 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 f8f3 	bl	8000940 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3758      	adds	r7, #88	@ 0x58
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_TIM3_Init+0x98>)
 8000784:	4a1e      	ldr	r2, [pc, #120]	@ (8000800 <MX_TIM3_Init+0x9c>)
 8000786:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_TIM3_Init+0x98>)
 800078a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800078e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_TIM3_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500-1;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_TIM3_Init+0x98>)
 8000798:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800079c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_TIM3_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_TIM3_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007aa:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_TIM3_Init+0x98>)
 80007ac:	f002 fa92 	bl	8002cd4 <HAL_TIM_Base_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80007b6:	f000 f8c3 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_TIM3_Init+0x98>)
 80007c8:	f002 fc53 	bl	8003072 <HAL_TIM_ConfigClockSource>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80007d2:	f000 f8b5 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <MX_TIM3_Init+0x98>)
 80007e4:	f002 fe80 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80007ee:	f000 f8a7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000078 	.word	0x20000078
 8000800:	40000400 	.word	0x40000400

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_USART2_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000848:	f002 fef4 	bl	8003634 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f875 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000c4 	.word	0x200000c4
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <MX_GPIO_Init+0xd4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a2e      	ldr	r2, [pc, #184]	@ (8000938 <MX_GPIO_Init+0xd4>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b2c      	ldr	r3, [pc, #176]	@ (8000938 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_GPIO_Init+0xd4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <MX_GPIO_Init+0xd4>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a22      	ldr	r2, [pc, #136]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e2:	f000 fea7 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480f      	ldr	r0, [pc, #60]	@ (800093c <MX_GPIO_Init+0xd8>)
 80008fe:	f000 fcef 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000902:	2320      	movs	r3, #32
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fce0 	bl	80012e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2028      	movs	r0, #40	@ 0x28
 8000926:	f000 fc26 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092a:	2028      	movs	r0, #40	@ 0x28
 800092c:	f000 fc3f 	bl	80011ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <initialize_state_machine>:
uint8_t time_250ms_for_seconds;
uint8_t time_led_on_in_250ms;
uint8_t time_led_off_in_250ms;
LED_state_enum LED_state;

void initialize_state_machine( void ){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	state_machine = cruce_carros;
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <initialize_state_machine+0x18>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	config_times_and_cariables_cruce_carros();
 8000956:	f000 f809 	bl	800096c <config_times_and_cariables_cruce_carros>
	LED_state = LED_OFF;
 800095a:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <initialize_state_machine+0x1c>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200002b4 	.word	0x200002b4
 8000968:	200002ba 	.word	0x200002ba

0800096c <config_times_and_cariables_cruce_carros>:

void config_times_and_cariables_cruce_carros ( void ){
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	tiempo_maximo = TIEMPO_CRUCE_CARROS;
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <config_times_and_cariables_cruce_carros+0x34>)
 8000972:	220a      	movs	r2, #10
 8000974:	701a      	strb	r2, [r3, #0]
	time_led_on_in_250ms = TIEMPO_PATRON_LED_ON_CARROS_MS;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <config_times_and_cariables_cruce_carros+0x38>)
 8000978:	2206      	movs	r2, #6
 800097a:	701a      	strb	r2, [r3, #0]
	time_led_on_in_250ms = TIEMPO_PATRON_LED_OFF_CARROS_MS;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <config_times_and_cariables_cruce_carros+0x38>)
 800097e:	2202      	movs	r2, #2
 8000980:	701a      	strb	r2, [r3, #0]
	tiempo_actual = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <config_times_and_cariables_cruce_carros+0x3c>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
	time_250ms = 0;
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <config_times_and_cariables_cruce_carros+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	button_flag = FLAG_RELEASED;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <config_times_and_cariables_cruce_carros+0x44>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200002b5 	.word	0x200002b5
 80009a4:	200002b9 	.word	0x200002b9
 80009a8:	200002b6 	.word	0x200002b6
 80009ac:	200002b7 	.word	0x200002b7
 80009b0:	2000014c 	.word	0x2000014c

080009b4 <config_times_and_variables_cruce_peatones>:

void config_times_and_variables_cruce_peatones ( void ){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	tiempo_maximo = TIEMPO_CRUCE_PEATONES;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <config_times_and_variables_cruce_peatones+0x2c>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	701a      	strb	r2, [r3, #0]
	time_led_on_in_250ms = TIEMPO_PATRON_LED_ON_PEATONES_MS;
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <config_times_and_variables_cruce_peatones+0x30>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
	time_led_on_in_250ms = TIEMPO_PATRON_LED_OFF_PEATONES_MS;
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <config_times_and_variables_cruce_peatones+0x30>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
	tiempo_actual = 0;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <config_times_and_variables_cruce_peatones+0x34>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
	time_250ms = 0;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <config_times_and_variables_cruce_peatones+0x38>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200002b5 	.word	0x200002b5
 80009e4:	200002b9 	.word	0x200002b9
 80009e8:	200002b6 	.word	0x200002b6
 80009ec:	200002b7 	.word	0x200002b7

080009f0 <patron_luz>:

void patron_luz ( void ){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	//Patrón de luz
	if( LED_state == LED_ON ){
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <patron_luz+0x7c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d118      	bne.n	8000a2e <patron_luz+0x3e>
		if( time_250ms % time_led_on_in_250ms == 0 ){
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <patron_luz+0x80>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <patron_luz+0x84>)
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a08:	fb01 f202 	mul.w	r2, r1, r2
 8000a0c:	1a9b      	subs	r3, r3, r2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d128      	bne.n	8000a66 <patron_luz+0x76>
			LED_state = LED_OFF;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <patron_luz+0x7c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f000 fe07 	bl	8001634 <HAL_GPIO_WritePin>
			time_250ms = 0;
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <patron_luz+0x80>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
			LED_state = LED_ON;
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
			time_250ms = 0;
		}
	}
}
 8000a2c:	e01b      	b.n	8000a66 <patron_luz+0x76>
	}else if( LED_state == LED_OFF ){
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <patron_luz+0x7c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d117      	bne.n	8000a66 <patron_luz+0x76>
		if( time_250ms % time_led_on_in_250ms == 0 ){
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <patron_luz+0x80>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <patron_luz+0x84>)
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a42:	fb01 f202 	mul.w	r2, r1, r2
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10b      	bne.n	8000a66 <patron_luz+0x76>
			LED_state = LED_ON;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <patron_luz+0x7c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f000 fdea 	bl	8001634 <HAL_GPIO_WritePin>
			time_250ms = 0;
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <patron_luz+0x80>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200002ba 	.word	0x200002ba
 8000a70:	200002b7 	.word	0x200002b7
 8000a74:	200002b9 	.word	0x200002b9

08000a78 <check_state_machine>:

void check_state_machine( void ){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	switch( state_machine ){
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <check_state_machine+0x24>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <check_state_machine+0x12>
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d003      	beq.n	8000a90 <check_state_machine+0x18>
			break;
		case cruce_peatones:
			cruce_peaton_state_function();
			break;
		default:
			break;
 8000a88:	e005      	b.n	8000a96 <check_state_machine+0x1e>
			cruce_carro_state_function();
 8000a8a:	f000 f809 	bl	8000aa0 <cruce_carro_state_function>
			break;
 8000a8e:	e002      	b.n	8000a96 <check_state_machine+0x1e>
			cruce_peaton_state_function();
 8000a90:	f000 f85c 	bl	8000b4c <cruce_peaton_state_function>
			break;
 8000a94:	bf00      	nop
	}
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002b4 	.word	0x200002b4

08000aa0 <cruce_carro_state_function>:

void cruce_carro_state_function( void ){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

	if( button_flag == FLAG_SET ){
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <cruce_carro_state_function+0x90>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d112      	bne.n	8000ad2 <cruce_carro_state_function+0x32>
		button_flag = FLAG_RELEASED;
 8000aac:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <cruce_carro_state_function+0x90>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
		if( tiempo_actual + 2 < tiempo_maximo){
 8000ab2:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <cruce_carro_state_function+0x94>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b38 <cruce_carro_state_function+0x98>)
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	4293      	cmp	r3, r2
 8000abe:	da08      	bge.n	8000ad2 <cruce_carro_state_function+0x32>
			tiempo_actual = tiempo_maximo - 2;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <cruce_carro_state_function+0x98>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <cruce_carro_state_function+0x94>)
 8000aca:	701a      	strb	r2, [r3, #0]
			time_250ms_for_seconds = 0;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <cruce_carro_state_function+0x9c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
		}
	}

	if( timer_switch_flag == FLAG_SET ){
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <cruce_carro_state_function+0xa0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d128      	bne.n	8000b2c <cruce_carro_state_function+0x8c>
		timer_switch_flag = FLAG_RELEASED;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <cruce_carro_state_function+0xa0>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]

		if( time_250ms_for_seconds % 4 == 0 ){
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <cruce_carro_state_function+0x9c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d108      	bne.n	8000b00 <cruce_carro_state_function+0x60>
			tiempo_actual++;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <cruce_carro_state_function+0x94>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <cruce_carro_state_function+0x94>)
 8000af8:	701a      	strb	r2, [r3, #0]
			time_250ms_for_seconds = 0;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <cruce_carro_state_function+0x9c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
		}


		patron_luz();
 8000b00:	f7ff ff76 	bl	80009f0 <patron_luz>

		//Revisión de cambio de estados
		if( tiempo_actual == tiempo_maximo ){
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <cruce_carro_state_function+0x94>)
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <cruce_carro_state_function+0x98>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d10d      	bne.n	8000b2c <cruce_carro_state_function+0x8c>
			state_machine = cruce_peatones;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <cruce_carro_state_function+0xa4>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
			config_times_and_variables_cruce_peatones();
 8000b16:	f7ff ff4d 	bl	80009b4 <config_times_and_variables_cruce_peatones>
			LED_state = LED_OFF;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <cruce_carro_state_function+0xa8>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2120      	movs	r1, #32
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b28:	f000 fd84 	bl	8001634 <HAL_GPIO_WritePin>
		}
	}

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000014c 	.word	0x2000014c
 8000b34:	200002b6 	.word	0x200002b6
 8000b38:	200002b5 	.word	0x200002b5
 8000b3c:	200002b8 	.word	0x200002b8
 8000b40:	2000014d 	.word	0x2000014d
 8000b44:	200002b4 	.word	0x200002b4
 8000b48:	200002ba 	.word	0x200002ba

08000b4c <cruce_peaton_state_function>:

void cruce_peaton_state_function(void){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

	if( timer_switch_flag == FLAG_SET ){
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <cruce_peaton_state_function+0x64>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d128      	bne.n	8000baa <cruce_peaton_state_function+0x5e>
		timer_switch_flag = FLAG_RELEASED;
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <cruce_peaton_state_function+0x64>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]

		if( time_250ms_for_seconds % 4 == 0 ){
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <cruce_peaton_state_function+0x68>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d108      	bne.n	8000b7e <cruce_peaton_state_function+0x32>
			tiempo_actual++;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <cruce_peaton_state_function+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <cruce_peaton_state_function+0x6c>)
 8000b76:	701a      	strb	r2, [r3, #0]
			time_250ms_for_seconds = 0;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <cruce_peaton_state_function+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
		}


		patron_luz();
 8000b7e:	f7ff ff37 	bl	80009f0 <patron_luz>

		//Revisión de cambio de estados
		if( tiempo_actual == tiempo_maximo ){
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <cruce_peaton_state_function+0x6c>)
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <cruce_peaton_state_function+0x70>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d10d      	bne.n	8000baa <cruce_peaton_state_function+0x5e>
			state_machine = cruce_carros;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <cruce_peaton_state_function+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
			config_times_and_cariables_cruce_carros();
 8000b94:	f7ff feea 	bl	800096c <config_times_and_cariables_cruce_carros>
			LED_state = LED_OFF;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <cruce_peaton_state_function+0x78>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba6:	f000 fd45 	bl	8001634 <HAL_GPIO_WritePin>
		}
	}

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000014d 	.word	0x2000014d
 8000bb4:	200002b8 	.word	0x200002b8
 8000bb8:	200002b6 	.word	0x200002b6
 8000bbc:	200002b5 	.word	0x200002b5
 8000bc0:	200002b4 	.word	0x200002b4
 8000bc4:	200002ba 	.word	0x200002ba

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <HAL_MspInit+0x44>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bea:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <HAL_TIM_Base_MspInit+0x44>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d113      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_TIM_Base_MspInit+0x48>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <HAL_TIM_Base_MspInit+0x48>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_Base_MspInit+0x48>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	201d      	movs	r0, #29
 8000c40:	f000 fa99 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c44:	201d      	movs	r0, #29
 8000c46:	f000 fab2 	bl	80011ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2288      	movs	r2, #136	@ 0x88
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 f8e3 	bl	8004e48 <memset>
  if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <HAL_UART_MspInit+0xc0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d143      	bne.n	8000d14 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fb5f 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca4:	f7ff fe4c 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cac:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	4a16      	ldr	r2, [pc, #88]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f000 faee 	bl	80012e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2026      	movs	r0, #38	@ 0x26
 8000d0a:	f000 fa34 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d0e:	2026      	movs	r0, #38	@ 0x26
 8000d10:	f000 fa4d 	bl	80011ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d14:	bf00      	nop
 8000d16:	37b0      	adds	r7, #176	@ 0xb0
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 f901 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <TIM3_IRQHandler+0x2c>)
 8000d8a:	f002 f86b 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  timer_switch_flag = FLAG_SET;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <TIM3_IRQHandler+0x30>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
  time_250ms++;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <TIM3_IRQHandler+0x34>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <TIM3_IRQHandler+0x34>)
 8000d9e:	701a      	strb	r2, [r3, #0]
  time_250ms_for_seconds++;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <TIM3_IRQHandler+0x38>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <TIM3_IRQHandler+0x38>)
 8000daa:	701a      	strb	r2, [r3, #0]
//  if( time_250ms == 8 ){
//	  time_250ms = 0;
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000078 	.word	0x20000078
 8000db4:	2000014d 	.word	0x2000014d
 8000db8:	200002b7 	.word	0x200002b7
 8000dbc:	200002b8 	.word	0x200002b8

08000dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <USART2_IRQHandler+0x10>)
 8000dc6:	f002 fd59 	bl	800387c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000c4 	.word	0x200000c4

08000dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000dd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ddc:	f000 fc42 	bl	8001664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f004 f820 	bl	8004e58 <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20018000 	.word	0x20018000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	200002bc 	.word	0x200002bc
 8000e4c:	20000410 	.word	0x20000410

08000e50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff ffea 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	@ (8000eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <LoopForever+0xe>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec0 <LoopForever+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f003 ffdf 	bl	8004e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea6:	f7ff fb9f 	bl	80005e8 <main>

08000eaa <LoopForever>:

LoopForever:
    b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eb8:	08005814 	.word	0x08005814
  ldr r2, =_sbss
 8000ebc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ec0:	2000040c 	.word	0x2000040c

08000ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_2_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_Init+0x3c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_Init+0x3c>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000edc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f93e 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 f80f 	bl	8000f08 <HAL_InitTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	e001      	b.n	8000efa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef6:	f7ff fe67 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f14:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <HAL_InitTick+0x6c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f1c:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_InitTick+0x70>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f949 	bl	80011ca <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10f      	bne.n	8000f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d809      	bhi.n	8000f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 f913 	bl	8001176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <HAL_InitTick+0x74>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e007      	b.n	8000f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e004      	b.n	8000f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e001      	b.n	8000f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	200002c0 	.word	0x200002c0

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200002c0 	.word	0x200002c0

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	@ (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d008      	beq.n	800120c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2204      	movs	r2, #4
 80011fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e022      	b.n	8001252 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 020e 	bic.w	r2, r2, #14
 800121a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001230:	f003 021c 	and.w	r2, r3, #28
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d005      	beq.n	8001282 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2204      	movs	r2, #4
 800127a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e029      	b.n	80012d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 020e 	bic.w	r2, r2, #14
 8001290:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f003 021c 	and.w	r2, r3, #28
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	4798      	blx	r3
    }
  }
  return status;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e17f      	b.n	80015f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8171 	beq.w	80015ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x40>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 0201 	and.w	r2, r3, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b03      	cmp	r3, #3
 800138c:	d118      	bne.n	80013c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	6939      	ldr	r1, [r7, #16]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80ac 	beq.w	80015ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b5f      	ldr	r3, [pc, #380]	@ (8001610 <HAL_GPIO_Init+0x330>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	4a5e      	ldr	r2, [pc, #376]	@ (8001610 <HAL_GPIO_Init+0x330>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6613      	str	r3, [r2, #96]	@ 0x60
 800149e:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <HAL_GPIO_Init+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001614 <HAL_GPIO_Init+0x334>)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014d4:	d025      	beq.n	8001522 <HAL_GPIO_Init+0x242>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001618 <HAL_GPIO_Init+0x338>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x23e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	@ (800161c <HAL_GPIO_Init+0x33c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x23a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001620 <HAL_GPIO_Init+0x340>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x236>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001624 <HAL_GPIO_Init+0x344>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x232>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_GPIO_Init+0x348>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <HAL_GPIO_Init+0x34c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x22a>
 8001506:	2306      	movs	r3, #6
 8001508:	e00c      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800150a:	2307      	movs	r3, #7
 800150c:	e00a      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800150e:	2305      	movs	r3, #5
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001512:	2304      	movs	r3, #4
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001522:	2300      	movs	r3, #0
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001534:	4937      	ldr	r1, [pc, #220]	@ (8001614 <HAL_GPIO_Init+0x334>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001566:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <HAL_GPIO_Init+0x350>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001590:	4a27      	ldr	r2, [pc, #156]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001596:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <HAL_GPIO_Init+0x350>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_GPIO_Init+0x350>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_GPIO_Init+0x350>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f47f ae78 	bne.w	80012f0 <HAL_GPIO_Init+0x10>
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	48000400 	.word	0x48000400
 800161c:	48000800 	.word	0x48000800
 8001620:	48000c00 	.word	0x48000c00
 8001624:	48001000 	.word	0x48001000
 8001628:	48001400 	.word	0x48001400
 800162c:	48001800 	.word	0x48001800
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001650:	e002      	b.n	8001658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff6c 	bl	8000560 <HAL_GPIO_EXTI_Callback>
  }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <HAL_PWREx_GetVoltageRange+0x18>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40007000 	.word	0x40007000

080016b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016be:	d130      	bne.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016cc:	d038      	beq.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2232      	movs	r2, #50	@ 0x32
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f4:	e002      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001708:	d102      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x60>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f2      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171c:	d110      	bne.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e00f      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800172a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172e:	d007      	beq.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001738:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800173e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000
 8001754:	20000000 	.word	0x20000000
 8001758:	431bde83 	.word	0x431bde83

0800175c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e3ca      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176e:	4b97      	ldr	r3, [pc, #604]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001778:	4b94      	ldr	r3, [pc, #592]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80e4 	beq.w	8001958 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4a>
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	f040 808b 	bne.w	80018b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	f040 8087 	bne.w	80018b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a6:	4b89      	ldr	r3, [pc, #548]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e3a2      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	4b82      	ldr	r3, [pc, #520]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <HAL_RCC_OscConfig+0x7c>
 80017ce:	4b7f      	ldr	r3, [pc, #508]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d6:	e005      	b.n	80017e4 <HAL_RCC_OscConfig+0x88>
 80017d8:	4b7c      	ldr	r3, [pc, #496]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d223      	bcs.n	8001830 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fd55 	bl	800229c <RCC_SetFlashLatencyFromMSIRange>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e383      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fc:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a72      	ldr	r2, [pc, #456]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b70      	ldr	r3, [pc, #448]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	496d      	ldr	r1, [pc, #436]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181a:	4b6c      	ldr	r3, [pc, #432]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	4968      	ldr	r1, [pc, #416]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
 800182e:	e025      	b.n	800187c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001830:	4b66      	ldr	r3, [pc, #408]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b63      	ldr	r3, [pc, #396]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4960      	ldr	r1, [pc, #384]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184e:	4b5f      	ldr	r3, [pc, #380]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	495b      	ldr	r1, [pc, #364]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fd15 	bl	800229c <RCC_SetFlashLatencyFromMSIRange>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e343      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800187c:	f000 fc4a 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b52      	ldr	r3, [pc, #328]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	4950      	ldr	r1, [pc, #320]	@ (80019d0 <HAL_RCC_OscConfig+0x274>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	4a4e      	ldr	r2, [pc, #312]	@ (80019d4 <HAL_RCC_OscConfig+0x278>)
 800189a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800189c:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <HAL_RCC_OscConfig+0x27c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb31 	bl	8000f08 <HAL_InitTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d052      	beq.n	8001956 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	e327      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d032      	beq.n	8001922 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018bc:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a42      	ldr	r2, [pc, #264]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb6e 	bl	8000fa8 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d0:	f7ff fb6a 	bl	8000fa8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e310      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e2:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ee:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a36      	ldr	r2, [pc, #216]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4931      	ldr	r1, [pc, #196]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190c:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	492c      	ldr	r1, [pc, #176]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e01a      	b.n	8001958 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001922:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a29      	ldr	r2, [pc, #164]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192e:	f7ff fb3b 	bl	8000fa8 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001936:	f7ff fb37 	bl	8000fa8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e2dd      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001948:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x1da>
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001956:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d074      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b08      	cmp	r3, #8
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x21a>
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d10e      	bne.n	800198e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d10b      	bne.n	800198e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d064      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2f0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d160      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e2ba      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x24a>
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e026      	b.n	80019f4 <HAL_RCC_OscConfig+0x298>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ae:	d115      	bne.n	80019dc <HAL_RCC_OscConfig+0x280>
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a02      	ldr	r2, [pc, #8]	@ (80019cc <HAL_RCC_OscConfig+0x270>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e014      	b.n	80019f4 <HAL_RCC_OscConfig+0x298>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08005788 	.word	0x08005788
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004
 80019dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a9c      	ldr	r2, [pc, #624]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fad4 	bl	8000fa8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fad0 	bl	8000fa8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e276      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	4b92      	ldr	r3, [pc, #584]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2a8>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fac0 	bl	8000fa8 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fabc 	bl	8000fa8 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e262      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3e:	4b88      	ldr	r3, [pc, #544]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2d0>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d060      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_OscConfig+0x310>
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d116      	bne.n	8001a9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x328>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e23f      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b76      	ldr	r3, [pc, #472]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	4973      	ldr	r1, [pc, #460]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	e040      	b.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d023      	beq.n	8001aea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fa7b 	bl	8000fa8 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fa77 	bl	8000fa8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e21d      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b62      	ldr	r3, [pc, #392]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	495f      	ldr	r1, [pc, #380]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e018      	b.n	8001b1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b5d      	ldr	r3, [pc, #372]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa57 	bl	8000fa8 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fa53 	bl	8000fa8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1f9      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b30:	4b4b      	ldr	r3, [pc, #300]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b36:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fa32 	bl	8000fa8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fa2e 	bl	8000fa8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1d4      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ef      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3ec>
 8001b68:	e01b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b70:	4a3b      	ldr	r2, [pc, #236]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fa15 	bl	8000fa8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fa11 	bl	8000fa8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1b7      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ef      	bne.n	8001b82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80a6 	beq.w	8001cfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	4a26      	ldr	r2, [pc, #152]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bcc:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d118      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9d8 	bl	8000fa8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff f9d4 	bl	8000fa8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e17a      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_RCC_OscConfig+0x508>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4d8>
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c32:	e029      	b.n	8001c88 <HAL_RCC_OscConfig+0x52c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d115      	bne.n	8001c68 <HAL_RCC_OscConfig+0x50c>
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c42:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c5c:	e014      	b.n	8001c88 <HAL_RCC_OscConfig+0x52c>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40007000 	.word	0x40007000
 8001c68:	4b9c      	ldr	r3, [pc, #624]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6e:	4a9b      	ldr	r2, [pc, #620]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c78:	4b98      	ldr	r3, [pc, #608]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a97      	ldr	r2, [pc, #604]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d016      	beq.n	8001cbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f98a 	bl	8000fa8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7ff f986 	bl	8000fa8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e12a      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cae:	4b8b      	ldr	r3, [pc, #556]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ed      	beq.n	8001c98 <HAL_RCC_OscConfig+0x53c>
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f973 	bl	8000fa8 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff f96f 	bl	8000fa8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e113      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cdc:	4b7f      	ldr	r3, [pc, #508]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ed      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	4a79      	ldr	r2, [pc, #484]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80fe 	beq.w	8001f02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	f040 80d0 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d10:	4b72      	ldr	r3, [pc, #456]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d130      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d127      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d50:	2a07      	cmp	r2, #7
 8001d52:	bf14      	ite	ne
 8001d54:	2201      	movne	r2, #1
 8001d56:	2200      	moveq	r2, #0
 8001d58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d06e      	beq.n	8001e64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d069      	beq.n	8001e60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d98:	4b50      	ldr	r3, [pc, #320]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0ad      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001da8:	4b4c      	ldr	r3, [pc, #304]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db4:	f7ff f8f8 	bl	8000fa8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f8f4 	bl	8000fa8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e09a      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dce:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dda:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_RCC_OscConfig+0x784>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dea:	3a01      	subs	r2, #1
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001df4:	0212      	lsls	r2, r2, #8
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dfc:	0852      	lsrs	r2, r2, #1
 8001dfe:	3a01      	subs	r2, #1
 8001e00:	0552      	lsls	r2, r2, #21
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e08:	0852      	lsrs	r2, r2, #1
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	0652      	lsls	r2, r2, #25
 8001e0e:	4311      	orrs	r1, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e14:	0912      	lsrs	r2, r2, #4
 8001e16:	0452      	lsls	r2, r2, #17
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4930      	ldr	r1, [pc, #192]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a2a      	ldr	r2, [pc, #168]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e38:	f7ff f8b6 	bl	8000fa8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff f8b2 	bl	8000fa8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e058      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5e:	e050      	b.n	8001f02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e04f      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d148      	bne.n	8001f02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e7c:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a16      	ldr	r2, [pc, #88]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e88:	f7ff f88e 	bl	8000fa8 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff f88a 	bl	8000fa8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e030      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x734>
 8001eae:	e028      	b.n	8001f02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d023      	beq.n	8001efe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a08      	ldr	r2, [pc, #32]	@ (8001edc <HAL_RCC_OscConfig+0x780>)
 8001ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f871 	bl	8000fa8 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	e00c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff f86d 	bl	8000fa8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d905      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e013      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_RCC_OscConfig+0x7b0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ec      	bne.n	8001eca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_RCC_OscConfig+0x7b0>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4905      	ldr	r1, [pc, #20]	@ (8001f0c <HAL_RCC_OscConfig+0x7b0>)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x7b4>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
 8001efc:	e001      	b.n	8001f02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	feeefffc 	.word	0xfeeefffc

08001f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0e7      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b75      	ldr	r3, [pc, #468]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4970      	ldr	r1, [pc, #448]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b6e      	ldr	r3, [pc, #440]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0cf      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d010      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b66      	ldr	r3, [pc, #408]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d908      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b63      	ldr	r3, [pc, #396]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4960      	ldr	r1, [pc, #384]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d04c      	beq.n	800202c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d121      	bne.n	8001fea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0a6      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb2:	4b54      	ldr	r3, [pc, #336]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e09a      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fca:	4b4e      	ldr	r3, [pc, #312]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e08e      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fda:	4b4a      	ldr	r3, [pc, #296]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e086      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b46      	ldr	r3, [pc, #280]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4943      	ldr	r1, [pc, #268]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ffd4 	bl	8000fa8 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe ffd0 	bl	8000fa8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e06e      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b3a      	ldr	r3, [pc, #232]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4b31      	ldr	r3, [pc, #196]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002044:	429a      	cmp	r2, r3
 8002046:	d208      	bcs.n	800205a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b2e      	ldr	r3, [pc, #184]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	492b      	ldr	r1, [pc, #172]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205a:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d210      	bcs.n	800208a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002068:	4b25      	ldr	r3, [pc, #148]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 0207 	bic.w	r2, r3, #7
 8002070:	4923      	ldr	r1, [pc, #140]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_RCC_ClockConfig+0x1ec>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e036      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002096:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4918      	ldr	r1, [pc, #96]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4910      	ldr	r1, [pc, #64]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c8:	f000 f824 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	490b      	ldr	r1, [pc, #44]	@ (8002108 <HAL_RCC_ClockConfig+0x1f4>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	4a09      	ldr	r2, [pc, #36]	@ (800210c <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_RCC_ClockConfig+0x1fc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe ff0b 	bl	8000f08 <HAL_InitTick>
 80020f2:	4603      	mov	r3, r0
 80020f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020f6:	7afb      	ldrb	r3, [r7, #11]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
 8002108:	08005788 	.word	0x08005788
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4b3e      	ldr	r3, [pc, #248]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212c:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x34>
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d121      	bne.n	8002186 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d11e      	bne.n	8002186 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002148:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002154:	4b31      	ldr	r3, [pc, #196]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e005      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002170:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002184:	e00a      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d102      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800218c:	4b25      	ldr	r3, [pc, #148]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x110>)
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	e004      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d101      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002198:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x114>)
 800219a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d134      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0xa6>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d003      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0xac>
 80021b8:	e005      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x110>)
 80021bc:	617b      	str	r3, [r7, #20]
      break;
 80021be:	e005      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x114>)
 80021c2:	617b      	str	r3, [r7, #20]
      break;
 80021c4:	e002      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	617b      	str	r3, [r7, #20]
      break;
 80021ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	3301      	adds	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	fb03 f202 	mul.w	r2, r3, r2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_RCC_GetSysClockFreq+0x108>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	0e5b      	lsrs	r3, r3, #25
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	3301      	adds	r3, #1
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800220c:	69bb      	ldr	r3, [r7, #24]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	080057a0 	.word	0x080057a0
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200

0800222c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002248:	f7ff fff0 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4904      	ldr	r1, [pc, #16]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x28>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08005798 	.word	0x08005798

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002274:	f7ff ffda 	bl	800222c <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0adb      	lsrs	r3, r3, #11
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4904      	ldr	r1, [pc, #16]	@ (8002298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	08005798 	.word	0x08005798

0800229c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b4:	f7ff f9ee 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 80022b8:	6178      	str	r0, [r7, #20]
 80022ba:	e014      	b.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	4a24      	ldr	r2, [pc, #144]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c8:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d4:	f7ff f9de 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 80022d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ec:	d10b      	bne.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	@ 0x80
 80022f2:	d919      	bls.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80022f8:	d902      	bls.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022fa:	2302      	movs	r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e013      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e010      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b80      	cmp	r3, #128	@ 0x80
 800230a:	d902      	bls.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800230c:	2303      	movs	r3, #3
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e00a      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	@ 0x80
 8002316:	d102      	bne.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e004      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b70      	cmp	r3, #112	@ 0x70
 8002322:	d101      	bne.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 0207 	bic.w	r2, r3, #7
 8002330:	4909      	ldr	r1, [pc, #36]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	40022000 	.word	0x40022000

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002364:	2300      	movs	r3, #0
 8002366:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002368:	2300      	movs	r3, #0
 800236a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002374:	2b00      	cmp	r3, #0
 8002376:	d041      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800237c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002380:	d02a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002382:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002386:	d824      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800238c:	d008      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800238e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002392:	d81e      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800239c:	d010      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800239e:	e018      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a0:	4b86      	ldr	r3, [pc, #536]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a85      	ldr	r2, [pc, #532]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ac:	e015      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fabb 	bl	8002930 <RCCEx_PLLSAI1_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023be:	e00c      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3320      	adds	r3, #32
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fba6 	bl	8002b18 <RCCEx_PLLSAI2_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d0:	e003      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	74fb      	strb	r3, [r7, #19]
      break;
 80023d6:	e000      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e0:	4b76      	ldr	r3, [pc, #472]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ee:	4973      	ldr	r1, [pc, #460]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023f6:	e001      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d041      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800240c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002410:	d02a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002412:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002416:	d824      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800241e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002422:	d81e      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800242c:	d010      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800242e:	e018      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002430:	4b62      	ldr	r3, [pc, #392]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a61      	ldr	r2, [pc, #388]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243c:	e015      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa73 	bl	8002930 <RCCEx_PLLSAI1_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244e:	e00c      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3320      	adds	r3, #32
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fb5e 	bl	8002b18 <RCCEx_PLLSAI2_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002460:	e003      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	74fb      	strb	r3, [r7, #19]
      break;
 8002466:	e000      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002470:	4b52      	ldr	r3, [pc, #328]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800247e:	494f      	ldr	r1, [pc, #316]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002486:	e001      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a0 	beq.w	80025da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	4a40      	ldr	r2, [pc, #256]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c0:	4b3e      	ldr	r3, [pc, #248]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3a      	ldr	r2, [pc, #232]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024dc:	f7fe fd64 	bl	8000fa8 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7fe fd60 	bl	8000fa8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	74fb      	strb	r3, [r7, #19]
        break;
 80024f6:	e005      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f8:	4b31      	ldr	r3, [pc, #196]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d15c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800250a:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002514:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	d019      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002534:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a20      	ldr	r2, [pc, #128]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fd1f 	bl	8000fa8 <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	e00b      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fd1b 	bl	8000fa8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d902      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	74fb      	strb	r3, [r7, #19]
            break;
 8002584:	e006      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ec      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025aa:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025b2:	e009      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
 80025b8:	e006      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c8:	7c7b      	ldrb	r3, [r7, #17]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ce:	4b9e      	ldr	r3, [pc, #632]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	4a9d      	ldr	r2, [pc, #628]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e6:	4b98      	ldr	r3, [pc, #608]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f023 0203 	bic.w	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	4994      	ldr	r1, [pc, #592]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002608:	4b8f      	ldr	r3, [pc, #572]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 020c 	bic.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	498c      	ldr	r1, [pc, #560]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262a:	4b87      	ldr	r3, [pc, #540]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	4983      	ldr	r1, [pc, #524]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800264c:	4b7e      	ldr	r3, [pc, #504]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	497b      	ldr	r1, [pc, #492]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266e:	4b76      	ldr	r3, [pc, #472]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267c:	4972      	ldr	r1, [pc, #456]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002690:	4b6d      	ldr	r3, [pc, #436]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	496a      	ldr	r1, [pc, #424]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b2:	4b65      	ldr	r3, [pc, #404]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	4961      	ldr	r1, [pc, #388]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e2:	4959      	ldr	r1, [pc, #356]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f6:	4b54      	ldr	r3, [pc, #336]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002704:	4950      	ldr	r1, [pc, #320]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002718:	4b4b      	ldr	r3, [pc, #300]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	4948      	ldr	r1, [pc, #288]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800273a:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	493f      	ldr	r1, [pc, #252]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d028      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800275c:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800276a:	4937      	ldr	r1, [pc, #220]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277a:	d106      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800277c:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002786:	60d3      	str	r3, [r2, #12]
 8002788:	e011      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002792:	d10c      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8c8 	bl	8002930 <RCCEx_PLLSAI1_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d028      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	491f      	ldr	r1, [pc, #124]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d8:	d106      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027da:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4a1a      	ldr	r2, [pc, #104]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e4:	60d3      	str	r3, [r2, #12]
 80027e6:	e011      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027f0:	d10c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2101      	movs	r1, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f899 	bl	8002930 <RCCEx_PLLSAI1_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d02b      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002836:	d109      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002838:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a02      	ldr	r2, [pc, #8]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002842:	60d3      	str	r3, [r2, #12]
 8002844:	e014      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002854:	d10c      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f867 	bl	8002930 <RCCEx_PLLSAI1_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02f      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800287c:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800288a:	4928      	ldr	r1, [pc, #160]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800289a:	d10d      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2102      	movs	r1, #2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f844 	bl	8002930 <RCCEx_PLLSAI1_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d014      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	74bb      	strb	r3, [r7, #18]
 80028b6:	e011      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3320      	adds	r3, #32
 80028c6:	2102      	movs	r1, #2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f925 	bl	8002b18 <RCCEx_PLLSAI2_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f6:	490d      	ldr	r1, [pc, #52]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800290a:	4b08      	ldr	r3, [pc, #32]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291a:	4904      	ldr	r1, [pc, #16]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002922:	7cbb      	ldrb	r3, [r7, #18]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000

08002930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800293e:	4b75      	ldr	r3, [pc, #468]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d018      	beq.n	800297c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800294a:	4b72      	ldr	r3, [pc, #456]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d10d      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
       ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002962:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
       ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d047      	beq.n	8002a06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	e044      	b.n	8002a06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d018      	beq.n	80029b6 <RCCEx_PLLSAI1_Config+0x86>
 8002984:	2b03      	cmp	r3, #3
 8002986:	d825      	bhi.n	80029d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002988:	2b01      	cmp	r3, #1
 800298a:	d002      	beq.n	8002992 <RCCEx_PLLSAI1_Config+0x62>
 800298c:	2b02      	cmp	r3, #2
 800298e:	d009      	beq.n	80029a4 <RCCEx_PLLSAI1_Config+0x74>
 8002990:	e020      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002992:	4b60      	ldr	r3, [pc, #384]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d11d      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a2:	e01a      	b.n	80029da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d116      	bne.n	80029de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e013      	b.n	80029de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029b6:	4b57      	ldr	r3, [pc, #348]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029c2:	4b54      	ldr	r3, [pc, #336]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029d2:	e006      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e004      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	430b      	orrs	r3, r1
 8002a00:	4944      	ldr	r1, [pc, #272]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d17d      	bne.n	8002b08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a0c:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a40      	ldr	r2, [pc, #256]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7fe fac6 	bl	8000fa8 <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a1e:	e009      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a20:	f7fe fac2 	bl	8000fa8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	73fb      	strb	r3, [r7, #15]
        break;
 8002a32:	e005      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a34:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ef      	bne.n	8002a20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d160      	bne.n	8002b08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d111      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a4c:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6892      	ldr	r2, [r2, #8]
 8002a5c:	0211      	lsls	r1, r2, #8
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68d2      	ldr	r2, [r2, #12]
 8002a62:	0912      	lsrs	r2, r2, #4
 8002a64:	0452      	lsls	r2, r2, #17
 8002a66:	430a      	orrs	r2, r1
 8002a68:	492a      	ldr	r1, [pc, #168]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
 8002a6e:	e027      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d112      	bne.n	8002a9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a76:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6892      	ldr	r2, [r2, #8]
 8002a86:	0211      	lsls	r1, r2, #8
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6912      	ldr	r2, [r2, #16]
 8002a8c:	0852      	lsrs	r2, r2, #1
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	0552      	lsls	r2, r2, #21
 8002a92:	430a      	orrs	r2, r1
 8002a94:	491f      	ldr	r1, [pc, #124]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	610b      	str	r3, [r1, #16]
 8002a9a:	e011      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002aa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	0211      	lsls	r1, r2, #8
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6952      	ldr	r2, [r2, #20]
 8002ab2:	0852      	lsrs	r2, r2, #1
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	0652      	lsls	r2, r2, #25
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fa6c 	bl	8000fa8 <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad2:	e009      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad4:	f7fe fa68 	bl	8000fa8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d902      	bls.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae6:	e005      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4904      	ldr	r1, [pc, #16]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000

08002b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b26:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b32:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10d      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
       ||
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b4a:	4b61      	ldr	r3, [pc, #388]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d047      	beq.n	8002bee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e044      	b.n	8002bee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d018      	beq.n	8002b9e <RCCEx_PLLSAI2_Config+0x86>
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d825      	bhi.n	8002bbc <RCCEx_PLLSAI2_Config+0xa4>
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d002      	beq.n	8002b7a <RCCEx_PLLSAI2_Config+0x62>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d009      	beq.n	8002b8c <RCCEx_PLLSAI2_Config+0x74>
 8002b78:	e020      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7a:	4b55      	ldr	r3, [pc, #340]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11d      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8a:	e01a      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b8c:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e013      	b.n	8002bc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002baa:	4b49      	ldr	r3, [pc, #292]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bba:	e006      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e004      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e002      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	430b      	orrs	r3, r1
 8002be8:	4939      	ldr	r1, [pc, #228]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d167      	bne.n	8002cc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a35      	ldr	r2, [pc, #212]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe f9d2 	bl	8000fa8 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c06:	e009      	b.n	8002c1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c08:	f7fe f9ce 	bl	8000fa8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1a:	e005      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ef      	bne.n	8002c08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d14a      	bne.n	8002cc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d111      	bne.n	8002c58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c34:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	0912      	lsrs	r2, r2, #4
 8002c4c:	0452      	lsls	r2, r2, #17
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	491f      	ldr	r1, [pc, #124]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	614b      	str	r3, [r1, #20]
 8002c56:	e011      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c58:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6892      	ldr	r2, [r2, #8]
 8002c68:	0211      	lsls	r1, r2, #8
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6912      	ldr	r2, [r2, #16]
 8002c6e:	0852      	lsrs	r2, r2, #1
 8002c70:	3a01      	subs	r2, #1
 8002c72:	0652      	lsls	r2, r2, #25
 8002c74:	430a      	orrs	r2, r1
 8002c76:	4916      	ldr	r1, [pc, #88]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a13      	ldr	r2, [pc, #76]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe f98e 	bl	8000fa8 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c8e:	e009      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c90:	f7fe f98a 	bl	8000fa8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d902      	bls.n	8002ca4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca2:	e005      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ef      	beq.n	8002c90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4904      	ldr	r1, [pc, #16]	@ (8002cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e049      	b.n	8002d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd ff88 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 faa8 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e04f      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	@ (8002e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc6:	d018      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIM_Base_Start_IT+0x76>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d115      	bne.n	8002e26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d015      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0xb4>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e12:	d011      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	e008      	b.n	8002e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e000      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	00010007 	.word	0x00010007

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0202 	mvn.w	r2, #2
 8002e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9bc 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9ae 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9bf 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f996 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f988 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f999 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0208 	mvn.w	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f970 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f962 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f973 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f94a 	bl	800322c <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f93c 	bl	8003218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f94d 	bl	8003240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f91a 	bl	8003204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fb07 	bl	800360c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 faff 	bl	8003620 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f907 	bl	8003254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0220 	mvn.w	r2, #32
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fac7 	bl	80035f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_TIM_ConfigClockSource+0x1c>
 800308a:	2302      	movs	r3, #2
 800308c:	e0b6      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x18a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	d03e      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xd8>
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d0:	f200 8087 	bhi.w	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d8:	f000 8086 	beq.w	80031e8 <HAL_TIM_ConfigClockSource+0x176>
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e0:	d87f      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030e2:	2b70      	cmp	r3, #112	@ 0x70
 80030e4:	d01a      	beq.n	800311c <HAL_TIM_ConfigClockSource+0xaa>
 80030e6:	2b70      	cmp	r3, #112	@ 0x70
 80030e8:	d87b      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030ea:	2b60      	cmp	r3, #96	@ 0x60
 80030ec:	d050      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0x11e>
 80030ee:	2b60      	cmp	r3, #96	@ 0x60
 80030f0:	d877      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030f2:	2b50      	cmp	r3, #80	@ 0x50
 80030f4:	d03c      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0xfe>
 80030f6:	2b50      	cmp	r3, #80	@ 0x50
 80030f8:	d873      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d058      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0x13e>
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	d86f      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 8003102:	2b30      	cmp	r3, #48	@ 0x30
 8003104:	d064      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 8003106:	2b30      	cmp	r3, #48	@ 0x30
 8003108:	d86b      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d060      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d867      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d05c      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 8003116:	2b10      	cmp	r3, #16
 8003118:	d05a      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15e>
 800311a:	e062      	b.n	80031e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	f000 f9bc 	bl	80034a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800313e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
      break;
 8003148:	e04f      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	f000 f9a5 	bl	80034a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800316c:	609a      	str	r2, [r3, #8]
      break;
 800316e:	e03c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317c:	461a      	mov	r2, r3
 800317e:	f000 f919 	bl	80033b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2150      	movs	r1, #80	@ 0x50
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f972 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 800318e:	e02c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319c:	461a      	mov	r2, r3
 800319e:	f000 f938 	bl	8003412 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2160      	movs	r1, #96	@ 0x60
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f962 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031ae:	e01c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031bc:	461a      	mov	r2, r3
 80031be:	f000 f8f9 	bl	80033b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2140      	movs	r1, #64	@ 0x40
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f952 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031ce:	e00c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 f949 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031e0:	e003      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      break;
 80031e6:	e000      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a46      	ldr	r2, [pc, #280]	@ (8003394 <TIM_Base_SetConfig+0x12c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003286:	d00f      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a43      	ldr	r2, [pc, #268]	@ (8003398 <TIM_Base_SetConfig+0x130>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a42      	ldr	r2, [pc, #264]	@ (800339c <TIM_Base_SetConfig+0x134>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a41      	ldr	r2, [pc, #260]	@ (80033a0 <TIM_Base_SetConfig+0x138>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	@ (80033a4 <TIM_Base_SetConfig+0x13c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a35      	ldr	r2, [pc, #212]	@ (8003394 <TIM_Base_SetConfig+0x12c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c8:	d01b      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a32      	ldr	r2, [pc, #200]	@ (8003398 <TIM_Base_SetConfig+0x130>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d017      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a31      	ldr	r2, [pc, #196]	@ (800339c <TIM_Base_SetConfig+0x134>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a30      	ldr	r2, [pc, #192]	@ (80033a0 <TIM_Base_SetConfig+0x138>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00f      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	@ (80033a4 <TIM_Base_SetConfig+0x13c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	@ (80033a8 <TIM_Base_SetConfig+0x140>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <TIM_Base_SetConfig+0x144>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2c      	ldr	r2, [pc, #176]	@ (80033b0 <TIM_Base_SetConfig+0x148>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a16      	ldr	r2, [pc, #88]	@ (8003394 <TIM_Base_SetConfig+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00f      	beq.n	8003360 <TIM_Base_SetConfig+0xf8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <TIM_Base_SetConfig+0x13c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0xf8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <TIM_Base_SetConfig+0x140>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0xf8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a16      	ldr	r2, [pc, #88]	@ (80033ac <TIM_Base_SetConfig+0x144>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0xf8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <TIM_Base_SetConfig+0x148>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d103      	bne.n	8003368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d105      	bne.n	8003386 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	611a      	str	r2, [r3, #16]
  }
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	40013400 	.word	0x40013400
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40014800 	.word	0x40014800

080033b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 030a 	bic.w	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003412:	b480      	push	{r7}
 8003414:	b087      	sub	sp, #28
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f023 0210 	bic.w	r2, r3, #16
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800343c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	031b      	lsls	r3, r3, #12
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800344e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	f043 0307 	orr.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	021a      	lsls	r2, r3, #8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e068      	b.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2d      	ldr	r2, [pc, #180]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800353a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003572:	d018      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a13      	ldr	r2, [pc, #76]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a14      	ldr	r2, [pc, #80]	@ (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10c      	bne.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40014000 	.word	0x40014000

080035f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e040      	b.n	80036c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd fb00 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	@ 0x24
 8003660:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fedc 	bl	8004438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fc21 	bl	8003ec8 <UART_SetConfig>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e01b      	b.n	80036c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800369e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 ff5b 	bl	800457c <UART_CheckIdleState>
 80036c6:	4603      	mov	r3, r0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d177      	bne.n	80037d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_UART_Transmit+0x24>
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e070      	b.n	80037da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2221      	movs	r2, #33	@ 0x21
 8003704:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003706:	f7fd fc4f 	bl	8000fa8 <HAL_GetTick>
 800370a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003724:	d108      	bne.n	8003738 <HAL_UART_Transmit+0x68>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e003      	b.n	8003740 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003740:	e02f      	b.n	80037a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	@ 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 ffbd 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e03b      	b.n	80037da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003774:	b292      	uxth	r2, r2
 8003776:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	3302      	adds	r3, #2
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e007      	b.n	8003790 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1c9      	bne.n	8003742 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2140      	movs	r1, #64	@ 0x40
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 ff87 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e005      	b.n	80037da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	@ 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d137      	bne.n	800386c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Receive_IT+0x24>
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e030      	b.n	800386e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a18      	ldr	r2, [pc, #96]	@ (8003878 <HAL_UART_Receive_IT+0x94>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01f      	beq.n	800385c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d018      	beq.n	800385c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	613b      	str	r3, [r7, #16]
   return(result);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	623b      	str	r3, [r7, #32]
 800384a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	61bb      	str	r3, [r7, #24]
   return(result);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e6      	bne.n	800382a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	461a      	mov	r2, r3
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 ffa0 	bl	80047a8 <UART_Start_Receive_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	e000      	b.n	800386e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3728      	adds	r7, #40	@ 0x28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40008000 	.word	0x40008000

0800387c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0ba      	sub	sp, #232	@ 0xe8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80038a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038aa:	4013      	ands	r3, r2
 80038ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d115      	bne.n	80038e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 82ca 	beq.w	8003e6e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
      }
      return;
 80038e2:	e2c4      	b.n	8003e6e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8117 	beq.w	8003b1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038fe:	4b85      	ldr	r3, [pc, #532]	@ (8003b14 <HAL_UART_IRQHandler+0x298>)
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 810a 	beq.w	8003b1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d011      	beq.n	8003938 <HAL_UART_IRQHandler+0xbc>
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d011      	beq.n	8003968 <HAL_UART_IRQHandler+0xec>
 8003944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d011      	beq.n	8003998 <HAL_UART_IRQHandler+0x11c>
 8003974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2204      	movs	r2, #4
 8003986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d017      	beq.n	80039d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2208      	movs	r2, #8
 80039c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ca:	f043 0208 	orr.w	r2, r3, #8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d012      	beq.n	8003a06 <HAL_UART_IRQHandler+0x18a>
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8230 	beq.w	8003e72 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b40      	cmp	r3, #64	@ 0x40
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04f      	beq.n	8003afe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 ff68 	bl	8004934 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6e:	2b40      	cmp	r3, #64	@ 0x40
 8003a70:	d141      	bne.n	8003af6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3308      	adds	r3, #8
 8003a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1d9      	bne.n	8003a72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d013      	beq.n	8003aee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	4a13      	ldr	r2, [pc, #76]	@ (8003b18 <HAL_UART_IRQHandler+0x29c>)
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fbc3 	bl	800125e <HAL_DMA_Abort_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d017      	beq.n	8003b0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e00f      	b.n	8003b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9d4 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	e00b      	b.n	8003b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9d0 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e007      	b.n	8003b0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9cc 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003b0c:	e1b1      	b.n	8003e72 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	bf00      	nop
    return;
 8003b10:	e1af      	b.n	8003e72 <HAL_UART_IRQHandler+0x5f6>
 8003b12:	bf00      	nop
 8003b14:	04000120 	.word	0x04000120
 8003b18:	080049fd 	.word	0x080049fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 816a 	bne.w	8003dfa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8163 	beq.w	8003dfa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 815c 	beq.w	8003dfa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2210      	movs	r2, #16
 8003b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	f040 80d4 	bne.w	8003d02 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80ad 	beq.w	8003cca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f080 80a5 	bcs.w	8003cca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8086 	bne.w	8003ca8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1da      	bne.n	8003b9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e1      	bne.n	8003be6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e3      	bne.n	8003c22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c78:	f023 0310 	bic.w	r3, r3, #16
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e4      	bne.n	8003c68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd fa9d 	bl	80011e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8f4 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003cc8:	e0d5      	b.n	8003e76 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	f040 80ce 	bne.w	8003e76 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	f040 80c5 	bne.w	8003e76 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8d8 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
      return;
 8003d00:	e0b9      	b.n	8003e76 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80ab 	beq.w	8003e7a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a6 	beq.w	8003e7a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e4      	bne.n	8003d2e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	623b      	str	r3, [r7, #32]
   return(result);
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d88:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e3      	bne.n	8003d64 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	617b      	str	r3, [r7, #20]
   return(result);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e4      	bne.n	8003db0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f85c 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df8:	e03f      	b.n	8003e7a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <HAL_UART_IRQHandler+0x5a8>
 8003e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 ffe9 	bl	8004df4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e22:	e02d      	b.n	8003e80 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01c      	beq.n	8003e7e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
    }
    return;
 8003e4c:	e017      	b.n	8003e7e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <HAL_UART_IRQHandler+0x604>
 8003e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fdde 	bl	8004a28 <UART_EndTransmit_IT>
    return;
 8003e6c:	e008      	b.n	8003e80 <HAL_UART_IRQHandler+0x604>
      return;
 8003e6e:	bf00      	nop
 8003e70:	e006      	b.n	8003e80 <HAL_UART_IRQHandler+0x604>
    return;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_UART_IRQHandler+0x604>
      return;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_UART_IRQHandler+0x604>
      return;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_IRQHandler+0x604>
    return;
 8003e7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e80:	37e8      	adds	r7, #232	@ 0xe8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop

08003e88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b08a      	sub	sp, #40	@ 0x28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4ba4      	ldr	r3, [pc, #656]	@ (8004188 <UART_SetConfig+0x2c0>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a99      	ldr	r2, [pc, #612]	@ (800418c <UART_SetConfig+0x2c4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	4313      	orrs	r3, r2
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a90      	ldr	r2, [pc, #576]	@ (8004190 <UART_SetConfig+0x2c8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d126      	bne.n	8003fa0 <UART_SetConfig+0xd8>
 8003f52:	4b90      	ldr	r3, [pc, #576]	@ (8004194 <UART_SetConfig+0x2cc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d81b      	bhi.n	8003f98 <UART_SetConfig+0xd0>
 8003f60:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <UART_SetConfig+0xa0>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f79 	.word	0x08003f79
 8003f6c:	08003f89 	.word	0x08003f89
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f91 	.word	0x08003f91
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7e:	e116      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f86:	e112      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8e:	e10e      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f96:	e10a      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e106      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8004198 <UART_SetConfig+0x2d0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d138      	bne.n	800401c <UART_SetConfig+0x154>
 8003faa:	4b7a      	ldr	r3, [pc, #488]	@ (8004194 <UART_SetConfig+0x2cc>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d82d      	bhi.n	8004014 <UART_SetConfig+0x14c>
 8003fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <UART_SetConfig+0xf8>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08004015 	.word	0x08004015
 8003fc8:	08004015 	.word	0x08004015
 8003fcc:	08004015 	.word	0x08004015
 8003fd0:	08004005 	.word	0x08004005
 8003fd4:	08004015 	.word	0x08004015
 8003fd8:	08004015 	.word	0x08004015
 8003fdc:	08004015 	.word	0x08004015
 8003fe0:	08003ffd 	.word	0x08003ffd
 8003fe4:	08004015 	.word	0x08004015
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	0800400d 	.word	0x0800400d
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffa:	e0d8      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004002:	e0d4      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004004:	2304      	movs	r3, #4
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400a:	e0d0      	b.n	80041ae <UART_SetConfig+0x2e6>
 800400c:	2308      	movs	r3, #8
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004012:	e0cc      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004014:	2310      	movs	r3, #16
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401a:	e0c8      	b.n	80041ae <UART_SetConfig+0x2e6>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5e      	ldr	r2, [pc, #376]	@ (800419c <UART_SetConfig+0x2d4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d125      	bne.n	8004072 <UART_SetConfig+0x1aa>
 8004026:	4b5b      	ldr	r3, [pc, #364]	@ (8004194 <UART_SetConfig+0x2cc>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004030:	2b30      	cmp	r3, #48	@ 0x30
 8004032:	d016      	beq.n	8004062 <UART_SetConfig+0x19a>
 8004034:	2b30      	cmp	r3, #48	@ 0x30
 8004036:	d818      	bhi.n	800406a <UART_SetConfig+0x1a2>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d00a      	beq.n	8004052 <UART_SetConfig+0x18a>
 800403c:	2b20      	cmp	r3, #32
 800403e:	d814      	bhi.n	800406a <UART_SetConfig+0x1a2>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <UART_SetConfig+0x182>
 8004044:	2b10      	cmp	r3, #16
 8004046:	d008      	beq.n	800405a <UART_SetConfig+0x192>
 8004048:	e00f      	b.n	800406a <UART_SetConfig+0x1a2>
 800404a:	2300      	movs	r3, #0
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004050:	e0ad      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004052:	2302      	movs	r3, #2
 8004054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004058:	e0a9      	b.n	80041ae <UART_SetConfig+0x2e6>
 800405a:	2304      	movs	r3, #4
 800405c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004060:	e0a5      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004062:	2308      	movs	r3, #8
 8004064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004068:	e0a1      	b.n	80041ae <UART_SetConfig+0x2e6>
 800406a:	2310      	movs	r3, #16
 800406c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004070:	e09d      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4a      	ldr	r2, [pc, #296]	@ (80041a0 <UART_SetConfig+0x2d8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d125      	bne.n	80040c8 <UART_SetConfig+0x200>
 800407c:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004086:	2bc0      	cmp	r3, #192	@ 0xc0
 8004088:	d016      	beq.n	80040b8 <UART_SetConfig+0x1f0>
 800408a:	2bc0      	cmp	r3, #192	@ 0xc0
 800408c:	d818      	bhi.n	80040c0 <UART_SetConfig+0x1f8>
 800408e:	2b80      	cmp	r3, #128	@ 0x80
 8004090:	d00a      	beq.n	80040a8 <UART_SetConfig+0x1e0>
 8004092:	2b80      	cmp	r3, #128	@ 0x80
 8004094:	d814      	bhi.n	80040c0 <UART_SetConfig+0x1f8>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <UART_SetConfig+0x1d8>
 800409a:	2b40      	cmp	r3, #64	@ 0x40
 800409c:	d008      	beq.n	80040b0 <UART_SetConfig+0x1e8>
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x1f8>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a6:	e082      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040a8:	2302      	movs	r3, #2
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ae:	e07e      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b6:	e07a      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040be:	e076      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c6:	e072      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a35      	ldr	r2, [pc, #212]	@ (80041a4 <UART_SetConfig+0x2dc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d12a      	bne.n	8004128 <UART_SetConfig+0x260>
 80040d2:	4b30      	ldr	r3, [pc, #192]	@ (8004194 <UART_SetConfig+0x2cc>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e0:	d01a      	beq.n	8004118 <UART_SetConfig+0x250>
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e6:	d81b      	bhi.n	8004120 <UART_SetConfig+0x258>
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d00c      	beq.n	8004108 <UART_SetConfig+0x240>
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f2:	d815      	bhi.n	8004120 <UART_SetConfig+0x258>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <UART_SetConfig+0x238>
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fc:	d008      	beq.n	8004110 <UART_SetConfig+0x248>
 80040fe:	e00f      	b.n	8004120 <UART_SetConfig+0x258>
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004106:	e052      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004108:	2302      	movs	r3, #2
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410e:	e04e      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004116:	e04a      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411e:	e046      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004126:	e042      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a17      	ldr	r2, [pc, #92]	@ (800418c <UART_SetConfig+0x2c4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d13a      	bne.n	80041a8 <UART_SetConfig+0x2e0>
 8004132:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800413c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004140:	d01a      	beq.n	8004178 <UART_SetConfig+0x2b0>
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004146:	d81b      	bhi.n	8004180 <UART_SetConfig+0x2b8>
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800414c:	d00c      	beq.n	8004168 <UART_SetConfig+0x2a0>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004152:	d815      	bhi.n	8004180 <UART_SetConfig+0x2b8>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <UART_SetConfig+0x298>
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415c:	d008      	beq.n	8004170 <UART_SetConfig+0x2a8>
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x2b8>
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004166:	e022      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416e:	e01e      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e01a      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417e:	e016      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004186:	e012      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004188:	efff69f3 	.word	0xefff69f3
 800418c:	40008000 	.word	0x40008000
 8004190:	40013800 	.word	0x40013800
 8004194:	40021000 	.word	0x40021000
 8004198:	40004400 	.word	0x40004400
 800419c:	40004800 	.word	0x40004800
 80041a0:	40004c00 	.word	0x40004c00
 80041a4:	40005000 	.word	0x40005000
 80041a8:	2310      	movs	r3, #16
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a9f      	ldr	r2, [pc, #636]	@ (8004430 <UART_SetConfig+0x568>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d17a      	bne.n	80042ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d824      	bhi.n	800420a <UART_SetConfig+0x342>
 80041c0:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <UART_SetConfig+0x300>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	0800420b 	.word	0x0800420b
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	0800420b 	.word	0x0800420b
 80041d8:	080041fb 	.word	0x080041fb
 80041dc:	0800420b 	.word	0x0800420b
 80041e0:	0800420b 	.word	0x0800420b
 80041e4:	0800420b 	.word	0x0800420b
 80041e8:	08004203 	.word	0x08004203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe f82a 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80041f0:	61f8      	str	r0, [r7, #28]
        break;
 80041f2:	e010      	b.n	8004216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <UART_SetConfig+0x56c>)
 80041f6:	61fb      	str	r3, [r7, #28]
        break;
 80041f8:	e00d      	b.n	8004216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fa:	f7fd ff8b 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80041fe:	61f8      	str	r0, [r7, #28]
        break;
 8004200:	e009      	b.n	8004216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004206:	61fb      	str	r3, [r7, #28]
        break;
 8004208:	e005      	b.n	8004216 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80fb 	beq.w	8004414 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d305      	bcc.n	800423a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	429a      	cmp	r2, r3
 8004238:	d903      	bls.n	8004242 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004240:	e0e8      	b.n	8004414 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2200      	movs	r2, #0
 8004246:	461c      	mov	r4, r3
 8004248:	4615      	mov	r5, r2
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	022b      	lsls	r3, r5, #8
 8004254:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004258:	0222      	lsls	r2, r4, #8
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	6849      	ldr	r1, [r1, #4]
 800425e:	0849      	lsrs	r1, r1, #1
 8004260:	2000      	movs	r0, #0
 8004262:	4688      	mov	r8, r1
 8004264:	4681      	mov	r9, r0
 8004266:	eb12 0a08 	adds.w	sl, r2, r8
 800426a:	eb43 0b09 	adc.w	fp, r3, r9
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800427c:	4650      	mov	r0, sl
 800427e:	4659      	mov	r1, fp
 8004280:	f7fb fff6 	bl	8000270 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004292:	d308      	bcc.n	80042a6 <UART_SetConfig+0x3de>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429a:	d204      	bcs.n	80042a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	e0b6      	b.n	8004414 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042ac:	e0b2      	b.n	8004414 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b6:	d15e      	bne.n	8004376 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d828      	bhi.n	8004312 <UART_SetConfig+0x44a>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <UART_SetConfig+0x400>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	08004313 	.word	0x08004313
 80042d8:	08004303 	.word	0x08004303
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004313 	.word	0x08004313
 80042e4:	08004313 	.word	0x08004313
 80042e8:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fd ffaa 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80042f0:	61f8      	str	r0, [r7, #28]
        break;
 80042f2:	e014      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fd ffbc 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 80042f8:	61f8      	str	r0, [r7, #28]
        break;
 80042fa:	e010      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004434 <UART_SetConfig+0x56c>)
 80042fe:	61fb      	str	r3, [r7, #28]
        break;
 8004300:	e00d      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fd ff07 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 8004306:	61f8      	str	r0, [r7, #28]
        break;
 8004308:	e009      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430e:	61fb      	str	r3, [r7, #28]
        break;
 8004310:	e005      	b.n	800431e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800431c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d077      	beq.n	8004414 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005a      	lsls	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	441a      	add	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d916      	bls.n	800436e <UART_SetConfig+0x4a6>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	d212      	bcs.n	800436e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f023 030f 	bic.w	r3, r3, #15
 8004350:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	b29a      	uxth	r2, r3
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	4313      	orrs	r3, r2
 8004362:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	8afa      	ldrh	r2, [r7, #22]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e052      	b.n	8004414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004374:	e04e      	b.n	8004414 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004376:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800437a:	2b08      	cmp	r3, #8
 800437c:	d827      	bhi.n	80043ce <UART_SetConfig+0x506>
 800437e:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <UART_SetConfig+0x4bc>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fd ff4c 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80043ac:	61f8      	str	r0, [r7, #28]
        break;
 80043ae:	e014      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fd ff5e 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 80043b4:	61f8      	str	r0, [r7, #28]
        break;
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <UART_SetConfig+0x56c>)
 80043ba:	61fb      	str	r3, [r7, #28]
        break;
 80043bc:	e00d      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fd fea9 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80043c2:	61f8      	str	r0, [r7, #28]
        break;
 80043c4:	e009      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ca:	61fb      	str	r3, [r7, #28]
        break;
 80043cc:	e005      	b.n	80043da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043d8:	bf00      	nop
    }

    if (pclk != 0U)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d019      	beq.n	8004414 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	085a      	lsrs	r2, r3, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	441a      	add	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d909      	bls.n	800440e <UART_SetConfig+0x546>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d205      	bcs.n	800440e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
 800440c:	e002      	b.n	8004414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004420:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40008000 	.word	0x40008000
 8004434:	00f42400 	.word	0x00f42400

08004438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01a      	beq.n	800454e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004536:	d10a      	bne.n	800454e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b098      	sub	sp, #96	@ 0x60
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800458c:	f7fc fd0c 	bl	8000fa8 <HAL_GetTick>
 8004590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d12e      	bne.n	80045fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a8:	2200      	movs	r2, #0
 80045aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f88c 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d021      	beq.n	80045fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e6      	bne.n	80045ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e062      	b.n	80046c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d149      	bne.n	80046a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800460c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004614:	2200      	movs	r2, #0
 8004616:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f856 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03c      	beq.n	80046a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	623b      	str	r3, [r7, #32]
   return(result);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800463a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004644:	633b      	str	r3, [r7, #48]	@ 0x30
 8004646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800464a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	60fb      	str	r3, [r7, #12]
   return(result);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004678:	61fa      	str	r2, [r7, #28]
 800467a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	617b      	str	r3, [r7, #20]
   return(result);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e5      	bne.n	8004658 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e011      	b.n	80046c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3758      	adds	r7, #88	@ 0x58
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	e04f      	b.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d04b      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fc fc5f 	bl	8000fa8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <UART_WaitOnFlagUntilTimeout+0x30>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e04e      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d037      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b80      	cmp	r3, #128	@ 0x80
 8004712:	d034      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d031      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d110      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f8ff 	bl	8004934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2208      	movs	r2, #8
 800473a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e029      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004758:	d111      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f8e5 	bl	8004934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00f      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	429a      	cmp	r2, r3
 800479a:	d0a0      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b097      	sub	sp, #92	@ 0x5c
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047da:	d10e      	bne.n	80047fa <UART_Start_Receive_IT+0x52>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <UART_Start_Receive_IT+0x48>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80047ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047ee:	e02d      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	22ff      	movs	r2, #255	@ 0xff
 80047f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047f8:	e028      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <UART_Start_Receive_IT+0x76>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <UART_Start_Receive_IT+0x6c>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	@ 0xff
 800480e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004812:	e01b      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	227f      	movs	r2, #127	@ 0x7f
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800481c:	e016      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004826:	d10d      	bne.n	8004844 <UART_Start_Receive_IT+0x9c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <UART_Start_Receive_IT+0x92>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	227f      	movs	r2, #127	@ 0x7f
 8004834:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004838:	e008      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	223f      	movs	r2, #63	@ 0x3f
 800483e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004842:	e003      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2222      	movs	r2, #34	@ 0x22
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	657b      	str	r3, [r7, #84]	@ 0x54
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800487c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800487e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800488a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004898:	d107      	bne.n	80048aa <UART_Start_Receive_IT+0x102>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a21      	ldr	r2, [pc, #132]	@ (800492c <UART_Start_Receive_IT+0x184>)
 80048a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80048a8:	e002      	b.n	80048b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a20      	ldr	r2, [pc, #128]	@ (8004930 <UART_Start_Receive_IT+0x188>)
 80048ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d019      	beq.n	80048ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80048cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e6      	bne.n	80048b8 <UART_Start_Receive_IT+0x110>
 80048ea:	e018      	b.n	800491e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	613b      	str	r3, [r7, #16]
   return(result);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f043 0320 	orr.w	r3, r3, #32
 8004900:	653b      	str	r3, [r7, #80]	@ 0x50
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	69f9      	ldr	r1, [r7, #28]
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	61bb      	str	r3, [r7, #24]
   return(result);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e6      	bne.n	80048ec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	375c      	adds	r7, #92	@ 0x5c
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	08004c39 	.word	0x08004c39
 8004930:	08004a7d 	.word	0x08004a7d

08004934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b095      	sub	sp, #84	@ 0x54
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495a:	643b      	str	r3, [r7, #64]	@ 0x40
 800495c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e6      	bne.n	800493c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3308      	adds	r3, #8
 8004974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	61fb      	str	r3, [r7, #28]
   return(result);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800498e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d118      	bne.n	80049dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	613b      	str	r3, [r7, #16]
   return(result);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e6      	bne.n	80049aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049f0:	bf00      	nop
 80049f2:	3754      	adds	r7, #84	@ 0x54
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f7ff fa3e 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6979      	ldr	r1, [r7, #20]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fa0a 	bl	8003e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a74:	bf00      	nop
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b09c      	sub	sp, #112	@ 0x70
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a94:	2b22      	cmp	r3, #34	@ 0x22
 8004a96:	f040 80be 	bne.w	8004c16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004aa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004aa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004aa8:	b2d9      	uxtb	r1, r3
 8004aaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 80a3 	bne.w	8004c2a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e6      	bne.n	8004ae4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b36:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a34      	ldr	r2, [pc, #208]	@ (8004c34 <UART_RxISR_8BIT+0x1b8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01f      	beq.n	8004ba8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d018      	beq.n	8004ba8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	623b      	str	r3, [r7, #32]
   return(result);
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d12e      	bne.n	8004c0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	617b      	str	r3, [r7, #20]
   return(result);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d103      	bne.n	8004bfe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff f952 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c0c:	e00d      	b.n	8004c2a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fb fcba 	bl	8000588 <HAL_UART_RxCpltCallback>
}
 8004c14:	e009      	b.n	8004c2a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	8b1b      	ldrh	r3, [r3, #24]
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0208 	orr.w	r2, r2, #8
 8004c26:	b292      	uxth	r2, r2
 8004c28:	831a      	strh	r2, [r3, #24]
}
 8004c2a:	bf00      	nop
 8004c2c:	3770      	adds	r7, #112	@ 0x70
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40008000 	.word	0x40008000

08004c38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b09c      	sub	sp, #112	@ 0x70
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c50:	2b22      	cmp	r3, #34	@ 0x22
 8004c52:	f040 80be 	bne.w	8004dd2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c64:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004c6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 80a3 	bne.w	8004de6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cc0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e6      	bne.n	8004ca0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cf2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a34      	ldr	r2, [pc, #208]	@ (8004df0 <UART_RxISR_16BIT+0x1b8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01f      	beq.n	8004d64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d12e      	bne.n	8004dca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6979      	ldr	r1, [r7, #20]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d103      	bne.n	8004dba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2210      	movs	r2, #16
 8004db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f874 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dc8:	e00d      	b.n	8004de6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fb fbdc 	bl	8000588 <HAL_UART_RxCpltCallback>
}
 8004dd0:	e009      	b.n	8004de6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	8b1b      	ldrh	r3, [r3, #24]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0208 	orr.w	r2, r2, #8
 8004de2:	b292      	uxth	r2, r2
 8004de4:	831a      	strh	r2, [r3, #24]
}
 8004de6:	bf00      	nop
 8004de8:	3770      	adds	r7, #112	@ 0x70
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40008000 	.word	0x40008000

08004df4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <siprintf>:
 8004e08:	b40e      	push	{r1, r2, r3}
 8004e0a:	b500      	push	{lr}
 8004e0c:	b09c      	sub	sp, #112	@ 0x70
 8004e0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e10:	9002      	str	r0, [sp, #8]
 8004e12:	9006      	str	r0, [sp, #24]
 8004e14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e18:	4809      	ldr	r0, [pc, #36]	@ (8004e40 <siprintf+0x38>)
 8004e1a:	9107      	str	r1, [sp, #28]
 8004e1c:	9104      	str	r1, [sp, #16]
 8004e1e:	4909      	ldr	r1, [pc, #36]	@ (8004e44 <siprintf+0x3c>)
 8004e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e24:	9105      	str	r1, [sp, #20]
 8004e26:	6800      	ldr	r0, [r0, #0]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	a902      	add	r1, sp, #8
 8004e2c:	f000 f994 	bl	8005158 <_svfiprintf_r>
 8004e30:	9b02      	ldr	r3, [sp, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	b01c      	add	sp, #112	@ 0x70
 8004e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e3c:	b003      	add	sp, #12
 8004e3e:	4770      	bx	lr
 8004e40:	2000000c 	.word	0x2000000c
 8004e44:	ffff0208 	.word	0xffff0208

08004e48 <memset>:
 8004e48:	4402      	add	r2, r0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d100      	bne.n	8004e52 <memset+0xa>
 8004e50:	4770      	bx	lr
 8004e52:	f803 1b01 	strb.w	r1, [r3], #1
 8004e56:	e7f9      	b.n	8004e4c <memset+0x4>

08004e58 <__errno>:
 8004e58:	4b01      	ldr	r3, [pc, #4]	@ (8004e60 <__errno+0x8>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	2000000c 	.word	0x2000000c

08004e64 <__libc_init_array>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4d0d      	ldr	r5, [pc, #52]	@ (8004e9c <__libc_init_array+0x38>)
 8004e68:	4c0d      	ldr	r4, [pc, #52]	@ (8004ea0 <__libc_init_array+0x3c>)
 8004e6a:	1b64      	subs	r4, r4, r5
 8004e6c:	10a4      	asrs	r4, r4, #2
 8004e6e:	2600      	movs	r6, #0
 8004e70:	42a6      	cmp	r6, r4
 8004e72:	d109      	bne.n	8004e88 <__libc_init_array+0x24>
 8004e74:	4d0b      	ldr	r5, [pc, #44]	@ (8004ea4 <__libc_init_array+0x40>)
 8004e76:	4c0c      	ldr	r4, [pc, #48]	@ (8004ea8 <__libc_init_array+0x44>)
 8004e78:	f000 fc66 	bl	8005748 <_init>
 8004e7c:	1b64      	subs	r4, r4, r5
 8004e7e:	10a4      	asrs	r4, r4, #2
 8004e80:	2600      	movs	r6, #0
 8004e82:	42a6      	cmp	r6, r4
 8004e84:	d105      	bne.n	8004e92 <__libc_init_array+0x2e>
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8c:	4798      	blx	r3
 8004e8e:	3601      	adds	r6, #1
 8004e90:	e7ee      	b.n	8004e70 <__libc_init_array+0xc>
 8004e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e96:	4798      	blx	r3
 8004e98:	3601      	adds	r6, #1
 8004e9a:	e7f2      	b.n	8004e82 <__libc_init_array+0x1e>
 8004e9c:	0800580c 	.word	0x0800580c
 8004ea0:	0800580c 	.word	0x0800580c
 8004ea4:	0800580c 	.word	0x0800580c
 8004ea8:	08005810 	.word	0x08005810

08004eac <__retarget_lock_acquire_recursive>:
 8004eac:	4770      	bx	lr

08004eae <__retarget_lock_release_recursive>:
 8004eae:	4770      	bx	lr

08004eb0 <_free_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	d041      	beq.n	8004f3c <_free_r+0x8c>
 8004eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ebc:	1f0c      	subs	r4, r1, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfb8      	it	lt
 8004ec2:	18e4      	addlt	r4, r4, r3
 8004ec4:	f000 f8e0 	bl	8005088 <__malloc_lock>
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f40 <_free_r+0x90>)
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	b933      	cbnz	r3, 8004edc <_free_r+0x2c>
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	6014      	str	r4, [r2, #0]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed8:	f000 b8dc 	b.w	8005094 <__malloc_unlock>
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	d908      	bls.n	8004ef2 <_free_r+0x42>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf01      	itttt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	1809      	addeq	r1, r1, r0
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	e7ed      	b.n	8004ece <_free_r+0x1e>
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b10b      	cbz	r3, 8004efc <_free_r+0x4c>
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	d9fa      	bls.n	8004ef2 <_free_r+0x42>
 8004efc:	6811      	ldr	r1, [r2, #0]
 8004efe:	1850      	adds	r0, r2, r1
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d10b      	bne.n	8004f1c <_free_r+0x6c>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	4401      	add	r1, r0
 8004f08:	1850      	adds	r0, r2, r1
 8004f0a:	4283      	cmp	r3, r0
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	d1e0      	bne.n	8004ed2 <_free_r+0x22>
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	6053      	str	r3, [r2, #4]
 8004f16:	4408      	add	r0, r1
 8004f18:	6010      	str	r0, [r2, #0]
 8004f1a:	e7da      	b.n	8004ed2 <_free_r+0x22>
 8004f1c:	d902      	bls.n	8004f24 <_free_r+0x74>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	e7d6      	b.n	8004ed2 <_free_r+0x22>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	1821      	adds	r1, r4, r0
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf04      	itt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	bf04      	itt	eq
 8004f34:	1809      	addeq	r1, r1, r0
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	6054      	str	r4, [r2, #4]
 8004f3a:	e7ca      	b.n	8004ed2 <_free_r+0x22>
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000408 	.word	0x20000408

08004f44 <sbrk_aligned>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4e0f      	ldr	r6, [pc, #60]	@ (8004f84 <sbrk_aligned+0x40>)
 8004f48:	460c      	mov	r4, r1
 8004f4a:	6831      	ldr	r1, [r6, #0]
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	b911      	cbnz	r1, 8004f56 <sbrk_aligned+0x12>
 8004f50:	f000 fba6 	bl	80056a0 <_sbrk_r>
 8004f54:	6030      	str	r0, [r6, #0]
 8004f56:	4621      	mov	r1, r4
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 fba1 	bl	80056a0 <_sbrk_r>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d103      	bne.n	8004f6a <sbrk_aligned+0x26>
 8004f62:	f04f 34ff 	mov.w	r4, #4294967295
 8004f66:	4620      	mov	r0, r4
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	1cc4      	adds	r4, r0, #3
 8004f6c:	f024 0403 	bic.w	r4, r4, #3
 8004f70:	42a0      	cmp	r0, r4
 8004f72:	d0f8      	beq.n	8004f66 <sbrk_aligned+0x22>
 8004f74:	1a21      	subs	r1, r4, r0
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 fb92 	bl	80056a0 <_sbrk_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d1f2      	bne.n	8004f66 <sbrk_aligned+0x22>
 8004f80:	e7ef      	b.n	8004f62 <sbrk_aligned+0x1e>
 8004f82:	bf00      	nop
 8004f84:	20000404 	.word	0x20000404

08004f88 <_malloc_r>:
 8004f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	1ccd      	adds	r5, r1, #3
 8004f8e:	f025 0503 	bic.w	r5, r5, #3
 8004f92:	3508      	adds	r5, #8
 8004f94:	2d0c      	cmp	r5, #12
 8004f96:	bf38      	it	cc
 8004f98:	250c      	movcc	r5, #12
 8004f9a:	2d00      	cmp	r5, #0
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	db01      	blt.n	8004fa4 <_malloc_r+0x1c>
 8004fa0:	42a9      	cmp	r1, r5
 8004fa2:	d904      	bls.n	8004fae <_malloc_r+0x26>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005084 <_malloc_r+0xfc>
 8004fb2:	f000 f869 	bl	8005088 <__malloc_lock>
 8004fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fba:	461c      	mov	r4, r3
 8004fbc:	bb44      	cbnz	r4, 8005010 <_malloc_r+0x88>
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7ff ffbf 	bl	8004f44 <sbrk_aligned>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	4604      	mov	r4, r0
 8004fca:	d158      	bne.n	800507e <_malloc_r+0xf6>
 8004fcc:	f8d8 4000 	ldr.w	r4, [r8]
 8004fd0:	4627      	mov	r7, r4
 8004fd2:	2f00      	cmp	r7, #0
 8004fd4:	d143      	bne.n	800505e <_malloc_r+0xd6>
 8004fd6:	2c00      	cmp	r4, #0
 8004fd8:	d04b      	beq.n	8005072 <_malloc_r+0xea>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	4639      	mov	r1, r7
 8004fde:	4630      	mov	r0, r6
 8004fe0:	eb04 0903 	add.w	r9, r4, r3
 8004fe4:	f000 fb5c 	bl	80056a0 <_sbrk_r>
 8004fe8:	4581      	cmp	r9, r0
 8004fea:	d142      	bne.n	8005072 <_malloc_r+0xea>
 8004fec:	6821      	ldr	r1, [r4, #0]
 8004fee:	1a6d      	subs	r5, r5, r1
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7ff ffa6 	bl	8004f44 <sbrk_aligned>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d03a      	beq.n	8005072 <_malloc_r+0xea>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	442b      	add	r3, r5
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	f8d8 3000 	ldr.w	r3, [r8]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	bb62      	cbnz	r2, 8005064 <_malloc_r+0xdc>
 800500a:	f8c8 7000 	str.w	r7, [r8]
 800500e:	e00f      	b.n	8005030 <_malloc_r+0xa8>
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	1b52      	subs	r2, r2, r5
 8005014:	d420      	bmi.n	8005058 <_malloc_r+0xd0>
 8005016:	2a0b      	cmp	r2, #11
 8005018:	d917      	bls.n	800504a <_malloc_r+0xc2>
 800501a:	1961      	adds	r1, r4, r5
 800501c:	42a3      	cmp	r3, r4
 800501e:	6025      	str	r5, [r4, #0]
 8005020:	bf18      	it	ne
 8005022:	6059      	strne	r1, [r3, #4]
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	bf08      	it	eq
 8005028:	f8c8 1000 	streq.w	r1, [r8]
 800502c:	5162      	str	r2, [r4, r5]
 800502e:	604b      	str	r3, [r1, #4]
 8005030:	4630      	mov	r0, r6
 8005032:	f000 f82f 	bl	8005094 <__malloc_unlock>
 8005036:	f104 000b 	add.w	r0, r4, #11
 800503a:	1d23      	adds	r3, r4, #4
 800503c:	f020 0007 	bic.w	r0, r0, #7
 8005040:	1ac2      	subs	r2, r0, r3
 8005042:	bf1c      	itt	ne
 8005044:	1a1b      	subne	r3, r3, r0
 8005046:	50a3      	strne	r3, [r4, r2]
 8005048:	e7af      	b.n	8004faa <_malloc_r+0x22>
 800504a:	6862      	ldr	r2, [r4, #4]
 800504c:	42a3      	cmp	r3, r4
 800504e:	bf0c      	ite	eq
 8005050:	f8c8 2000 	streq.w	r2, [r8]
 8005054:	605a      	strne	r2, [r3, #4]
 8005056:	e7eb      	b.n	8005030 <_malloc_r+0xa8>
 8005058:	4623      	mov	r3, r4
 800505a:	6864      	ldr	r4, [r4, #4]
 800505c:	e7ae      	b.n	8004fbc <_malloc_r+0x34>
 800505e:	463c      	mov	r4, r7
 8005060:	687f      	ldr	r7, [r7, #4]
 8005062:	e7b6      	b.n	8004fd2 <_malloc_r+0x4a>
 8005064:	461a      	mov	r2, r3
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	42a3      	cmp	r3, r4
 800506a:	d1fb      	bne.n	8005064 <_malloc_r+0xdc>
 800506c:	2300      	movs	r3, #0
 800506e:	6053      	str	r3, [r2, #4]
 8005070:	e7de      	b.n	8005030 <_malloc_r+0xa8>
 8005072:	230c      	movs	r3, #12
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	4630      	mov	r0, r6
 8005078:	f000 f80c 	bl	8005094 <__malloc_unlock>
 800507c:	e794      	b.n	8004fa8 <_malloc_r+0x20>
 800507e:	6005      	str	r5, [r0, #0]
 8005080:	e7d6      	b.n	8005030 <_malloc_r+0xa8>
 8005082:	bf00      	nop
 8005084:	20000408 	.word	0x20000408

08005088 <__malloc_lock>:
 8005088:	4801      	ldr	r0, [pc, #4]	@ (8005090 <__malloc_lock+0x8>)
 800508a:	f7ff bf0f 	b.w	8004eac <__retarget_lock_acquire_recursive>
 800508e:	bf00      	nop
 8005090:	20000400 	.word	0x20000400

08005094 <__malloc_unlock>:
 8005094:	4801      	ldr	r0, [pc, #4]	@ (800509c <__malloc_unlock+0x8>)
 8005096:	f7ff bf0a 	b.w	8004eae <__retarget_lock_release_recursive>
 800509a:	bf00      	nop
 800509c:	20000400 	.word	0x20000400

080050a0 <__ssputs_r>:
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	688e      	ldr	r6, [r1, #8]
 80050a6:	461f      	mov	r7, r3
 80050a8:	42be      	cmp	r6, r7
 80050aa:	680b      	ldr	r3, [r1, #0]
 80050ac:	4682      	mov	sl, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	4690      	mov	r8, r2
 80050b2:	d82d      	bhi.n	8005110 <__ssputs_r+0x70>
 80050b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050bc:	d026      	beq.n	800510c <__ssputs_r+0x6c>
 80050be:	6965      	ldr	r5, [r4, #20]
 80050c0:	6909      	ldr	r1, [r1, #16]
 80050c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050c6:	eba3 0901 	sub.w	r9, r3, r1
 80050ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050ce:	1c7b      	adds	r3, r7, #1
 80050d0:	444b      	add	r3, r9
 80050d2:	106d      	asrs	r5, r5, #1
 80050d4:	429d      	cmp	r5, r3
 80050d6:	bf38      	it	cc
 80050d8:	461d      	movcc	r5, r3
 80050da:	0553      	lsls	r3, r2, #21
 80050dc:	d527      	bpl.n	800512e <__ssputs_r+0x8e>
 80050de:	4629      	mov	r1, r5
 80050e0:	f7ff ff52 	bl	8004f88 <_malloc_r>
 80050e4:	4606      	mov	r6, r0
 80050e6:	b360      	cbz	r0, 8005142 <__ssputs_r+0xa2>
 80050e8:	6921      	ldr	r1, [r4, #16]
 80050ea:	464a      	mov	r2, r9
 80050ec:	f000 fae8 	bl	80056c0 <memcpy>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	6126      	str	r6, [r4, #16]
 80050fe:	6165      	str	r5, [r4, #20]
 8005100:	444e      	add	r6, r9
 8005102:	eba5 0509 	sub.w	r5, r5, r9
 8005106:	6026      	str	r6, [r4, #0]
 8005108:	60a5      	str	r5, [r4, #8]
 800510a:	463e      	mov	r6, r7
 800510c:	42be      	cmp	r6, r7
 800510e:	d900      	bls.n	8005112 <__ssputs_r+0x72>
 8005110:	463e      	mov	r6, r7
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	4632      	mov	r2, r6
 8005116:	4641      	mov	r1, r8
 8005118:	f000 faa8 	bl	800566c <memmove>
 800511c:	68a3      	ldr	r3, [r4, #8]
 800511e:	1b9b      	subs	r3, r3, r6
 8005120:	60a3      	str	r3, [r4, #8]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	4433      	add	r3, r6
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	2000      	movs	r0, #0
 800512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512e:	462a      	mov	r2, r5
 8005130:	f000 fad4 	bl	80056dc <_realloc_r>
 8005134:	4606      	mov	r6, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	d1e0      	bne.n	80050fc <__ssputs_r+0x5c>
 800513a:	6921      	ldr	r1, [r4, #16]
 800513c:	4650      	mov	r0, sl
 800513e:	f7ff feb7 	bl	8004eb0 <_free_r>
 8005142:	230c      	movs	r3, #12
 8005144:	f8ca 3000 	str.w	r3, [sl]
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e7e9      	b.n	800512a <__ssputs_r+0x8a>
	...

08005158 <_svfiprintf_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	4698      	mov	r8, r3
 800515e:	898b      	ldrh	r3, [r1, #12]
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	b09d      	sub	sp, #116	@ 0x74
 8005164:	4607      	mov	r7, r0
 8005166:	460d      	mov	r5, r1
 8005168:	4614      	mov	r4, r2
 800516a:	d510      	bpl.n	800518e <_svfiprintf_r+0x36>
 800516c:	690b      	ldr	r3, [r1, #16]
 800516e:	b973      	cbnz	r3, 800518e <_svfiprintf_r+0x36>
 8005170:	2140      	movs	r1, #64	@ 0x40
 8005172:	f7ff ff09 	bl	8004f88 <_malloc_r>
 8005176:	6028      	str	r0, [r5, #0]
 8005178:	6128      	str	r0, [r5, #16]
 800517a:	b930      	cbnz	r0, 800518a <_svfiprintf_r+0x32>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	b01d      	add	sp, #116	@ 0x74
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518a:	2340      	movs	r3, #64	@ 0x40
 800518c:	616b      	str	r3, [r5, #20]
 800518e:	2300      	movs	r3, #0
 8005190:	9309      	str	r3, [sp, #36]	@ 0x24
 8005192:	2320      	movs	r3, #32
 8005194:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005198:	f8cd 800c 	str.w	r8, [sp, #12]
 800519c:	2330      	movs	r3, #48	@ 0x30
 800519e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800533c <_svfiprintf_r+0x1e4>
 80051a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051a6:	f04f 0901 	mov.w	r9, #1
 80051aa:	4623      	mov	r3, r4
 80051ac:	469a      	mov	sl, r3
 80051ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051b2:	b10a      	cbz	r2, 80051b8 <_svfiprintf_r+0x60>
 80051b4:	2a25      	cmp	r2, #37	@ 0x25
 80051b6:	d1f9      	bne.n	80051ac <_svfiprintf_r+0x54>
 80051b8:	ebba 0b04 	subs.w	fp, sl, r4
 80051bc:	d00b      	beq.n	80051d6 <_svfiprintf_r+0x7e>
 80051be:	465b      	mov	r3, fp
 80051c0:	4622      	mov	r2, r4
 80051c2:	4629      	mov	r1, r5
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff ff6b 	bl	80050a0 <__ssputs_r>
 80051ca:	3001      	adds	r0, #1
 80051cc:	f000 80a7 	beq.w	800531e <_svfiprintf_r+0x1c6>
 80051d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051d2:	445a      	add	r2, fp
 80051d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051d6:	f89a 3000 	ldrb.w	r3, [sl]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 809f 	beq.w	800531e <_svfiprintf_r+0x1c6>
 80051e0:	2300      	movs	r3, #0
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295
 80051e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ea:	f10a 0a01 	add.w	sl, sl, #1
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	9307      	str	r3, [sp, #28]
 80051f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80051f8:	4654      	mov	r4, sl
 80051fa:	2205      	movs	r2, #5
 80051fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005200:	484e      	ldr	r0, [pc, #312]	@ (800533c <_svfiprintf_r+0x1e4>)
 8005202:	f7fa ffe5 	bl	80001d0 <memchr>
 8005206:	9a04      	ldr	r2, [sp, #16]
 8005208:	b9d8      	cbnz	r0, 8005242 <_svfiprintf_r+0xea>
 800520a:	06d0      	lsls	r0, r2, #27
 800520c:	bf44      	itt	mi
 800520e:	2320      	movmi	r3, #32
 8005210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005214:	0711      	lsls	r1, r2, #28
 8005216:	bf44      	itt	mi
 8005218:	232b      	movmi	r3, #43	@ 0x2b
 800521a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800521e:	f89a 3000 	ldrb.w	r3, [sl]
 8005222:	2b2a      	cmp	r3, #42	@ 0x2a
 8005224:	d015      	beq.n	8005252 <_svfiprintf_r+0xfa>
 8005226:	9a07      	ldr	r2, [sp, #28]
 8005228:	4654      	mov	r4, sl
 800522a:	2000      	movs	r0, #0
 800522c:	f04f 0c0a 	mov.w	ip, #10
 8005230:	4621      	mov	r1, r4
 8005232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005236:	3b30      	subs	r3, #48	@ 0x30
 8005238:	2b09      	cmp	r3, #9
 800523a:	d94b      	bls.n	80052d4 <_svfiprintf_r+0x17c>
 800523c:	b1b0      	cbz	r0, 800526c <_svfiprintf_r+0x114>
 800523e:	9207      	str	r2, [sp, #28]
 8005240:	e014      	b.n	800526c <_svfiprintf_r+0x114>
 8005242:	eba0 0308 	sub.w	r3, r0, r8
 8005246:	fa09 f303 	lsl.w	r3, r9, r3
 800524a:	4313      	orrs	r3, r2
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	46a2      	mov	sl, r4
 8005250:	e7d2      	b.n	80051f8 <_svfiprintf_r+0xa0>
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	1d19      	adds	r1, r3, #4
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	9103      	str	r1, [sp, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	bfbb      	ittet	lt
 800525e:	425b      	neglt	r3, r3
 8005260:	f042 0202 	orrlt.w	r2, r2, #2
 8005264:	9307      	strge	r3, [sp, #28]
 8005266:	9307      	strlt	r3, [sp, #28]
 8005268:	bfb8      	it	lt
 800526a:	9204      	strlt	r2, [sp, #16]
 800526c:	7823      	ldrb	r3, [r4, #0]
 800526e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005270:	d10a      	bne.n	8005288 <_svfiprintf_r+0x130>
 8005272:	7863      	ldrb	r3, [r4, #1]
 8005274:	2b2a      	cmp	r3, #42	@ 0x2a
 8005276:	d132      	bne.n	80052de <_svfiprintf_r+0x186>
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	9203      	str	r2, [sp, #12]
 8005280:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005284:	3402      	adds	r4, #2
 8005286:	9305      	str	r3, [sp, #20]
 8005288:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800534c <_svfiprintf_r+0x1f4>
 800528c:	7821      	ldrb	r1, [r4, #0]
 800528e:	2203      	movs	r2, #3
 8005290:	4650      	mov	r0, sl
 8005292:	f7fa ff9d 	bl	80001d0 <memchr>
 8005296:	b138      	cbz	r0, 80052a8 <_svfiprintf_r+0x150>
 8005298:	9b04      	ldr	r3, [sp, #16]
 800529a:	eba0 000a 	sub.w	r0, r0, sl
 800529e:	2240      	movs	r2, #64	@ 0x40
 80052a0:	4082      	lsls	r2, r0
 80052a2:	4313      	orrs	r3, r2
 80052a4:	3401      	adds	r4, #1
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ac:	4824      	ldr	r0, [pc, #144]	@ (8005340 <_svfiprintf_r+0x1e8>)
 80052ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052b2:	2206      	movs	r2, #6
 80052b4:	f7fa ff8c 	bl	80001d0 <memchr>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d036      	beq.n	800532a <_svfiprintf_r+0x1d2>
 80052bc:	4b21      	ldr	r3, [pc, #132]	@ (8005344 <_svfiprintf_r+0x1ec>)
 80052be:	bb1b      	cbnz	r3, 8005308 <_svfiprintf_r+0x1b0>
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	3307      	adds	r3, #7
 80052c4:	f023 0307 	bic.w	r3, r3, #7
 80052c8:	3308      	adds	r3, #8
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ce:	4433      	add	r3, r6
 80052d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d2:	e76a      	b.n	80051aa <_svfiprintf_r+0x52>
 80052d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d8:	460c      	mov	r4, r1
 80052da:	2001      	movs	r0, #1
 80052dc:	e7a8      	b.n	8005230 <_svfiprintf_r+0xd8>
 80052de:	2300      	movs	r3, #0
 80052e0:	3401      	adds	r4, #1
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f04f 0c0a 	mov.w	ip, #10
 80052ea:	4620      	mov	r0, r4
 80052ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052f0:	3a30      	subs	r2, #48	@ 0x30
 80052f2:	2a09      	cmp	r2, #9
 80052f4:	d903      	bls.n	80052fe <_svfiprintf_r+0x1a6>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0c6      	beq.n	8005288 <_svfiprintf_r+0x130>
 80052fa:	9105      	str	r1, [sp, #20]
 80052fc:	e7c4      	b.n	8005288 <_svfiprintf_r+0x130>
 80052fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005302:	4604      	mov	r4, r0
 8005304:	2301      	movs	r3, #1
 8005306:	e7f0      	b.n	80052ea <_svfiprintf_r+0x192>
 8005308:	ab03      	add	r3, sp, #12
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	462a      	mov	r2, r5
 800530e:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <_svfiprintf_r+0x1f0>)
 8005310:	a904      	add	r1, sp, #16
 8005312:	4638      	mov	r0, r7
 8005314:	f3af 8000 	nop.w
 8005318:	1c42      	adds	r2, r0, #1
 800531a:	4606      	mov	r6, r0
 800531c:	d1d6      	bne.n	80052cc <_svfiprintf_r+0x174>
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	065b      	lsls	r3, r3, #25
 8005322:	f53f af2d 	bmi.w	8005180 <_svfiprintf_r+0x28>
 8005326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005328:	e72c      	b.n	8005184 <_svfiprintf_r+0x2c>
 800532a:	ab03      	add	r3, sp, #12
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	462a      	mov	r2, r5
 8005330:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <_svfiprintf_r+0x1f0>)
 8005332:	a904      	add	r1, sp, #16
 8005334:	4638      	mov	r0, r7
 8005336:	f000 f879 	bl	800542c <_printf_i>
 800533a:	e7ed      	b.n	8005318 <_svfiprintf_r+0x1c0>
 800533c:	080057d0 	.word	0x080057d0
 8005340:	080057da 	.word	0x080057da
 8005344:	00000000 	.word	0x00000000
 8005348:	080050a1 	.word	0x080050a1
 800534c:	080057d6 	.word	0x080057d6

08005350 <_printf_common>:
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	4616      	mov	r6, r2
 8005356:	4698      	mov	r8, r3
 8005358:	688a      	ldr	r2, [r1, #8]
 800535a:	690b      	ldr	r3, [r1, #16]
 800535c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005360:	4293      	cmp	r3, r2
 8005362:	bfb8      	it	lt
 8005364:	4613      	movlt	r3, r2
 8005366:	6033      	str	r3, [r6, #0]
 8005368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800536c:	4607      	mov	r7, r0
 800536e:	460c      	mov	r4, r1
 8005370:	b10a      	cbz	r2, 8005376 <_printf_common+0x26>
 8005372:	3301      	adds	r3, #1
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	0699      	lsls	r1, r3, #26
 800537a:	bf42      	ittt	mi
 800537c:	6833      	ldrmi	r3, [r6, #0]
 800537e:	3302      	addmi	r3, #2
 8005380:	6033      	strmi	r3, [r6, #0]
 8005382:	6825      	ldr	r5, [r4, #0]
 8005384:	f015 0506 	ands.w	r5, r5, #6
 8005388:	d106      	bne.n	8005398 <_printf_common+0x48>
 800538a:	f104 0a19 	add.w	sl, r4, #25
 800538e:	68e3      	ldr	r3, [r4, #12]
 8005390:	6832      	ldr	r2, [r6, #0]
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	42ab      	cmp	r3, r5
 8005396:	dc26      	bgt.n	80053e6 <_printf_common+0x96>
 8005398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	3b00      	subs	r3, #0
 80053a0:	bf18      	it	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	0692      	lsls	r2, r2, #26
 80053a6:	d42b      	bmi.n	8005400 <_printf_common+0xb0>
 80053a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053ac:	4641      	mov	r1, r8
 80053ae:	4638      	mov	r0, r7
 80053b0:	47c8      	blx	r9
 80053b2:	3001      	adds	r0, #1
 80053b4:	d01e      	beq.n	80053f4 <_printf_common+0xa4>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	6922      	ldr	r2, [r4, #16]
 80053ba:	f003 0306 	and.w	r3, r3, #6
 80053be:	2b04      	cmp	r3, #4
 80053c0:	bf02      	ittt	eq
 80053c2:	68e5      	ldreq	r5, [r4, #12]
 80053c4:	6833      	ldreq	r3, [r6, #0]
 80053c6:	1aed      	subeq	r5, r5, r3
 80053c8:	68a3      	ldr	r3, [r4, #8]
 80053ca:	bf0c      	ite	eq
 80053cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d0:	2500      	movne	r5, #0
 80053d2:	4293      	cmp	r3, r2
 80053d4:	bfc4      	itt	gt
 80053d6:	1a9b      	subgt	r3, r3, r2
 80053d8:	18ed      	addgt	r5, r5, r3
 80053da:	2600      	movs	r6, #0
 80053dc:	341a      	adds	r4, #26
 80053de:	42b5      	cmp	r5, r6
 80053e0:	d11a      	bne.n	8005418 <_printf_common+0xc8>
 80053e2:	2000      	movs	r0, #0
 80053e4:	e008      	b.n	80053f8 <_printf_common+0xa8>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4652      	mov	r2, sl
 80053ea:	4641      	mov	r1, r8
 80053ec:	4638      	mov	r0, r7
 80053ee:	47c8      	blx	r9
 80053f0:	3001      	adds	r0, #1
 80053f2:	d103      	bne.n	80053fc <_printf_common+0xac>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fc:	3501      	adds	r5, #1
 80053fe:	e7c6      	b.n	800538e <_printf_common+0x3e>
 8005400:	18e1      	adds	r1, r4, r3
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	2030      	movs	r0, #48	@ 0x30
 8005406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800540a:	4422      	add	r2, r4
 800540c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005414:	3302      	adds	r3, #2
 8005416:	e7c7      	b.n	80053a8 <_printf_common+0x58>
 8005418:	2301      	movs	r3, #1
 800541a:	4622      	mov	r2, r4
 800541c:	4641      	mov	r1, r8
 800541e:	4638      	mov	r0, r7
 8005420:	47c8      	blx	r9
 8005422:	3001      	adds	r0, #1
 8005424:	d0e6      	beq.n	80053f4 <_printf_common+0xa4>
 8005426:	3601      	adds	r6, #1
 8005428:	e7d9      	b.n	80053de <_printf_common+0x8e>
	...

0800542c <_printf_i>:
 800542c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	7e0f      	ldrb	r7, [r1, #24]
 8005432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005434:	2f78      	cmp	r7, #120	@ 0x78
 8005436:	4691      	mov	r9, r2
 8005438:	4680      	mov	r8, r0
 800543a:	460c      	mov	r4, r1
 800543c:	469a      	mov	sl, r3
 800543e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005442:	d807      	bhi.n	8005454 <_printf_i+0x28>
 8005444:	2f62      	cmp	r7, #98	@ 0x62
 8005446:	d80a      	bhi.n	800545e <_printf_i+0x32>
 8005448:	2f00      	cmp	r7, #0
 800544a:	f000 80d2 	beq.w	80055f2 <_printf_i+0x1c6>
 800544e:	2f58      	cmp	r7, #88	@ 0x58
 8005450:	f000 80b9 	beq.w	80055c6 <_printf_i+0x19a>
 8005454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800545c:	e03a      	b.n	80054d4 <_printf_i+0xa8>
 800545e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005462:	2b15      	cmp	r3, #21
 8005464:	d8f6      	bhi.n	8005454 <_printf_i+0x28>
 8005466:	a101      	add	r1, pc, #4	@ (adr r1, 800546c <_printf_i+0x40>)
 8005468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800546c:	080054c5 	.word	0x080054c5
 8005470:	080054d9 	.word	0x080054d9
 8005474:	08005455 	.word	0x08005455
 8005478:	08005455 	.word	0x08005455
 800547c:	08005455 	.word	0x08005455
 8005480:	08005455 	.word	0x08005455
 8005484:	080054d9 	.word	0x080054d9
 8005488:	08005455 	.word	0x08005455
 800548c:	08005455 	.word	0x08005455
 8005490:	08005455 	.word	0x08005455
 8005494:	08005455 	.word	0x08005455
 8005498:	080055d9 	.word	0x080055d9
 800549c:	08005503 	.word	0x08005503
 80054a0:	08005593 	.word	0x08005593
 80054a4:	08005455 	.word	0x08005455
 80054a8:	08005455 	.word	0x08005455
 80054ac:	080055fb 	.word	0x080055fb
 80054b0:	08005455 	.word	0x08005455
 80054b4:	08005503 	.word	0x08005503
 80054b8:	08005455 	.word	0x08005455
 80054bc:	08005455 	.word	0x08005455
 80054c0:	0800559b 	.word	0x0800559b
 80054c4:	6833      	ldr	r3, [r6, #0]
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6032      	str	r2, [r6, #0]
 80054cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054d4:	2301      	movs	r3, #1
 80054d6:	e09d      	b.n	8005614 <_printf_i+0x1e8>
 80054d8:	6833      	ldr	r3, [r6, #0]
 80054da:	6820      	ldr	r0, [r4, #0]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	6031      	str	r1, [r6, #0]
 80054e0:	0606      	lsls	r6, r0, #24
 80054e2:	d501      	bpl.n	80054e8 <_printf_i+0xbc>
 80054e4:	681d      	ldr	r5, [r3, #0]
 80054e6:	e003      	b.n	80054f0 <_printf_i+0xc4>
 80054e8:	0645      	lsls	r5, r0, #25
 80054ea:	d5fb      	bpl.n	80054e4 <_printf_i+0xb8>
 80054ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	da03      	bge.n	80054fc <_printf_i+0xd0>
 80054f4:	232d      	movs	r3, #45	@ 0x2d
 80054f6:	426d      	negs	r5, r5
 80054f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054fc:	4859      	ldr	r0, [pc, #356]	@ (8005664 <_printf_i+0x238>)
 80054fe:	230a      	movs	r3, #10
 8005500:	e011      	b.n	8005526 <_printf_i+0xfa>
 8005502:	6821      	ldr	r1, [r4, #0]
 8005504:	6833      	ldr	r3, [r6, #0]
 8005506:	0608      	lsls	r0, r1, #24
 8005508:	f853 5b04 	ldr.w	r5, [r3], #4
 800550c:	d402      	bmi.n	8005514 <_printf_i+0xe8>
 800550e:	0649      	lsls	r1, r1, #25
 8005510:	bf48      	it	mi
 8005512:	b2ad      	uxthmi	r5, r5
 8005514:	2f6f      	cmp	r7, #111	@ 0x6f
 8005516:	4853      	ldr	r0, [pc, #332]	@ (8005664 <_printf_i+0x238>)
 8005518:	6033      	str	r3, [r6, #0]
 800551a:	bf14      	ite	ne
 800551c:	230a      	movne	r3, #10
 800551e:	2308      	moveq	r3, #8
 8005520:	2100      	movs	r1, #0
 8005522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005526:	6866      	ldr	r6, [r4, #4]
 8005528:	60a6      	str	r6, [r4, #8]
 800552a:	2e00      	cmp	r6, #0
 800552c:	bfa2      	ittt	ge
 800552e:	6821      	ldrge	r1, [r4, #0]
 8005530:	f021 0104 	bicge.w	r1, r1, #4
 8005534:	6021      	strge	r1, [r4, #0]
 8005536:	b90d      	cbnz	r5, 800553c <_printf_i+0x110>
 8005538:	2e00      	cmp	r6, #0
 800553a:	d04b      	beq.n	80055d4 <_printf_i+0x1a8>
 800553c:	4616      	mov	r6, r2
 800553e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005542:	fb03 5711 	mls	r7, r3, r1, r5
 8005546:	5dc7      	ldrb	r7, [r0, r7]
 8005548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800554c:	462f      	mov	r7, r5
 800554e:	42bb      	cmp	r3, r7
 8005550:	460d      	mov	r5, r1
 8005552:	d9f4      	bls.n	800553e <_printf_i+0x112>
 8005554:	2b08      	cmp	r3, #8
 8005556:	d10b      	bne.n	8005570 <_printf_i+0x144>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	07df      	lsls	r7, r3, #31
 800555c:	d508      	bpl.n	8005570 <_printf_i+0x144>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4299      	cmp	r1, r3
 8005564:	bfde      	ittt	le
 8005566:	2330      	movle	r3, #48	@ 0x30
 8005568:	f806 3c01 	strble.w	r3, [r6, #-1]
 800556c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005570:	1b92      	subs	r2, r2, r6
 8005572:	6122      	str	r2, [r4, #16]
 8005574:	f8cd a000 	str.w	sl, [sp]
 8005578:	464b      	mov	r3, r9
 800557a:	aa03      	add	r2, sp, #12
 800557c:	4621      	mov	r1, r4
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fee6 	bl	8005350 <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	d14a      	bne.n	800561e <_printf_i+0x1f2>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b004      	add	sp, #16
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	f043 0320 	orr.w	r3, r3, #32
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	4833      	ldr	r0, [pc, #204]	@ (8005668 <_printf_i+0x23c>)
 800559c:	2778      	movs	r7, #120	@ 0x78
 800559e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	6831      	ldr	r1, [r6, #0]
 80055a6:	061f      	lsls	r7, r3, #24
 80055a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80055ac:	d402      	bmi.n	80055b4 <_printf_i+0x188>
 80055ae:	065f      	lsls	r7, r3, #25
 80055b0:	bf48      	it	mi
 80055b2:	b2ad      	uxthmi	r5, r5
 80055b4:	6031      	str	r1, [r6, #0]
 80055b6:	07d9      	lsls	r1, r3, #31
 80055b8:	bf44      	itt	mi
 80055ba:	f043 0320 	orrmi.w	r3, r3, #32
 80055be:	6023      	strmi	r3, [r4, #0]
 80055c0:	b11d      	cbz	r5, 80055ca <_printf_i+0x19e>
 80055c2:	2310      	movs	r3, #16
 80055c4:	e7ac      	b.n	8005520 <_printf_i+0xf4>
 80055c6:	4827      	ldr	r0, [pc, #156]	@ (8005664 <_printf_i+0x238>)
 80055c8:	e7e9      	b.n	800559e <_printf_i+0x172>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	f023 0320 	bic.w	r3, r3, #32
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	e7f6      	b.n	80055c2 <_printf_i+0x196>
 80055d4:	4616      	mov	r6, r2
 80055d6:	e7bd      	b.n	8005554 <_printf_i+0x128>
 80055d8:	6833      	ldr	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	6961      	ldr	r1, [r4, #20]
 80055de:	1d18      	adds	r0, r3, #4
 80055e0:	6030      	str	r0, [r6, #0]
 80055e2:	062e      	lsls	r6, r5, #24
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0x1c0>
 80055e8:	6019      	str	r1, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0x1c6>
 80055ec:	0668      	lsls	r0, r5, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0x1bc>
 80055f0:	8019      	strh	r1, [r3, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	4616      	mov	r6, r2
 80055f8:	e7bc      	b.n	8005574 <_printf_i+0x148>
 80055fa:	6833      	ldr	r3, [r6, #0]
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	6032      	str	r2, [r6, #0]
 8005600:	681e      	ldr	r6, [r3, #0]
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	2100      	movs	r1, #0
 8005606:	4630      	mov	r0, r6
 8005608:	f7fa fde2 	bl	80001d0 <memchr>
 800560c:	b108      	cbz	r0, 8005612 <_printf_i+0x1e6>
 800560e:	1b80      	subs	r0, r0, r6
 8005610:	6060      	str	r0, [r4, #4]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	2300      	movs	r3, #0
 8005618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800561c:	e7aa      	b.n	8005574 <_printf_i+0x148>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	4632      	mov	r2, r6
 8005622:	4649      	mov	r1, r9
 8005624:	4640      	mov	r0, r8
 8005626:	47d0      	blx	sl
 8005628:	3001      	adds	r0, #1
 800562a:	d0ad      	beq.n	8005588 <_printf_i+0x15c>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	079b      	lsls	r3, r3, #30
 8005630:	d413      	bmi.n	800565a <_printf_i+0x22e>
 8005632:	68e0      	ldr	r0, [r4, #12]
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	4298      	cmp	r0, r3
 8005638:	bfb8      	it	lt
 800563a:	4618      	movlt	r0, r3
 800563c:	e7a6      	b.n	800558c <_printf_i+0x160>
 800563e:	2301      	movs	r3, #1
 8005640:	4632      	mov	r2, r6
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	47d0      	blx	sl
 8005648:	3001      	adds	r0, #1
 800564a:	d09d      	beq.n	8005588 <_printf_i+0x15c>
 800564c:	3501      	adds	r5, #1
 800564e:	68e3      	ldr	r3, [r4, #12]
 8005650:	9903      	ldr	r1, [sp, #12]
 8005652:	1a5b      	subs	r3, r3, r1
 8005654:	42ab      	cmp	r3, r5
 8005656:	dcf2      	bgt.n	800563e <_printf_i+0x212>
 8005658:	e7eb      	b.n	8005632 <_printf_i+0x206>
 800565a:	2500      	movs	r5, #0
 800565c:	f104 0619 	add.w	r6, r4, #25
 8005660:	e7f5      	b.n	800564e <_printf_i+0x222>
 8005662:	bf00      	nop
 8005664:	080057e1 	.word	0x080057e1
 8005668:	080057f2 	.word	0x080057f2

0800566c <memmove>:
 800566c:	4288      	cmp	r0, r1
 800566e:	b510      	push	{r4, lr}
 8005670:	eb01 0402 	add.w	r4, r1, r2
 8005674:	d902      	bls.n	800567c <memmove+0x10>
 8005676:	4284      	cmp	r4, r0
 8005678:	4623      	mov	r3, r4
 800567a:	d807      	bhi.n	800568c <memmove+0x20>
 800567c:	1e43      	subs	r3, r0, #1
 800567e:	42a1      	cmp	r1, r4
 8005680:	d008      	beq.n	8005694 <memmove+0x28>
 8005682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800568a:	e7f8      	b.n	800567e <memmove+0x12>
 800568c:	4402      	add	r2, r0
 800568e:	4601      	mov	r1, r0
 8005690:	428a      	cmp	r2, r1
 8005692:	d100      	bne.n	8005696 <memmove+0x2a>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800569a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800569e:	e7f7      	b.n	8005690 <memmove+0x24>

080056a0 <_sbrk_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d06      	ldr	r5, [pc, #24]	@ (80056bc <_sbrk_r+0x1c>)
 80056a4:	2300      	movs	r3, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	f7fb fb9a 	bl	8000de4 <_sbrk>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_sbrk_r+0x1a>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_sbrk_r+0x1a>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	200003fc 	.word	0x200003fc

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <_realloc_r>:
 80056dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e0:	4680      	mov	r8, r0
 80056e2:	4615      	mov	r5, r2
 80056e4:	460c      	mov	r4, r1
 80056e6:	b921      	cbnz	r1, 80056f2 <_realloc_r+0x16>
 80056e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ec:	4611      	mov	r1, r2
 80056ee:	f7ff bc4b 	b.w	8004f88 <_malloc_r>
 80056f2:	b92a      	cbnz	r2, 8005700 <_realloc_r+0x24>
 80056f4:	f7ff fbdc 	bl	8004eb0 <_free_r>
 80056f8:	2400      	movs	r4, #0
 80056fa:	4620      	mov	r0, r4
 80056fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005700:	f000 f81a 	bl	8005738 <_malloc_usable_size_r>
 8005704:	4285      	cmp	r5, r0
 8005706:	4606      	mov	r6, r0
 8005708:	d802      	bhi.n	8005710 <_realloc_r+0x34>
 800570a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800570e:	d8f4      	bhi.n	80056fa <_realloc_r+0x1e>
 8005710:	4629      	mov	r1, r5
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fc38 	bl	8004f88 <_malloc_r>
 8005718:	4607      	mov	r7, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d0ec      	beq.n	80056f8 <_realloc_r+0x1c>
 800571e:	42b5      	cmp	r5, r6
 8005720:	462a      	mov	r2, r5
 8005722:	4621      	mov	r1, r4
 8005724:	bf28      	it	cs
 8005726:	4632      	movcs	r2, r6
 8005728:	f7ff ffca 	bl	80056c0 <memcpy>
 800572c:	4621      	mov	r1, r4
 800572e:	4640      	mov	r0, r8
 8005730:	f7ff fbbe 	bl	8004eb0 <_free_r>
 8005734:	463c      	mov	r4, r7
 8005736:	e7e0      	b.n	80056fa <_realloc_r+0x1e>

08005738 <_malloc_usable_size_r>:
 8005738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573c:	1f18      	subs	r0, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	bfbc      	itt	lt
 8005742:	580b      	ldrlt	r3, [r1, r0]
 8005744:	18c0      	addlt	r0, r0, r3
 8005746:	4770      	bx	lr

08005748 <_init>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr

08005754 <_fini>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr
