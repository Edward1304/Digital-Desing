
Semaforo_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d68  08003d68  00004d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db0  08003db0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003db0  08003db0  00004db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db8  08003db8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003dc0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003dcc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003dcc  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010029  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb1  00000000  00000000  00015065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00017018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5a  00000000  00000000  00017e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f3b  00000000  00000000  000189f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d43  00000000  00000000  0003e92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9e2  00000000  00000000  0004f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  0013e098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00141d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d50 	.word	0x08003d50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d50 	.word	0x08003d50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	 if(GPIO_Pin == Button_Pin)
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004c8:	d102      	bne.n	80004d0 <HAL_GPIO_EXTI_Callback+0x18>
		 button_flag = FLAG_SET;
 80004ca:	4b04      	ldr	r3, [pc, #16]	@ (80004dc <HAL_GPIO_EXTI_Callback+0x24>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	20000148 	.word	0x20000148

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb94 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f822 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f942 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f910 	bl	8000714 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004f4:	f000 f86e 	bl	80005d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f8:	f000 f8bc 	bl	8000674 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  button_flag=FLAG_RELEASED;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <main+0x40>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
  timer_switch_flag=FLAG_RELEASED;
 8000502:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <main+0x44>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
  timer_indicator_flag=FLAG_RELEASED;
 8000508:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <main+0x48>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
  initialize_state_machine();
 800050e:	f000 f9a5 	bl	800085c <initialize_state_machine>
  HAL_TIM_Base_Start_IT(&htim3);
 8000512:	4806      	ldr	r0, [pc, #24]	@ (800052c <main+0x4c>)
 8000514:	f002 fa76 	bl	8002a04 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  check_state_machine();
 8000518:	f000 f9ac 	bl	8000874 <check_state_machine>
 800051c:	e7fc      	b.n	8000518 <main+0x38>
 800051e:	bf00      	nop
 8000520:	20000148 	.word	0x20000148
 8000524:	20000149 	.word	0x20000149
 8000528:	2000014a 	.word	0x2000014a
 800052c:	20000028 	.word	0x20000028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	@ 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	@ 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fbd9 	bl	8003cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000556:	f000 feeb 	bl	8001330 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f976 	bl	8000850 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f000 ff22 	bl	80013dc <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059e:	f000 f957 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 faea 	bl	8001b94 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f943 	bl	8000850 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	@ 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <MX_TIM3_Init+0x98>)
 80005f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000670 <MX_TIM3_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_TIM3_Init+0x98>)
 80005fa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_TIM3_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_TIM3_Init+0x98>)
 8000608:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800060c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_TIM3_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_TIM3_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800061a:	4814      	ldr	r0, [pc, #80]	@ (800066c <MX_TIM3_Init+0x98>)
 800061c:	f002 f99a 	bl	8002954 <HAL_TIM_Base_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000626:	f000 f913 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	480d      	ldr	r0, [pc, #52]	@ (800066c <MX_TIM3_Init+0x98>)
 8000638:	f002 fb5b 	bl	8002cf2 <HAL_TIM_ConfigClockSource>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000642:	f000 f905 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	@ (800066c <MX_TIM3_Init+0x98>)
 8000654:	f002 fd88 	bl	8003168 <HAL_TIMEx_MasterConfigSynchronization>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800065e:	f000 f8f7 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40000400 	.word	0x40000400

08000674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <MX_TIM4_Init+0x98>)
 8000694:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <MX_TIM4_Init+0x9c>)
 8000696:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <MX_TIM4_Init+0x98>)
 800069a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800069e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_TIM4_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6000-1;
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <MX_TIM4_Init+0x98>)
 80006a8:	f241 726f 	movw	r2, #5999	@ 0x176f
 80006ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_TIM4_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_TIM4_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006ba:	4814      	ldr	r0, [pc, #80]	@ (800070c <MX_TIM4_Init+0x98>)
 80006bc:	f002 f94a 	bl	8002954 <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80006c6:	f000 f8c3 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	480d      	ldr	r0, [pc, #52]	@ (800070c <MX_TIM4_Init+0x98>)
 80006d8:	f002 fb0b 	bl	8002cf2 <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80006e2:	f000 f8b5 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <MX_TIM4_Init+0x98>)
 80006f4:	f002 fd38 	bl	8003168 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80006fe:	f000 f8a7 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000074 	.word	0x20000074
 8000710:	40000800 	.word	0x40000800

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_USART2_UART_Init+0x5c>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000758:	f002 fdac 	bl	80032b4 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f875 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000c0 	.word	0x200000c0
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a2e      	ldr	r2, [pc, #184]	@ (8000848 <MX_GPIO_Init+0xd4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a28      	ldr	r2, [pc, #160]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b26      	ldr	r3, [pc, #152]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_GPIO_Init+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f000 fd45 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80007f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480f      	ldr	r0, [pc, #60]	@ (800084c <MX_GPIO_Init+0xd8>)
 800080e:	f000 fb8d 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000812:	2320      	movs	r3, #32
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082c:	f000 fb7e 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2028      	movs	r0, #40	@ 0x28
 8000836:	f000 fb42 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083a:	2028      	movs	r0, #40	@ 0x28
 800083c:	f000 fb5b 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	@ 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <Error_Handler+0x8>

0800085c <initialize_state_machine>:
extern flag_enum button_flag;
extern flag_enum timer_switch_flag;
extern flag_enum timer_indicator_flag;
extern TIM_HandleTypeDef htim3;

void initialize_state_machine(void){
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	state_machine = s0;
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <initialize_state_machine+0x14>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	2000014c 	.word	0x2000014c

08000874 <check_state_machine>:

void check_state_machine(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	switch(state_machine){
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <check_state_machine+0x24>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <check_state_machine+0x12>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d003      	beq.n	800088c <check_state_machine+0x18>
			break;
		case s1:
			s1_state_function();
			break;
		default:
			break;
 8000884:	e005      	b.n	8000892 <check_state_machine+0x1e>
			s0_state_function();
 8000886:	f000 f809 	bl	800089c <s0_state_function>
			break;
 800088a:	e002      	b.n	8000892 <check_state_machine+0x1e>
			s1_state_function();
 800088c:	f000 f83a 	bl	8000904 <s1_state_function>
			break;
 8000890:	bf00      	nop
	}
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000014c 	.word	0x2000014c

0800089c <s0_state_function>:

void s0_state_function(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if(timer_switch_flag==FLAG_SET){
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <s0_state_function+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d123      	bne.n	80008f0 <s0_state_function+0x54>
		timer_switch_flag=FLAG_RELEASED;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <s0_state_function+0x58>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008ae:	2120      	movs	r1, #32
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 fcfc 	bl	80012b0 <HAL_GPIO_TogglePin>
		counter_switch++;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <s0_state_function+0x5c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <s0_state_function+0x5c>)
 80008c2:	701a      	strb	r2, [r3, #0]
		if(counter_switch>=5){
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <s0_state_function+0x5c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d911      	bls.n	80008f0 <s0_state_function+0x54>
			state_machine=s1;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <s0_state_function+0x60>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
			counter_switch=0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <s0_state_function+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

			htim3.Init.Period = 5000-1;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <s0_state_function+0x64>)
 80008da:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008de:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <s0_state_function+0x64>)
 80008e2:	f002 f837 	bl	8002954 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <s0_state_function+0x54>
			  {
			    Error_Handler();
 80008ec:	f7ff ffb0 	bl	8000850 <Error_Handler>
//		button_flag = FLAG_RELEASED;
//
//		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//}

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000149 	.word	0x20000149
 80008f8:	2000014b 	.word	0x2000014b
 80008fc:	2000014c 	.word	0x2000014c
 8000900:	20000028 	.word	0x20000028

08000904 <s1_state_function>:

void s1_state_function(void){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	if(timer_switch_flag==FLAG_SET){
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <s1_state_function+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d123      	bne.n	8000958 <s1_state_function+0x54>
			timer_switch_flag=FLAG_RELEASED;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <s1_state_function+0x58>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000916:	2120      	movs	r1, #32
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fcc8 	bl	80012b0 <HAL_GPIO_TogglePin>
			counter_switch++;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <s1_state_function+0x5c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <s1_state_function+0x5c>)
 800092a:	701a      	strb	r2, [r3, #0]
			if(counter_switch>=6){
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <s1_state_function+0x5c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b05      	cmp	r3, #5
 8000932:	d911      	bls.n	8000958 <s1_state_function+0x54>
				state_machine=s0;
 8000934:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <s1_state_function+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
				counter_switch=0;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <s1_state_function+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]

				htim3.Init.Period = 20000-1;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <s1_state_function+0x64>)
 8000942:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000946:	60da      	str	r2, [r3, #12]
				if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <s1_state_function+0x64>)
 800094a:	f002 f803 	bl	8002954 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <s1_state_function+0x54>
				{
				  Error_Handler();
 8000954:	f7ff ff7c 	bl	8000850 <Error_Handler>
//		button_flag = FLAG_RELEASED;
//		state_machine=s2;
//			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//
//		}
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000149 	.word	0x20000149
 8000960:	2000014b 	.word	0x2000014b
 8000964:	2000014c 	.word	0x2000014c
 8000968:	20000028 	.word	0x20000028

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <HAL_MspInit+0x44>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	@ 0x60
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x44>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	@ 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <HAL_TIM_Base_MspInit+0x78>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d114      	bne.n	80009f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	201d      	movs	r0, #29
 80009e4:	f000 fa6b 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009e8:	201d      	movs	r0, #29
 80009ea:	f000 fa84 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009ee:	e018      	b.n	8000a22 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_TIM_Base_MspInit+0x80>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d113      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_TIM_Base_MspInit+0x7c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	201e      	movs	r0, #30
 8000a18:	f000 fa51 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a1c:	201e      	movs	r0, #30
 8000a1e:	f000 fa6a 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000400 	.word	0x40000400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40000800 	.word	0x40000800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2288      	movs	r2, #136	@ 0x88
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 f94c 	bl	8003cf6 <memset>
  if(huart->Instance==USART2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <HAL_UART_MspInit+0xb0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d13b      	bne.n	8000ae0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fab1 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a80:	f7ff fee6 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a88:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa0:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_UART_MspInit+0xb4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000acc:	2307      	movs	r3, #7
 8000ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f000 fa26 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ae0:	bf00      	nop
 8000ae2:	37b0      	adds	r7, #176	@ 0xb0
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f8bf 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b54:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <TIM3_IRQHandler+0x14>)
 8000b56:	f001 ffc5 	bl	8002ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  timer_switch_flag = FLAG_SET;
 8000b5a:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <TIM3_IRQHandler+0x18>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000028 	.word	0x20000028
 8000b68:	20000149 	.word	0x20000149

08000b6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <TIM4_IRQHandler+0x14>)
 8000b72:	f001 ffb7 	bl	8002ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  timer_indicator_flag = FLAG_SET;
 8000b76:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <TIM4_IRQHandler+0x18>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000074 	.word	0x20000074
 8000b84:	2000014a 	.word	0x2000014a

08000b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000b8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b90:	f000 fba8 	bl	80012e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 f88d 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fc77 	bl	80004e0 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	20000154 	.word	0x20000154

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_Init+0x3c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <HAL_Init+0x3c>)
 8000c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f93e 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f80f 	bl	8000c50 <HAL_InitTick>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	e001      	b.n	8000c42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3e:	f7ff fe95 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d023      	beq.n	8000cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_InitTick+0x70>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f949 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d809      	bhi.n	8000ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 f913 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_InitTick+0x74>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e007      	b.n	8000cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e001      	b.n	8000cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000150 	.word	0x20000150

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000150 	.word	0x20000150

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	@ (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e17f      	b.n	800123c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8171 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 0201 	and.w	r2, r3, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d118      	bne.n	800100c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	6939      	ldr	r1, [r7, #16]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80ac 	beq.w	8001236 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b5f      	ldr	r3, [pc, #380]	@ (800125c <HAL_GPIO_Init+0x330>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	4a5e      	ldr	r2, [pc, #376]	@ (800125c <HAL_GPIO_Init+0x330>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ea:	4b5c      	ldr	r3, [pc, #368]	@ (800125c <HAL_GPIO_Init+0x330>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001260 <HAL_GPIO_Init+0x334>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x242>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4f      	ldr	r2, [pc, #316]	@ (8001264 <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4e      	ldr	r2, [pc, #312]	@ (8001268 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4d      	ldr	r2, [pc, #308]	@ (800126c <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4c      	ldr	r2, [pc, #304]	@ (8001270 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4b      	ldr	r2, [pc, #300]	@ (8001274 <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4a      	ldr	r2, [pc, #296]	@ (8001278 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x22a>
 8001152:	2306      	movs	r3, #6
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001156:	2307      	movs	r3, #7
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x244>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x244>
 800116e:	2300      	movs	r3, #0
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001180:	4937      	ldr	r1, [pc, #220]	@ (8001260 <HAL_GPIO_Init+0x334>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118e:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <HAL_GPIO_Init+0x350>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e2:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_GPIO_Init+0x350>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	@ (800127c <HAL_GPIO_Init+0x350>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_GPIO_Init+0x350>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	@ (800127c <HAL_GPIO_Init+0x350>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae78 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	48001800 	.word	0x48001800
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43d9      	mvns	r1, r3
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	400b      	ands	r3, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8d8 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <HAL_PWREx_GetVoltageRange+0x18>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000

08001330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800133e:	d130      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001340:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800134c:	d038      	beq.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001356:	4a1e      	ldr	r2, [pc, #120]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001358:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2232      	movs	r2, #50	@ 0x32
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001374:	e002      	b.n	800137c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001388:	d102      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x60>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f2      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139c:	d110      	bne.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e00f      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ae:	d007      	beq.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40007000 	.word	0x40007000
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e3ca      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ee:	4b97      	ldr	r3, [pc, #604]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f8:	4b94      	ldr	r3, [pc, #592]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80e4 	beq.w	80015d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_RCC_OscConfig+0x4a>
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	f040 808b 	bne.w	8001534 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b01      	cmp	r3, #1
 8001422:	f040 8087 	bne.w	8001534 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001426:	4b89      	ldr	r3, [pc, #548]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x62>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e3a2      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1a      	ldr	r2, [r3, #32]
 8001442:	4b82      	ldr	r3, [pc, #520]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <HAL_RCC_OscConfig+0x7c>
 800144e:	4b7f      	ldr	r3, [pc, #508]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001456:	e005      	b.n	8001464 <HAL_RCC_OscConfig+0x88>
 8001458:	4b7c      	ldr	r3, [pc, #496]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001464:	4293      	cmp	r3, r2
 8001466:	d223      	bcs.n	80014b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fd55 	bl	8001f1c <RCC_SetFlashLatencyFromMSIRange>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e383      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147c:	4b73      	ldr	r3, [pc, #460]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a72      	ldr	r2, [pc, #456]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b70      	ldr	r3, [pc, #448]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	496d      	ldr	r1, [pc, #436]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149a:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	4968      	ldr	r1, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
 80014ae:	e025      	b.n	80014fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a65      	ldr	r2, [pc, #404]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b63      	ldr	r3, [pc, #396]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4960      	ldr	r1, [pc, #384]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ce:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	495b      	ldr	r1, [pc, #364]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fd15 	bl	8001f1c <RCC_SetFlashLatencyFromMSIRange>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e343      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014fc:	f000 fc4a 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b52      	ldr	r3, [pc, #328]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	4950      	ldr	r1, [pc, #320]	@ (8001650 <HAL_RCC_OscConfig+0x274>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	4a4e      	ldr	r2, [pc, #312]	@ (8001654 <HAL_RCC_OscConfig+0x278>)
 800151a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800151c:	4b4e      	ldr	r3, [pc, #312]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fb95 	bl	8000c50 <HAL_InitTick>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d052      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	e327      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d032      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a42      	ldr	r2, [pc, #264]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001548:	f7ff fbd2 	bl	8000cf0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001550:	f7ff fbce 	bl	8000cf0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e310      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a36      	ldr	r2, [pc, #216]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4931      	ldr	r1, [pc, #196]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	492c      	ldr	r1, [pc, #176]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e01a      	b.n	80015d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fb9f 	bl	8000cf0 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b6:	f7ff fb9b 	bl	8000cf0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e2dd      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1da>
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d074      	beq.n	80016ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x21a>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	d10e      	bne.n	800160e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d10b      	bne.n	800160e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d064      	beq.n	80016cc <HAL_RCC_OscConfig+0x2f0>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d160      	bne.n	80016cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e2ba      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x24a>
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e026      	b.n	8001674 <HAL_RCC_OscConfig+0x298>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800162e:	d115      	bne.n	800165c <HAL_RCC_OscConfig+0x280>
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a02      	ldr	r2, [pc, #8]	@ (800164c <HAL_RCC_OscConfig+0x270>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e014      	b.n	8001674 <HAL_RCC_OscConfig+0x298>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	08003d68 	.word	0x08003d68
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004
 800165c:	4ba0      	ldr	r3, [pc, #640]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a9f      	ldr	r2, [pc, #636]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b9d      	ldr	r3, [pc, #628]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a9c      	ldr	r2, [pc, #624]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb38 	bl	8000cf0 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb34 	bl	8000cf0 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e276      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	4b92      	ldr	r3, [pc, #584]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x2a8>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb24 	bl	8000cf0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb20 	bl	8000cf0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e262      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016be:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x2d0>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d060      	beq.n	800179c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x310>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d119      	bne.n	800171a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d116      	bne.n	800171a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	4b7c      	ldr	r3, [pc, #496]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x328>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e23f      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	4973      	ldr	r1, [pc, #460]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001718:	e040      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d023      	beq.n	800176a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001722:	4b6f      	ldr	r3, [pc, #444]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fadf 	bl	8000cf0 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fadb 	bl	8000cf0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e21d      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001748:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b62      	ldr	r3, [pc, #392]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	495f      	ldr	r1, [pc, #380]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b5d      	ldr	r3, [pc, #372]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5c      	ldr	r2, [pc, #368]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fabb 	bl	8000cf0 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fab7 	bl	8000cf0 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1f9      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03c      	beq.n	8001822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b0:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b6:	4a4a      	ldr	r2, [pc, #296]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fa96 	bl	8000cf0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fa92 	bl	8000cf0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1d4      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x3ec>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fa79 	bl	8000cf0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fa75 	bl	8000cf0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1b7      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a6 	beq.w	800197c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10d      	bne.n	800185c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	@ 0x58
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001858:	2301      	movs	r3, #1
 800185a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d118      	bne.n	800189a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001874:	f7ff fa3c 	bl	8000cf0 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7ff fa38 	bl	8000cf0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e17a      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_RCC_OscConfig+0x508>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4d8>
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b2:	e029      	b.n	8001908 <HAL_RCC_OscConfig+0x52c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d115      	bne.n	80018e8 <HAL_RCC_OscConfig+0x50c>
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c2:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a03      	ldr	r2, [pc, #12]	@ (80018e0 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x52c>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40007000 	.word	0x40007000
 80018e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	4a9b      	ldr	r2, [pc, #620]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f8:	4b98      	ldr	r3, [pc, #608]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	4a97      	ldr	r2, [pc, #604]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d016      	beq.n	800193e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff f9ee 	bl	8000cf0 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff f9ea 	bl	8000cf0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e12a      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ed      	beq.n	8001918 <HAL_RCC_OscConfig+0x53c>
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff f9d7 	bl	8000cf0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f9d3 	bl	8000cf0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e113      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ed      	bne.n	8001946 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b7a      	ldr	r3, [pc, #488]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	4a79      	ldr	r2, [pc, #484]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80fe 	beq.w	8001b82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	2b02      	cmp	r3, #2
 800198c:	f040 80d0 	bne.w	8001b30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001990:	4b72      	ldr	r3, [pc, #456]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d130      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	3b01      	subs	r3, #1
 80019b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d127      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11f      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019d0:	2a07      	cmp	r2, #7
 80019d2:	bf14      	ite	ne
 80019d4:	2201      	movne	r2, #1
 80019d6:	2200      	moveq	r2, #0
 80019d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d06e      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d069      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a18:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0ad      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a34:	f7ff f95c 	bl	8000cf0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f958 	bl	8000cf0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e09a      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4e:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5a:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	4b40      	ldr	r3, [pc, #256]	@ (8001b60 <HAL_RCC_OscConfig+0x784>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a74:	0212      	lsls	r2, r2, #8
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a7c:	0852      	lsrs	r2, r2, #1
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	0552      	lsls	r2, r2, #21
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a88:	0852      	lsrs	r2, r2, #1
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	0652      	lsls	r2, r2, #25
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a94:	0912      	lsrs	r2, r2, #4
 8001a96:	0452      	lsls	r2, r2, #17
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	4930      	ldr	r1, [pc, #192]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab8:	f7ff f91a 	bl	8000cf0 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f916 	bl	8000cf0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e058      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ade:	e050      	b.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e04f      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d148      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b08:	f7ff f8f2 	bl	8000cf0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f8ee 	bl	8000cf0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e030      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x734>
 8001b2e:	e028      	b.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d023      	beq.n	8001b7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_RCC_OscConfig+0x780>)
 8001b3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff f8d5 	bl	8000cf0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	e00c      	b.n	8001b64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff f8d1 	bl	8000cf0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d905      	bls.n	8001b64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e013      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_OscConfig+0x7b0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ec      	bne.n	8001b4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_RCC_OscConfig+0x7b0>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <HAL_RCC_OscConfig+0x7b0>)
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_OscConfig+0x7b4>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e001      	b.n	8001b82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	feeefffc 	.word	0xfeeefffc

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0e7      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b72      	ldr	r3, [pc, #456]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4970      	ldr	r1, [pc, #448]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0cf      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d908      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b63      	ldr	r3, [pc, #396]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4960      	ldr	r1, [pc, #384]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d04c      	beq.n	8001cac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d121      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0a6      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	4b54      	ldr	r3, [pc, #336]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d115      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e09a      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e08e      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e086      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c6a:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4943      	ldr	r1, [pc, #268]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f838 	bl	8000cf0 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff f834 	bl	8000cf0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e06e      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 020c 	and.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1eb      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d208      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	492b      	ldr	r1, [pc, #172]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cda:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d210      	bcs.n	8001d0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0207 	bic.w	r2, r3, #7
 8001cf0:	4923      	ldr	r1, [pc, #140]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e036      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4918      	ldr	r1, [pc, #96]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4910      	ldr	r1, [pc, #64]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d48:	f000 f824 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	490b      	ldr	r1, [pc, #44]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f4>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
 8001d64:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_ClockConfig+0x1fc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe ff6f 	bl	8000c50 <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d76:	7afb      	ldrb	r3, [r7, #11]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08003d68 	.word	0x08003d68
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d121      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d11e      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dc8:	4b34      	ldr	r3, [pc, #208]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e005      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001de4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001df0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	e004      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e18:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d134      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d003      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0xac>
 8001e38:	e005      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e3c:	617b      	str	r3, [r7, #20]
      break;
 8001e3e:	e005      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e42:	617b      	str	r3, [r7, #20]
      break;
 8001e44:	e002      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	617b      	str	r3, [r7, #20]
      break;
 8001e4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	3301      	adds	r3, #1
 8001e58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	fb03 f202 	mul.w	r2, r3, r2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0e5b      	lsrs	r3, r3, #25
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08003d80 	.word	0x08003d80
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	007a1200 	.word	0x007a1200

08001eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4904      	ldr	r1, [pc, #16]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003d78 	.word	0x08003d78

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ef4:	f7ff ffda 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4904      	ldr	r1, [pc, #16]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08003d78 	.word	0x08003d78

08001f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f28:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f34:	f7ff f9ee 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8001f38:	6178      	str	r0, [r7, #20]
 8001f3a:	e014      	b.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f54:	f7ff f9de 	bl	8001314 <HAL_PWREx_GetVoltageRange>
 8001f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f6c:	d10b      	bne.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	@ 0x80
 8001f72:	d919      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f78:	d902      	bls.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e013      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f80:	2301      	movs	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e010      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	@ 0x80
 8001f8a:	d902      	bls.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e00a      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b80      	cmp	r3, #128	@ 0x80
 8001f96:	d102      	bne.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e004      	b.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b70      	cmp	r3, #112	@ 0x70
 8001fa2:	d101      	bne.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 0207 	bic.w	r2, r3, #7
 8001fb0:	4909      	ldr	r1, [pc, #36]	@ (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d041      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ffc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002000:	d02a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002002:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002006:	d824      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002008:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800200c:	d008      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800200e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002012:	d81e      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800201c:	d010      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800201e:	e018      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002020:	4b86      	ldr	r3, [pc, #536]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a85      	ldr	r2, [pc, #532]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202c:	e015      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fabb 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 800203a:	4603      	mov	r3, r0
 800203c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203e:	e00c      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3320      	adds	r3, #32
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fba6 	bl	8002798 <RCCEx_PLLSAI2_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002050:	e003      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	74fb      	strb	r3, [r7, #19]
      break;
 8002056:	e000      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002060:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800206e:	4973      	ldr	r1, [pc, #460]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002076:	e001      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d041      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800208c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002090:	d02a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002092:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002096:	d824      	bhi.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800209c:	d008      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800209e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020a2:	d81e      	bhi.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ac:	d010      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ae:	e018      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b0:	4b62      	ldr	r3, [pc, #392]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a61      	ldr	r2, [pc, #388]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020bc:	e015      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fa73 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 80020ca:	4603      	mov	r3, r0
 80020cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ce:	e00c      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3320      	adds	r3, #32
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fb5e 	bl	8002798 <RCCEx_PLLSAI2_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e0:	e003      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	74fb      	strb	r3, [r7, #19]
      break;
 80020e6:	e000      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020f0:	4b52      	ldr	r3, [pc, #328]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020fe:	494f      	ldr	r1, [pc, #316]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002106:	e001      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a0 	beq.w	800225a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	4a40      	ldr	r2, [pc, #256]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002140:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214c:	2301      	movs	r3, #1
 800214e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002150:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800215c:	f7fe fdc8 	bl	8000cf0 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002162:	e009      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe fdc4 	bl	8000cf0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d902      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	74fb      	strb	r3, [r7, #19]
        break;
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002178:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ef      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d15c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800218a:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01f      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d019      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fd83 	bl	8000cf0 <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ec:	e00b      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fd7f 	bl	8000cf0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d902      	bls.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	74fb      	strb	r3, [r7, #19]
            break;
 8002204:	e006      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ec      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800222a:	4904      	ldr	r1, [pc, #16]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002232:	e009      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
 8002238:	e006      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002248:	7c7b      	ldrb	r3, [r7, #17]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b9e      	ldr	r3, [pc, #632]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	4a9d      	ldr	r2, [pc, #628]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002266:	4b98      	ldr	r3, [pc, #608]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f023 0203 	bic.w	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	4994      	ldr	r1, [pc, #592]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002288:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	f023 020c 	bic.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002296:	498c      	ldr	r1, [pc, #560]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022aa:	4b87      	ldr	r3, [pc, #540]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	4983      	ldr	r1, [pc, #524]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022cc:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	497b      	ldr	r1, [pc, #492]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ee:	4b76      	ldr	r3, [pc, #472]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fc:	4972      	ldr	r1, [pc, #456]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002310:	4b6d      	ldr	r3, [pc, #436]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	496a      	ldr	r1, [pc, #424]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002332:	4b65      	ldr	r3, [pc, #404]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	4961      	ldr	r1, [pc, #388]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002354:	4b5c      	ldr	r3, [pc, #368]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4959      	ldr	r1, [pc, #356]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002376:	4b54      	ldr	r3, [pc, #336]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002384:	4950      	ldr	r1, [pc, #320]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002398:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	4948      	ldr	r1, [pc, #288]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	493f      	ldr	r1, [pc, #252]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d028      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023dc:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ea:	4937      	ldr	r1, [pc, #220]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023fa:	d106      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fc:	4b32      	ldr	r3, [pc, #200]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002406:	60d3      	str	r3, [r2, #12]
 8002408:	e011      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800240e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002412:	d10c      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	2101      	movs	r1, #1
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f8c8 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d028      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800243a:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002440:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002448:	491f      	ldr	r1, [pc, #124]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002458:	d106      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a1a      	ldr	r2, [pc, #104]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002464:	60d3      	str	r3, [r2, #12]
 8002466:	e011      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002470:	d10c      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f899 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02b      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a6:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024b6:	d109      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a02      	ldr	r2, [pc, #8]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
 80024c4:	e014      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f867 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024fc:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800250a:	4928      	ldr	r1, [pc, #160]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800251a:	d10d      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f844 	bl	80025b0 <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	74bb      	strb	r3, [r7, #18]
 8002536:	e011      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002540:	d10c      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3320      	adds	r3, #32
 8002546:	2102      	movs	r1, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f925 	bl	8002798 <RCCEx_PLLSAI2_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002576:	490d      	ldr	r1, [pc, #52]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002590:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800259a:	4904      	ldr	r1, [pc, #16]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000

080025b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025be:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ca:	4b72      	ldr	r3, [pc, #456]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10d      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
       ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
       ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d047      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e044      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d018      	beq.n	8002636 <RCCEx_PLLSAI1_Config+0x86>
 8002604:	2b03      	cmp	r3, #3
 8002606:	d825      	bhi.n	8002654 <RCCEx_PLLSAI1_Config+0xa4>
 8002608:	2b01      	cmp	r3, #1
 800260a:	d002      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0x62>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d009      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x74>
 8002610:	e020      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e01a      	b.n	800265a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002624:	4b5b      	ldr	r3, [pc, #364]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e013      	b.n	800265e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002636:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002642:	4b54      	ldr	r3, [pc, #336]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002652:	e006      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e004      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002662:	bf00      	nop
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800266a:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	430b      	orrs	r3, r1
 8002680:	4944      	ldr	r1, [pc, #272]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d17d      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800268c:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a40      	ldr	r2, [pc, #256]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fb2a 	bl	8000cf0 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a0:	f7fe fb26 	bl	8000cf0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
        break;
 80026b2:	e005      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ef      	bne.n	80026a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d160      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026cc:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	0211      	lsls	r1, r2, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	0912      	lsrs	r2, r2, #4
 80026e4:	0452      	lsls	r2, r2, #17
 80026e6:	430a      	orrs	r2, r1
 80026e8:	492a      	ldr	r1, [pc, #168]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	610b      	str	r3, [r1, #16]
 80026ee:	e027      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d112      	bne.n	800271c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	0211      	lsls	r1, r2, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6912      	ldr	r2, [r2, #16]
 800270c:	0852      	lsrs	r2, r2, #1
 800270e:	3a01      	subs	r2, #1
 8002710:	0552      	lsls	r2, r2, #21
 8002712:	430a      	orrs	r2, r1
 8002714:	491f      	ldr	r1, [pc, #124]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]
 800271a:	e011      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002724:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6892      	ldr	r2, [r2, #8]
 800272c:	0211      	lsls	r1, r2, #8
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6952      	ldr	r2, [r2, #20]
 8002732:	0852      	lsrs	r2, r2, #1
 8002734:	3a01      	subs	r2, #1
 8002736:	0652      	lsls	r2, r2, #25
 8002738:	430a      	orrs	r2, r1
 800273a:	4916      	ldr	r1, [pc, #88]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800274a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fad0 	bl	8000cf0 <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002752:	e009      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002754:	f7fe facc 	bl	8000cf0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	73fb      	strb	r3, [r7, #15]
          break;
 8002766:	e005      	b.n	8002774 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002768:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4904      	ldr	r1, [pc, #16]	@ (8002794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027b2:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d10d      	bne.n	80027de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
       ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ca:	4b61      	ldr	r3, [pc, #388]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
       ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d047      	beq.n	800286e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e044      	b.n	800286e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d018      	beq.n	800281e <RCCEx_PLLSAI2_Config+0x86>
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d825      	bhi.n	800283c <RCCEx_PLLSAI2_Config+0xa4>
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0x62>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d009      	beq.n	800280c <RCCEx_PLLSAI2_Config+0x74>
 80027f8:	e020      	b.n	800283c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027fa:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11d      	bne.n	8002842 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e01a      	b.n	8002842 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800280c:	4b50      	ldr	r3, [pc, #320]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e013      	b.n	8002846 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800281e:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282a:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800283a:	e006      	b.n	800284a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e004      	b.n	800284c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284a:	bf00      	nop
    }

    if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	430b      	orrs	r3, r1
 8002868:	4939      	ldr	r1, [pc, #228]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d167      	bne.n	8002944 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a35      	ldr	r2, [pc, #212]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fa36 	bl	8000cf0 <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002886:	e009      	b.n	800289c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002888:	f7fe fa32 	bl	8000cf0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	73fb      	strb	r3, [r7, #15]
        break;
 800289a:	e005      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800289c:	4b2c      	ldr	r3, [pc, #176]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ef      	bne.n	8002888 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14a      	bne.n	8002944 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b4:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	0912      	lsrs	r2, r2, #4
 80028cc:	0452      	lsls	r2, r2, #17
 80028ce:	430a      	orrs	r2, r1
 80028d0:	491f      	ldr	r1, [pc, #124]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	614b      	str	r3, [r1, #20]
 80028d6:	e011      	b.n	80028fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	0211      	lsls	r1, r2, #8
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6912      	ldr	r2, [r2, #16]
 80028ee:	0852      	lsrs	r2, r2, #1
 80028f0:	3a01      	subs	r2, #1
 80028f2:	0652      	lsls	r2, r2, #25
 80028f4:	430a      	orrs	r2, r1
 80028f6:	4916      	ldr	r1, [pc, #88]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe f9f2 	bl	8000cf0 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002910:	f7fe f9ee 	bl	8000cf0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
          break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4904      	ldr	r1, [pc, #16]	@ (8002950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002940:	4313      	orrs	r3, r2
 8002942:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e049      	b.n	80029fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f81a 	bl	80009b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 faa8 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04f      	b.n	8002abc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_TIM_Base_Start_IT+0x76>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a46:	d018      	beq.n	8002a7a <HAL_TIM_Base_Start_IT+0x76>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002acc <HAL_TIM_Base_Start_IT+0xc8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_TIM_Base_Start_IT+0x76>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_TIM_Base_Start_IT+0x76>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_TIM_Base_Start_IT+0x76>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIM_Base_Start_IT+0x76>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d115      	bne.n	8002aa6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b17      	ldr	r3, [pc, #92]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d015      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a92:	d011      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	e008      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e000      	b.n	8002aba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40013400 	.word	0x40013400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	00010007 	.word	0x00010007

08002ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d020      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0202 	mvn.w	r2, #2
 8002b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f9bc 	bl	8002eac <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9ae 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f9bf 	bl	8002ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d020      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0204 	mvn.w	r2, #4
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f996 	bl	8002eac <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f988 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f999 	bl	8002ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d020      	beq.n	8002be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01b      	beq.n	8002be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0208 	mvn.w	r2, #8
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f970 	bl	8002eac <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f962 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f973 	bl	8002ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d020      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0210 	mvn.w	r2, #16
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2208      	movs	r2, #8
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f94a 	bl	8002eac <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f93c 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f94d 	bl	8002ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0201 	mvn.w	r2, #1
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f91a 	bl	8002e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fb07 	bl	800328c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 faff 	bl	80032a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f907 	bl	8002ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0220 	mvn.w	r2, #32
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fac7 	bl	8003278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_ConfigClockSource+0x1c>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e0b6      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x18a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4a:	d03e      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0xd8>
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d50:	f200 8087 	bhi.w	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d58:	f000 8086 	beq.w	8002e68 <HAL_TIM_ConfigClockSource+0x176>
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d60:	d87f      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d62:	2b70      	cmp	r3, #112	@ 0x70
 8002d64:	d01a      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xaa>
 8002d66:	2b70      	cmp	r3, #112	@ 0x70
 8002d68:	d87b      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d6a:	2b60      	cmp	r3, #96	@ 0x60
 8002d6c:	d050      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x11e>
 8002d6e:	2b60      	cmp	r3, #96	@ 0x60
 8002d70:	d877      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d72:	2b50      	cmp	r3, #80	@ 0x50
 8002d74:	d03c      	beq.n	8002df0 <HAL_TIM_ConfigClockSource+0xfe>
 8002d76:	2b50      	cmp	r3, #80	@ 0x50
 8002d78:	d873      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d7a:	2b40      	cmp	r3, #64	@ 0x40
 8002d7c:	d058      	beq.n	8002e30 <HAL_TIM_ConfigClockSource+0x13e>
 8002d7e:	2b40      	cmp	r3, #64	@ 0x40
 8002d80:	d86f      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d82:	2b30      	cmp	r3, #48	@ 0x30
 8002d84:	d064      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x15e>
 8002d86:	2b30      	cmp	r3, #48	@ 0x30
 8002d88:	d86b      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d060      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x15e>
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d867      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d05c      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x15e>
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d05a      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0x15e>
 8002d9a:	e062      	b.n	8002e62 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dac:	f000 f9bc 	bl	8003128 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
      break;
 8002dc8:	e04f      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dda:	f000 f9a5 	bl	8003128 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dec:	609a      	str	r2, [r3, #8]
      break;
 8002dee:	e03c      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f000 f919 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2150      	movs	r1, #80	@ 0x50
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f972 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002e0e:	e02c      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f000 f938 	bl	8003092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2160      	movs	r1, #96	@ 0x60
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f962 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002e2e:	e01c      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f000 f8f9 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2140      	movs	r1, #64	@ 0x40
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f952 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002e4e:	e00c      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 f949 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002e60:	e003      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      break;
 8002e66:	e000      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002e68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a46      	ldr	r2, [pc, #280]	@ (8003014 <TIM_Base_SetConfig+0x12c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f06:	d00f      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a43      	ldr	r2, [pc, #268]	@ (8003018 <TIM_Base_SetConfig+0x130>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a42      	ldr	r2, [pc, #264]	@ (800301c <TIM_Base_SetConfig+0x134>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d007      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a41      	ldr	r2, [pc, #260]	@ (8003020 <TIM_Base_SetConfig+0x138>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a40      	ldr	r2, [pc, #256]	@ (8003024 <TIM_Base_SetConfig+0x13c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d108      	bne.n	8002f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a35      	ldr	r2, [pc, #212]	@ (8003014 <TIM_Base_SetConfig+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01f      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f48:	d01b      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a32      	ldr	r2, [pc, #200]	@ (8003018 <TIM_Base_SetConfig+0x130>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d017      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a31      	ldr	r2, [pc, #196]	@ (800301c <TIM_Base_SetConfig+0x134>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a30      	ldr	r2, [pc, #192]	@ (8003020 <TIM_Base_SetConfig+0x138>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00f      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2f      	ldr	r2, [pc, #188]	@ (8003024 <TIM_Base_SetConfig+0x13c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00b      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <TIM_Base_SetConfig+0x140>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2d      	ldr	r2, [pc, #180]	@ (800302c <TIM_Base_SetConfig+0x144>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <TIM_Base_SetConfig+0x9a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003030 <TIM_Base_SetConfig+0x148>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d108      	bne.n	8002f94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <TIM_Base_SetConfig+0x12c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00f      	beq.n	8002fe0 <TIM_Base_SetConfig+0xf8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a18      	ldr	r2, [pc, #96]	@ (8003024 <TIM_Base_SetConfig+0x13c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <TIM_Base_SetConfig+0xf8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <TIM_Base_SetConfig+0x140>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <TIM_Base_SetConfig+0xf8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a16      	ldr	r2, [pc, #88]	@ (800302c <TIM_Base_SetConfig+0x144>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0xf8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a15      	ldr	r2, [pc, #84]	@ (8003030 <TIM_Base_SetConfig+0x148>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d103      	bne.n	8002fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]
  }
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40013400 	.word	0x40013400
 8003028:	40014000 	.word	0x40014000
 800302c:	40014400 	.word	0x40014400
 8003030:	40014800 	.word	0x40014800

08003034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800305e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 030a 	bic.w	r3, r3, #10
 8003070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 0210 	bic.w	r2, r3, #16
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	031b      	lsls	r3, r3, #12
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	f043 0307 	orr.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	431a      	orrs	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800317c:	2302      	movs	r3, #2
 800317e:	e068      	b.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d018      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1a      	ldr	r2, [pc, #104]	@ (800326c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a14      	ldr	r2, [pc, #80]	@ (8003274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10c      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40013400 	.word	0x40013400
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40014000 	.word	0x40014000

08003278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e040      	b.n	8003348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fbae 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	@ 0x24
 80032e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fae0 	bl	80038c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f825 	bl	8003350 <UART_SetConfig>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e01b      	b.n	8003348 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800331e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800332e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fb5f 	bl	8003a04 <UART_CheckIdleState>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003354:	b08a      	sub	sp, #40	@ 0x28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4ba4      	ldr	r3, [pc, #656]	@ (8003610 <UART_SetConfig+0x2c0>)
 8003380:	4013      	ands	r3, r2
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003388:	430b      	orrs	r3, r1
 800338a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a99      	ldr	r2, [pc, #612]	@ (8003614 <UART_SetConfig+0x2c4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b8:	4313      	orrs	r3, r2
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a90      	ldr	r2, [pc, #576]	@ (8003618 <UART_SetConfig+0x2c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d126      	bne.n	8003428 <UART_SetConfig+0xd8>
 80033da:	4b90      	ldr	r3, [pc, #576]	@ (800361c <UART_SetConfig+0x2cc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d81b      	bhi.n	8003420 <UART_SetConfig+0xd0>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <UART_SetConfig+0xa0>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003411 	.word	0x08003411
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003419 	.word	0x08003419
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e116      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003408:	2302      	movs	r3, #2
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e112      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003410:	2304      	movs	r3, #4
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003416:	e10e      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003418:	2308      	movs	r3, #8
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341e:	e10a      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003420:	2310      	movs	r3, #16
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003426:	e106      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7c      	ldr	r2, [pc, #496]	@ (8003620 <UART_SetConfig+0x2d0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d138      	bne.n	80034a4 <UART_SetConfig+0x154>
 8003432:	4b7a      	ldr	r3, [pc, #488]	@ (800361c <UART_SetConfig+0x2cc>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b0c      	cmp	r3, #12
 800343e:	d82d      	bhi.n	800349c <UART_SetConfig+0x14c>
 8003440:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <UART_SetConfig+0xf8>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	0800347d 	.word	0x0800347d
 800344c:	0800349d 	.word	0x0800349d
 8003450:	0800349d 	.word	0x0800349d
 8003454:	0800349d 	.word	0x0800349d
 8003458:	0800348d 	.word	0x0800348d
 800345c:	0800349d 	.word	0x0800349d
 8003460:	0800349d 	.word	0x0800349d
 8003464:	0800349d 	.word	0x0800349d
 8003468:	08003485 	.word	0x08003485
 800346c:	0800349d 	.word	0x0800349d
 8003470:	0800349d 	.word	0x0800349d
 8003474:	0800349d 	.word	0x0800349d
 8003478:	08003495 	.word	0x08003495
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003482:	e0d8      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003484:	2302      	movs	r3, #2
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348a:	e0d4      	b.n	8003636 <UART_SetConfig+0x2e6>
 800348c:	2304      	movs	r3, #4
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003492:	e0d0      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003494:	2308      	movs	r3, #8
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349a:	e0cc      	b.n	8003636 <UART_SetConfig+0x2e6>
 800349c:	2310      	movs	r3, #16
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a2:	e0c8      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003624 <UART_SetConfig+0x2d4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d125      	bne.n	80034fa <UART_SetConfig+0x1aa>
 80034ae:	4b5b      	ldr	r3, [pc, #364]	@ (800361c <UART_SetConfig+0x2cc>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034b8:	2b30      	cmp	r3, #48	@ 0x30
 80034ba:	d016      	beq.n	80034ea <UART_SetConfig+0x19a>
 80034bc:	2b30      	cmp	r3, #48	@ 0x30
 80034be:	d818      	bhi.n	80034f2 <UART_SetConfig+0x1a2>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d00a      	beq.n	80034da <UART_SetConfig+0x18a>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d814      	bhi.n	80034f2 <UART_SetConfig+0x1a2>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <UART_SetConfig+0x182>
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d008      	beq.n	80034e2 <UART_SetConfig+0x192>
 80034d0:	e00f      	b.n	80034f2 <UART_SetConfig+0x1a2>
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d8:	e0ad      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034da:	2302      	movs	r3, #2
 80034dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e0:	e0a9      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034e2:	2304      	movs	r3, #4
 80034e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e8:	e0a5      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034ea:	2308      	movs	r3, #8
 80034ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f0:	e0a1      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034f2:	2310      	movs	r3, #16
 80034f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f8:	e09d      	b.n	8003636 <UART_SetConfig+0x2e6>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003628 <UART_SetConfig+0x2d8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d125      	bne.n	8003550 <UART_SetConfig+0x200>
 8003504:	4b45      	ldr	r3, [pc, #276]	@ (800361c <UART_SetConfig+0x2cc>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800350e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003510:	d016      	beq.n	8003540 <UART_SetConfig+0x1f0>
 8003512:	2bc0      	cmp	r3, #192	@ 0xc0
 8003514:	d818      	bhi.n	8003548 <UART_SetConfig+0x1f8>
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d00a      	beq.n	8003530 <UART_SetConfig+0x1e0>
 800351a:	2b80      	cmp	r3, #128	@ 0x80
 800351c:	d814      	bhi.n	8003548 <UART_SetConfig+0x1f8>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x1d8>
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d008      	beq.n	8003538 <UART_SetConfig+0x1e8>
 8003526:	e00f      	b.n	8003548 <UART_SetConfig+0x1f8>
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352e:	e082      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003530:	2302      	movs	r3, #2
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003536:	e07e      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003538:	2304      	movs	r3, #4
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353e:	e07a      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003540:	2308      	movs	r3, #8
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003546:	e076      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003548:	2310      	movs	r3, #16
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354e:	e072      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a35      	ldr	r2, [pc, #212]	@ (800362c <UART_SetConfig+0x2dc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12a      	bne.n	80035b0 <UART_SetConfig+0x260>
 800355a:	4b30      	ldr	r3, [pc, #192]	@ (800361c <UART_SetConfig+0x2cc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003568:	d01a      	beq.n	80035a0 <UART_SetConfig+0x250>
 800356a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800356e:	d81b      	bhi.n	80035a8 <UART_SetConfig+0x258>
 8003570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003574:	d00c      	beq.n	8003590 <UART_SetConfig+0x240>
 8003576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800357a:	d815      	bhi.n	80035a8 <UART_SetConfig+0x258>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <UART_SetConfig+0x238>
 8003580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003584:	d008      	beq.n	8003598 <UART_SetConfig+0x248>
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x258>
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358e:	e052      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003590:	2302      	movs	r3, #2
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e04e      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003598:	2304      	movs	r3, #4
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359e:	e04a      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035a0:	2308      	movs	r3, #8
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e046      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e042      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <UART_SetConfig+0x2c4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d13a      	bne.n	8003630 <UART_SetConfig+0x2e0>
 80035ba:	4b18      	ldr	r3, [pc, #96]	@ (800361c <UART_SetConfig+0x2cc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035c8:	d01a      	beq.n	8003600 <UART_SetConfig+0x2b0>
 80035ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035ce:	d81b      	bhi.n	8003608 <UART_SetConfig+0x2b8>
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d4:	d00c      	beq.n	80035f0 <UART_SetConfig+0x2a0>
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035da:	d815      	bhi.n	8003608 <UART_SetConfig+0x2b8>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <UART_SetConfig+0x298>
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e4:	d008      	beq.n	80035f8 <UART_SetConfig+0x2a8>
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x2b8>
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ee:	e022      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035f0:	2302      	movs	r3, #2
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f6:	e01e      	b.n	8003636 <UART_SetConfig+0x2e6>
 80035f8:	2304      	movs	r3, #4
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fe:	e01a      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003600:	2308      	movs	r3, #8
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003606:	e016      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003608:	2310      	movs	r3, #16
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e012      	b.n	8003636 <UART_SetConfig+0x2e6>
 8003610:	efff69f3 	.word	0xefff69f3
 8003614:	40008000 	.word	0x40008000
 8003618:	40013800 	.word	0x40013800
 800361c:	40021000 	.word	0x40021000
 8003620:	40004400 	.word	0x40004400
 8003624:	40004800 	.word	0x40004800
 8003628:	40004c00 	.word	0x40004c00
 800362c:	40005000 	.word	0x40005000
 8003630:	2310      	movs	r3, #16
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a9f      	ldr	r2, [pc, #636]	@ (80038b8 <UART_SetConfig+0x568>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d17a      	bne.n	8003736 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003640:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003644:	2b08      	cmp	r3, #8
 8003646:	d824      	bhi.n	8003692 <UART_SetConfig+0x342>
 8003648:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <UART_SetConfig+0x300>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003675 	.word	0x08003675
 8003654:	08003693 	.word	0x08003693
 8003658:	0800367d 	.word	0x0800367d
 800365c:	08003693 	.word	0x08003693
 8003660:	08003683 	.word	0x08003683
 8003664:	08003693 	.word	0x08003693
 8003668:	08003693 	.word	0x08003693
 800366c:	08003693 	.word	0x08003693
 8003670:	0800368b 	.word	0x0800368b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003674:	f7fe fc26 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8003678:	61f8      	str	r0, [r7, #28]
        break;
 800367a:	e010      	b.n	800369e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800367c:	4b8f      	ldr	r3, [pc, #572]	@ (80038bc <UART_SetConfig+0x56c>)
 800367e:	61fb      	str	r3, [r7, #28]
        break;
 8003680:	e00d      	b.n	800369e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003682:	f7fe fb87 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8003686:	61f8      	str	r0, [r7, #28]
        break;
 8003688:	e009      	b.n	800369e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800368e:	61fb      	str	r3, [r7, #28]
        break;
 8003690:	e005      	b.n	800369e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800369c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80fb 	beq.w	800389c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d305      	bcc.n	80036c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d903      	bls.n	80036ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036c8:	e0e8      	b.n	800389c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2200      	movs	r2, #0
 80036ce:	461c      	mov	r4, r3
 80036d0:	4615      	mov	r5, r2
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	022b      	lsls	r3, r5, #8
 80036dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036e0:	0222      	lsls	r2, r4, #8
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	6849      	ldr	r1, [r1, #4]
 80036e6:	0849      	lsrs	r1, r1, #1
 80036e8:	2000      	movs	r0, #0
 80036ea:	4688      	mov	r8, r1
 80036ec:	4681      	mov	r9, r0
 80036ee:	eb12 0a08 	adds.w	sl, r2, r8
 80036f2:	eb43 0b09 	adc.w	fp, r3, r9
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003704:	4650      	mov	r0, sl
 8003706:	4659      	mov	r1, fp
 8003708:	f7fc fd5e 	bl	80001c8 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800371a:	d308      	bcc.n	800372e <UART_SetConfig+0x3de>
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003722:	d204      	bcs.n	800372e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	e0b6      	b.n	800389c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003734:	e0b2      	b.n	800389c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373e:	d15e      	bne.n	80037fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003740:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003744:	2b08      	cmp	r3, #8
 8003746:	d828      	bhi.n	800379a <UART_SetConfig+0x44a>
 8003748:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <UART_SetConfig+0x400>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003775 	.word	0x08003775
 8003754:	0800377d 	.word	0x0800377d
 8003758:	08003785 	.word	0x08003785
 800375c:	0800379b 	.word	0x0800379b
 8003760:	0800378b 	.word	0x0800378b
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800379b 	.word	0x0800379b
 800376c:	0800379b 	.word	0x0800379b
 8003770:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003774:	f7fe fba6 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8003778:	61f8      	str	r0, [r7, #28]
        break;
 800377a:	e014      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7fe fbb8 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8003780:	61f8      	str	r0, [r7, #28]
        break;
 8003782:	e010      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b4d      	ldr	r3, [pc, #308]	@ (80038bc <UART_SetConfig+0x56c>)
 8003786:	61fb      	str	r3, [r7, #28]
        break;
 8003788:	e00d      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe fb03 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 800378e:	61f8      	str	r0, [r7, #28]
        break;
 8003790:	e009      	b.n	80037a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003796:	61fb      	str	r3, [r7, #28]
        break;
 8003798:	e005      	b.n	80037a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d077      	beq.n	800389c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005a      	lsls	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	441a      	add	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d916      	bls.n	80037f6 <UART_SetConfig+0x4a6>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ce:	d212      	bcs.n	80037f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f023 030f 	bic.w	r3, r3, #15
 80037d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	8afb      	ldrh	r3, [r7, #22]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	8afa      	ldrh	r2, [r7, #22]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	e052      	b.n	800389c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037fc:	e04e      	b.n	800389c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003802:	2b08      	cmp	r3, #8
 8003804:	d827      	bhi.n	8003856 <UART_SetConfig+0x506>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <UART_SetConfig+0x4bc>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003831 	.word	0x08003831
 8003810:	08003839 	.word	0x08003839
 8003814:	08003841 	.word	0x08003841
 8003818:	08003857 	.word	0x08003857
 800381c:	08003847 	.word	0x08003847
 8003820:	08003857 	.word	0x08003857
 8003824:	08003857 	.word	0x08003857
 8003828:	08003857 	.word	0x08003857
 800382c:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7fe fb48 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8003834:	61f8      	str	r0, [r7, #28]
        break;
 8003836:	e014      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003838:	f7fe fb5a 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 800383c:	61f8      	str	r0, [r7, #28]
        break;
 800383e:	e010      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <UART_SetConfig+0x56c>)
 8003842:	61fb      	str	r3, [r7, #28]
        break;
 8003844:	e00d      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7fe faa5 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 800384a:	61f8      	str	r0, [r7, #28]
        break;
 800384c:	e009      	b.n	8003862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003852:	61fb      	str	r3, [r7, #28]
        break;
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003860:	bf00      	nop
    }

    if (pclk != 0U)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d019      	beq.n	800389c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	085a      	lsrs	r2, r3, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d909      	bls.n	8003896 <UART_SetConfig+0x546>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003888:	d205      	bcs.n	8003896 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e002      	b.n	800389c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	@ 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b6:	bf00      	nop
 80038b8:	40008000 	.word	0x40008000
 80038bc:	00f42400 	.word	0x00f42400

080038c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01a      	beq.n	80039d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039be:	d10a      	bne.n	80039d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b098      	sub	sp, #96	@ 0x60
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a14:	f7fd f96c 	bl	8000cf0 <HAL_GetTick>
 8003a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d12e      	bne.n	8003a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f88c 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d021      	beq.n	8003a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e062      	b.n	8003b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d149      	bne.n	8003b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f856 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d03c      	beq.n	8003b28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	623b      	str	r3, [r7, #32]
   return(result);
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e6      	bne.n	8003aae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e5      	bne.n	8003ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e011      	b.n	8003b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3758      	adds	r7, #88	@ 0x58
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	e04f      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d04b      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fd f8bf 	bl	8000cf0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e04e      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d037      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b80      	cmp	r3, #128	@ 0x80
 8003b9a:	d034      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ba0:	d031      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d110      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f838 	bl	8003c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e029      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003be0:	d111      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f81e 	bl	8003c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d0a0      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b095      	sub	sp, #84	@ 0x54
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c54:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e6      	bne.n	8003c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d118      	bne.n	8003cd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0310 	bic.w	r3, r3, #16
 8003cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6979      	ldr	r1, [r7, #20]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e6      	bne.n	8003ca4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cea:	bf00      	nop
 8003cec:	3754      	adds	r7, #84	@ 0x54
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <memset>:
 8003cf6:	4402      	add	r2, r0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d100      	bne.n	8003d00 <memset+0xa>
 8003cfe:	4770      	bx	lr
 8003d00:	f803 1b01 	strb.w	r1, [r3], #1
 8003d04:	e7f9      	b.n	8003cfa <memset+0x4>
	...

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2600      	movs	r6, #0
 8003d14:	42a6      	cmp	r6, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4d0b      	ldr	r5, [pc, #44]	@ (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f000 f818 	bl	8003d50 <_init>
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2600      	movs	r6, #0
 8003d26:	42a6      	cmp	r6, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d30:	4798      	blx	r3
 8003d32:	3601      	adds	r6, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3a:	4798      	blx	r3
 8003d3c:	3601      	adds	r6, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	08003db8 	.word	0x08003db8
 8003d44:	08003db8 	.word	0x08003db8
 8003d48:	08003db8 	.word	0x08003db8
 8003d4c:	08003dbc 	.word	0x08003dbc

08003d50 <_init>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr

08003d5c <_fini>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	bf00      	nop
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr
